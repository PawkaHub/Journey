<?xml version="1.0"?>
<doc>
    <assembly>
        <name>U3DXTMediaPlayer</name>
    </assembly>
    <members>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAsset">
            <summary>
                <c>AVAsset</c> is an abstract class to represent timed audiovisual media such as videos and sounds. Each asset contains a collection of tracks that are intended to be presented or processed together, each of a uniform media type, including but not limited to audio, video, text, closed captions, and subtitles.
            </summary>
            <remarks>
                <p>An <c>AVAsset</c> object defines the collective properties of the tracks that comprise the asset. (You can access the instances of <c>AVAssetTrack</c> representing tracks of the collection, so you can examine each of these independently if you need to.) You often instantiate an asset using a concrete subclass of <c>AVAsset</c>; for example, you can initialize an instance of <c>AVURLAsset</c> using an URL that refers to an audiovisual media file, such as a QuickTime movie file or an MP3 files (amongst other types). You can also instantiate an asset using other concrete subclasses that extend the basic model for audiovisual media in useful ways, as <c>AVComposition</c> does for temporal editing. To assemble audiovisual constructs from one or more source assets, you can insert assets into instances of <c>AVMutableComposition</c>.</p>
                <p>You often instantiate an asset using <c>AVURLAsset</c>—a concrete subclass of <c>AVAsset</c>—with NSURLs that refer to audiovisual media resources, such as streams (including HTTP live streams), QuickTime movie files, MP3 files, and files of other types. You can also instantiate an asset using other concrete subclasses that extend the basic model for audiovisual media in useful ways, as <c>AVComposition</c> does for temporal editing.</p>
                <p>Properties of assets as a whole are defined by <c>AVAsset</c>. Additionally, references to instances of <c>AVAssetTrack</c> representing tracks of the collection can be obtained, so that each of these can be examined independently.</p>
                <p>Because of the nature of timed audiovisual media, upon successful initialization of an asset some or all of the values for its keys may not be immediately available. The value of any key can be requested at any time, and asset will always return its value synchronously, although it may have to block the calling thread in order to do so. In order to avoid blocking, you can register your interest in particular keys and to become notified when their values become available. For further details, see <c>AVAsynchronousKeyValueLoading</c>.</p>
                <p>To play an instance of <c>AVAsset</c>, initialize an instance of <c>AVPlayerItem</c> with it, use the player item tem to set up its presentation state (such as whether only a limited timeRange of the asset should be played, etc.), and provide the player item to an <c>AVPlayer</c> object according to whether the items is to be played by itself or together with a collection of other items.</p>
                <p>You can insert <c>AVAsset</c> objects can also be inserted into an <c>AVMutableComposition</c> object in order to assemble audiovisual constructs from one or more source assets.</p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	It is not currently possible to subclass <c>AVAsset</c> to handle streaming protocols or file formats that are not supported by the framework.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_assetWithURL_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_availableChapterLocales(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_availableMediaCharacteristicsWithMediaSelectionOptions(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_compatibleWithSavedPhotosAlbum(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_composable(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_exportable(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_hasProtectedContent(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_lyrics(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_naturalSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_playable(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_preferredRate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_preferredTransform(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_preferredVolume(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_providesPreciseDurationAndTiming(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_get_readable(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.UP_AVAsset_cancelLoading(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AVFoundation.AVAsset" /> class.
            <br></br>Equivalent to the native <c>[[AVAsset alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.ClassExists">
            <summary>
            Returns whether the native AVAsset class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.Asset(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Returns an asset for inspection of a media resource.
            <br></br>Equivalent to the native <c>assetWithURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>A URL that references a media resource.</p>
                <b>Return Value</b>
                <p>An instance of a subclass of <c>AVAsset</c> initialized with <em>URL</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.availableChapterLocales">
            <summary>
            The locales available for chapters in the asset. (read-only)
            <br></br>Equivalent to the native <c>availableChapterLocales</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The array contains instances of <c>NSLocale</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.availableMediaCharacteristicsWithMediaSelectionOptions">
            <summary>
            An array of media characteristics for which a media selection option is available. (read-only)
            <br></br>Equivalent to the native <c>availableMediaCharacteristicsWithMediaSelectionOptions</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is an array of <c>String</c> objects, each string indicating a media characteristic for which a media selection option is available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.compatibleWithSavedPhotosAlbum">
            <summary>
            Indicates whether the asset can be written to the Saved Photos album. (read-only)
            <br></br>Equivalent to the native <c>compatibleWithSavedPhotosAlbum</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.composable">
            <summary>
            Indicates whether the asset can be used within a segment of an <c>AVCompositionTrack</c> object. (read-only)
            <br></br>Equivalent to the native <c>composable</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.exportable">
            <summary>
            Indicates whether the asset can be exported using <c>AVAssetExportSession</c>. (read-only)
            <br></br>Equivalent to the native <c>exportable</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.hasProtectedContent">
            <summary>
            Indicates whether the asset has protected content. (read-only)
            <br></br>Equivalent to the native <c>hasProtectedContent</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.lyrics">
            <summary>
            The lyrics of the asset suitable for the current locale. (read-only)
            <br></br>Equivalent to the native <c>lyrics</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.naturalSize">
            <summary>
            The encoded or authored size of the visual portion of the asset. (read-only) ( Deprecated in iOS 5.0.  Use the <c>naturalSize</c> and <c>preferredTransform</c>, as appropriate, of the asset’s video tracks instead (see also <c>tracksWithMediaType:</c>).)
            <br></br>Equivalent to the native <c>naturalSize</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Deprecated in iOS 5.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.playable">
            <summary>
            Indicates whether the asset, or its URL, can be used to initialize an instance of <c>AVPlayerItem</c>. (read-only)
            <br></br>Equivalent to the native <c>playable</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.preferredRate">
            <summary>
            The natural rate at which the asset is to be played. (read-only)
            <br></br>Equivalent to the native <c>preferredRate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value is often, but not always, <c>1.0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.preferredTransform">
            <summary>
            The preferred transform to apply to the visual content of the asset for presentation or processing. (read-only)
            <br></br>Equivalent to the native <c>preferredTransform</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value is often, but not always, the identity transform.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.preferredVolume">
            <summary>
            The preferred volume at which the audible media of asset is to be played. (read-only)
            <br></br>Equivalent to the native <c>preferredVolume</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value is often, but not always, <c>1.0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.providesPreciseDurationAndTiming">
            <summary>
            Indicates whether the asset provides precise timing. (read-only)
            <br></br>Equivalent to the native <c>providesPreciseDurationAndTiming</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can set the degree of precision required for timing-related properties at initialization time for assets initialized with URLs (see <c>AVURLAssetPreferPreciseDurationAndTimingKey</c> in <c>AVURLAsset</c>).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property duration</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAsset.readable">
            <summary>
            Indicates whether the asset’s media data can be extracted using <c>AVAssetReader</c>. (read-only)
            <br></br>Equivalent to the native <c>readable</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAsset.CancelLoading">
            <summary>
            Cancels the loading of all values for all observers.
            <br></br>Equivalent to the native <c>cancelLoading</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Deallocation of an instance of the asset will implicitly invoke this method if any loading requests are still outstanding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession">
            <summary>
            An <c>AVAssetExportSession</c> object transcodes the contents of an <c>AVAsset</c> source object to create an output of the form described by a specified export preset.
            </summary>
            <remarks>
                <p>Prior to initializing an instance of <c>AVAssetExportSession</c>, you can use <c>allExportPresets</c> to get the complete list of presets available. Use <c>exportPresetsCompatibleWithAsset:</c> to get a list of presets that are compatible with a specific asset.</p>
                <p>After you have initialized an export session with the asset that contains the source media, the export preset name (<c>presetName</c>), and the output file type (<c>outputFileType</c>), you can start the export running by invoking <c>exportAsynchronouslyWithCompletionHandler:</c>. Because the export is performed asynchronously, this method returns immediately—you can use <c>progress</c> to check on the progress. Depending on the capabilities of the device, some exports may be queued when multiple exports are attempted. When this happens, the <c>status</c> of a queued export will indicate that it's waiting (<c>AVAssetExportSessionStatusWaiting</c>).</p>
                <p>The completion handler you supply to <c>exportAsynchronouslyWithCompletionHandler:</c> is called whether the export fails, completes, or is cancelled. Upon completion, the <c>status</c> property indicates whether the export has completed successfully. If it has failed, the value of the <c>error</c> property supplies additional information about the reason for the failure.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPresetAppleM4A">
            <summary>
                <p>Specifies an audio-only .m4a file with appropriate iTunes gapless playback data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPresetAppleM4A</c> constant.
            </summary>
            <remarks>
            You use this export option to produce an audio-only .m4a file with appropriate iTunes gapless playback data.
            <p></p><p></p>This is a constant for "Export Preset Name for iTunes Audio".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPresetPassthrough">
            <summary>
                <p>Specifies that all tracks pass through, unless it is not possible.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPresetPassthrough</c> constant.
            </summary>
            <remarks>
            You use this export option to let all tracks pass through.
            <p></p><b>Discussion</b><p>This option does not show up in the <c>allExportPresets</c> and <c>exportPresetsCompatibleWithAsset:</c> methods.</p><br />
            	Provide Feedback
            <p></p>This is a constant for "Export Preset Name for Pass-Through".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPresetLowQuality">
            <summary>
                <p>Specifies a low quality QuickTime file.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPresetLowQuality</c> constant.
            </summary>
            <remarks>
            You use these export options to produce QuickTime .mov files with video size appropriate to the current device.
            <p></p><b>Discussion</b><p>The export will not scale the video up from a smaller size. Video is compressed using H.264; audio is compressed using AAC.</p><p>See also  AVAssetExportSessionStatusCancelled .</p><p></p>This is a constant for "Export Preset Names for Device-Appropriate QuickTime Files".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPresetMediumQuality">
            <summary>
                <p>Specifies a medium quality QuickTime file.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPresetMediumQuality</c> constant.
            </summary>
            <remarks>
            You use these export options to produce QuickTime .mov files with video size appropriate to the current device.
            <p></p><b>Discussion</b><p>The export will not scale the video up from a smaller size. Video is compressed using H.264; audio is compressed using AAC.</p><p>See also  AVAssetExportSessionStatusCancelled .</p><p></p>This is a constant for "Export Preset Names for Device-Appropriate QuickTime Files".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPresetHighestQuality">
            <summary>
                <p>Specifies a high quality QuickTime file.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPresetHighestQuality</c> constant.
            </summary>
            <remarks>
            You use these export options to produce QuickTime .mov files with video size appropriate to the current device.
            <p></p><b>Discussion</b><p>The export will not scale the video up from a smaller size. Video is compressed using H.264; audio is compressed using AAC.</p><p>See also  AVAssetExportSessionStatusCancelled .</p><p></p>This is a constant for "Export Preset Names for Device-Appropriate QuickTime Files".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPreset1920x1080">
            <summary>
                <p>Specifies output at 1920x1080 pixels.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPreset1920x1080</c> constant.
            </summary>
            <remarks>
            You use these export options to produce QuickTime .mov files with a specified video size.
            <p></p><b>Discussion</b><p>The export will not scale the video up from a smaller size. Video is compressed using H.264; audio is compressed using AAC. Some devices cannot support some sizes.</p><p></p>This is a constant for "Export Preset Names for QuickTime Files of a Given Size".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPreset960x540">
            <summary>
                <p>Specifies output at 960x540 pixels.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPreset960x540</c> constant.
            </summary>
            <remarks>
            You use these export options to produce QuickTime .mov files with a specified video size.
            <p></p><b>Discussion</b><p>The export will not scale the video up from a smaller size. Video is compressed using H.264; audio is compressed using AAC. Some devices cannot support some sizes.</p><p></p>This is a constant for "Export Preset Names for QuickTime Files of a Given Size".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPreset640x480">
            <summary>
                <p>Specifies output at 640x480 pixels.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPreset640x480</c> constant.
            </summary>
            <remarks>
            You use these export options to produce QuickTime .mov files with a specified video size.
            <p></p><b>Discussion</b><p>The export will not scale the video up from a smaller size. Video is compressed using H.264; audio is compressed using AAC. Some devices cannot support some sizes.</p><p></p>This is a constant for "Export Preset Names for QuickTime Files of a Given Size".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AVAssetExportPreset1280x720">
            <summary>
                <p>Specifies output at 1280x720 pixels.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportPreset1280x720</c> constant.
            </summary>
            <remarks>
            You use these export options to produce QuickTime .mov files with a specified video size.
            <p></p><b>Discussion</b><p>The export will not scale the video up from a smaller size. Video is compressed using H.264; audio is compressed using AAC. Some devices cannot support some sizes.</p><p></p>This is a constant for "Export Preset Names for QuickTime Files of a Given Size".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_allExportPresets">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_determineCompatibilityOfExportPreset_withAsset_outputFileType_completionHandler_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_exportPresetsCompatibleWithAsset_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_asset(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_error(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_estimatedOutputFileLength(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_fileLengthLimit(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_set_fileLengthLimit(System.String,System.Int64)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_outputFileType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_set_outputFileType(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_outputURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_set_outputURL(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_presetName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_progress(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_shouldOptimizeForNetworkUse(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_set_shouldOptimizeForNetworkUse(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_status(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_get_supportedFileTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_cancelExport(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_determineCompatibleFileTypesWithCompletionHandler_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_exportAsynchronouslyWithCompletionHandler_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.UP_AVAssetExportSession_alloc_initWithAsset_presetName_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession" /> class.
            <br></br>Equivalent to the native <c>[[AVAssetExportSession alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.ClassExists">
            <summary>
            Returns whether the native AVAssetExportSession class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.AllExportPresets">
            <summary>
            Returns all available export preset names.
            <br></br>Equivalent to the native <c>allExportPresets</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array containing a string constant for each of the available preset names.</p>
                <p>For possible values, see  “Export Preset Names for Device-Appropriate QuickTime Files,”   “Export Preset Names for QuickTime Files of a Given Size,”   AVAssetExportSessionStatusCancelled ,  “Export Preset Name for iTunes Audio,”  and  “Export Preset Name for Pass-Through.” </p>
                <b>Discussion</b>
                <p>Not all presets are compatible with all assets.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ exportPresetsCompatibleWithAsset:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.DetermineCompatibilityOfExportPreset(System.String,U3DXT.iOS.Native.AVFoundation.AVAsset,System.String,System.Action{System.Boolean})">
            <summary>
            Reports the compatibility of an export present, asset, and output file type to the specified block.
            <br></br>Equivalent to the native <c>determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>presetName</em>
                <p>The name of the preset template for the export operation.</p>
                <p>For possible values, see  “Export Preset Names for Device-Appropriate QuickTime Files,”   “Export Preset Names for QuickTime Files of a Given Size,”   AVAssetExportSessionStatusCancelled ,  “Export Preset Name for iTunes Audio,”  and  “Export Preset Name for Pass-Through.” </p>
                <em>asset</em>
                <p>The asset object that you are planning to export.</p>
                <em>outputFileType</em>
                <p>The UTI string corresponding to the file type. For example, to specify a QuickTime movie file format, you could specify the constant <c>AVFileTypeQuickTimeMovie</c>. For a list of constants specifying UTIs for standard file types, see <em>AV Foundation Constants Reference</em>.</p>
                <em>handler</em>
                <p>The block to execute with the results. This method makes a copy of the specified block. This parameter must not be <c>null</c>.</p>
                <p>This block takes a single Boolean parameter and returns no result. The parameter contains the value <c>true</c> if the combination of options is compatible or <c>false</c> if they are not. </p>
                <b>Discussion</b>
                <p>Because not all export presets are compatible with all assets and file types, you can use this method to query the compatibility of specific combos before using them. To ensure that the export operation succeeds, you should not make any significant changes to the asset between the time of calling this method and performing the export operation. </p>
                <p>This method performs its checks asynchronously on a secondary thread and returns immediately. The results are similarly reported to the specified block on a secondary thread.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="presetName">
            </param>
            <param name="asset">
            </param>
            <param name="outputFileType">
            </param>
            <param name="handler"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.ExportPresetsCompatible(U3DXT.iOS.Native.AVFoundation.AVAsset)">
            <summary>
            Returns the identifiers compatible with a given asset.
            <br></br>Equivalent to the native <c>exportPresetsCompatibleWithAsset:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>asset</em>
                <p>An asset that is ready to be exported.</p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects representing the identifiers compatible with <em>asset</em>.</p>
                <p>The array is a complete list of the valid identifiers that can be used with <c>exportSessionWithAsset:presetName:</c> with the specified asset. For possible values, see  “Export Preset Names for Device-Appropriate QuickTime Files,”   “Export Preset Names for QuickTime Files of a Given Size,”   AVAssetExportSessionStatusCancelled ,  “Export Preset Name for iTunes Audio,”  and  “Export Preset Name for Pass-Through.” </p>
                <b>Discussion</b>
                <p>Not all export presets are compatible with all assets. For example, a video-only asset is not compatible with an audio-only preset. This method returns only the identifiers for presets that are compatible with the given asset. </p>
                <p>In order to ensure that the setup and running of an export operation will succeed using a given preset, you should not make significant changes to the asset (such as adding or deleting tracks) between retrieving compatible identifiers and performing the export operation.</p>
                <p>If the asset’s tracks are not currently loaded, they may be loaded by this method before any checks are performed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ allExportPresets</c>
                    </li>
                </ul>
            </remarks>
            <param name="asset">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.asset">
            <summary>
            The asset with which the export session was initialized. (read-only)
            <br></br>Equivalent to the native <c>asset</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.error">
            <summary>
            Describes the error that occurred if the export status is <c>AVAssetExportSessionStatusFailed</c> or <c>AVAssetExportSessionStatusCancelled</c>. (read-only)
            <br></br>Equivalent to the native <c>error</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If there is no error to report, the value of this property is <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– exportAsynchronouslyWithCompletionHandler:</c>
                    </li>
                    <li>    <c>@property status</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.estimatedOutputFileLength">
            <summary>
            Indicates the estimated size in bytes of the exported file. (read-only)
            <br></br>Equivalent to the native <c>estimatedOutputFileLength</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.fileLengthLimit">
            <summary>
            The maximum number of bytes that the session is allowed to write to the output URL.
            <br></br>Equivalent to the native <c>fileLengthLimit</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The export will stop when the output reaches this size regardless of the duration of the source or the value of <c>timeRange</c>.</p>
                <p>You can observe this property using  <!--a target="_self" -->key-value observing<!--/a--> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.outputFileType">
            <summary>
            The type of file to be written by the session.
            <br></br>Equivalent to the native <c>outputFileType</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value is a UTI string corresponding to the file type to use when writing the asset. For a list of constants specifying UTIs for standard file types, see <em>AV Foundation Constants Reference</em>.</p>
                <p>You can observe this property using  <!--a target="_self" -->key-value observing<!--/a--> .</p>
                <b>Special Considerations</b>
                <p>You must set a value for this property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property supportedFileTypes</c></li>
                    <li>    <c>@property outputURL</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.outputURL">
            <summary>
            The URL of the export session’s output.
            <br></br>Equivalent to the native <c>outputURL</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can observe this property using  <!--a target="_self" -->key-value observing<!--/a--> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property outputFileType</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.presetName">
            <summary>
            The name of the preset with which the session was initialized. (read-only)
            <br></br>Equivalent to the native <c>presetName</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For possible values, see  “Export Preset Names for Device-Appropriate QuickTime Files,”   “Export Preset Names for QuickTime Files of a Given Size,”   AVAssetExportSessionStatusCancelled ,  “Export Preset Name for iTunes Audio,”  and  “Export Preset Name for Pass-Through.” </p>
                <p>You can observe this property using  <!--a target="_self" -->key-value observing<!--/a--> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– exportSessionWithAsset:presetName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.progress">
            <summary>
            The progress of the export on a scale from 0 to 1. (read-only)
            <br></br>Equivalent to the native <c>progress</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A value of <c>0</c> means the export has not yet begun, <c>1</c> means the export is complete.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.shouldOptimizeForNetworkUse">
            <summary>
            Indicates whether the movie should be optimized for network use.
            <br></br>Equivalent to the native <c>shouldOptimizeForNetworkUse</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can observe this property using  <!--a target="_self" -->key-value observing<!--/a--> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.status">
            <summary>
            The status of the export session. (read-only)
            <br></br>Equivalent to the native <c>status</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For possible values, see  “AVAssetExportSessionStatus.” </p>
                <p>You can observe this property using  <!--a target="_self" -->key-value observing<!--/a--> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.supportedFileTypes">
            <summary>
            The types of files the session can write. (read-only)
            <br></br>Equivalent to the native <c>supportedFileTypes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The types of files the session can write are determined by the asset and and export preset with which the session was initialized. If you need to determine the compatible file formats before initiating the export operation, use the <c>determineCompatibleFileTypesWithCompletionHandler:</c> method.</p>
                <p>You can observe this property using  <!--a target="_self" -->key-value observing<!--/a--> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property outputFileType</c></li>
                    <li>
                        <c>– determineCompatibleFileTypesWithCompletionHandler:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.CancelExport">
            <summary>
            Cancels the execution of an export session.
            <br></br>Equivalent to the native <c>cancelExport</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can invoke this method when the export is running.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.DetermineCompatibleFileTypes(System.Action{System.Object[]})">
            <summary>
            Reports the compatible file types for the current export session to the specified block.
            <br></br>Equivalent to the native <c>determineCompatibleFileTypesWithCompletionHandler:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>handler</em>
                <p>The block to execute with the results. This method makes a copy of the specified block. This parameter must not be <c>null</c>.</p>
                <p>This block takes an array parameter and returns no result. The array contains zero or more <c>String</c> objects with the UTIs of the compatible file types. The file types are in no particular order. For a list of constants specifying UTIs for standard file types, see <em>AV Foundation Constants Reference</em>.</p>
                <b>Discussion</b>
                <p>This method operates on the asset object and preset information that was used to initialize the export session. It uses this information to determine the file types that the export session can write. </p>
                <p>This method performs its checks asynchronously on a secondary thread and returns immediately. The results are similarly reported to the specified block on a secondary thread. Because this method actually inspects the asset’s tracks, the tracks are loaded if they have not been already. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="handler"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.ExportAsynchronously(System.Action)">
            <summary>
            Starts the asynchronous execution of an export session.
            <br></br>Equivalent to the native <c>exportAsynchronouslyWithCompletionHandler:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>handler</em>
                <p>A block that is invoked when writing is complete or in the event of writing failure. </p>
                <b>Discussion</b>
                <p>This method starts an asynchronous export operation and returns immediately. <c>status</c> signals the terminal state of the export session, and if a failure occurs, <c>error</c> describes the problem.</p>
                <p>If internal preparation for export fails, <em>handler</em> is invoked synchronously. The handler may also be called asynchronously, after the method returns, in the following cases:</p>
                <ol class="ol">
                    <li class="li">
                        <p>If a failure occurs during the export, including failures of loading, re-encoding, or writing media data to the output.</p>
                    </li>
                    <li class="li">
                        <p>If <c>cancelExport</c> is invoked.</p>
                    </li>
                    <li class="li">
                        <p>After the export session succeeds, having completely written its output to the <c>outputURL</c>.</p>
                    </li>
                </ol>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– cancelExport</c>
                    </li>
                    <li>    <c>@property status</c></li>
                    <li>    <c>@property error</c></li>
                </ul>
            </remarks>
            <param name="handler"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAssetExportSession.#ctor(U3DXT.iOS.Native.AVFoundation.AVAsset,System.String)">
            <summary>
            Creates an instance of the native AVAssetExportSession and initializes the object. Initializes an asset export session with a specified asset and preset.
            <br></br>Equivalent to the native <c>[[AVAssetExportSession alloc] initWithAsset:presetName:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>asset</em>
                <p>The asset you want to export.</p>
                <em>presetName</em>
                <p>A string constant specifying the name of the preset template for the export.</p>
                <p>For possible values, see  “Export Preset Names for Device-Appropriate QuickTime Files,”   “Export Preset Names for QuickTime Files of a Given Size,”   AVAssetExportSessionStatusCancelled ,  “Export Preset Name for iTunes Audio,”  and  “Export Preset Name for Pass-Through.” </p>
                <b>Return Value</b>
                <p>An asset export session initialized to export <em>asset</em> using preset <em>presetName</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="asset">
            </param>
            <param name="presetName">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAssetExportSessionStatus">
            <summary>
            Constants to indicate the status of the session.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSessionStatus.Waiting">
            <summary>
                <p>Indicates that the session is waiting to export more data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportSessionStatusWaiting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSessionStatus.Unknown">
            <summary>
                <p>Indicates that the status is unknown.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportSessionStatusUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSessionStatus.Completed">
            <summary>
                <p>Indicates that the export session completed successfully.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportSessionStatusCompleted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSessionStatus.Exporting">
            <summary>
                <p>Indicates that the export session is in progress.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportSessionStatusExporting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSessionStatus.Failed">
            <summary>
                <p>Indicates that the export session failed.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportSessionStatusFailed</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAssetExportSessionStatus.Cancelled">
            <summary>
                <p>Indicates that the export session was cancelled.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVAssetExportSessionStatusCancelled</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer">
            <summary>
            An instance of the <c>AVAudioPlayer</c> class, called an audio player, provides playback of audio data from a file or memory.
            </summary>
            <remarks>
                <p>Apple recommends that you use this class for audio playback unless you are playing audio captured from a network stream or require very low I/O latency. For an overview of audio technologies, see <em>Audio &amp; Video Starting Point</em> and  “Using Audio”  in <em>Multimedia Programming Guide</em>.</p>
                <p>Using an audio player you can:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Play sounds of any duration</p>
                    </li>
                    <li class="li">
                        <p>Play sounds from files or memory buffers</p>
                    </li>
                    <li class="li">
                        <p>Loop sounds</p>
                    </li>
                    <li class="li">
                        <p>Play multiple sounds simultaneously, one sound per audio player, with precise synchronization</p>
                    </li>
                    <li class="li">
                        <p>Control relative playback level, stereo positioning, and playback rate for each sound you are playing</p>
                    </li>
                    <li class="li">
                        <p>Seek to a particular point in a sound file, which supports such application features as fast forward and rewind</p>
                    </li>
                    <li class="li">
                        <p>Obtain data you can use for playback-level metering</p>
                    </li>
                </ul>
                <p>
                </p>
                <p>The <c>AVAudioPlayer</c> class lets you play sound in any audio format available in iOS. You implement a delegate to handle interruptions (such as an incoming phone call) and to update the user interface when a sound has finished playing. The delegate methods to use are described in <em>AVAudioPlayerDelegate Protocol Reference</em>.</p>
                <p>To play, pause, or stop an audio player, call one of its playback control methods, described in  “Configuring and Controlling Playback.” </p>
                <p>This class uses the Objective-C declared properties feature for managing information about a sound—such as the playback point within the sound’s timeline, and for accessing playback options—such as volume and looping. You also use a property (<c>playing</c>) to test whether or not playback is in progress.</p>
                <p>To configure an appropriate audio session for playback, refer to <em>AVAudioSession Class Reference</em> and <em>AVAudioSessionDelegate Protocol Reference</em>. To learn how your choice of file formats impacts the simultaneous playback of multiple sounds, refer to  “iPhone Hardware and Software Audio Codecs”  in <em>Multimedia Programming Guide</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="E:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.BeginInterruption">
            <summary>
            Called when an audio player is interrupted, such as by an incoming phone call.
            <br></br>Equivalent to implementing the native <c>audioPlayerBeginInterruption:</c> method of <c>AVAudioPlayerDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DecodeErrorDidOccur">
            <summary>
            Called when an audio player encounters a decoding error during playback.
            <br></br>Equivalent to implementing the native <c>audioPlayerDecodeErrorDidOccur:error:</c> method of <c>AVAudioPlayerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DecodeErrorDidOccurEventArgs">
            <summary>
            Event arguments for DecodeErrorDidOccur.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DecodeErrorDidOccurEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DecodeErrorDidOccurEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DidFinishPlaying">
            <summary>
            Called when a sound has finished playing.
            <br></br>Equivalent to implementing the native <c>audioPlayerDidFinishPlaying:successfully:</c> method of <c>AVAudioPlayerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DidFinishPlayingEventArgs">
            <summary>
            Event arguments for DidFinishPlaying.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DidFinishPlayingEventArgs.#ctor(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.DidFinishPlayingEventArgs.flag">
            <summary>flag</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.EndInterruption">
            <summary>
            Called after your audio session interruption ends, with options indicating the state of the audio session.
            <br></br>Equivalent to implementing the native <c>audioPlayerEndInterruption:withOptions:</c> method of <c>AVAudioPlayerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.EndInterruptionEventArgs">
            <summary>
            Event arguments for EndInterruption.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.EndInterruptionEventArgs.#ctor(System.UInt32)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.EndInterruptionEventArgs.flags">
            <summary>flags</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_channelAssignments(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_channelAssignments(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_currentTime(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_currentTime(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_data(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_deviceCurrentTime(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_duration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_enableRate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_enableRate(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_meteringEnabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_meteringEnabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_numberOfChannels(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_numberOfLoops(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_numberOfLoops(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_pan(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_pan(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_playing(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_rate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_rate(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_settings(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_url(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_get_volume(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_set_volume(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_averagePowerForChannel_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_alloc_initWithContentsOfURL_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_alloc_initWithData_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_pause(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_peakPowerForChannel_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_play(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_playAtTime_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_prepareToPlay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_stop(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UP_AVAudioPlayer_updateMeters(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer" /> class.
            <br></br>Equivalent to the native <c>[[AVAudioPlayer alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.ClassExists">
            <summary>
            Returns whether the native AVAudioPlayer class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.channelAssignments">
            <summary>
            An array of <c>AVAudioSessionChannelDescription</c> objects associated with the audio player
            <br></br>Equivalent to the native <c>channelAssignments</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is <c>null</c>. When non-<c>null</c>, this array must have the same number of elements as returned by the <c>numberOfChannels</c> property. You can use this property to help you assign output to play to different channels.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.currentTime">
            <summary>
            The playback point, in seconds, within the timeline of the sound associated with the audio player.
            <br></br>Equivalent to the native <c>currentTime</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the sound is playing, <em>currentTime</em> is the offset of the current playback position, measured in seconds from the start of the sound. If the sound is not playing, <em>currentTime</em> is the offset of where playing starts upon calling the <c>play</c> method, measured in seconds from the start of the sound.</p>
                <p>By setting this property you can seek to a specific point in a sound file or implement audio fast-forward and rewind functions.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property deviceCurrentTime</c></li>
                    <li>    <c>@property duration</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.data">
            <summary>
            The data object containing the sound associated with the audio player. (read-only)
            <br></br>Equivalent to the native <c>data</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Returns <c>null</c> if the audio player has no data (that is, if it was not initialized with an <c>NSData</c> object).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property url</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.Delegate">
            <summary>
            The delegate object for the audio player.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The object that you assign to be an audio player’s delegate becomes the target of the notifications described in <em>AVAudioPlayerDelegate Protocol Reference</em>. These notifications let you respond to decoding errors, audio interruptions (such as an incoming phone call), and playback completion.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.deviceCurrentTime">
            <summary>
            The time value, in seconds, of the audio output device. (read-only)
            <br></br>Equivalent to the native <c>deviceCurrentTime</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property increases monotonically while an audio player is playing or paused.</p>
                <p>If more than one audio player is connected to the audio output device, device time continues incrementing as long as at least one of the players is playing or paused.</p>
                <p>If the audio output device has no connected audio players that are either playing or paused, device time reverts to 0.</p>
                <p>Use this property to indicate “now” when calling the <c>playAtTime:</c> instance method. By configuring multiple audio players to play at a specified offset from <c>deviceCurrentTime</c>, you can perform precise synchronization—as described in the discussion for that method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property currentTime</c></li>
                    <li>
                        <c>– playAtTime:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.duration">
            <summary>
            Returns the total duration, in seconds, of the sound associated with the audio player. (read-only)
            <br></br>Equivalent to the native <c>duration</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property currentTime</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.enableRate">
            <summary>
            A Boolean value that specifies whether playback rate adjustment is enabled for an audio player.
            <br></br>Equivalent to the native <c>enableRate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>To enable adjustable playback rate for an audio player, set this property to <c>true</c> after you initialize the player and before you call the <c>prepareToPlay</c> instance method for the player.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.meteringEnabled">
            <summary>
            A Boolean value that specifies the audio-level metering on/off state for the audio player.
            <br></br>Equivalent to the native <c>meteringEnabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for the <c>meteringEnabled</c> property is off (Boolean <c>false</c>). Before using metering for an audio player, you need to enable it by setting this property to <c>true</c>. If <c>player</c> is an audio player instance variable of your controller class, you enable metering as shown here:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>[self.player setMeteringEnabled: YES];  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– averagePowerForChannel:</c>
                    </li>
                    <li>
                        <c>– peakPowerForChannel:</c>
                    </li>
                    <li>
                        <c>– updateMeters</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.numberOfChannels">
            <summary>
            The number of audio channels in the sound associated with the audio player. (read-only)
            <br></br>Equivalent to the native <c>numberOfChannels</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.numberOfLoops">
            <summary>
            The number of times a sound will return to the beginning, upon reaching the end, to repeat playback.
            <br></br>Equivalent to the native <c>numberOfLoops</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A value of <c>0</c>, which is the default, means to play the sound once. Set a positive integer value to specify the number of times to return to the start and play again. For example, specifying a value of <c>1</c> results in a total of two plays of the sound. Set any negative integer value to loop the sound indefinitely until you call the <c>stop</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.pan">
            <summary>
            The audio player’s stereo pan position.
            <br></br>Equivalent to the native <c>pan</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>By setting this property you can position a sound in the stereo field. A value of –1.0 is full left, 0.0 is center, and 1.0 is full right.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.playing">
            <summary>
            A Boolean value that indicates whether the audio player is playing (<c>true</c>) or not (<c>false</c>). (read-only)
            <br></br>Equivalent to the native <c>playing</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>To find out when playback has stopped, use the <c>audioPlayerDidFinishPlaying:successfully:</c> delegate method.</p>
                <p>
                    <strong>Important:</strong> Do not poll this property (that is, do not use it inside of a loop) in an attempt to discover when playback has stopped.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.rate">
            <summary>
            The audio player’s playback rate.
            <br></br>Equivalent to the native <c>rate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property’s default value of <c>1.0</c> provides normal playback rate. The available range is from <c>0.5</c> for half-speed playback through <c>2.0</c> for double-speed playback.</p>
                <p>To set an audio player’s playback rate, you must first enable rate adjustment as described in the <c>enableRate</c> property description.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.settings">
            <summary>
            The audio player’s settings dictionary, containing information about the sound associated with the player. (read-only)
            <br></br>Equivalent to the native <c>settings</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>An audio player’s settings dictionary contains keys for the following information about the player’s associated sound:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Channel layout (<c>AVChannelLayoutKey</c>)</p>
                    </li>
                    <li class="li">
                        <p>Encoder bit rate (<c>AVEncoderBitRateKey</c>)</p>
                    </li>
                    <li class="li">
                        <p>Audio data format (<c>AVFormatIDKey</c>)</p>
                    </li>
                    <li class="li">
                        <p>Channel count (<c>AVNumberOfChannelsKey</c>)</p>
                    </li>
                    <li class="li">
                        <p>Sample rate (<c>AVSampleRateKey</c>)</p>
                    </li>
                </ul>
                <p>The settings keys are described in <em>AV Foundation Audio Settings Constants</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.url">
            <summary>
            The URL for the sound associated with the audio player. (read-only)
            <br></br>Equivalent to the native <c>url</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Returns <c>null</c> if the audio player was not initialized with a URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property data</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.volume">
            <summary>
            The playback gain for the audio player, ranging from 0.0 through 1.0.
            <br></br>Equivalent to the native <c>volume</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.AveragePower(System.UInt32)">
            <summary>
            Returns the average power for a given channel, in decibels, for the sound being played.
            <br></br>Equivalent to the native <c>averagePowerForChannel:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>channelNumber</em>
                <p>The audio channel whose average power value you want to obtain. Channel numbers are zero-indexed. A monaural signal, or the left channel of a stereo signal, has channel number <c>0</c>.</p>
                <b>Return Value</b>
                <p>A floating-point representation, in decibels, of a given audio channel’s current average power. A return value of 0 dB indicates full scale, or maximum power; a return value of -160 dB indicates minimum power (that is, near silence). </p>
                <p>If the signal provided to the audio player exceeds ±full scale, then the return value may exceed 0 (that is, it may enter the positive range).</p>
                <b>Discussion</b>
                <p>To obtain a current average power value, you must call the <c>updateMeters</c> method before calling this method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property meteringEnabled</c></li>
                    <li>
                        <c>– peakPowerForChannel:</c>
                    </li>
                </ul>
            </remarks>
            <param name="channelNumber">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.#ctor(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an instance of the native AVAudioPlayer and initializes the object. Initializes and returns an audio player for playing a designated sound file.
            <br></br>Equivalent to the native <c>[[AVAudioPlayer alloc] initWithContentsOfURL:error:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>A URL identifying the sound file to play. The audio data must be in a format supported by Core Audio. For a list of supported formats, see  “Using Audio”  in <em>Multimedia Programming Guide</em>.</p>
                <em>outError</em>
                <p>Pass in the address of a <c>null</c>-initialized <c>NSError</c> object. If an error occurs, upon return the <c>NSError</c> object describes the error. If you do not want error information, pass in <c>NULL</c>.</p>
                <b>Return Value</b>
                <p>On success, an initialized <c>AVAudioPlayer</c> object. If <c>null</c>, the <em>outError</em> parameter contains a code that describes the problem.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithData:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="outError">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.#ctor(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an instance of the native AVAudioPlayer and initializes the object. Initializes and returns an audio player for playing a designated memory buffer.
            <br></br>Equivalent to the native <c>[[AVAudioPlayer alloc] initWithData:error:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>A block of data containing a sound to play. The audio data must be in a format supported by Core Audio. For a list of supported formats, see  “Using Audio”  in <em>Multimedia Programming Guide</em>.</p>
                <em>outError</em>
                <p>Pass in the address of a <c>null</c>-initialized <c>NSError</c> object. If an error occurs, upon return the <c>NSError</c> object describes the error. If you do not want error information, pass in <c>NULL</c>.</p>
                <b>Return Value</b>
                <p>On success, an initialized <c>AVAudioPlayer</c> object. If <c>null</c>, the <em>outError</em> parameter contains a code that describes the problem.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithContentsOfURL:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="outError">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.Pause">
            <summary>
            Pauses playback; sound remains ready to resume playback from where it left off.
            <br></br>Equivalent to the native <c>pause</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Calling <c>pause</c> leaves the audio player prepared to play; it does not release the audio hardware that was acquired upon calling <c>play</c> or <c>prepareToPlay</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– play</c>
                    </li>
                    <li>
                        <c>– prepareToPlay</c>
                    </li>
                    <li>
                        <c>– stop</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.PeakPower(System.UInt32)">
            <summary>
            Returns the peak power for a given channel, in decibels, for the sound being played.
            <br></br>Equivalent to the native <c>peakPowerForChannel:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>channelNumber</em>
                <p>The audio channel whose peak power value you want to obtain. Channel numbers are zero-indexed. A monaural signal, or the left channel of a stereo signal, has channel number <c>0</c>.</p>
                <b>Return Value</b>
                <p>A floating-point representation, in decibels, of a given audio channel’s current peak power. A return value of 0 dB indicates full scale, or maximum power; a return value of -160 dB indicates minimum power (that is, near silence).</p>
                <p>If the signal provided to the audio player exceeds ±full scale, then the return value may exceed 0 (that is, it may enter the positive range).</p>
                <b>Discussion</b>
                <p>To obtain a current peak power value, you must call the <c>updateMeters</c> method before calling this method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property meteringEnabled</c></li>
                    <li>
                        <c>– averagePowerForChannel:</c>
                    </li>
                </ul>
            </remarks>
            <param name="channelNumber">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.Play">
            <summary>
            Plays a sound asynchronously.
            <br></br>Equivalent to the native <c>play</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Returns <c>true</c> on success, or <c>false</c> on failure.</p>
                <b>Discussion</b>
                <p>Calling this method implicitly calls the <c>prepareToPlay</c> method if the audio player is not already prepared to play.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pause</c>
                    </li>
                    <li>
                        <c>– playAtTime:</c>
                    </li>
                    <li>
                        <c>– prepareToPlay</c>
                    </li>
                    <li>
                        <c>– stop</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.PlayAtTime(System.Double)">
            <summary>
            Plays a sound asynchronously, starting at a specified point in the audio output device’s timeline.
            <br></br>Equivalent to the native <c>playAtTime:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>time</em>
                <p>The number of seconds to delay playback, relative to the audio output device’s current time. For example, to start playback three seconds into the future from the time you call this method, use code like this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSTimeInterval playbackDelay = 3.0;              // must be ≥ 0  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[myAudioPlayer playAtTime: myAudioPlayer.deviceCurrentTime + playbackDelay];  </pre>
                        </td>
                    </tr>
                </table>
                <p>
                    <strong>Important:</strong> The value that you provide to the <em>time</em> parameter must be greater than or equal to the value of the audio player’s <c>deviceCurrentTime</c> property.</p>
                <p>
                </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> on success, or <c>false</c> on failure.</p>
                <b>Discussion</b>
                <p>Use this method to precisely synchronize the playback of two or more <c>AVAudioPlayer</c> objects. This code snippet shows the recommended way to do this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>// Before calling this method, instantiate two AVAudioPlayer objects and  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>// assign each of them a sound.  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>- (void) startSynchronizedPlayback {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSTimeInterval shortStartDelay = 0.01;            // seconds  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSTimeInterval now = player.deviceCurrentTime;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [player       playAtTime: now + shortStartDelay];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [secondPlayer playAtTime: now + shortStartDelay];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Here, update state and user interface for each player, as appropriate  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <p>To learn about the virtual audio output device’s timeline, read the description for the <c>deviceCurrentTime</c> property.</p>
                <p>Calling this method implicitly calls the <c>prepareToPlay</c> method if the audio player is not already prepared to play.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pause</c>
                    </li>
                    <li>
                        <c>– play</c>
                    </li>
                    <li>
                        <c>– prepareToPlay</c>
                    </li>
                    <li>
                        <c>– stop</c>
                    </li>
                </ul>
            </remarks>
            <param name="time">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.PrepareToPlay">
            <summary>
            Prepares the audio player for playback by preloading its buffers.
            <br></br>Equivalent to the native <c>prepareToPlay</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Returns <c>true</c> on success, or <c>false</c> on failure.</p>
                <b>Discussion</b>
                <p>Calling this method preloads buffers and acquires the audio hardware needed for playback, which minimizes the lag between calling the <c>play</c> method and the start of sound output.</p>
                <p>Calling the <c>stop</c> method, or allowing a sound to finish playing, undoes this setup.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pause</c>
                    </li>
                    <li>
                        <c>– play</c>
                    </li>
                    <li>
                        <c>– stop</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.Stop">
            <summary>
            Stops playback and undoes the setup needed for playback.
            <br></br>Equivalent to the native <c>stop</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Calling this method, or allowing a sound to finish playing, undoes the setup performed upon calling the <c>play</c> or <c>prepareToPlay</c> methods.</p>
                <p>The <c>stop</c> method does not reset the value of the <c>currentTime</c> property to <c>0</c>. In other words, if you call <c>stop</c> during playback and then call <c>play</c>, playback resumes at the point where it left off. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pause</c>
                    </li>
                    <li>
                        <c>– play</c>
                    </li>
                    <li>
                        <c>– prepareToPlay</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayer.UpdateMeters">
            <summary>
            Refreshes the average and peak power values for all channels of an audio player.
            <br></br>Equivalent to the native <c>updateMeters</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>To obtain current audio power values, you must call this method before calling <c>averagePowerForChannel:</c> or <c>peakPowerForChannel:</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property meteringEnabled</c></li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate">
            <summary>
            The delegate of an <c>AVAudioPlayer</c> object must adopt the <c>AVAudioPlayerDelegate</c> protocol. All of the methods in this protocol are optional. They allow a delegate to respond to audio interruptions and audio decoding errors, and to the completion of a sound’s playback.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.UP_AVAudioPlayerDelegate_set__audioPlayerBeginInterruption__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.UP_AVAudioPlayerDelegate_set__audioPlayerDecodeErrorDidOccur_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.UP_AVAudioPlayerDelegate_set__audioPlayerDidFinishPlaying_successfully__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.UP_AVAudioPlayerDelegate_set__audioPlayerEndInterruption_withOptions__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.BeginInterruption(U3DXT.iOS.Native.AVFoundation.AVAudioPlayer)">
            <summary>
            (optional) Called when an audio player is interrupted, such as by an incoming phone call.
            <br></br>Equivalent to the native <c>audioPlayerBeginInterruption:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>player</em>
                <p>The audio player that has been interrupted.</p>
                <b>Discussion</b>
                <p>Upon interruption, your application’s audio session is deactivated and the audio player pauses. You cannot use the audio player again until you receive a notification that the interruption has ended.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– audioPlayerEndInterruption:withFlags:</c>
                    </li>
                </ul>
            </remarks>
            <param name="player">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.DecodeErrorDidOccur(U3DXT.iOS.Native.AVFoundation.AVAudioPlayer,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Called when an audio player encounters a decoding error during playback.
            <br></br>Equivalent to the native <c>audioPlayerDecodeErrorDidOccur:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>player</em>
                <p>The audio player that encountered the decoding error.</p>
                <em>error</em>
                <p>The decoding error.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
            </remarks>
            <param name="player">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.DidFinishPlaying(U3DXT.iOS.Native.AVFoundation.AVAudioPlayer,System.Boolean)">
            <summary>
            (optional) Called when a sound has finished playing.
            <br></br>Equivalent to the native <c>audioPlayerDidFinishPlaying:successfully:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>player</em>
                <p>The audio player that finished playing.</p>
                <em>flag</em>
                <p>
                    <c>true</c> on successful completion of playback; <c>false</c> if playback stopped because the system could not decode the audio data.</p>
                <b>Discussion</b>
                <p>This method is not called upon an audio interruption. Rather, an audio player is paused upon interruption—the sound has not finished playing.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.2 and later.</li>
                </ul>
            </remarks>
            <param name="player">
            </param>
            <param name="flag">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate.EndInterruption(U3DXT.iOS.Native.AVFoundation.AVAudioPlayer,System.UInt32)">
            <summary>
            (optional) Called after your audio session interruption ends, with options indicating the state of the audio session.
            <br></br>Equivalent to the native <c>audioPlayerEndInterruption:withOptions:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>player</em>
                <p>The audio player whose interruption has ended.</p>
                <em>flags</em>
                <p>Options indicating the state of the audio session when this method is called. Options are described in  AVAudioSessionInterruptionOptions .</p>
                <b>Discussion</b>
                <p>When an interruption ends, such as by a user ignoring an incoming phone call, the audio session for your application is automatically reactivated; at that point you can again interact with the audio player. To resume playback, call the <c>play</c> method.</p>
                <p>If this delegate method receives the  AVAudioSessionInterruptionOptionShouldResume  constant in its <em>options</em> parameter, the audio session is immediately ready to be used.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="player">
            </param>
            <param name="flags">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate._audioPlayerBeginInterruption__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_audioPlayerBeginInterruption__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate._audioPlayerDecodeErrorDidOccur_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_audioPlayerDecodeErrorDidOccur_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate._audioPlayerDidFinishPlaying_successfully__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_audioPlayerDidFinishPlaying_successfully__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVAudioPlayerDelegate._audioPlayerEndInterruption_withOptions__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_audioPlayerEndInterruption_withOptions__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.AVFoundation.AVURLAsset">
            <summary>
                <c>AVURLAsset</c> is a concrete subclass of <c>AVAsset</c> that you use to initialize an asset from an URL.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVURLAsset.PreferPreciseDurationAndTimingKey">
            <summary>
                <p>The corresponding value is a boolean, contained in an <c>NSValue</c> object, that indicates whether the asset should be prepared to indicate a precise duration and provide precise random access by time.</p>
                <p>
                    <c>true</c> indicates that longer loading times are acceptable in cases in which precise timing is required. Such precision, however, may require additional parsing of the resource in advance of operations that make use of any portion of it, depending on the specifics of its container format.</p>
                <p>Many container formats provide sufficient summary information for precise timing and do not require additional parsing to prepare for it; QuickTime movie files and MPEG-4 files are examples of such formats. Other formats do not provide sufficient summary information, and precise random access for them is possible only after a preliminary examination of a file's contents.</p>
                <p>If you only intend that the asset be played, the default value of <c>false</c> will suffice (because <c>AVPlayer</c> supports approximate random access by time when full precision isn't available). If you intend to insert the asset into an <c>AVMutableComposition</c> object, precise random access is typically desirable, and the value of <c>true</c> is recommended.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVURLAssetPreferPreciseDurationAndTimingKey</c> constant.
            </summary>
            <remarks>
            Keys for options dictionary for use with <c>initWithURL:options:</c> and <c>URLAssetWithURL:options:</c>.
            <p></p><p></p>This is a constant for "Initialization Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AVFoundation.AVURLAsset.ReferenceRestrictionsKey">
            <summary>
                <p>The corresponding value is a an <c>double</c> wrapping an  “AVAssetReferenceRestrictions”  enum value or the logical combination of multiple such values indicating the restrictions used by the asset when resolving references to external media data.</p>
                <p>Some assets can contain references to media data stored outside the asset’s container file, for example in another file. You can use this key to specify a policy to use when these references are encountered. If an asset contains one or more references of a type that is forbidden by the reference restrictions, loading of asset properties will fail. In addition, such an asset cannot be used with other AVFoundation objects, such as <c>AVPlayerItem</c> or <c>AVAssetExportSession</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>AVURLAssetReferenceRestrictionsKey</c> constant.
            </summary>
            <remarks>
            Keys for options dictionary for use with <c>initWithURL:options:</c> and <c>URLAssetWithURL:options:</c>.
            <p></p><p></p>This is a constant for "Initialization Options".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.UP_AVURLAsset_audiovisualMIMETypes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.UP_AVURLAsset_audiovisualTypes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.UP_AVURLAsset_isPlayableExtendedMIMEType_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.UP_AVURLAsset_get_URL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.UP_AVURLAsset_alloc_initWithURL_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.UP_AVURLAsset_assetWithURL_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AVFoundation.AVURLAsset" /> class.
            <br></br>Equivalent to the native <c>[[AVURLAsset alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVURLAsset.ClassExists">
            <summary>
            Returns whether the native AVURLAsset class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.AudiovisualMIMETypes">
            <summary>
            Returns an array of the MIME types the <c>AVURLAsset</c> class understands.
            <br></br>Equivalent to the native <c>audiovisualMIMETypes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of strings containing MIME types the <c>AVURLAsset</c> class understands.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.AudiovisualTypes">
            <summary>
            Returns an array of the file types the <c>AVURLAsset</c> class understands.
            <br></br>Equivalent to the native <c>audiovisualTypes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of strings containing UTIs identifying the file types the <c>AVURLAsset</c> class understands.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.IsPlayableExtendedMIMEType(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the asset is playable with the given codec(s) and container type.
            <br></br>Equivalent to the native <c>isPlayableExtendedMIMEType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>extendedMIMEType</em>
                <p>An extended MIME type.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the asset is playable with the codec(s) and container type specified in <em>extendedMIMEType</em>, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="extendedMIMEType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.Asset(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Returns an asset for inspection of a media resource.
            <br></br>Equivalent to the native <c>assetWithURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>A URL that references a media resource.</p>
                <b>Return Value</b>
                <p>An instance of a subclass of <c>AVAsset</c> initialized with <em>URL</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.AVFoundation.AVURLAsset.URL">
            <summary>
            The URL with which the asset was initialized. (read-only)
            <br></br>Equivalent to the native <c>URL</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:options:</c>
                    </li>
                    <li>
                        <c>+ URLAssetWithURL:options:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AVFoundation.AVURLAsset.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native AVURLAsset and initializes the object. Initializes an asset for inspection of a resource referenced by a given URL.
            <br></br>Equivalent to the native <c>[[AVURLAsset alloc] initWithURL:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>An URL that references the container file to be represented by the asset.</p>
                <em>options</em>
                <p>A dictionary that contains options for the initialization of the asset.</p>
                <p>For possible keys and values, see  “Initialization Options.” </p>
                <b>Return Value</b>
                <p>An asset initialized for inspection of a resource referenced by <em>URL</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ URLAssetWithURL:options:</c>
                    </li>
                    <li>    <c>@property URL</c></li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity">
            <summary>
            The <c>MPMediaEntity</c> class serves as the abstract superclass for <c>MPMediaItem</c> and <c>MPMediaItemCollection</c> instances, and in turn for <c>MPMediaPlaylist</c> instances. As the superclass, <c>MPMediaEntity</c> defines methods used by those subclasses.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.PropertyPersistentID">
            <summary>
                <p>The persistent identifier for a media entity. Value is an NSNumber object containing a <c>ulong</c> (unsigned long long).</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 4.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaEntityPropertyPersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media entity by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Media Entity Property Keys".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.UP_MPMediaEntity_canFilterByProperty_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.UP_MPMediaEntity_enumerateValuesForProperties_usingBlock_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.UP_MPMediaEntity_valueForProperty_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaEntity alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.ClassExists">
            <summary>
            Returns whether the native MPMediaEntity class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.CanFilterByProperty(System.String)">
            <summary>
            Indicates if a media property key can be used to construct a media property predicate.
            <br></br>Equivalent to the native <c>canFilterByProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>property</em>
                <p>The key for the media property that you want to examine. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the property you are testing can be used to construct a media property predicate  (of type <c>MPMediaPropertyPredicate</c>); otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>The media property keys you can use with this property are listed in this document and in <c>General Media Item Property Keys</c>, <c>Podcast Item Property Keys</c>, <c>Playlist Property Keys</c>,<!-- Private for the first Kirkwood seed
            , <xName DestinationChapterID="CH1" Id="SW35" targetElementType="GlobalDataGroup">“TV Show Item Property Keys”</xName>
            --> and <c>User-Defined Property Keys</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="property">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.EnumerateValues(System.Object[],System.Action{System.String,System.Object,System.Boolean})">
            <summary>
            Executes a provided block with the fetched values for the given item properties.
            <br></br>Equivalent to the native <c>enumerateValuesForProperties:usingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>properties</em>
                <p>A set of property keys that you want the values for.</p>
                <em>block</em>
                <p>A block object that executes for each fetched property value. If a value is not available, your block is sent <c>null</c>.</p>
                <b>Discussion</b>
                <p>Use this method to get property values in a batch fashion. In some cases, enumerating over a set of property keys can be more efficient than fetching each individual property with <c>valueForProperty:</c>.</p>
                <p>The media property keys you can use with this property are listed in this document and in <c>General Media Item Property Keys</c>, <c>Podcast Item Property Keys</c>, <c>Playlist Property Keys</c>,<!-- Private for the first Kirkwood seed
            , <xName DestinationChapterID="CH1" Id="SW35" targetElementType="GlobalDataGroup">“TV Show Item Property Keys”</xName>
            --> and <c>User-Defined Property Keys</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="properties">
            </param>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaEntity.Value(System.String)">
            <summary>
            Gets the value for a specified media property key.
            <br></br>Equivalent to the native <c>valueForProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>property</em>
                <p>The media property key that you want the corresponding value of.</p>
                <b>Return Value</b>
                <p>The value for the media <em>property</em> key.</p>
                <b>Discussion</b>
                <p>The media property keys you can use with this property are listed in this document and in <c>General Media Item Property Keys</c>, <c>Podcast Item Property Keys</c>, <c>Playlist Property Keys</c>,<!-- Private for the first Kirkwood seed
            , <xName DestinationChapterID="CH1" Id="SW35" targetElementType="GlobalDataGroup">“TV Show Item Property Keys”</xName>
            --> and <c>User-Defined Property Keys</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="property">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping">
            <summary>
            Keys used with the <c>groupingType</c> property to configure a media query.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The following code snippet shows how to apply a grouping key:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>MPMediaQuery *everything = [[MPMediaQuery alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[everything setGroupingType: MPMediaGroupingAlbum];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *collections = [everything collections];  </pre>
                        </td>
                    </tr>
                </table>
                <p>After running these code lines, the <c>collections</c> array contains all the matched media items grouped and sorted according to album name.</p>
                <p>To obtain a sorted list of songs, configure a media query with the <c>MPMediaGroupingTitle</c> key, or take advantage of the title key being the default for a media query. In either case, each obtained media item is, in effect, its own collection.</p>
                <p>Collections sort according to the same rules used by iTunes on the desktop. This includes respecting the primary system language chosen by the user. Leading articles, including “A,” “An,” and “The” when using English, or “L’,” “La,” and “Le” when using French, are ignored during sorting. If you need precise control over sorting, implement it in your application.</p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.PodcastTitle">
            <summary>
                <p>Groups and sorts media item collections by podcast title.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingPodcastTitle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.Genre">
            <summary>
                <p>Groups and sorts media item collections by musical or film genre.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingGenre</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.Title">
            <summary>
                <p>Groups and sorts media item collections by title. For songs, for example, the title is the song name. This is the default grouping key.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingTitle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.Composer">
            <summary>
                <p>Groups and sorts media item collections by composer.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingComposer</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.Artist">
            <summary>
                <p>Groups and sorts media item collections by performing artist.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingArtist</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.AlbumArtist">
            <summary>
                <p>Groups and sorts media item collections by album artist (the primary performing artist for an album as a whole).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingAlbumArtist</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.Album">
            <summary>
                <p>Groups and sorts media item collections by album, and sorts songs within an album by track order.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingAlbum</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping.Playlist">
            <summary>
                <p>Groups and sorts media item collections by playlist.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaGroupingPlaylist</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaItem">
            <summary>
            A media item represents a single piece of media (such as one song or one video podcast) in the iPod library. A media item has an overall unique identifier, accessed using the <c>MPMediaItemPropertyPersistentID</c> property key, as well as specific identifiers for its metadata. These identifiers persists across application launches.
            </summary>
            <remarks>
                <p>A media item can have a wide range of metadata associated with it. You access this metadata using the <c>valueForProperty:</c> method along with the property keys described in this document. You can also access metadata in a batch fashion using the <c>enumerateValuesForProperties:usingBlock:</c> method. In some cases, this is more efficient. Both of these methods are defined in <c>MPMediaEntity</c>, the abstract superclass of <c>MPMediaItemCollection</c>, and described in <em>MPMediaEntity Class Reference</em>.</p>
                <p>You use attributes of media items to build media queries for searching the iPod library. These attributes are described in  “Media Item Type Flags,”   “General Media Item Property Keys,”  and  “Podcast Item Property Keys.”  In addition, the <c>MPMediaEntityPropertyPersistentID</c> property is described in <c>Media Entity Property Keys</c>. Media queries are described in <em>MPMediaQuery Class Reference</em>.</p>
                <p>Starting in iOS 5.0, a media item can represent a video from the iPod library, whereas previously only audio was supported. See  “Media Item Type Flags.” </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyPersistentID">
            <summary>
                <p>The persistent identifier for the media item. Value is an <c>double</c> object containing a <c>ulong</c> (unsigned long long).</p>
                <p>The value of the <c>MPMediaItemPropertyPersistentID</c> identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyPersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyAlbumPersistentID">
            <summary>
                <p>The persistent identifier for an album. Value is an <c>double</c> object containing a <c>ulong</c> (unsigned long long).</p>
                <p>The value of the <c>MPMediaItemPropertyAlbumPersistentID</c> identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 4.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyAlbumPersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyComposerPersistentID">
            <summary>
                <p>The persistent identifier for a composer. Value is an <c>double</c> object containing a <c>ulong</c> (unsigned long long).</p>
                <p>The value of the <c>MPMediaItemPropertyComposerPersistentID</c> identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 4.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyComposerPersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyLyrics">
            <summary>
                <p>The lyrics for the media item. Value is an <c>String</c> object.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyLyrics</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyReleaseDate">
            <summary>
                <p>The date on which the media item was first publicly released. Value is an <c>DateTime</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyReleaseDate</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyDiscNumber">
            <summary>
                <p>The disc number of the media item, for a media item that is part of a multi-disc album. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyDiscNumber</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyPlaybackDuration">
            <summary>
                <p>The playback duration of the media item. Value is an <c>double</c> object representing a duration in seconds as an <c>double</c>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyPlaybackDuration</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyGenre">
            <summary>
                <p>The musical or film genre of the media item. Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyGenre</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyAlbumTrackCount">
            <summary>
                <p>The number of tracks in the album that contains the media item. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>For an audio streaming app, the system provides a default value of <c>1</c> for this property.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyAlbumTrackCount</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyAlbumArtistPersistentID">
            <summary>
                <p>The persistent identifier for an album artist. Value is an <c>double</c> object containing a <c>ulong</c> (unsigned long long).</p>
                <p>The value of the <c>MPMediaItemPropertyAlbumArtistPersistentID</c> identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 4.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyAlbumArtistPersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyAlbumTrackNumber">
            <summary>
                <p>The track number of the media item, for a media item that is part of an album. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyAlbumTrackNumber</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyArtwork">
            <summary>
                <p>The artwork image for the media item. Value is a media item image, described in <em>MPMediaItemArtwork Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyArtwork</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyIsCompilation">
            <summary>
                <p>A Boolean value indicating whether the media item is part of a compilation (<c>true</c>), or not (<c>false</c>). Corresponds to the the “Part of a compilation” checkbox in the Info tab in the Get Info dialog in iTunes. Value is an <c>double</c> object representing a <c>bool</c> data type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyIsCompilation</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyMediaType">
            <summary>
                <p>The media type of the media item. Value is an  an <c>double</c> object representing an <c>int</c> data type. The <c>int</c> value represents a bit field flag, or set of flags, from  “Media Item Type Flags.” </p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyMediaType</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyTitle">
            <summary>
                <p>The title (or name) of the media item. This property is unrelated to the <c>MPMediaItemPropertyAlbumTitle</c> property. Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyTitle</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyComposer">
            <summary>
                <p>The musical composer for the media item. Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyComposer</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyIsCloudItem">
            <summary>
                <p>A Boolean value indicating whether the media item is an iCloud item (<c>true</c>), or not (<c>false</c>). A media item is considered an iCloud item if it is available via iTunes Match and is not already stored on the device. Value is an <c>double</c> object representing a <c>bool</c> data type.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyIsCloudItem</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyArtistPersistentID">
            <summary>
                <p>The persistent identifier for an artist. Value is an <c>double</c> object containing a <c>ulong</c> (unsigned long long).</p>
                <p>The value of the <c>MPMediaItemPropertyArtistPersistentID</c> identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 4.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyArtistPersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyAlbumArtist">
            <summary>
                <p>The primary performing artist for an album as a whole. Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyAlbumArtist</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyComments">
            <summary>
                <p>Textual information about the media item, corresponding to the “Comments” field in in the Info tab in the Get Info dialog in iTunes. Value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyComments</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyAlbumTitle">
            <summary>
                <p>The title of an album, such as “Live On Mars”, as opposed to the title of an individual song on the album, such as “Crater Dance (radio edit)” (which you specify using the <c>MPMediaItemPropertyTitle</c> property). Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyAlbumTitle</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyArtist">
            <summary>
                <p>The performing artist(s) for a media item—which may vary from the primary artist for the album that a media item belongs to. For example, if the album artist is “Joseph Fable,” the artist for one of the songs in the album may be “Joseph Fable featuring Thomas Smithson”. Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyArtist</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyPodcastPersistentID">
            <summary>
                <p>The persistent identifier for an audio podcast. Value is an <c>double</c> object containing a <c>ulong</c> (unsigned long long).</p>
                <p>The value of the <c>MPMediaItemPropertyPodcastPersistentID</c> identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 4.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyPodcastPersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyBeatsPerMinute">
            <summary>
                <p>The number of musical beats per minute for the media item, corresponding to the “BPM” field in the Info tab in the Get Info dialog in iTunes. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyBeatsPerMinute</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyAssetURL">
            <summary>
                <p>A URL pointing to the media item, from which an <c>AVAsset</c> object (or other URL-based AV Foundation object) can be created, with any options as desired. Value is an <c>NSURL</c> object.</p>
                <p>The URL has the custom scheme of <c>ipod-library</c>. For example, a URL might look like this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>
                                <c>ipod-library://item/item.m4a?id=12345</c>
                                <br />
                            </pre>
                        </td>
                    </tr>
                </table>
                <p>Usage of the URL outside of the AV Foundation framework is not supported.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyAssetURL</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyGenrePersistentID">
            <summary>
                <p>The persistent identifier for a genre. Value is an <c>double</c> object containing a <c>ulong</c> (unsigned long long).</p>
                <p>The value of the <c>MPMediaItemPropertyGenrePersistentID</c> identifier persists across application launches and across syncs that do not change the sync status of the media item. The value is not guaranteed to persist across a sync/unsync/sync cycle.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 4.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyGenrePersistentID</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyDiscCount">
            <summary>
                <p>The number of discs in the album that contains the media item. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyDiscCount</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. Some properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>. These properties are marked here as <em>filterable</em>.
            <p></p><p></p>This is a constant for "General Media Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyPodcastTitle">
            <summary>
                <p>The title of a podcast, such as “This Martian Drudgery”, as opposed to the title of an individual episode of a podcast such as “Episode 12: Another Cold Day At The Pole” (which you specify using the <c>MPMediaItemPropertyTitle</c> property). Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaPropertyPredicate Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyPodcastTitle</c> constant.
            </summary>
            <remarks>
            You obtain metadata for a podcast media item by calling the <c><!--a-->valueForProperty<!--/a--></c> method with these property keys. So-called <em>filterable</em> properties can also be used to build media property predicates, as described in <em>MPMediaPropertyPredicate Class Reference</em>.
            <p></p><!-- These APIs were made private for the first Kirkwood seed
            <GlobalDataGroup XRefSourceID="SW35"><Name>TV Show Item Property Keys</Name><Abstract><Para>You obtain metadata for a TV-show media item by calling the <functionName>valueForProperty</functionName> method with these property keys. So-called <emphasis>filterable</emphasis> properties can also be used to build media property predicates, as described in <uBook LinkToAppleRefId="//apple_ref/doc/uid/TP40008219">MPMediaPropertyPredicate Class Reference</uBook>.</Para></Abstract><Declaration><CodeLine xml:space="preserve">NSString *const MPMediaItemPropertySeriesName;       // filterable</CodeLine><CodeLine xml:space="preserve">NSString *const MPMediaItemPropertySeasonNumber;     // filterable</CodeLine><CodeLine xml:space="preserve">NSString *const MPMediaItemPropertyEpisodeNumber;</CodeLine></Declaration><ConstantDefinitions><Constant XRefSourceID="SW36"><Name>MPMediaItemPropertySeriesName</Name><Abstract><Para>The name of the television series that the media item is part of. Value is an <cVoice>NSString</codeVoice> object.</Para></Abstract><Definition><Para>Can be used to build a media property predicate as described in <uBook LinkToAppleRefId="//apple_ref/doc/uid/TP40008219">MPMediaPropertyPredicate Class Reference</uBook>.</Para></Definition></Constant><Constant XRefSourceID="SW6"><Name>MPMediaItemPropertySeasonNumber</Name><Abstract><Para>The season number of the television series that the media item is part of. Value is an <cVoice>NSUInteger</codeVoice> object.</Para></Abstract><Definition><Para>Can be used to build a media property predicate as described in <uBook LinkToAppleRefId="//apple_ref/doc/uid/TP40008219">MPMediaPropertyPredicate Class Reference</uBook>.</Para></Definition></Constant><Constant XRefSourceID="SW37"><Name>MPMediaItemPropertyEpisodeNumber</Name><Abstract><Para>The episode number, within the season described by the <xAPI DestinationChapterID="CH1" Id="SW6" targetElementType="Constant">MPMediaItemPropertySeasonNumber</xAPI> value, for the media item. Value is an <cVoice>NSUInteger</codeVoice> object.</Para></Abstract></Constant></ConstantDefinitions></GlobalDataGroup>
            --><p></p>This is a constant for "Podcast Item Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyLastPlayedDate">
            <summary>
                <p>The most recent calendar date on which the user played the media item. Value is an <c>DateTime</c> object.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyLastPlayedDate</c> constant.
            </summary>
            <remarks>
            You obtain user-defined metadata for a media item by calling the <c>valueForProperty:</c> method with these property keys. User-defined properties cannot be used to build media property predicates.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "User-Defined Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyRating">
            <summary>
                <p>The user-specified rating of the object in the range <c>[0...5]</c>, where a value of <c>5</c> indicates the most favorable rating. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyRating</c> constant.
            </summary>
            <remarks>
            You obtain user-defined metadata for a media item by calling the <c>valueForProperty:</c> method with these property keys. User-defined properties cannot be used to build media property predicates.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "User-Defined Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyBookmarkTime">
            <summary>
                <p>The user’s place in the media item the most recent time it was played. Value is an <c>double</c> object representing a duration in seconds as an <c>double</c>.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyBookmarkTime</c> constant.
            </summary>
            <remarks>
            You obtain user-defined metadata for a media item by calling the <c>valueForProperty:</c> method with these property keys. User-defined properties cannot be used to build media property predicates.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "User-Defined Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyUserGrouping">
            <summary>
                <p>Corresponds to the “Grouping” field in the Info tab in the Get Info dialog in iTunes. Value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyUserGrouping</c> constant.
            </summary>
            <remarks>
            You obtain user-defined metadata for a media item by calling the <c>valueForProperty:</c> method with these property keys. User-defined properties cannot be used to build media property predicates.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "User-Defined Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertyPlayCount">
            <summary>
                <p>The number of times the user has played the media item. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertyPlayCount</c> constant.
            </summary>
            <remarks>
            You obtain user-defined metadata for a media item by calling the <c>valueForProperty:</c> method with these property keys. User-defined properties cannot be used to build media property predicates.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "User-Defined Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PropertySkipCount">
            <summary>
                <p>The number of times the user has skipped playing the item. Value is an <c>double</c> object representing an <c>uint</c> data type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaItemPropertySkipCount</c> constant.
            </summary>
            <remarks>
            You obtain user-defined metadata for a media item by calling the <c>valueForProperty:</c> method with these property keys. User-defined properties cannot be used to build media property predicates.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "User-Defined Property Keys".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.UP_MPMediaItem_persistentIDPropertyForGroupingType_(System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.UP_MPMediaItem_titlePropertyForGroupingType_(System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.UP_MPMediaItem_canFilterByProperty_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaItem" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaItem alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.ClassExists">
            <summary>
            Returns whether the native MPMediaItem class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.PersistentIDProperty(U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping)">
            <summary>
            Obtains the persistent identifier key for a specified grouping type.
            <br></br>Equivalent to the native <c>persistentIDPropertyForGroupingType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>groupingType</em>
                <p>The grouping type that you want the persistent identifier key for.</p>
                <b>Discussion</b>
                <p>Use this convenience method to obtain the key for a specific persistent identifier based on a grouping type. You can use that key, in turn, to obtain the value of a specific persistent ID of a media item, such as album title or artist name. Using this method simplifies such tasks as drilling down from an artist, to albums by that artist, to a specific album.</p>
                <p>For example, the following statement returns the persistent identifier key for the album grouping type:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSString *albumIDKey = [MPMediaItem persistentIDPropertyForGroupingType: MPMediaGroupingAlbum];  </pre>
                        </td>
                    </tr>
                </table>
                <p>You could then obtain the specific persistent ID that you want by using the <c>valueForProperty:</c>method. Grouping keys are described in <c>Media Item Collection Grouping Keys</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="groupingType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.TitleProperty(U3DXT.iOS.Native.MediaPlayer.MPMediaGrouping)">
            <summary>
            Obtains the title key for a specified grouping type.
            <br></br>Equivalent to the native <c>titlePropertyForGroupingType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>groupingType</em>
                <p>The grouping type that you want the title key for.</p>
                <b>Discussion</b>
                <p>Use this convenience method to obtain the key for the title that corresponds to a specified grouping type. For example, the following statement obtains the title key for the album grouping type:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSString *titleIDKey = [MPMediaItem titlePropertyForGroupingType: MPMediaGroupingAlbum];  </pre>
                        </td>
                    </tr>
                </table>
                <p>You could then obtain the specific title that you want by using the <c>valueForProperty:</c> method. Grouping keys are described in <c>Media Item Collection Grouping Keys</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="groupingType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItem.CanFilterByProperty(System.String)">
            <summary>
            Indicates if a media property key can be used to construct a media property predicate.
            <br></br>Equivalent to the native <c>canFilterByProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>property</em>
                <p>The key for the media property that you want to examine. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the property you are testing can be used to construct a media property predicate  (of type <c>MPMediaPropertyPredicate</c>); otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>The media property keys you can use with this property are listed in this document and in <c>General Media Item Property Keys</c>, <c>Podcast Item Property Keys</c>, <c>Playlist Property Keys</c>,<!-- Private for the first Kirkwood seed
            , <xName DestinationChapterID="CH1" Id="SW35" targetElementType="GlobalDataGroup">“TV Show Item Property Keys”</xName>
            --> and <c>User-Defined Property Keys</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="property">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork">
            <summary>
            An <c>MPMediaItemArtwork</c> object, or media item artwork, represents a graphical image, such as music album cover art, associated with a media item. Media items are described in <em>MPMediaItem Class Reference</em>.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.UP_MPMediaItemArtwork_get_bounds(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.UP_MPMediaItemArtwork_get_imageCropRect(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.UP_MPMediaItemArtwork_imageWithSize_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.UP_MPMediaItemArtwork_alloc_initWithImage_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaItemArtwork alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.ClassExists">
            <summary>
            Returns whether the native MPMediaItemArtwork class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.bounds">
            <summary>
            The overall bounds, in points, of the image associated with the media item artwork.
            <br></br>Equivalent to the native <c>bounds</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.imageCropRect">
            <summary>
            The bounds, in points, of the content area for the full size image associated with the media item artwork.
            <br></br>Equivalent to the native <c>imageCropRect</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.Image(U3DXT.Utils.Size)">
            <summary>
            Creates and returns a <c>UIImage</c> object of a specified size.
            <br></br>Equivalent to the native <c>imageWithSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The size, in points, for the new <c>UIImage</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="size">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemArtwork.#ctor(U3DXT.iOS.Native.UIKit.UIImage)">
            <summary>
            Creates an instance of the native MPMediaItemArtwork and initializes the object. Initializes a media item artwork instance with a full-size image.
            <br></br>Equivalent to the native <c>[[MPMediaItemArtwork alloc] initWithImage:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image to use to initialize the media item artwork instance.</p>
                <b>Discussion</b>
                <p>This method assumes that the crop rectangle of the image matches the bounds of the image, as defined by the image’s size in points. That is, this method assumes the image you supply is tightly cropped.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection">
            <summary>
            A media item collection is a sorted set of media items (instances of the <c>MPMediaItem</c> class) from the iPod library. Typically, you use this class by requesting an array of collections from a media query by way of its <c>collections</c> property. Media queries are described in <em>MPMediaQuery Class Reference</em>.
            </summary>
            <remarks>
                <p>The grouping type for the media query determines the arrangement of the media items you obtain. You also use the media query <c>collections</c> property to obtain synced playlists, as described in <em>MPMediaPlaylist Class Reference</em>.</p>
                <p>A media item collection can have a wide range of metadata associated with it. You access this metadata using the <c>valueForProperty:</c> method along with the property keys described in this document. The You can also access metadata in a batch fashion using the <c>enumerateValuesForProperties:usingBlock:</c> method. In some cases, this is more efficient. Both of these methods are defined in <c>MPMediaEntity</c> (the abstract superclass of <c>MPMediaItemCollection</c>) and described in <em>MPMediaEntity Class Reference</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.UP_MPMediaItemCollection_get_count(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.UP_MPMediaItemCollection_get_items(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.UP_MPMediaItemCollection_get_mediaTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.UP_MPMediaItemCollection_get_representativeItem(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.UP_MPMediaItemCollection_alloc_initWithItems_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.UP_MPMediaItemCollection_canFilterByProperty_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaItemCollection alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.ClassExists">
            <summary>
            Returns whether the native MPMediaItemCollection class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.CanFilterByProperty(System.String)">
            <summary>
            Indicates if a media property key can be used to construct a media property predicate.
            <br></br>Equivalent to the native <c>canFilterByProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>property</em>
                <p>The key for the media property that you want to examine. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the property you are testing can be used to construct a media property predicate  (of type <c>MPMediaPropertyPredicate</c>); otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>The media property keys you can use with this property are listed in this document and in <c>General Media Item Property Keys</c>, <c>Podcast Item Property Keys</c>, <c>Playlist Property Keys</c>,<!-- Private for the first Kirkwood seed
            , <xName DestinationChapterID="CH1" Id="SW35" targetElementType="GlobalDataGroup">“TV Show Item Property Keys”</xName>
            --> and <c>User-Defined Property Keys</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="property">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.count">
            <summary>
            The number of media items in a collection.
            <br></br>Equivalent to the native <c>count</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>In some cases, using this property is more efficient than fetching the <em>items</em> array and asking for the count.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.items">
            <summary>
            The media items in a media item collection.
            <br></br>Equivalent to the native <c>items</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.mediaTypes">
            <summary>
            The types of the media items in a collection.
            <br></br>Equivalent to the native <c>mediaTypes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The media item types are listed in the <c>Media Item Type Flags</c> enumeration in <em>MPMediaItem Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.representativeItem">
            <summary>
            A media item whose properties are representative of the other media items in a collection.
            <br></br>Equivalent to the native <c>representativeItem</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The media items in a collection typically share common property values, owing to how the collection was built. For example, if you build a collection based on a predicate that uses the <c>MPMediaItemPropertyArtist</c> property, all items in the collection share the same artist name. You can use the <c>representativeItem</c> property to efficiently obtain values for such common properties—often more efficiently than fetching an item from the <em>items</em> array.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection.#ctor(System.Object[])">
            <summary>
            Creates an instance of the native MPMediaItemCollection and initializes the object. Initializes a media item collection with an array of media items.
            <br></br>Equivalent to the native <c>[[MPMediaItemCollection alloc] initWithItems:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>items</em>
                <p>The array of items you are assigning to the media item collection.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="items">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary">
            <summary>
            An <c>MPMediaLibrary</c> object, or media library, represents the state of the set of synced media items (such as songs) on a device. The complete library of media items itself is called the <em>iPod library</em>.
            </summary>
            <remarks>
                <p>A user may sync their device, changing the content of the iPod library, while your application is running. You can use the notification provided by this class to ensure that your application’s cache of the iPod library is up-to-date.</p>
                <p>To retrieve media items from the iPod library, build a custom query as described in <em>MPMediaPropertyPredicate Class Reference</em> and <em>MPMediaQuery Class Reference</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.MPMediaLibraryDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMediaLibraryDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.DidChange">
            <summary>
                <b>MPMediaLibraryDidChangeNotification</b> When <c>MPMediaLibraryDidChangeNotification</c> is posted, your application should reevaluate items or playlists that you previously cached. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMediaLibraryDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>MPMediaLibrary</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.AllInstances.DidChange">
            <summary>
                <b>MPMediaLibraryDidChangeNotification</b> When <c>MPMediaLibraryDidChangeNotification</c> is posted, your application should reevaluate items or playlists that you previously cached. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMediaLibraryDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.UP_MPMediaLibrary_defaultMediaLibrary">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.UP_MPMediaLibrary_get_lastModifiedDate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.UP_MPMediaLibrary_beginGeneratingLibraryChangeNotifications(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.UP_MPMediaLibrary_endGeneratingLibraryChangeNotifications(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaLibrary alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.ClassExists">
            <summary>
            Returns whether the native MPMediaLibrary class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.DefaultMediaLibrary">
            <summary>
            Gets an instance of the default media library.
            <br></br>Equivalent to the native <c>defaultMediaLibrary</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.lastModifiedDate">
            <summary>
            The calendar date on which a media library was last modified.
            <br></br>Equivalent to the native <c>lastModifiedDate</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.BeginGeneratingLibraryChangeNotifications">
            <summary>
            Asks a media library to turn on notifications for device-to-computer synchronizations.
            <br></br>Equivalent to the native <c>beginGeneratingLibraryChangeNotifications</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method is nestable—that is, you can call it multiple times. To turn off notifications, you must call  <c>endGeneratingLibraryChangeNotifications</c> the same number of times that you called <c>beginGeneratingLibraryChangeNotifications</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaLibrary.EndGeneratingLibraryChangeNotifications">
            <summary>
            Asks a media library to turn off notifications for device-to-computer synchronizations.
            <br></br>Equivalent to the native <c>endGeneratingLibraryChangeNotifications</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– beginGeneratingLibraryChangeNotifications</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController">
            <summary>
            An <c>MPMediaPickerController</c> object, or media item picker, is a specialized view controller that you employ to provide a graphical interface for selecting media items. To display a media item picker, present it modally on an existing view controller. Media items are described in <em>MPMediaItem Class Reference</em>.
            </summary>
            <remarks>
                <p>To respond to user selections and to dismiss a media item picker, use the <c>MPMediaPickerControllerDelegate</c> protocol as described in <em>MPMediaPickerControllerDelegate Protocol Reference</em>.</p>
                <p>
                    <strong>Notes:</strong> The <c>MPMediaPickerController</c> class supports portrait mode only. This class does support subclassing. The view hierarchy for this class is private; do not modify the view hierarchy.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.DidPickMediaItems">
            <summary>
            Called when a user has selected a set of media items.
            <br></br>Equivalent to implementing the native <c>mediaPicker:didPickMediaItems:</c> method of <c>MPMediaPickerControllerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.DidPickMediaItemsEventArgs">
            <summary>
            Event arguments for DidPickMediaItems.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.DidPickMediaItemsEventArgs.#ctor(U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.DidPickMediaItemsEventArgs.mediaItemCollection">
            <summary>mediaItemCollection</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.DidCancel">
            <summary>
            Called when a user dismisses a media item picker by tapping Cancel.
            <br></br>Equivalent to implementing the native <c>mediaPickerDidCancel:</c> method of <c>MPMediaPickerControllerDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_get_allowsPickingMultipleItems(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_set_allowsPickingMultipleItems(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_get_mediaTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_get_prompt(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_set_prompt(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_get_showsCloudItems(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_set_showsCloudItems(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.UP_MPMediaPickerController_alloc_initWithMediaTypes_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaPickerController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.ClassExists">
            <summary>
            Returns whether the native MPMediaPickerController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.allowsPickingMultipleItems">
            <summary>
            A Boolean value specifying multiple (<c>true</c>) or single (<c>false</c>) selection behavior for a media item picker.
            <br></br>Equivalent to the native <c>allowsPickingMultipleItems</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default behavior for a media item picker is <c>false</c>, which means that the picker allows selection of only a single media item. In this instance, the button for dismissing the picker is labeled “Cancel.”</p>
                <p>When using the multiple-selection version, the button for dismissing the picker is labeled “Done.”</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.Delegate">
            <summary>
            The delegate for a media item picker.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Typically, you set the delegate to be the same object that initializes and displays the media item picker. The delegate protocol is described in <em>MPMediaPickerControllerDelegate Protocol Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.mediaTypes">
            <summary>
            The media types that media item picker presents.
            <br></br>Equivalent to the native <c>mediaTypes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The available media types are listed in the <c>Media Item Type Flags</c> enumeration.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.prompt">
            <summary>
            A prompt, for the user, that appears above the navigation bar buttons.
            <br></br>Equivalent to the native <c>prompt</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.showsCloudItems">
            <summary>
            A Boolean value specifying whether to display iCloud items (<c>true</c>) or not (<c>false</c>) for a media picker.
            <br></br>Equivalent to the native <c>showsCloudItems</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default behavior for a media item picker is <c>true</c>, which means the the picker shows available iCloud items. A media item is considered an iCloud item if it is available via iTunes Match and is not already stored on the device.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController.#ctor(U3DXT.iOS.Native.MediaPlayer.MPMediaType)">
            <summary>
            Creates an instance of the native MPMediaPickerController and initializes the object. Initializes a media item picker for specified media types.
            <br></br>Equivalent to the native <c>[[MPMediaPickerController alloc] initWithMediaTypes:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>mediaTypes</em>
                <p>An integer representing the media types for the media item picker. See the <c>Media Item Type Flags</c> enumeration.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– init</c>
                    </li>
                </ul>
            </remarks>
            <param name="mediaTypes">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate">
            <summary>
            The delegate for a media item picker can respond to a user making media item selections. The delegate is also responsible for dismissing the media item picker from the parent view controller. The methods in this protocol are optional.
            </summary>
            <remarks>
                <p>Media items are described in <em>MPMediaItem Class Reference</em>. Media item pickers are described in <em>MPMediaPickerController Class Reference</em>.</p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate.UP_MPMediaPickerControllerDelegate_set__mediaPicker_didPickMediaItems__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate.UP_MPMediaPickerControllerDelegate_set__mediaPickerDidCancel__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate.DidPickMediaItems(U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController,U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection)">
            <summary>
            (optional) Called when a user has selected a set of media items.
            <br></br>Equivalent to the native <c>mediaPicker:didPickMediaItems:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>mediaPicker</em>
                <p>The media item picker to dismiss.</p>
                <em>mediaItemCollection</em>
                <p>The selected media items.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="mediaPicker">
            </param>
            <param name="mediaItemCollection">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate.DidCancel(U3DXT.iOS.Native.MediaPlayer.MPMediaPickerController)">
            <summary>
            (optional) Called when a user dismisses a media item picker by tapping Cancel.
            <br></br>Equivalent to the native <c>mediaPickerDidCancel:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>mediaPicker</em>
                <p>The media item picker to dismiss.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="mediaPicker">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate._mediaPicker_didPickMediaItems__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_mediaPicker_didPickMediaItems__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPickerControllerDelegate._mediaPickerDidCancel__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_mediaPickerDidCancel__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback">
            <summary>
            The <c>MPMediaPlayback</c> protocol defines the interface adopted by the <c>MPMoviePlayerController</c> class for controlling media playback. This protocol supports basic transport operations including start, stop, and pause, and also lets you seek forward and back through a movie or to a specific point in its timeline.
            </summary>
            <remarks>
                <p>
                </p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__get_currentPlaybackRate_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__set_currentPlaybackRate__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__get_currentPlaybackTime_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__set_currentPlaybackTime__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__get_isPreparedToPlay_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__beginSeekingBackward_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__beginSeekingForward_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__endSeeking_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__pause_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__play_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__prepareToPlay_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.UP_MPMediaPlayback_set__stop_handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.BeginSeekingBackward">
            <summary>
            (<b>required</b>) Begins seeking backward through the media content. (required)
            <br></br>Equivalent to the native <c>beginSeekingBackward</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method to move the current playback position backward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the <c>endSeeking</c> method.  </p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.BeginSeekingForward">
            <summary>
            (<b>required</b>) Begins seeking forward through the media content. (required)
            <br></br>Equivalent to the native <c>beginSeekingForward</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method to move the current playback position forward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the <c>endSeeking</c> method.   </p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.EndSeeking">
            <summary>
            (<b>required</b>) Ends forward and backward seeking through the media content. (required)
            <br></br>Equivalent to the native <c>endSeeking</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You must call this method to end a seeking operation begun by calling either the <c>beginSeekingBackward</c> or <c>beginSeekingForward</c> method. After calling this method, the player returns to the same state it was in prior to seeking. In other words, if the item was playing before seeking began, it continues playing from the new playhead position after calling this method.</p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.Pause">
            <summary>
            (<b>required</b>) Pauses playback of the current item. (required)
            <br></br>Equivalent to the native <c>pause</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If playback is not currently underway, this method has no effect. To resume playback of the current item from the pause point, call the <c>play</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.Play">
            <summary>
            (<b>required</b>) Initiates playback of the current item. (required)
            <br></br>Equivalent to the native <c>play</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If playback was previously paused, this method resumes playback where it left off; otherwise, this method plays the first available item, from the beginning.</p>
                <p>If a movie player is not prepared for playback when you call this method, this method first prepares the movie player and then starts playback. To minimize playback delay, call the <c>prepareToPlay</c> method before you call this method.</p>
                <p>To be notified when a movie player is ready to play, register for the <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification. You can then check load state by accessing the movie player’s <c>loadState</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.PrepareToPlay">
            <summary>
            (<b>required</b>) Prepares a movie player for playback. (required)
            <br></br>Equivalent to the native <c>prepareToPlay</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If a movie player is not already prepared to play when you call the <c>play</c> method, that method automatically calls this method. However, to minimize playback delay, call this method before you call <c>play</c>.</p>
                <p>Calling this method may interrupt the movie player’s audio session. For information on interruptions and how to resond to them, see <em>Audio Session Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.Stop">
            <summary>
            (<b>required</b>) Ends playback of the current item. (required)
            <br></br>Equivalent to the native <c>stop</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method stops playback of the current item and resets the playhead to the start of the item. Calling the <c>play</c> method again initiates playback from the beginning of the item.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.currentPlaybackRate">
            <summary>
            (<b>required</b>) The current playback rate for the player. (required)
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value represents a multiplier for the default playback rate of the current item. A value of 0.0 indicates that playback is stopped while a value of 1.0 indicates that playback is occurring at normal speed. Positive values indicate forward playback while negative values indicate reverse playback. </p>
                <p>Setting the value of this property changes the playback rate accordingly.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._get_currentPlaybackRate_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_get_currentPlaybackRate_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._set_currentPlaybackRate__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_set_currentPlaybackRate__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.currentPlaybackTime">
            <summary>
            (<b>required</b>) The current position of the playhead. (required)
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For video-on-demand or progressively downloaded content, this value is measured in seconds from the beginning of the current item. Changing the value of this property moves the playhead to the new location. For content streamed live from a server, this value represents the time from the beginning of the playlist when it was first loaded. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._get_currentPlaybackTime_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_get_currentPlaybackTime_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._set_currentPlaybackTime__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_set_currentPlaybackTime__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback.isPreparedToPlay">
            <summary>
            (<b>required</b>) A Boolean value indicating whether a movie player is ready to play. (required) (read-only)
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– prepareToPlay</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._get_isPreparedToPlay_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_get_isPreparedToPlay_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._beginSeekingBackward_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_beginSeekingBackward_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._beginSeekingForward_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_beginSeekingForward_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._endSeeking_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_endSeeking_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._pause_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_pause_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._play_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_play_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._prepareToPlay_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_prepareToPlay_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlayback._stop_handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_stop_handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist">
            <summary>
            A media playlist is a playable collection of related media items. (Media items are described in <em>MPMediaItem Class Reference</em>.) Each playlist has a name, a set of attributes, and a unique identifier that persists across application launches.
            </summary>
            <remarks>
                <p>Users configure playlists using iTunes on the desktop or by creating an on-the-go playlist on the device. To your iOS application, playlists are read-only. To obtain playlists, configure a media query that is grouped by playlist. Each returned media item collection is a media playlist. The following code snippet illustrates this by logging playlist and song names to the Xcode debugger console: </p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>MPMediaQuery *myPlaylistsQuery = [MPMediaQuery playlistsQuery];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *playlists = [myPlaylistsQuery collections];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>for (MPMediaPlaylist *playlist in playlists) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSLog ("%", [playlist valueForProperty: MPMediaPlaylistPropertyName]);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSArray *songs = [playlist items];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    for (MPMediaItem *song in songs) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        NSString *songTitle =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>            [song valueForProperty: MPMediaItemPropertyTitle];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        NSLog ("\t\t%", songTitle);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <p>The API for building a media query is described in <em>MPMediaPropertyPredicate Class Reference</em> and <em>MPMediaQuery Class Reference</em>. The methods for querying media playlist property values are described in <em>MPMediaEntity Class Reference</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.PropertyPersistentID">
            <summary>
                <p>The persistent identifier for the playlist. Value is an <c>double</c> object containing a <c>UInt64_t</c> (unsigned long long).</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaQuery Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistPropertyPersistentID</c> constant.
            </summary>
            <remarks>
            Use these keys with the <c>canFilterByProperty:</c> and <c>valueForProperty:</c> methods to obtain information about a playlist. Properties described as “filterable” can be used to build media property predicates (see <em>MPMediaPropertyPredicate Class Reference</em>).
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Playlist Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.PropertyName">
            <summary>
                <p>The name of the playlist. Value is an <c>String</c> object.</p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaQuery Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistPropertyName</c> constant.
            </summary>
            <remarks>
            Use these keys with the <c>canFilterByProperty:</c> and <c>valueForProperty:</c> methods to obtain information about a playlist. Properties described as “filterable” can be used to build media property predicates (see <em>MPMediaPropertyPredicate Class Reference</em>).
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Playlist Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.PropertySeedItems">
            <summary>
                <p>The items seeded to generate the playlist; applies only to Genius playlists. Value is an <c>object[]</c> object containing one or more <c>MPMediaItem</c> objects. </p>
                <p>Value is <c>null</c> for playlists that do not have the <c>MPMediaPlaylistAttributeGenius</c> flag set.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistPropertySeedItems</c> constant.
            </summary>
            <remarks>
            Use these keys with the <c>canFilterByProperty:</c> and <c>valueForProperty:</c> methods to obtain information about a playlist. Properties described as “filterable” can be used to build media property predicates (see <em>MPMediaPropertyPredicate Class Reference</em>).
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Playlist Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.PropertyPlaylistAttributes">
            <summary>
                <p>The attributes associated with the playlist. Value is an <c>double</c> object containing an <c>int</c> data type. Fields in the <c>int</c> identify the attributes of the playlist. A playlist may have any combination of attributes described in  “Playlist Attribute Flags.” </p>
                <p>Can be used to build a media property predicate as described in <em>MPMediaQuery Class Reference</em>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistPropertyPlaylistAttributes</c> constant.
            </summary>
            <remarks>
            Use these keys with the <c>canFilterByProperty:</c> and <c>valueForProperty:</c> methods to obtain information about a playlist. Properties described as “filterable” can be used to build media property predicates (see <em>MPMediaPropertyPredicate Class Reference</em>).
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Playlist Property Keys".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.UP_MPMediaPlaylist_canFilterByProperty_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaPlaylist alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.ClassExists">
            <summary>
            Returns whether the native MPMediaPlaylist class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.CanFilterByProperty(System.String)">
            <summary>
            Indicates if a media property key can be used to construct a media property predicate.
            <br></br>Equivalent to the native <c>canFilterByProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>property</em>
                <p>The key for the media property that you want to examine. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the property you are testing can be used to construct a media property predicate  (of type <c>MPMediaPropertyPredicate</c>); otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>The media property keys you can use with this property are listed in this document and in <c>General Media Item Property Keys</c>, <c>Podcast Item Property Keys</c>, <c>Playlist Property Keys</c>,<!-- Private for the first Kirkwood seed
            , <xName DestinationChapterID="CH1" Id="SW35" targetElementType="GlobalDataGroup">“TV Show Item Property Keys”</xName>
            --> and <c>User-Defined Property Keys</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
            <param name="property">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylist.#ctor(System.Object[])">
            <summary>
            Creates an instance of the native MPMediaPlaylist and initializes the object. Inherits from <c>MPMediaItemCollection</c>. Initializes a media item collection with an array of media items.
            <br></br>Equivalent to the native <c>[[MPMediaPlaylist alloc] initWithItems:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>items</em>
                <p>The array of items you are assigning to the media item collection.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="items">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection" />
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylistAttribute">
            <summary>
            Playlist attributes, used as possible values for the <c>MPMediaPlaylistPropertyPlaylistAttributes</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylistAttribute.OnTheGo">
            <summary>
                <p>If set, the playlist was created on a device rather than synced from iTunes.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistAttributeOnTheGo</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylistAttribute.Smart">
            <summary>
                <p>If set, the playlist is a “smart” playlist, whose members are determined by user-specified rules.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistAttributeSmart</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylistAttribute.Genius">
            <summary>
                <p>If set, the playlist is a Genius playlist. </p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistAttributeGenius</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPlaylistAttribute.None">
            <summary>
                <p>If set, the playlist has no attributes.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPlaylistAttributeNone</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate">
            <summary>
            Use this class’s concrete subclass, described in <em>MPMediaPropertyPredicate Class Reference</em>, to define the filter in a media query to retrieve a subset of media items from the iPod library. Media queries are described in <em>MPMediaQuery Class Reference</em>.
            </summary>
            <remarks>
                <p>In iPod library queries, a <strong>predicate</strong> is a statement of a logical condition that you want to test each media item against. Those media items that satisfy the condition are retrieved in the query result.</p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaPredicate alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate.ClassExists">
            <summary>
            Returns whether the native MPMediaPredicate class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicateComparison">
            <summary>
            Logical comparison types for media queries.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicateComparison.Contains">
            <summary>
                <p>Matches when a media item’s value for a given property is contained in the value of the media property predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPredicateComparisonContains</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaPredicateComparison.EqualTo">
            <summary>
                <p>Matches when a media item’s value for a given property is equal to the value in the media property predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaPredicateComparisonEqualTo</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate">
            <summary>
            Use one or more <c>MPMediaPropertyPredicate</c> objects, or media property predicates, to define the filter in a media query to retrieve a subset of media items from the iPod library. A <strong>predicate</strong> in this context is a statement of a logical condition that you want to test each media item against. Those items that satisfy the condition are retrieved in the query result.
            </summary>
            <remarks>
                <p>You define iPod library queries, and retrieve query results, using the <c>MPMediaQuery</c> class, described in <em>MPMediaQuery Class Reference</em>. The media items and media item collections that you retrieve with a query are described in <em>MPMediaItem Class Reference</em> and <em>MPMediaItemCollection Class Reference</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.UP_MPMediaPropertyPredicate_predicateWithValue_forProperty_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.UP_MPMediaPropertyPredicate_predicateWithValue_forProperty_comparisonType_(System.String,System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.UP_MPMediaPropertyPredicate_get_comparisonType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.UP_MPMediaPropertyPredicate_get_property(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.UP_MPMediaPropertyPredicate_get_value(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaPropertyPredicate alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.ClassExists">
            <summary>
            Returns whether the native MPMediaPropertyPredicate class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.Predicate(System.Object,System.String)">
            <summary>
            Creates a media property predicate with the default comparison type.
            <br></br>Equivalent to the native <c>predicateWithValue:forProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicateWithValue:</em>
                <p>The property value that you want to match when you query the iPod library. For example, if you specify the <c>MPMediaItemPropertyArtist</c> constant in the <em>forProperty</em> parameter, in this parameter you supply a string containing the artist name.</p>
                <em>forProperty:</em>
                <p>A so-called <em>filterable</em> property—one that can be used to build a media property predicate. See <c>General Media Item Property Keys</c> and <c>Podcast Item Property Keys</c> in <em>MPMediaItem Class Reference</em>.</p>
                <b>Return Value</b>
                <p>A media property predicate.</p>
                <b>Discussion</b>
                <p>This is a convenience method that uses the default logical comparison type of <c>MPMediaPredicateComparisonEqualTo</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ predicateWithValue:forProperty:comparisonType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="property">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.Predicate(System.Object,System.String,U3DXT.iOS.Native.MediaPlayer.MPMediaPredicateComparison)">
            <summary>
            Creates a media property predicate with a specified comparison type.
            <br></br>Equivalent to the native <c>predicateWithValue:forProperty:comparisonType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicateWithValue:</em>
                <p>The property value that you want to match when you query the iPod library. For example, if you specify the <c>MPMediaItemPropertyArtist</c> constant in the <em>forProperty</em> parameter, in this parameter you supply a string containing the artist name.</p>
                <em>forProperty:</em>
                <p>A so-called <em>filterable</em> property—one that can be used to build a media property predicate. See <c>General Media Item Property Keys</c> and <c>Podcast Item Property Keys</c> in <em>MPMediaItem Class Reference</em>.</p>
                <em>comparisonType:</em>
                <p>The logical comparison type for the predicate. See  “Media Property Predicate Comparison Types.” </p>
                <b>Return Value</b>
                <p>A media property predicate.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ predicateWithValue:forProperty:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="property">
            </param>
            <param name="comparisonType">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.comparisonType">
            <summary>
            The type of matching comparison that the media property predicate performs when you invoke a query.
            <br></br>Equivalent to the native <c>comparisonType</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For comparison types, see  “Media Property Predicate Comparison Types.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.property">
            <summary>
            The property that the media property predicate uses when you invoke a query.
            <br></br>Equivalent to the native <c>property</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaPropertyPredicate.value">
            <summary>
            The value that the media property predicate matches against when you invoke a query.
            <br></br>Equivalent to the native <c>value</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery">
            <summary>
            A media query specifies a set of media items (instances of <c>MPMediaItem</c>) from the iPod library by way of a filter and a grouping type. Filter and grouping type are both optional; an unqualified query matches the entire library.
            </summary>
            <remarks>
                <p>A query has at most one grouping type. A query’s filter can consist of any number of media property predicates. You build filters using methods described in <em>MPMediaPropertyPredicate Class Reference</em>, based on property keys described in <em>MPMediaItem Class Reference</em>.</p>
                <p>After creating and configuring a query, you use it to retrieve media items or media item collections. Collections are described in <em>MPMediaItemCollection Class Reference</em>. You can also use a query to retrieve an array of <c>MPMediaQuerySection</c> instances, useful for displaying the results of a query in the user interface of your app. See the <c>itemSections</c> and <c>collectionSections</c> properties.</p>
                <p>This class includes a number of convenience constructors that each apply a grouping type and, in most cases, match a subset of the iPod library.  Table 1  summarizes the features of these constructors. See <em>MPMediaItem Class Reference</em> for descriptions of the entries in the Filter column. See  “Media Item Collection Grouping Keys”  for descriptions of the entries in the Grouping type column.</p>
                <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                    <caption class="tablecaption">
                        <strong class="caption_number">Table 1</strong>  Convenience constructors from the MPMediaQuery class</caption>
                    <tr>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Constructor name</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Matches entire iPod library</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Filter</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Grouping type</p>
                        </th>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>albumsQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>-</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeMusic</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingAlbum</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>artistsQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>-</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeMusic</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingArtist</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>audiobooksQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>-</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeAudioBook</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingTitle</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>compilationsQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>-</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeAny</c> with <c>MPMediaItemPropertyIsCompilation</c></p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingAlbum</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>composersQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>Yes</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeAny</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingComposer</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>genresQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>Yes</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeAny</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingGenre</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>playlistsQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>Yes</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeAny</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingPlaylist</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>podcastsQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>-</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypePodcast</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingPodcastTitle</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>songsQuery</c>
                            </p>
                        </td>
                        <td>
                            <p>-</p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaTypeMusic</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>MPMediaGroupingTitle</c>
                            </p>
                        </td>
                    </tr>
                </table>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_albumsQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_artistsQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_audiobooksQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_compilationsQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_composersQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_genresQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_playlistsQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_podcastsQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_songsQuery">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_get_collections(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_get_collectionSections(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_get_filterPredicates(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_set_filterPredicates(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_get_groupingType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_set_groupingType(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_get_items(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_get_itemSections(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_addFilterPredicate_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_alloc_initWithFilterPredicates_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.UP_MPMediaQuery_removeFilterPredicate_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaQuery alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.ClassExists">
            <summary>
            Returns whether the native MPMediaQuery class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.AlbumsQuery">
            <summary>
            Creates a media query that matches music items and that groups and sorts collections by album name.
            <br></br>Equivalent to the native <c>albumsQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches media items of type <c>MPMediaTypeMusic</c> and has a grouping type of <c>MPMediaGroupingAlbum</c>.</p>
                <b>Discussion</b>
                <p>A media item can have more than one media type; for example, an item could be of types “music” and “podcast.” An <c>albumsQuery</c> query matches all <c>MPMediaTypeMusic</c> items, whether or not they are also of other media types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.ArtistsQuery">
            <summary>
            Creates a media query that matches music items and that groups and sorts collections by artist name.
            <br></br>Equivalent to the native <c>artistsQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches media items of type <c>MPMediaTypeMusic</c> and has a grouping type of <c>MPMediaGroupingArtist</c>.</p>
                <b>Discussion</b>
                <p>A media item can have more than one media type; for example, an item could be of types “music” and “podcast.” An <c>artistsQuery</c> query matches all <c>MPMediaTypeMusic</c> items, whether or not they are also of other media types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.AudiobooksQuery">
            <summary>
            Creates a media query that matches audio book items and that groups and sorts collections by audio book name.
            <br></br>Equivalent to the native <c>audiobooksQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches media items of type <c>MPMediaTypeAudioBook</c> and that uses the default grouping type of <c>MPMediaGroupingTitle</c>.</p>
                <b>Discussion</b>
                <p>A media item can have more than one media type; for example, an item could be of types “music” and “podcast.” An <c>audiobooksQuery</c> query matches all <c>MPMediaTypeAudioBook</c> items, whether or not they are also of other media types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.CompilationsQuery">
            <summary>
            Creates a media query that matches compilation items and that groups and sorts collections by album name.
            <br></br>Equivalent to the native <c>compilationsQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches any media item that has the <c>MPMediaItemPropertyIsCompilation</c> property; the returned query has a grouping type of <c>MPMediaGroupingAlbum</c>.</p>
                <b>Discussion</b>
                <p>A media item can have more than one media type; for example, an item could be of types “music” and “podcast.” A <c>compilationsQuery</c> query matches all media items that have the <c>MPMediaItemPropertyIsCompilation</c> property, irrespective of their media types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.ComposersQuery">
            <summary>
            Creates a media query that matches all media items and that groups and sorts collections by composer name.
            <br></br>Equivalent to the native <c>composersQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches all media items and that has a grouping type of <c>MPMediaGroupingComposer</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.GenresQuery">
            <summary>
            Creates a media query that matches all media items and that groups and sorts collections by genre name.
            <br></br>Equivalent to the native <c>genresQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches all media items and that has a grouping type of <c>MPMediaGroupingGenre</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.PlaylistsQuery">
            <summary>
            Creates a media query that matches the entire iPod library and that groups and sorts collections by playlist name.
            <br></br>Equivalent to the native <c>playlistsQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches all media items and that has a grouping type of <c>MPMediaGroupingPlaylist</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.PodcastsQuery">
            <summary>
            Creates a media query that matches podcast items and that groups and sorts collections by podcast name.
            <br></br>Equivalent to the native <c>podcastsQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches media items of type <c>MPMediaTypePodcast</c> and that has a grouping type of <c>MPMediaGroupingPodcastTitle</c>.</p>
                <b>Discussion</b>
                <p>A media item can have more than one media type; for example, an item could be of types “music” and “podcast.” A <c>podcastsQuery</c> query matches all <c>MPMediaTypePodcast</c> items, whether or not they are also of other media types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.SongsQuery">
            <summary>
            Creates a media query that matches music items and that groups and sorts collections by song name.
            <br></br>Equivalent to the native <c>songsQuery</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A media query that matches media items of type <c>MPMediaTypeMusic</c> and has a grouping type of <c>MPMediaGroupingTitle</c>.</p>
                <b>Discussion</b>
                <p>A media item can have more than one media type; for example, an item could be of types “music” and “podcast.” A <c>songsQuery</c> query matches all <c>MPMediaTypeMusic</c> items, whether or not they are also of other media types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.collections">
            <summary>
            An array of media item collections whose contained items match the query’s media property predicate.
            <br></br>Equivalent to the native <c>collections</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The returned array of collections are grouped and sorted by the <c>groupingType</c> of the media query. The following code snippet illustrates how to use this property:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>// Specify a media query; this one matches the entire iPod library because it  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>// does not contain a media property predicate  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>MPMediaQuery *everything = [[MPMediaQuery alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>// Configure the media query to group its media items; here, grouped by artist  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[everything setGroupingType: MPMediaGroupingArtist];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>// Obtain the media item collections from the query  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *collections = [everything collections];  </pre>
                        </td>
                    </tr>
                </table>
                <p>Each element of the <c>collections</c> array now contains a media item collection. Each collection contains the media items from the iPod library by a particular artist. The elements of the array are sorted by artist name.</p>
                <p>For the available grouping types, see  “Media Item Collection Grouping Keys.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.collectionSections">
            <summary>
            An array of <c>MPMediaQuerySection</c> instances representing the section grouping of the query's specified media item collections.
            <br></br>Equivalent to the native <c>collectionSections</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property may be <c>null</c> if there is no appropriate section grouping of the media item collections.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.filterPredicates">
            <summary>
            The media property predicates of the media query.
            <br></br>Equivalent to the native <c>filterPredicates</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The <c>General Media Item Property Keys</c> and <c>Podcast Item Property Keys</c> enumerations in <em>MPMediaItem Class Reference</em> contain the keys you can use to construct predicates.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.groupingType">
            <summary>
            The grouping for collections retrieved with the media query.
            <br></br>Equivalent to the native <c>groupingType</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default grouping type is <c>MPMediaGroupingTitle</c>. See  “Media Item Collection Grouping Keys”  for the list of available grouping types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.items">
            <summary>
            An array of media items that match the media query’s predicate.
            <br></br>Equivalent to the native <c>items</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If no items match the predicate, this method returns an empty array. On error, returns <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.itemSections">
            <summary>
            An array of <c>MPMediaQuerySection</c> instances representing the section grouping of the query's specified media items.
            <br></br>Equivalent to the native <c>itemSections</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property may be <c>null</c> if there is no appropriate section grouping of the media items.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.AddFilterPredicate(U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate)">
            <summary>
            Adds a media property predicate to a query.
            <br></br>Equivalent to the native <c>addFilterPredicate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicate</em>
                <p>The media predicate to add to the set of predicates for the query.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="predicate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.#ctor(System.Object[])">
            <summary>
            Creates an instance of the native MPMediaQuery and initializes the object. Initializes a media query with a set of media property predicates.
            <br></br>Equivalent to the native <c>[[MPMediaQuery alloc] initWithFilterPredicates:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>filterPredicates</em>
                <p>The set of media property predicates to use as a filter on the iPod library.</p>
                <b>Return Value</b>
                <p>An initialized media query.</p>
                <b>Discussion</b>
                <p>
                    <em>MPMediaPropertyPredicate Class Reference</em> describes how to create media property predicates. The <c>General Media Item Property Keys</c> and <c>Podcast Item Property Keys</c> enumerations in <em>MPMediaItem Class Reference</em> contain the keys you can use to construct predicates.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="filterPredicates">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuery.RemoveFilterPredicate(U3DXT.iOS.Native.MediaPlayer.MPMediaPredicate)">
            <summary>
            Removes a filter predicate from a query.
            <br></br>Equivalent to the native <c>removeFilterPredicate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicate</em>
                <p>The media predicate to remove from the set of predicates for the query.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="predicate">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection">
            <summary>
            A media query section represents a range of media items or media item collections from within an iPod library media query. You can use sections when displaying a query’s items or collections in your app’s user interface.
            </summary>
            <remarks>
                <p>You obtain an array of media query sections by using the <c>itemSections</c> or <c>collectionSections</c> properties of a media query (an instance of the <c>MPMediaQuery</c> class). The property values of a media query section are read-only.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.UP_MPMediaQuerySection_get_range(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.UP_MPMediaQuerySection_get_title(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection" /> class.
            <br></br>Equivalent to the native <c>[[MPMediaQuerySection alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.ClassExists">
            <summary>
            Returns whether the native MPMediaQuerySection class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.range">
            <summary>
            The range in the media query's items or collections array that is represented by the media query section.
            <br></br>Equivalent to the native <c>range</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMediaQuerySection.title">
            <summary>
            The localized title of the media query section.
            <br></br>Equivalent to the native <c>title</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMediaType">
            <summary>
            Media item types, used as possible values for the <c>MPMediaItemPropertyMediaType</c> property. A media item can have more than one media item type.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.MusicVideo">
            <summary>
                <p>If set, the media item contains a music video.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeMusicVideo</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.Music">
            <summary>
                <p>If set, the media item contains music.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeMusic</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.AnyAudio">
            <summary>
                <p>If set, the media item contains an unspecified type of audio content.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeAnyAudio</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.Podcast">
            <summary>
                <p>If set, the media item contains a podcast.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypePodcast</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.Any">
            <summary>
                <p>If set, the media item contains an unspecified type of audio.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeAny</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.VideoITunesU">
            <summary>
                <p>If set, the media item contains an iTunes U video.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeVideoITunesU</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.AudioITunesU">
            <summary>
            null
            <br></br>Equivalent to the native <c>MPMediaTypeAudioITunesU</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.AudioBook">
            <summary>
                <p>If set, the media item contains an audio book.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeAudioBook</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.TVShow">
            <summary>
                <p>If set, the media item contains a TV show.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeTVShow</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.Movie">
            <summary>
                <p>If set, the media item contains a movie.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeMovie</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.VideoPodcast">
            <summary>
                <p>If set, the media item contains a video podcast.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeVideoPodcast</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMediaType.AnyVideo">
            <summary>
                <p>If set, the media item contains an unspecified type of video content.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMediaTypeAnyVideo</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog">
            <summary>
            A movie access log accumulates key metrics about network playback for an associated movie player that is playing streamed content. The log presents these metrics as a collection of <c>MPMovieAccessLogEvent</c> instances and also makes it available in a textual format. A movie access log describes one uninterrupted period of playback. A movie player (an instance of the <c>MPMoviePlayerController</c> class) can access this log from its <c>setAccessLog:</c> property.
            </summary>
            <remarks>
                <p>All movie access log properties are read-only.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.UP_MPMovieAccessLog_get_events(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.UP_MPMovieAccessLog_get_extendedLogData(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.UP_MPMovieAccessLog_get_extendedLogDataStringEncoding(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog" /> class.
            <br></br>Equivalent to the native <c>[[MPMovieAccessLog alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.ClassExists">
            <summary>
            Returns whether the native MPMovieAccessLog class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.events">
            <summary>
            The events in the movie access log.
            <br></br>Equivalent to the native <c>events</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>An ordered collection of <c>MPMovieAccessLogEvent</c> instances that represent the chronological sequence of events in the movie access log.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.extendedLogData">
            <summary>
            A textual version of the web server access log for the associated movie player.
            <br></br>Equivalent to the native <c>extendedLogData</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The web server access log in a textual format that conforms to the W3C Extended Log File Format for web server log files. For more information, see  http://www.w3.org/pub/WWW/TR/WD-logfile.html .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLog.extendedLogDataStringEncoding">
            <summary>
            The string encoding for the <c>extendedLogData</c> property.
            <br></br>Equivalent to the native <c>extendedLogDataStringEncoding</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For possible string encodings, see <c>String_Encodings</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent">
            <summary>
            A movie access log event represents a single piece of information for a movie access log. For a description of movie access logs, see <em>MPMovieAccessLog Class Reference</em>.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_durationWatched(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_indicatedBitrate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_numberOfBytesTransferred(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_numberOfDroppedVideoFrames(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_numberOfSegmentsDownloaded(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_numberOfServerAddressChanges(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_numberOfStalls(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_observedBitrate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_playbackSessionID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_playbackStartDate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_playbackStartOffset(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_segmentsDownloadedDuration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_serverAddress(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.UP_MPMovieAccessLogEvent_get_URI(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent" /> class.
            <br></br>Equivalent to the native <c>[[MPMovieAccessLogEvent alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.ClassExists">
            <summary>
            Returns whether the native MPMovieAccessLogEvent class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.durationWatched">
            <summary>
            The accumulated duration of the media played, in seconds.
            <br></br>Equivalent to the native <c>durationWatched</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.indicatedBitrate">
            <summary>
            The throughput required to play the stream, as advertised by the web server, in bits per second.
            <br></br>Equivalent to the native <c>indicatedBitrate</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.numberOfBytesTransferred">
            <summary>
            The accumulated number of bytes transferred.
            <br></br>Equivalent to the native <c>numberOfBytesTransferred</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the number of bytes transferred is unknown, this property’s value is negative.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.numberOfDroppedVideoFrames">
            <summary>
            The total number of dropped video frames.
            <br></br>Equivalent to the native <c>numberOfDroppedVideoFrames</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.numberOfSegmentsDownloaded">
            <summary>
            A count of media segments downloaded from the web server to your app.
            <br></br>Equivalent to the native <c>numberOfSegmentsDownloaded</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.numberOfServerAddressChanges">
            <summary>
            A count of changes to the <c>serverAddress</c> property over the last uninterrupted period of playback.
            <br></br>Equivalent to the native <c>numberOfServerAddressChanges</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.numberOfStalls">
            <summary>
            The total number of playback stalls encountered.
            <br></br>Equivalent to the native <c>numberOfStalls</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the number of playback stalls is unknown, this property’s value is negative.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.observedBitrate">
            <summary>
            The empirical throughput across all media downloaded for the movie player, in bits per second.
            <br></br>Equivalent to the native <c>observedBitrate</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.playbackSessionID">
            <summary>
            A GUID that identifies the playback session. This value is used in HTTP requests.
            <br></br>Equivalent to the native <c>playbackSessionID</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.playbackStartDate">
            <summary>
            The timestamp for when playback began for the movie log access event.
            <br></br>Equivalent to the native <c>playbackStartDate</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.playbackStartOffset">
            <summary>
            An offset into the playlist where the last uninterrupted period of playback began, in seconds.
            <br></br>Equivalent to the native <c>playbackStartOffset</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the playback start offset is unknown, this property’s value is negative.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.segmentsDownloadedDuration">
            <summary>
            The accumulated duration of the media downloaded, in seconds.
            <br></br>Equivalent to the native <c>segmentsDownloadedDuration</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the accumulated media duration is unknown, this property’s value is negative.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.serverAddress">
            <summary>
            The IP address of the web server that was the source of the last delivered media segment. Can be either an IPv4 or an IPv6 address.
            <br></br>Equivalent to the native <c>serverAddress</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieAccessLogEvent.URI">
            <summary>
            The URI of the playback item.
            <br></br>Equivalent to the native <c>URI</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieControlMode">
            <summary>
            Options for displaying movie playback controls. (<strong class="deprecated">Deprecated.</strong> Use the <c>“MPMovieControlStyle”</c> constants in conjunction with the <c>controlStyle</c> property instead.
            </summary>
            <remarks>
            ions for displaying movie playback controls. (<strong class="deprecated">Deprecated.</strong> Use the <c>“MPMovieControlStyle”</c> constants in conjunction with the <c>controlStyle</c> property instead.)
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieControlMode.VolumeOnly">
            <summary>
                <p>Display volume controls only. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieControlModeVolumeOnly</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieControlMode.Default">
            <summary>
                <p>Display the standard controls for controlling playback. This includes play/pause controls, a volume slider, and a timeline control. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieControlModeDefault</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieControlMode.Hidden">
            <summary>
                <p>Do not display any controls. This mode prevents the user from controlling playback.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieControlModeHidden</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieControlStyle">
            <summary>
            Constants describing the style of the playback controls.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieControlStyle.Default">
            <summary>
                <p>Fullscreen controls are displayed by default. </p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieControlStyleDefault</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieControlStyle.None">
            <summary>
                <p>No controls are displayed.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieControlStyleNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieControlStyle.Embedded">
            <summary>
                <p>Controls for an embedded view are displayed. The controls include a start/pause button, a scrubber bar, and a button for toggling between fullscreen and embedded display modes.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieControlStyleEmbedded</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieControlStyle.Fullscreen">
            <summary>
                <p>Controls for fullscreen playback are displayed. The controls include a start/pause button, a scrubber bar, forward and reverse seeking buttons, a button for toggling between fullscreen and embedded display modes, a button for toggling the aspect fill mode, and a Done button. Tapping the done button pauses the video and exits fullscreen mode.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieControlStyleFullscreen</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog">
            <summary>
            A movie error log contains data describing network resource playback failures for the associated movie player. The data includes timestamps indicating when each failure occurred.
            </summary>
            <remarks>
                <p>All movie error log properties are read-only.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.UP_MPMovieErrorLog_get_events(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.UP_MPMovieErrorLog_get_extendedLogData(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.UP_MPMovieErrorLog_get_extendedLogDataStringEncoding(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog" /> class.
            <br></br>Equivalent to the native <c>[[MPMovieErrorLog alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.ClassExists">
            <summary>
            Returns whether the native MPMovieErrorLog class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.events">
            <summary>
            The events in the movie error log.
            <br></br>Equivalent to the native <c>events</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>An ordered collection of <c>MPMovieErrorLogEvent</c> instances that represent the chronological sequence of events in the movie error log.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.extendedLogData">
            <summary>
            A textual version of the web server error log.
            <br></br>Equivalent to the native <c>extendedLogData</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The web server error log in a textual format that conforms to the W3C Extended Log File Format for web server log files. For more information, see  http://www.w3.org/pub/WWW/TR/WD-logfile.html .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLog.extendedLogDataStringEncoding">
            <summary>
            The string encoding for the <c>extendedLogData</c> property.
            <br></br>Equivalent to the native <c>extendedLogDataStringEncoding</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent">
            <summary>
            A movie error log event represents a single piece of information for a movie error log. For a description of movie error logs, see <em>MPMovieErrorLog Class Reference</em>.
            </summary>
            <remarks>
                <p>All movie error log event properties are read-only.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.UP_MPMovieErrorLogEvent_get_date(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.UP_MPMovieErrorLogEvent_get_errorComment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.UP_MPMovieErrorLogEvent_get_errorDomain(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.UP_MPMovieErrorLogEvent_get_errorStatusCode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.UP_MPMovieErrorLogEvent_get_playbackSessionID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.UP_MPMovieErrorLogEvent_get_serverAddress(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.UP_MPMovieErrorLogEvent_get_URI(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent" /> class.
            <br></br>Equivalent to the native <c>[[MPMovieErrorLogEvent alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.ClassExists">
            <summary>
            Returns whether the native MPMovieErrorLogEvent class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.date">
            <summary>
            The date and time when the error occurred.
            <br></br>Equivalent to the native <c>date</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.errorComment">
            <summary>
            A description of the error.
            <br></br>Equivalent to the native <c>errorComment</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.errorDomain">
            <summary>
            The network domain of the error.
            <br></br>Equivalent to the native <c>errorDomain</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.errorStatusCode">
            <summary>
            A unique error code identifier.
            <br></br>Equivalent to the native <c>errorStatusCode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the error is unknown, the value of this property is negative.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.playbackSessionID">
            <summary>
            A GUID (globally unique identifier) for the playback session.
            <br></br>Equivalent to the native <c>playbackSessionID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The GUID is used in HTTP requests.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.serverAddress">
            <summary>
            The IP address of the web server that was the source of the error.
            <br></br>Equivalent to the native <c>serverAddress</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMovieErrorLogEvent.URI">
            <summary>
            The URI of the item being played when the error occurred.
            <br></br>Equivalent to the native <c>URI</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieFinishReason">
            <summary>
            Constants describing the reason that playback ended.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieFinishReason.PlaybackEnded">
            <summary>
                <p>The end of the movie was reached.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieFinishReasonPlaybackEnded</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieFinishReason.PlaybackError">
            <summary>
                <p>There was an error during playback.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieFinishReasonPlaybackError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieFinishReason.UserExited">
            <summary>
                <p>The user stopped playback.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieFinishReasonUserExited</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieLoadState">
            <summary>
            Constants describing the network load state of the movie player.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieLoadState.PlaythroughOK">
            <summary>
                <p>Enough data has been buffered for playback to continue uninterrupted.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieLoadStatePlaythroughOK</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieLoadState.Playable">
            <summary>
                <p>The buffer has enough data that playback can begin, but it may run out of data before playback finishes.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieLoadStatePlayable</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieLoadState.Stalled">
            <summary>
                <p>The buffering of data has stalled. If started now, playback may pause automatically if the player runs out of buffered data.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieLoadStateStalled</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieLoadState.Unknown">
            <summary>
                <p>The load state is not known.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieLoadStateUnknown</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieMediaTypeMask">
            <summary>
            Specifies the types of content available in the movie file.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can OR the specified constants together to specify a movie </p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieMediaTypeMask.None">
            <summary>
                <p>The types of media available in the media are not yet known.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieMediaTypeMaskNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieMediaTypeMask.Video">
            <summary>
                <p>The movie file contains video media.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieMediaTypeMaskVideo</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieMediaTypeMask.Audio">
            <summary>
                <p>The movie file contains audio media.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieMediaTypeMaskAudio</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMoviePlaybackState">
            <summary>
            Constants describing the current playback state of the movie player.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlaybackState.Stopped">
            <summary>
                <p>Playback is currently stopped. Playback will commence from the beginning of the movie.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlaybackStateStopped</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlaybackState.Playing">
            <summary>
                <p>Playback is currently under way.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlaybackStatePlaying</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlaybackState.SeekingBackward">
            <summary>
                <p>The movie player is currently seeking towards the beginning of the movie.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlaybackStateSeekingBackward</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlaybackState.Paused">
            <summary>
                <p>Playback is currently paused. Playback will resume from the point where it was paused.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlaybackStatePaused</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlaybackState.Interrupted">
            <summary>
                <p>Playback is temporarily interrupted, perhaps because the buffer ran out of content.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlaybackStateInterrupted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlaybackState.SeekingForward">
            <summary>
                <p>The movie player is currently seeking towards the end of the movie.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlaybackStateSeekingForward</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController">
            <summary>
            A movie player (of type <c>MPMoviePlayerController</c>) manages the playback of a movie from a file or a network stream. Playback occurs in a view owned by the movie player and takes place either fullscreen or inline. You can incorporate a movie player’s view into a view hierarchy owned by your app, or use an <c>MPMoviePlayerViewController</c> object to manage the presentation for you.
            </summary>
            <remarks>
                <p>Movie players (iOS 4.3 and later) support wireless movie playback to AirPlay-enabled hardware such as Apple TV. The movie player presents a control that allows the user to choose AirPlay-enabled hardware for playback when such hardware is in range. Starting in iOS 5.0, AirPlay playback is enabled by default. To disable AirPlay in your app, set the <c>allowsAirPlay</c> property to <c>false</c>.</p>
                <p>When you add a movie player’s view to your app’s view hierarchy, be sure to size the frame correctly, as shown here:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>MPMoviePlayerController *player =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        [[MPMoviePlayerController alloc] initWithContentURL: myURL];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[player prepareToPlay];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[player.view setFrame: myView.bounds];  // player's frame must match parent's  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[myView addSubview: player.view];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>// ...  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[player play];  </pre>
                        </td>
                    </tr>
                </table>
                <p>Consider a movie player view to be an opaque structure. You can add your own custom subviews to layer content on top of the movie but you must never modify any of its existing subviews.</p>
                <p>In addition to layering content on top of a movie, you can provide custom background content by adding subviews to the view in the <c>backgroundView</c> property. Custom subviews are supported in both inline and fullscreen playback modes but you must adjust the positions of your views when entering or exiting fullscreen mode. Use the <c>MPMoviePlayerWillEnterFullscreenNotification</c> and <c>MPMoviePlayerWillExitFullscreenNotification</c> notifications to detect changes to and from fullscreen mode.</p>
                <p>This class supports programmatic control of movie playback, and user-based control via buttons supplied by the movie player. You can control most aspects of playback programmatically using the methods and properties of the <c>MPMediaPlayback</c> protocol, to which this class conforms. The methods and properties of that protocol let you start and stop playback, seek forward and backward through the movie’s content, and even change the playback rate. In addition, the <c>controlStyle</c> property of this class lets you display a set of standard system controls that allow the user to manipulate playback. You can also set the <c>shouldAutoplay</c> property for network-based content to start automatically.</p>
                <p>You typically specify the movie you want to play when you create a new <c>MPMoviePlayerController</c> object. However, you can also change the currently playing movie by changing the value in the <c>contentURL</c> property. Changing this property lets you reuse the same movie player controller object in multiple places. For performance reasons you may want to play movies as local files. Do this by first downloading them to a local directory.</p>
                <p>
                    <strong>Note:</strong> Although you can create multiple <c>MPMoviePlayerController</c> objects and present their views in your interface, only one movie player at a time can play its movie.</p>
                <p>
                </p>
                <p>To facilitate the creation of video bookmarks or chapter links for a long movie, the <c>MPMoviePlayerController</c> class defines methods for generating thumbnail images at specific times within a movie. You can request a single thumbnail image using the <c>thumbnailImageAtTime:timeOption:</c> method or request multiple thumbnail images using the <c>requestThumbnailImagesAtTimes:timeOption:</c> method.</p>
                <p>To play a network stream whose URL requires access credentials, first create an appropriate <c>NSURLCredential</c> object. Do this by calling, for example, the <c>initWithUser:password:persistence:</c> method, as shown here:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSURLCredential *credential = [[NSURLCredential alloc]  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                        initWithUser: "userName"  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                            password: "password"  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                         persistence: NSURLCredentialPersistenceForSession];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>self.credential = credential;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[credential release];  </pre>
                        </td>
                    </tr>
                </table>
                <p>In addition, create an appropriate <c>NSURLProtectionSpace</c> object, as shown here. Make appropriate modifications for the realm you are accessing:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSURLProtectionSpace *protectionSpace = [[NSURLProtectionSpace alloc]  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                            initWithHost: "@streams.mydomain.com"  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                                    port: 80  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                                protocol: "http"  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                                   realm: "mydomain.com"  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                    authenticationMethod: NSURLAuthenticationMethodDefault];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>self.protectionSpace = protectionSpace;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[protectionSpace release];  </pre>
                        </td>
                    </tr>
                </table>
                <p>Add the URL credential and the protection space to the  Singleton  <c>NSURLCredentialStorage</c> object. Do this by calling, for example, the <c>setCredential:forProtectionSpace:</c> method, as shown here:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>[[NSURLCredentialStorage sharedCredentialStorage]  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                    setDefaultCredential: credential  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                      forProtectionSpace: protectionSpace];  </pre>
                        </td>
                    </tr>
                </table>
                <p>With the credential and protection space information in place, you can then play the protected stream.</p>
                <b>Movie Player Notifications</b>
                <p>A movie player generates notifications to keep your app informed about the state of movie playback. In addition to being notified when playback finishes, your app can be notified in the following situations:</p>
                <ul class="ul">
                    <li class="li">
                        <p>When the movie player begins playing, is paused, or begins seeking forward or backward</p>
                    </li>
                    <li class="li">
                        <p>When AirPlay playback starts or ends</p>
                    </li>
                    <li class="li">
                        <p>When the scaling mode of the movie changes</p>
                    </li>
                    <li class="li">
                        <p>When the movie enters or exits fullscreen mode</p>
                    </li>
                    <li class="li">
                        <p>When the load state for network-based movies changes</p>
                    </li>
                    <li class="li">
                        <p>When meta-information about the movie itself becomes available</p>
                    </li>
                </ul>
                <p>For more information, see the Notifications section in this document.</p>
                <b>Supported Formats</b>
                <p>This class plays any movie or audio file supported in iOS. This includes both streamed content and fixed-length files. For movie files, this typically means files with the extensions <c>.mov</c>, <c>.mp4</c>, <c>.mpv</c>, and <c>.3gp</c> and using one of the following compression standards:</p>
                <ul class="ul">
                    <li class="li">
                        <p>H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps. (The Baseline profile does not support B frames.)</p>
                    </li>
                    <li class="li">
                        <p>MPEG-4 Part 2 video (Simple Profile)</p>
                    </li>
                </ul>
                <p>If you use this class to play audio files, it displays a white screen with a QuickTime logo while the audio plays. For audio files, this class supports AAC-LC audio at up to 48 kHz, and MP3 (MPEG-1 Audio Layer 3) up to 48 kHz, stereo audio.</p>
                <b>Behavior in iOS 4.3 and Earlier</b>
                <p>In iOS 4.3 and earlier, a new movie player was automatically prepared to play. Starting in iOS 5.0, in order to facilitate finer-grained playback control, a new movie player is not automatically prepared to play. See the discussion for the <c>initWithContentURL:</c> instance method.</p>
                <p>Also, AirPlay was disabled by default in iOS 4.3 and earlier. Starting in iOS 5.0, the default for the <c>allowsAirPlay</c> property is <c>true</c>.</p>
                <b>Behavior in iOS 3.1 and Earlier</b>
                <p>In iOS 3.1 and earlier, this class implemented a full-screen movie player only. After creating the movie player and initializing it with a single movie file, you called the <c>play</c> method to present the movie. (The definition of the <c>play</c> method has since moved out of this class and into the <c>MPMediaPlayback</c> protocol.) The movie player object itself handled the actual presentation of the movie content. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerFullscreenAnimationDurationUserInfoKey">
            <summary>
                <p>The value of this key is an <c>double</c> containing a double value. This value represents the duration (measured in seconds) of the animation used to transition in or out of full-screen mode.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerFullscreenAnimationDurationUserInfoKey</c> constant.
            </summary>
            <remarks>
            The following keys may be found in the <em>userInfo</em> dictionary of notifications for transitioning in or out of full-screen mode.
            <p></p><p></p>This is a constant for "Fullscreen Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerFullscreenAnimationCurveUserInfoKey">
            <summary>
                <p>The value of this key is an <c>double</c> containing an integer value that represents one of the <c>UIViewAnimationCurve</c> constants.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerFullscreenAnimationCurveUserInfoKey</c> constant.
            </summary>
            <remarks>
            The following keys may be found in the <em>userInfo</em> dictionary of notifications for transitioning in or out of full-screen mode.
            <p></p><p></p>This is a constant for "Fullscreen Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerPlaybackDidFinishReasonUserInfoKey">
            <summary>
                <p>The value of this key is an <c>double</c> containing an integer value that represents one of the <c>“MPMovieFinishReason”</c> constants.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerPlaybackDidFinishReasonUserInfoKey</c> constant.
            </summary>
            <remarks>
            The following key may be found in the userInfo dictionary of a <c>MPMoviePlayerPlaybackDidFinishNotification</c> notification.
            <p></p><p></p>This is a constant for "Playback Finished Notification Key".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerThumbnailImageKey">
            <summary>
                <p>The value of this key is a <c>UIImage</c> object containing the image that was obtained for the desired frame.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerThumbnailImageKey</c> constant.
            </summary>
            <remarks>
            The following keys may be found in the <em>userInfo</em> dictionary of a <c>MPMoviePlayerThumbnailImageRequestDidFinishNotification</c> notification.
            <p></p><p></p>This is a constant for "Thumbnail Notification User Info Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerThumbnailTimeKey">
            <summary>
                <p>The value of this key is a <c>double</c> object containing a double value. This value represents the actual time (measured in seconds) from the beginning of the movie at which the image was captured.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerThumbnailTimeKey</c> constant.
            </summary>
            <remarks>
            The following keys may be found in the <em>userInfo</em> dictionary of a <c>MPMoviePlayerThumbnailImageRequestDidFinishNotification</c> notification.
            <p></p><p></p>This is a constant for "Thumbnail Notification User Info Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerThumbnailErrorKey">
            <summary>
                <p>The value of this key is an <c>NSError</c> object identifying the error that occurred, if any.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerThumbnailErrorKey</c> constant.
            </summary>
            <remarks>
            The following keys may be found in the <em>userInfo</em> dictionary of a <c>MPMoviePlayerThumbnailImageRequestDidFinishNotification</c> notification.
            <p></p><p></p>This is a constant for "Thumbnail Notification User Info Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMovieDurationAvailableNotification">
            <summary>
            Constant name for the native <c>MPMovieDurationAvailableNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.DurationAvailable">
            <summary>
                <b>MPMovieDurationAvailableNotification</b> Posted when the duration of a movie has been determined. There is no <em>userInfo</em> dictionary. <p>To retrieve the duration of a movie, access the movie player’s <c>duration</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieDurationAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMovieMediaTypesAvailableNotification">
            <summary>
            Constant name for the native <c>MPMovieMediaTypesAvailableNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MediaTypesAvailable">
            <summary>
                <b>MPMovieMediaTypesAvailableNotification</b> Posted when the available media types in a movie are determined. There is no <em>userInfo</em> dictionary. <p>To retrieve the available media types in a movie—audio, video, or both—access the movie player’s <c>movieMediaTypes</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieMediaTypesAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMovieNaturalSizeAvailableNotification">
            <summary>
            Constant name for the native <c>MPMovieNaturalSizeAvailableNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.NaturalSizeAvailable">
            <summary>
                <b>MPMovieNaturalSizeAvailableNotification</b> Posted when the natural frame size of a movie is first determined or subsequently changes. There is no <em>userInfo</em> dictionary. <p>To retrieve the natural frame size for a movie, access the movie player’s <c>naturalSize</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieNaturalSizeAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerContentPreloadDidFinishNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerContentPreloadDidFinishNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.ContentPreloadDidFinish">
            <summary>
                <b>MPMoviePlayerContentPreloadDidFinishNotification</b> Posted when a movie is in memory and ready to play. The movie player whose state has changed is available as the object associated with the notification. If an error occurred during loading, the <c>userInfo</c> dictionary of this notification contains a key with the name “error” whose value is the <c>NSError</c> object describing the problem. (<strong class="deprecated">Deprecated.</strong> Use the <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification to determine the readiness of the player.) <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li><li>Deprecated in iOS 3.2.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerContentPreloadDidFinishNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerDidEnterFullscreenNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerDidEnterFullscreenNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.DidEnterFullscreen">
            <summary>
                <b>MPMoviePlayerDidEnterFullscreenNotification</b> Posted when a movie player has entered full-screen mode. There is no <em>userInfo</em> dictionary. <p>A movie player can enter full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerDidEnterFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerDidExitFullscreenNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerDidExitFullscreenNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.DidExitFullscreen">
            <summary>
                <b>MPMoviePlayerDidExitFullscreenNotification</b> Posted when a movie player has exited full-screen mode. There is no <em>userInfo</em> dictionary.   <p>A movie player can exit full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerDidExitFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.IsAirPlayVideoActiveDidChange">
            <summary>
                <b>MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</b> Posted when a movie player has started or ended playing a movie via AirPlay. There is no <em>userInfo</em> dictionary. <p>To find out whether AirPlay playback started or stopped, query the <c>airPlayVideoActive</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 5.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerLoadStateDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.LoadStateDidChange">
            <summary>
                <b>MPMoviePlayerLoadStateDidChangeNotification</b> Posted when a movie player’s network buffering state has changed. There is no <c>userInfo</c> dictionary. <p>To retrieve the current load state of a movie player, access its <c>loadState</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerNowPlayingMovieDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerNowPlayingMovieDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.NowPlayingMovieDidChange">
            <summary>
                <b>MPMoviePlayerNowPlayingMovieDidChangeNotification</b> Posted when the currently playing movie has changed. There is no <c>userInfo</c> dictionary. <p>To retrieve the URL for currently playing movie, access the movie player’s <c>contentURL</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerNowPlayingMovieDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerPlaybackDidFinishNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerPlaybackDidFinishNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.PlaybackDidFinish">
            <summary>
                <b>MPMoviePlayerPlaybackDidFinishNotification</b> Posted when a movie has finished playing. The <c>userInfo</c> dictionary of this notification contains the <c>MPMoviePlayerPlaybackDidFinishReasonUserInfoKey</c> key, which indicates the reason that playback finished. This notification is also sent when playback fails because of an error. <p>The movie player whose state has changed is available as the object associated with the notification. </p><p>This notification is <em>not</em> sent when a movie is displaying in fullscreen mode and the user taps Done. The Done button pauses playback and causes the movie player to exit fullscreen mode. To detect this scenario, register for other notifications such as <c>MPMoviePlayerDidExitFullscreenNotification</c>.</p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerPlaybackDidFinishNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerPlaybackStateDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerPlaybackStateDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.PlaybackStateDidChange">
            <summary>
                <b>MPMoviePlayerPlaybackStateDidChangeNotification</b> Posted when a movie player’s playback state has changed. There is no <c>userInfo</c> dictionary. <p>Playback state can change programmatically (see <em>MPMediaPlayback Protocol Reference</em>) or by user interaction. To retrieve the playback state of a movie player, access its <c>playbackState</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerPlaybackStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerReadyForDisplayDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerReadyForDisplayDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.ReadyForDisplayDidChange">
            <summary>
                <b>MPMoviePlayerReadyForDisplayDidChangeNotification</b> Posted when the ready for display state changes. <p>To check whether a movie player is ready for display, access its <c>readyForDisplay</c> property. The movie player whose display state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 6.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerReadyForDisplayDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerScalingModeDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerScalingModeDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.ScalingModeDidChange">
            <summary>
                <b>MPMoviePlayerScalingModeDidChangeNotification</b> Posted when the scaling mode of a movie player has changed. There is no <c>userInfo</c> dictionary. <p>Scaling mode can change programmatically or by user interaction. To set or retrieve the scaling mode of a movie player, access its <c>scalingMode</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerScalingModeDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerThumbnailImageRequestDidFinishNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerThumbnailImageRequestDidFinishNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.ThumbnailImageRequestDidFinish">
            <summary>
                <b>MPMoviePlayerThumbnailImageRequestDidFinishNotification</b> Posted when a request to capture a thumbnail from a movie has finished whether the request succeeded or failed. Upon successful capture of a thumbnail, the <em>userInfo</em> dictionary contains values for the following keys: <ul class="ul"><li class="li"><p><c>MPMoviePlayerThumbnailImageKey</c></p></li><li class="li"><p><c>MPMoviePlayerThumbnailTimeKey</c></p></li></ul><p>If the capture request finished with an error, the <em>userInfo</em> dictionary contains values for the following two keys:</p><ul class="ul"><li class="li"><p><c>MPMoviePlayerThumbnailErrorKey</c></p></li><li class="li"><p><c>MPMoviePlayerThumbnailTimeKey</c></p></li></ul><p>The movie player whose state has changed is available as the object associated with the notification. The methods to use for capturing movie thumbnails are described in  “Generating Thumbnail Images.” </p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerThumbnailImageRequestDidFinishNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerWillEnterFullscreenNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerWillEnterFullscreenNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.WillEnterFullscreen">
            <summary>
                <b>MPMoviePlayerWillEnterFullscreenNotification</b> Posted when a movie player is about to enter full-screen mode. The <em>userInfo</em> dictionary contains keys whose values describe the transition animation used to enter full-screen mode. See  “Fullscreen Notification Keys.”  <p>A movie player can enter full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerWillEnterFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMoviePlayerWillExitFullscreenNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerWillExitFullscreenNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.WillExitFullscreen">
            <summary>
                <b>MPMoviePlayerWillExitFullscreenNotification</b> Posted when a movie player is about to exit full-screen mode. The <em>userInfo</em> dictionary contains keys whose values describe the transition animation used to exit full-screen mode. See  “Fullscreen Notification Keys.”  <p>A movie player can exit full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerWillExitFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMovieSourceTypeAvailableNotification">
            <summary>
            Constant name for the native <c>MPMovieSourceTypeAvailableNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.SourceTypeAvailable">
            <summary>
                <b>MPMovieSourceTypeAvailableNotification</b> Posted when the source type of a movie was previously unknown and is newly available. There is no <em>userInfo</em> dictionary. <p>To retrieve the source type of the movie, access the movie player’s <c>movieSourceType</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieSourceTypeAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MPMediaPlaybackIsPreparedToPlayDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.MediaPlaybackIsPreparedToPlayDidChange">
            <summary>
                <b>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</b> Posted upon change in the prepared-to-play state of an object conforming to the <c>MPMediaPlayback</c> protocol. The object whose state has changed is available as the object associated with the notification. <b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><b>Declared In</b><c class="HeaderFile">MPMediaPlayback.h</c><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>MPMoviePlayerController</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.DurationAvailable">
            <summary>
                <b>MPMovieDurationAvailableNotification</b> Posted when the duration of a movie has been determined. There is no <em>userInfo</em> dictionary. <p>To retrieve the duration of a movie, access the movie player’s <c>duration</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieDurationAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.MediaTypesAvailable">
            <summary>
                <b>MPMovieMediaTypesAvailableNotification</b> Posted when the available media types in a movie are determined. There is no <em>userInfo</em> dictionary. <p>To retrieve the available media types in a movie—audio, video, or both—access the movie player’s <c>movieMediaTypes</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieMediaTypesAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.NaturalSizeAvailable">
            <summary>
                <b>MPMovieNaturalSizeAvailableNotification</b> Posted when the natural frame size of a movie is first determined or subsequently changes. There is no <em>userInfo</em> dictionary. <p>To retrieve the natural frame size for a movie, access the movie player’s <c>naturalSize</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieNaturalSizeAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.ContentPreloadDidFinish">
            <summary>
                <b>MPMoviePlayerContentPreloadDidFinishNotification</b> Posted when a movie is in memory and ready to play. The movie player whose state has changed is available as the object associated with the notification. If an error occurred during loading, the <c>userInfo</c> dictionary of this notification contains a key with the name “error” whose value is the <c>NSError</c> object describing the problem. (<strong class="deprecated">Deprecated.</strong> Use the <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification to determine the readiness of the player.) <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li><li>Deprecated in iOS 3.2.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerContentPreloadDidFinishNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.DidEnterFullscreen">
            <summary>
                <b>MPMoviePlayerDidEnterFullscreenNotification</b> Posted when a movie player has entered full-screen mode. There is no <em>userInfo</em> dictionary. <p>A movie player can enter full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerDidEnterFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.DidExitFullscreen">
            <summary>
                <b>MPMoviePlayerDidExitFullscreenNotification</b> Posted when a movie player has exited full-screen mode. There is no <em>userInfo</em> dictionary.   <p>A movie player can exit full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerDidExitFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.IsAirPlayVideoActiveDidChange">
            <summary>
                <b>MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</b> Posted when a movie player has started or ended playing a movie via AirPlay. There is no <em>userInfo</em> dictionary. <p>To find out whether AirPlay playback started or stopped, query the <c>airPlayVideoActive</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 5.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.LoadStateDidChange">
            <summary>
                <b>MPMoviePlayerLoadStateDidChangeNotification</b> Posted when a movie player’s network buffering state has changed. There is no <c>userInfo</c> dictionary. <p>To retrieve the current load state of a movie player, access its <c>loadState</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.NowPlayingMovieDidChange">
            <summary>
                <b>MPMoviePlayerNowPlayingMovieDidChangeNotification</b> Posted when the currently playing movie has changed. There is no <c>userInfo</c> dictionary. <p>To retrieve the URL for currently playing movie, access the movie player’s <c>contentURL</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerNowPlayingMovieDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.PlaybackDidFinish">
            <summary>
                <b>MPMoviePlayerPlaybackDidFinishNotification</b> Posted when a movie has finished playing. The <c>userInfo</c> dictionary of this notification contains the <c>MPMoviePlayerPlaybackDidFinishReasonUserInfoKey</c> key, which indicates the reason that playback finished. This notification is also sent when playback fails because of an error. <p>The movie player whose state has changed is available as the object associated with the notification. </p><p>This notification is <em>not</em> sent when a movie is displaying in fullscreen mode and the user taps Done. The Done button pauses playback and causes the movie player to exit fullscreen mode. To detect this scenario, register for other notifications such as <c>MPMoviePlayerDidExitFullscreenNotification</c>.</p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerPlaybackDidFinishNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.PlaybackStateDidChange">
            <summary>
                <b>MPMoviePlayerPlaybackStateDidChangeNotification</b> Posted when a movie player’s playback state has changed. There is no <c>userInfo</c> dictionary. <p>Playback state can change programmatically (see <em>MPMediaPlayback Protocol Reference</em>) or by user interaction. To retrieve the playback state of a movie player, access its <c>playbackState</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerPlaybackStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.ReadyForDisplayDidChange">
            <summary>
                <b>MPMoviePlayerReadyForDisplayDidChangeNotification</b> Posted when the ready for display state changes. <p>To check whether a movie player is ready for display, access its <c>readyForDisplay</c> property. The movie player whose display state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 6.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerReadyForDisplayDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.ScalingModeDidChange">
            <summary>
                <b>MPMoviePlayerScalingModeDidChangeNotification</b> Posted when the scaling mode of a movie player has changed. There is no <c>userInfo</c> dictionary. <p>Scaling mode can change programmatically or by user interaction. To set or retrieve the scaling mode of a movie player, access its <c>scalingMode</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerScalingModeDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.ThumbnailImageRequestDidFinish">
            <summary>
                <b>MPMoviePlayerThumbnailImageRequestDidFinishNotification</b> Posted when a request to capture a thumbnail from a movie has finished whether the request succeeded or failed. Upon successful capture of a thumbnail, the <em>userInfo</em> dictionary contains values for the following keys: <ul class="ul"><li class="li"><p><c>MPMoviePlayerThumbnailImageKey</c></p></li><li class="li"><p><c>MPMoviePlayerThumbnailTimeKey</c></p></li></ul><p>If the capture request finished with an error, the <em>userInfo</em> dictionary contains values for the following two keys:</p><ul class="ul"><li class="li"><p><c>MPMoviePlayerThumbnailErrorKey</c></p></li><li class="li"><p><c>MPMoviePlayerThumbnailTimeKey</c></p></li></ul><p>The movie player whose state has changed is available as the object associated with the notification. The methods to use for capturing movie thumbnails are described in  “Generating Thumbnail Images.” </p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerThumbnailImageRequestDidFinishNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.WillEnterFullscreen">
            <summary>
                <b>MPMoviePlayerWillEnterFullscreenNotification</b> Posted when a movie player is about to enter full-screen mode. The <em>userInfo</em> dictionary contains keys whose values describe the transition animation used to enter full-screen mode. See  “Fullscreen Notification Keys.”  <p>A movie player can enter full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerWillEnterFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.WillExitFullscreen">
            <summary>
                <b>MPMoviePlayerWillExitFullscreenNotification</b> Posted when a movie player is about to exit full-screen mode. The <em>userInfo</em> dictionary contains keys whose values describe the transition animation used to exit full-screen mode. See  “Fullscreen Notification Keys.”  <p>A movie player can exit full screen mode programmatically (see the <c>setFullscreen:animated:</c> method) or by user interaction. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerWillExitFullscreenNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.SourceTypeAvailable">
            <summary>
                <b>MPMovieSourceTypeAvailableNotification</b> Posted when the source type of a movie was previously unknown and is newly available. There is no <em>userInfo</em> dictionary. <p>To retrieve the source type of the movie, access the movie player’s <c>movieSourceType</c> property. The movie player whose state has changed is available as the object associated with the notification.</p><b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMovieSourceTypeAvailableNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.AllInstances.MediaPlaybackIsPreparedToPlayDidChange">
            <summary>
                <b>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</b> Posted upon change in the prepared-to-play state of an object conforming to the <c>MPMediaPlayback</c> protocol. The object whose state has changed is available as the object associated with the notification. <b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><b>Declared In</b><c class="HeaderFile">MPMediaPlayback.h</c><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_accessLog(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_airPlayVideoActive(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_allowsAirPlay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_allowsAirPlay(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_backgroundView(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_contentURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_contentURL(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_controlStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_controlStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_duration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_endPlaybackTime(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_endPlaybackTime(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_errorLog(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_fullscreen(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_fullscreen(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_initialPlaybackTime(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_initialPlaybackTime(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_loadState(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_movieMediaTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_movieSourceType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_movieSourceType(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_naturalSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_playableDuration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_playbackState(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_readyForDisplay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_repeatMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_repeatMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_scalingMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_scalingMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_shouldAutoplay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_shouldAutoplay(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_useApplicationAudioSession(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_useApplicationAudioSession(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_view(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_currentPlaybackRate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_currentPlaybackRate(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_currentPlaybackTime(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_set_currentPlaybackTime(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_get_isPreparedToPlay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_cancelAllThumbnailImageRequests(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_alloc_initWithContentURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_requestThumbnailImagesAtTimes_timeOption_(System.String,System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_setFullscreen_animated_(System.String,System.Boolean,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_thumbnailImageAtTime_timeOption_(System.String,System.Double,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_timedMetadata(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_beginSeekingBackward(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_beginSeekingForward(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_endSeeking(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_pause(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_play(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_prepareToPlay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.UP_MPMoviePlayerController_stop(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController" /> class.
            <br></br>Equivalent to the native <c>[[MPMoviePlayerController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.ClassExists">
            <summary>
            Returns whether the native MPMoviePlayerController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.accessLog">
            <summary>
            A snapshot of the network playback log for the movie player if it is playing a network stream.
            <br></br>Equivalent to the native <c>accessLog</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Can be <c>null</c>. For information about movie access logs, refer to <em>MPMovieAccessLog Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.airPlayVideoActive">
            <summary>
            Indicates whether the movie player is currently playing video via AirPlay.
            <br></br>Equivalent to the native <c>airPlayVideoActive</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can query this property after receiving an <c>MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</c> notification to find out whether the AirPlay video started or stopped.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.allowsAirPlay">
            <summary>
            Specifies whether the movie player allows AirPlay movie playback.
            <br></br>Equivalent to the native <c>allowsAirPlay</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A movie player supports wireless movie playback to AirPlay-enabled hardware. By default, this property’s value is <c>true</c>.</p>
                <p>To disable AirPlay movie playback, set this property’s value to <c>false</c>. The movie player then presents a control that allows the user to choose AirPlay-enabled hardware for playback when such hardware is in range.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.backgroundView">
            <summary>
            A customizable view that is displayed behind the movie content. (read-only)
            <br></br>Equivalent to the native <c>backgroundView</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This view provides the backing content, on top of which the movie content is displayed. You can add subviews to the background view if you want to display custom background content.</p>
                <p>This view is part of the view hierarchy returned by the <c>view</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.contentURL">
            <summary>
            The URL that points to the movie file.
            <br></br>Equivalent to the native <c>contentURL</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you set this property while a movie is playing, that movie pauses and the new movie begins loading. The new movie starts playing at the beginning.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.controlStyle">
            <summary>
            The style of the playback controls.
            <br></br>Equivalent to the native <c>controlStyle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>MPMovieControlStyleDefault</c>. You can change the value of this property to change the style of the controls or to hide the controls altogether. For a list of available control styles, see  “MPMovieControlStyle.”  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.duration">
            <summary>
            The duration of the movie, measured in seconds. (read-only)
            <br></br>Equivalent to the native <c>duration</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the duration of the movie is not known, the value in this property is <c>0.0</c>. If the duration is subsequently determined, this property is updated and a <c>MPMovieDurationAvailableNotification</c> notification is posted.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.endPlaybackTime">
            <summary>
            The end time (measured in seconds) for playback of the movie.
            <br></br>Equivalent to the native <c>endPlaybackTime</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is -1, which indicates the natural end time of the movie. This property is not applicable for streamed content.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.errorLog">
            <summary>
            A snapshot of the playback failure error log for the movie player if it is playing a network stream.
            <br></br>Equivalent to the native <c>errorLog</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Can be <c>null</c>. For information about movie error logs, refer to <em>MPMovieErrorLog Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.3 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.fullscreen">
            <summary>
            A Boolean that indicates whether the movie player is in full-screen mode.
            <br></br>Equivalent to the native <c>fullscreen</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>false</c>. Changing the value of this property causes the movie player to enter or exit full-screen mode immediately. If you want to animate the transition to full-screen mode, use the <c>setFullscreen:animated:</c> method instead.</p>
                <p>Whenever the movie player enters or exits full-screen mode, it posts appropriate notifications to reflect the change. For example, upon entering full-screen mode, it posts <c>MPMoviePlayerWillEnterFullscreenNotification</c> and <c>MPMoviePlayerDidEnterFullscreenNotification</c> notifications. Upon exiting from full-screen mode, it posts <c>MPMoviePlayerWillExitFullscreenNotification</c> and <c>MPMoviePlayerDidExitFullscreenNotification</c> notifications.</p>
                <p>The value of this property may also change as a result of the user interacting with the movie player controls.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setFullscreen:animated:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.initialPlaybackTime">
            <summary>
            The time, specified in seconds within the video timeline, when playback should start.
            <br></br>Equivalent to the native <c>initialPlaybackTime</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For progressively downloaded content, playback starts at the closest key frame prior to the provided time. For video-on-demand content, playback starts at the nearest segment boundary to the provided time. For live video streams, the playback start time is measured from the start of the current playlist and is rounded to the nearest segment boundary. </p>
                <p>The default value of this property is -1, which indicates the natural start time of the movie.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.loadState">
            <summary>
            The network load state of the movie player. (read-only)
            <br></br>Equivalent to the native <c>loadState</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>See the  “MPMovieLoadState”  enumeration for possible values of this property. To be notified of changes to the load state of a movie player, register for the <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.movieMediaTypes">
            <summary>
            The types of media available in the movie. (read-only)
            <br></br>Equivalent to the native <c>movieMediaTypes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Movies can contain a combination of audio, video, or a combination of the two. The default value of this property is <c>MPMovieMediaTypeMaskNone</c>. See the  “MPMovieMediaTypeMask”  enumeration for possible values of this property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.movieSourceType">
            <summary>
            The playback type of the movie.
            <br></br>Equivalent to the native <c>movieSourceType</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>MPMovieSourceTypeUnknown</c>. This property provides a clue to the playback system as to how it should download and buffer the movie content. If you know the source type of the movie, setting the value of this property before playback begins can improve the load times for the movie content. If you do not set the source type explicitly before playback, the movie player controller must gather this information, which might delay playback.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.naturalSize">
            <summary>
            The width and height of the movie frame. (read-only)
            <br></br>Equivalent to the native <c>naturalSize</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property reports the clean aperture of the video in square pixels. Thus, the reported dimensions take into account anamorphic content and aperture modes.</p>
                <p>It is possible for the natural size of a movie to change during playback. This typically happens when the bit-rate of streaming content changes or when playback toggles between audio-only and a combination of audio and video.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.playableDuration">
            <summary>
            The amount of currently playable content. (read-only)
            <br></br>Equivalent to the native <c>playableDuration</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For progressively downloaded network content, this property reflects the amount of content that can be played now. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.playbackState">
            <summary>
            The current playback state of the movie player. (read-only)
            <br></br>Equivalent to the native <c>playbackState</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The playback state is affected by programmatic calls to play, pause, or stop the movie player. It can also be affected by user interactions or by the network, in cases where streaming content cannot be buffered fast enough.</p>
                <p>See the <c>“MPMoviePlaybackState”</c> enumeration for possible values of this property. To be notified of changes to the playback state of a movie player, register for the <c>MPMoviePlayerPlaybackStateDidChangeNotification</c> notification.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.readyForDisplay">
            <summary>
            A Boolean that indicates whether the first video frame of the movie is ready to be displayed.
            <br></br>Equivalent to the native <c>readyForDisplay</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>false</c>. This property returns <c>true</c> if the first video frame is ready to be displayed and returns <c>false</c> if there are no video tracks associated. When the value of this property changes to <c>true</c>, a <c>MPMoviePlayerReadyForDisplayDidChangeNotification</c> is sent.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.repeatMode">
            <summary>
            Determines how the movie player repeats the playback of the movie.
            <br></br>Equivalent to the native <c>repeatMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>MPMovieRepeatModeNone</c>. For a list of available repeat modes, see  “MPMovieRepeatMode.”  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.scalingMode">
            <summary>
            The scaling mode to use when displaying the movie.
            <br></br>Equivalent to the native <c>scalingMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Changing this property while the movie player is visible causes the current movie to animate to the new scaling mode.</p>
                <p>The default value of this property is <c>MPMovieScalingModeAspectFit</c>. For a list of available scaling modes, see  “MPMovieScalingMode.”  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.shouldAutoplay">
            <summary>
            A Boolean that indicates whether a movie should begin playback automatically.
            <br></br>Equivalent to the native <c>shouldAutoplay</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>true</c>. This property determines whether the playback of network-based content begins automatically when there is enough buffered data to ensure uninterrupted playback.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.useApplicationAudioSession">
            <summary>
            A Boolean value that indicates whether the movie player should use the app’s audio session. ( Deprecated in iOS 6.0.  There is not replacement for this property and its use is discouraged.)
            <br></br>Equivalent to the native <c>useApplicationAudioSession</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>true</c>. Setting this property to <c>false</c> causes the movie player to use a system-supplied audio session with a nonmixable playback category.</p>
                <p>
                    <strong>Important:</strong> In iOS 3.1 and earlier, a movie player always uses a system-supplied audio session. To obtain that same behavior in iOS 3.2 and newer, you must set this property’s value to <c>false</c>.</p>
                <p>
                </p>
                <p>When this property is <c>true</c>, the movie player shares the app’s audio session. This give you control over how the movie player content interacts with your audio and with audio from other apps, such as the iPod. For important guidance on using this feature, see  “Working with Movies and iPod Music”  in <em>Audio Session Programming Guide</em>.</p>
                <p>
                </p>
                <p>Changing the value of this property does not affect the currently playing movie. For the new setting to take effect, you must stop playback and then start it again.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                    <li>Deprecated in iOS 6.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.view">
            <summary>
            The view containing the movie content and controls. (read-only)
            <br></br>Equivalent to the native <c>view</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property contains the view used for presenting the video content. This view incorporates all the background, content, and controls needed to display movies. You can incorporate this view into your own view hierarchies or present it by itself using a view controller.</p>
                <p>To embed the view into your own view hierarchies, add it as a subview to one of your existing views. A good place to do this is in the <c>loadView</c> or <c>viewDidLoad</c> method of the custom view controller that presents your view hierarchy. You are free to change the view’s <c>frame</c> rectangle to accommodate the space available in your view hierarchy. The movie player uses the value in the <c>scalingMode</c> property to scale the movie content to match the frame you specify.</p>
                <p>If you want to present the view by itself—that is, without embedding it in an existing view hierarchy—you can use an instance of the <c>MPMoviePlayerViewController</c> class to manage the presentation of the view. That class works directly with the movie player controller to present the view by itself.</p>
                <p>You can add subviews to the view in this property. You might do this in cases where you want to display custom playback controls or add other custom content that is relevant to your app. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>backgroundView</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.currentPlaybackRate">
            <summary>
            The current playback rate for the player. (required)
            <br></br>Equivalent to the native <c>currentPlaybackRate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value represents a multiplier for the default playback rate of the current item. A value of 0.0 indicates that playback is stopped while a value of 1.0 indicates that playback is occurring at normal speed. Positive values indicate forward playback while negative values indicate reverse playback. </p>
                <p>Setting the value of this property changes the playback rate accordingly.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.currentPlaybackTime">
            <summary>
            The current position of the playhead. (required)
            <br></br>Equivalent to the native <c>currentPlaybackTime</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For video-on-demand or progressively downloaded content, this value is measured in seconds from the beginning of the current item. Changing the value of this property moves the playhead to the new location. For content streamed live from a server, this value represents the time from the beginning of the playlist when it was first loaded. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.isPreparedToPlay">
            <summary>
            A Boolean value indicating whether a movie player is ready to play. (required) (read-only)
            <br></br>Equivalent to the native <c>isPreparedToPlay</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– prepareToPlay</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.CancelAllThumbnailImageRequests">
            <summary>
            Cancels all pending asynchronous thumbnail image requests.
            <br></br>Equivalent to the native <c>cancelAllThumbnailImageRequests</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method cancels only requests made using the <c>requestThumbnailImagesAtTimes:timeOption:</c> method. It does not cancel requests made synchronously using the <c>thumbnailImageAtTime:timeOption:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native MPMoviePlayerController and initializes the object. Returns a <c>MPMoviePlayerController</c> object initialized with the movie at the specified URL.
            <br></br>Equivalent to the native <c>[[MPMoviePlayerController alloc] initWithContentURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The location of the movie file. This file must be located either in your app directory or on a remote server.</p>
                <b>Return Value</b>
                <p>The movie player object.</p>
                <b>Discussion</b>
                <p>This method initializes a movie player, but does not prepare it for playback. To prepare a new movie player for playback, call the <c>prepareToPlay</c> method, described in <em>MPMediaPlayback Protocol Reference</em>.</p>
                <p>To be notified when a new movie player is ready to play, register for the <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification. You can then check load state by accessing the <c>loadState</c> property.</p>
                <p>To check for errors in URL loading, register for the <c>MPMoviePlayerPlaybackDidFinishNotification</c> notification. On error, this notification contains an <c>NSError</c> object available using the <c>"error"</c> key in the notification’s <c>userInfo</c> dictionary.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.RequestThumbnailImagesAtTimes(System.Object[],U3DXT.iOS.Native.MediaPlayer.MPMovieTimeOption)">
            <summary>
            Captures one or more thumbnail images asynchronously from the current movie.
            <br></br>Equivalent to the native <c>requestThumbnailImagesAtTimes:timeOption:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>playbackTimes</em>
                <p>An array of <c>double</c> objects containing the times at which to capture the thumbnail images. Each time value represents the number of seconds from the beginning of the current movie.</p>
                <em>option</em>
                <p>The option to use when determining which specific frame to use for each thumbnail image. For a list of possible values, see  “MPMovieTimeOption.” </p>
                <b>Discussion</b>
                <p>This method processes each thumbnail request separately and asynchronously. When the results for a single image arrive, the movie player posts a <c>MPMoviePlayerThumbnailImageRequestDidFinishNotification</c> notification with the results for that image. Notifications are posted regardless of whether the image capture was successful or failed. You should register for this notification prior to calling this method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="playbackTimes">
            </param>
            <param name="option">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.SetFullscreen(System.Boolean,System.Boolean)">
            <summary>
            Causes the movie player to enter or exit full-screen mode.
            <br></br>Equivalent to the native <c>setFullscreen:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fullscreen</em>
                <p>Specify <c>true</c> to enter full-screen mode or <c>false</c> to exit full-screen mode.</p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the transition between modes or <c>false</c> to switch immediately to the new mode.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>fullscreen</c>
                    </li>
                </ul>
            </remarks>
            <param name="fullscreen">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.ThumbnailImageAtTime(System.Double,U3DXT.iOS.Native.MediaPlayer.MPMovieTimeOption)">
            <summary>
            Captures and returns a thumbnail image from the current movie.
            <br></br>Equivalent to the native <c>thumbnailImageAtTime:timeOption:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>playbackTime</em>
                <p>The time at which to capture the thumbnail image. The time value represents the number of seconds from the beginning of the current movie. </p>
                <em>option</em>
                <p>The option to use when determining which specific frame to use for the thumbnail image. For a list of possible values, see  “MPMovieTimeOption.” </p>
                <b>Return Value</b>
                <p>An image object containing the image from the movie or <c>null</c> if the thumbnail could not be captured.</p>
                <b>Discussion</b>
                <p>This method captures the thumbnail image synchronously from the current movie (which is accessible from the <c>MPMovieSourceTypeUnknown</c> property).  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="playbackTime">
            </param>
            <param name="option">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.TimedMetadata">
            <summary>
            Obtains the most recent time-based metadata provided by the streamed movie.
            <br></br>Equivalent to the native <c>timedMetadata</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of the most recent <c>MPTimedMetadata</c> objects provided by the streamed movie.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.BeginSeekingBackward">
            <summary>
            Begins seeking backward through the media content. (required)
            <br></br>Equivalent to the native <c>beginSeekingBackward</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method to move the current playback position backward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the <c>endSeeking</c> method.  </p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.BeginSeeking">
            <summary>
            Begins seeking forward through the media content. (required)
            <br></br>Equivalent to the native <c>beginSeekingForward</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method to move the current playback position forward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the <c>endSeeking</c> method.   </p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.EndSeeking">
            <summary>
            Ends forward and backward seeking through the media content. (required)
            <br></br>Equivalent to the native <c>endSeeking</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You must call this method to end a seeking operation begun by calling either the <c>beginSeekingBackward</c> or <c>beginSeekingForward</c> method. After calling this method, the player returns to the same state it was in prior to seeking. In other words, if the item was playing before seeking began, it continues playing from the new playhead position after calling this method.</p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.Pause">
            <summary>
            Pauses playback of the current item. (required)
            <br></br>Equivalent to the native <c>pause</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If playback is not currently underway, this method has no effect. To resume playback of the current item from the pause point, call the <c>play</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.Play">
            <summary>
            Initiates playback of the current item. (required)
            <br></br>Equivalent to the native <c>play</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If playback was previously paused, this method resumes playback where it left off; otherwise, this method plays the first available item, from the beginning.</p>
                <p>If a movie player is not prepared for playback when you call this method, this method first prepares the movie player and then starts playback. To minimize playback delay, call the <c>prepareToPlay</c> method before you call this method.</p>
                <p>To be notified when a movie player is ready to play, register for the <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification. You can then check load state by accessing the movie player’s <c>loadState</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.PrepareToPlay">
            <summary>
            Prepares a movie player for playback. (required)
            <br></br>Equivalent to the native <c>prepareToPlay</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If a movie player is not already prepared to play when you call the <c>play</c> method, that method automatically calls this method. However, to minimize playback delay, call this method before you call <c>play</c>.</p>
                <p>Calling this method may interrupt the movie player’s audio session. For information on interruptions and how to resond to them, see <em>Audio Session Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerController.Stop">
            <summary>
            Ends playback of the current item. (required)
            <br></br>Equivalent to the native <c>stop</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method stops playback of the current item and resets the playhead to the start of the item. Calling the <c>play</c> method again initiates playback from the beginning of the item.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController">
            <summary>
            The <c>MPMoviePlayerViewController</c> class implements a simple view controller for displaying full-screen movies. Unlike using an <c>MPMoviePlayerController</c> object on its own to present a movie immediately, you can incorporate a movie player view controller wherever you would normally use a view controller. For example, you can present it using a tab bar or navigation bar-based interface, taking advantage of the transitions offered by those interfaces.
            </summary>
            <remarks>
                <p>To present a movie player view controller modally, you typically use the <c>presentMoviePlayerViewControllerAnimated:</c> method. This method is part of a category on the <c>UIViewController</c> class and is implemented by the Media Player framework. The <c>presentMoviePlayerViewControllerAnimated:</c> method presents a movie player view controller using the standard transition animations for presenting video content. To dismiss a modally presented movie player view controller, call the <c>dismissMoviePlayerViewControllerAnimated</c> method.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.UP_MPMoviePlayerViewController_get_moviePlayer(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.UP_MPMoviePlayerViewController_alloc_initWithContentURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.UP_MPMoviePlayerViewController_shouldAutorotateToInterfaceOrientation_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController" /> class.
            <br></br>Equivalent to the native <c>[[MPMoviePlayerViewController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.ClassExists">
            <summary>
            Returns whether the native MPMoviePlayerViewController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.moviePlayer">
            <summary>
            The movie player controller object used to present the movie. (read-only)
            <br></br>Equivalent to the native <c>moviePlayer</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The <c>MPMoviePlayerController</c> object in this property is created automatically by the receiver and cannot be changed. However, you can use the object to manage the presentation and configuration of the movie playback.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native MPMoviePlayerViewController and initializes the object. Returns a movie player view controller initialized with the specified movie.
            <br></br>Equivalent to the native <c>[[MPMoviePlayerViewController alloc] initWithContentURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>contentURL</em>
                <p>The URL that points to the content to be played.</p>
                <b>Return Value</b>
                <p>A movie player view controller initialized with the specified URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="contentURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController.ShouldAutorotateToInterfaceOrientation(U3DXT.iOS.Native.UIKit.UIInterfaceOrientation)">
            <summary>
            Returns a Boolean value indicating whether the view controller supports the specified orientation.
            <br></br>Equivalent to the native <c>shouldAutorotateToInterfaceOrientation:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>toInterfaceOrientation</em>
                <p>The orientation of the application’s user interface after the rotation. The possible values are described in <c>UIInterfaceOrientation</c>.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the view controller supports the specified orientation or <c>false</c> if it does not. </p>
                <b>Discussion</b>
                <p>This method is an override that replaces the default behavior by returning <c>true</c> for the <c>UIInterfaceOrientationPortrait</c>, <c>UIInterfaceOrientationLandscapeLeft</c>, and <c>UIInterfaceOrientationLandscapeRight</c> orientations.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="toInterfaceOrientation">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieRepeatMode">
            <summary>
            Constants describing how the movie player repeats content at the end of playback.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieRepeatMode.One">
            <summary>
                <p>The current movie is repeated when it finishes.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieRepeatModeOne</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieRepeatMode.None">
            <summary>
                <p>Content is not repeated when playback finishes</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieRepeatModeNone</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieScalingMode">
            <summary>
            Constants describing how the movie content is scaled to fit the frame of its view.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieScalingMode.AspectFit">
            <summary>
                <p>Scale the movie uniformly until one dimension fits the visible bounds of the view exactly. In the other dimension, the region between the edge of the movie and the edge of the view is filled with a black bar. The aspect ratio of the movie is preserved.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieScalingModeAspectFit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieScalingMode.AspectFill">
            <summary>
                <p>Scale the movie uniformly until the movie fills the visible bounds of the view. Content at the edges of the larger of the two dimensions is clipped so that the other dimension fits the view exactly. The aspect ratio of the movie is preserved. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieScalingModeAspectFill</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieScalingMode.Fill">
            <summary>
                <p>Scale the movie until both dimensions fit the visible bounds of the view exactly. The aspect ratio of the movie is not preserved.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieScalingModeFill</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieScalingMode.None">
            <summary>
                <p>Do not scale the movie. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieScalingModeNone</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieSourceType">
            <summary>
            Specifies the type of the movie file.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieSourceType.Streaming">
            <summary>
                <p>The movie is a live or on-demand stream. </p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieSourceTypeStreaming</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieSourceType.Unknown">
            <summary>
                <p>The movie type is not yet known.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieSourceTypeUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieSourceType.File">
            <summary>
                <p>The movie is a local file or is a file that can be downloaded from the network. </p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieSourceTypeFile</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMovieTimeOption">
            <summary>
            Constants describing which frame to use when generating thumbnail images.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieTimeOption.NearestKeyFrame">
            <summary>
                <p>Generate a thumbnail image using the nearest key frame. This frame could be several frames away from the current frame. This option generally offers better performance than trying to find the exact frame.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieTimeOptionNearestKeyFrame</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMovieTimeOption.Exact">
            <summary>
                <p>Use the exact current frame. </p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMovieTimeOptionExact</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMusicPlaybackState">
            <summary>
            Values for the <c>playbackState</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You determine a music player’s state by checking the <c>playbackState</c> property. Depending on the property’s value, you can update your application’s user interface or take other appropriate action.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlaybackState.Playing">
            <summary>
                <p>The music player is playing.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicPlaybackStatePlaying</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlaybackState.Stopped">
            <summary>
                <p>The music player is stopped.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicPlaybackStateStopped</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlaybackState.Interrupted">
            <summary>
                <p>The music player has been interrupted, such as by an incoming phone call.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicPlaybackStateInterrupted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlaybackState.SeekingForward">
            <summary>
                <p>The music player is seeking forward.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicPlaybackStateSeekingForward</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlaybackState.SeekingBackward">
            <summary>
                <p>The music player is seeking backward.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicPlaybackStateSeekingBackward</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlaybackState.Paused">
            <summary>
                <p>The music player is paused.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicPlaybackStatePaused</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController">
            <summary>
            Use an <c>MPMusicPlayerController</c> object, or music player, to play media items from the device iPod library. There are two types of music player:
            </summary>
            <remarks>
                <ul class="ul">
                    <li class="li">
                        <p>The <em>application music player</em> plays music locally within your app. It is not aware of the iPod app’s now-playing item, nor does it affect the iPod state.</p>
                    </li>
                    <li class="li">
                        <p>The <em>iPod music player</em> employs the built-in iPod app on your behalf. On instantiation, it takes on the current iPod app state, such as the identification of the now-playing item. If a user switches away from your app while music is playing, that music continues to play. The iPod app then has your music player’s most recently-set repeat mode, shuffle mode, playback state, and now-playing item.</p>
                    </li>
                </ul>
                <p>
                    <strong>Important:</strong> You must use a music player only on your app’s main thread.</p>
                <p>
                </p>
                <b>Home Sharing and iPod Music Players</b>
                <p>Starting in iOS 4, the built-in iPod and Videos apps can play media from shared libraries using Home Sharing. However, third-party apps using the Media Player framework still have access only to the device iPod library. This means that your app cannot display the title of a home-shared song in your user interface. Specifically, if the iPod app is playing a home-shared song, and you are using an iPod music player, the value of the <c>nowPlayingItem</c> property of your music player is <c>null</c>. Other playback information is available, however, when playing shared media. For example, the system does update the value of the <c>playbackState</c> property when an iPod music player is playing a shared item.</p>
                <b>Using Remote-Control Events with a Music Player</b>
                <p>Users can initiate audio playback commands through an external headset or accessory. These commands are sent to the app as remote-control events. To receive remote-control events in your app, you must use an application music player. If you use an iPod music player, your app uses the iPod app to play audio, which means that the iPod app is the “now playing” app. The iPod app receives the remote control events, not your app. However, the iPod app responds to remote control events on your behalf. For example, if your app plays audio using an iPod music player, and you switch from your app to the iOS device’s Now Playing controls, the controls work as expected. That is, you can play or pause audio or skip to the next and previous items.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.MPMusicPlayerControllerNowPlayingItemDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMusicPlayerControllerNowPlayingItemDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.NowPlayingItemDidChange">
            <summary>
                <b>MPMusicPlayerControllerNowPlayingItemDidChangeNotification</b> Posted when the currently playing media item has changed.  The object associated with the notification is the music player whose now-playing item changed. The notification has no <c>userInfo</c> dictionary. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMusicPlayerControllerNowPlayingItemDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.MPMusicPlayerControllerPlaybackStateDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMusicPlayerControllerPlaybackStateDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.PlaybackStateDidChange">
            <summary>
                <b>MPMusicPlayerControllerPlaybackStateDidChangeNotification</b> Posted when the playback state has been changed programmatically or by user action. The object associated with the notification is the music player whose playback state changed. The notification has no <c>userInfo</c> dictionary. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMusicPlayerControllerPlaybackStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.MPMusicPlayerControllerVolumeDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMusicPlayerControllerVolumeDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.VolumeDidChange">
            <summary>
                <b>MPMusicPlayerControllerVolumeDidChangeNotification</b> Posted when the audio playback volume for the music player has changed.  The object associated with the notification is the music player whose playback volume changed. The notification has no <c>userInfo</c> dictionary. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMusicPlayerControllerVolumeDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.MPMediaPlaybackIsPreparedToPlayDidChangeNotification">
            <summary>
            Constant name for the native <c>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.MediaPlaybackIsPreparedToPlayDidChange">
            <summary>
                <b>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</b> Posted upon change in the prepared-to-play state of an object conforming to the <c>MPMediaPlayback</c> protocol. The object whose state has changed is available as the object associated with the notification. <b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><b>Declared In</b><c class="HeaderFile">MPMediaPlayback.h</c><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>MPMusicPlayerController</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.AllInstances.NowPlayingItemDidChange">
            <summary>
                <b>MPMusicPlayerControllerNowPlayingItemDidChangeNotification</b> Posted when the currently playing media item has changed.  The object associated with the notification is the music player whose now-playing item changed. The notification has no <c>userInfo</c> dictionary. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMusicPlayerControllerNowPlayingItemDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.AllInstances.PlaybackStateDidChange">
            <summary>
                <b>MPMusicPlayerControllerPlaybackStateDidChangeNotification</b> Posted when the playback state has been changed programmatically or by user action. The object associated with the notification is the music player whose playback state changed. The notification has no <c>userInfo</c> dictionary. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMusicPlayerControllerPlaybackStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.AllInstances.VolumeDidChange">
            <summary>
                <b>MPMusicPlayerControllerVolumeDidChangeNotification</b> Posted when the audio playback volume for the music player has changed.  The object associated with the notification is the music player whose playback volume changed. The notification has no <c>userInfo</c> dictionary. <b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMusicPlayerControllerVolumeDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.AllInstances.MediaPlaybackIsPreparedToPlayDidChange">
            <summary>
                <b>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</b> Posted upon change in the prepared-to-play state of an object conforming to the <c>MPMediaPlayback</c> protocol. The object whose state has changed is available as the object associated with the notification. <b>Availability</b><ul><li>Available in iOS 3.2 and later.</li></ul><b>Declared In</b><c class="HeaderFile">MPMediaPlayback.h</c><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMediaPlaybackIsPreparedToPlayDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_applicationMusicPlayer">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_iPodMusicPlayer">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_indexOfNowPlayingItem(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_nowPlayingItem(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_set_nowPlayingItem(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_playbackState(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_repeatMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_set_repeatMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_shuffleMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_set_shuffleMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_volume(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_set_volume(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_currentPlaybackRate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_set_currentPlaybackRate(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_currentPlaybackTime(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_set_currentPlaybackTime(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_get_isPreparedToPlay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_beginGeneratingPlaybackNotifications(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_endGeneratingPlaybackNotifications(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_setQueueWithItemCollection_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_setQueueWithQuery_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_skipToBeginning(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_skipToNextItem(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_skipToPreviousItem(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_beginSeekingBackward(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_beginSeekingForward(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_endSeeking(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_pause(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_play(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_prepareToPlay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.UP_MPMusicPlayerController_stop(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController" /> class.
            <br></br>Equivalent to the native <c>[[MPMusicPlayerController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.ClassExists">
            <summary>
            Returns whether the native MPMusicPlayerController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.ApplicationMusicPlayer">
            <summary>
            Returns the application music player.
            <br></br>Equivalent to the native <c>applicationMusicPlayer</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The application music player.</p>
                <b>Discussion</b>
                <p>The application music player plays music locally within your app. It does not affect the iPod state. When your app moves to the background, the music player stops if it was playing.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.IPodMusicPlayer">
            <summary>
            Returns the iPod music player, which controls the iPod app’s state.
            <br></br>Equivalent to the native <c>iPodMusicPlayer</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The iPod music player.</p>
                <b>Discussion</b>
                <p>The iPod music player employs the iPod app on your behalf. On instantiation, it takes on the current iPod app state and controls that state as your app runs. Specifically, the shared state includes the following:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Repeat mode (see  “Repeat Modes” )</p>
                    </li>
                    <li class="li">
                        <p>Shuffle mode (see  “Shuffle Modes” </p>
                    </li>
                    <li class="li">
                        <p>Now-playing item (see <c>nowPlayingItem</c>)</p>
                    </li>
                    <li class="li">
                        <p>Playback state (see <c>playbackState</c>)</p>
                    </li>
                </ul>
                <p>Other aspects of iPod state, such as the on-the-go playlist, are not shared. Music that is playing continues to play when your app moves to the background.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.indexOfNowPlayingItem">
            <summary>
            The index of the now playing item in the current playback queue.
            <br></br>Equivalent to the native <c>indexOfNowPlayingItem</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property’s value is <c>NSNotFound</c> if the index is not valid—for example, if the playback queue is empty.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.nowPlayingItem">
            <summary>
            The currently-playing media item, or the media item, within a queue, that you have designated to begin playback with.
            <br></br>Equivalent to the native <c>nowPlayingItem</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>To specify that playback should begin at a particular media item in the playback queue, set this property to that item while the music player is stopped or paused.</p>
                <p>If no media item is playing or designated to play, this property’s value is <c>null</c>.</p>
                <p>If you create an iPod music player and the user plays an item from another library using Home Sharing, the value of this property is <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.playbackState">
            <summary>
            The current playback state of the music player.
            <br></br>Equivalent to the native <c>playbackState</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you configure a music player as an iPod music player, the playback state matches the playback state of the built-in iPod app. This is true whether the iPod app is using the device iPod library or a home shared library. Note, however, that when the iPod is using a home shared library, the music player’s <c>nowPlayingItem</c> property is <c>null</c>.</p>
                <p>For the available playback states, see  “Playback States.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>repeatMode</c>
                    </li>
                    <li>
                        <c>shuffleMode</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.repeatMode">
            <summary>
            The current repeat mode of the music player.
            <br></br>Equivalent to the native <c>repeatMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For the available repeat modes, see  “Repeat Modes.”  If not explicitly set, <c><!--a-->repeatMode<!--/a--></c> defaults to <c>MPMusicRepeatModeDefault</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>playbackState</c>
                    </li>
                    <li>
                        <c>shuffleMode</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.shuffleMode">
            <summary>
            The current shuffle mode of the music player.
            <br></br>Equivalent to the native <c>shuffleMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For the available shuffle modes, see  “Shuffle Modes.”  If not explicitly set, <c><!--a-->shuffleMode<!--/a--></c> defaults to <c>MPMusicShuffleModeDefault</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>playbackState</c>
                    </li>
                    <li>
                        <c>repeatMode</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.volume">
            <summary>
            The audio playback volume for the music player, in the range from 0.0 (silent) through 1.0 (maximum volume).
            <br></br>Equivalent to the native <c>volume</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A music player’s volume has a default value of 1.0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.currentPlaybackRate">
            <summary>
            The current playback rate for the player. (required)
            <br></br>Equivalent to the native <c>currentPlaybackRate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value represents a multiplier for the default playback rate of the current item. A value of 0.0 indicates that playback is stopped while a value of 1.0 indicates that playback is occurring at normal speed. Positive values indicate forward playback while negative values indicate reverse playback. </p>
                <p>Setting the value of this property changes the playback rate accordingly.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.currentPlaybackTime">
            <summary>
            The current position of the playhead. (required)
            <br></br>Equivalent to the native <c>currentPlaybackTime</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For video-on-demand or progressively downloaded content, this value is measured in seconds from the beginning of the current item. Changing the value of this property moves the playhead to the new location. For content streamed live from a server, this value represents the time from the beginning of the playlist when it was first loaded. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.isPreparedToPlay">
            <summary>
            A Boolean value indicating whether a movie player is ready to play. (required) (read-only)
            <br></br>Equivalent to the native <c>isPreparedToPlay</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– prepareToPlay</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.BeginGeneratingPlaybackNotifications">
            <summary>
            Starts the generation of playback notifications.
            <br></br>Equivalent to the native <c>beginGeneratingPlaybackNotifications</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>MPMusicPlayerControllerPlaybackStateDidChangeNotification</c>
                    </li>
                    <li>
                        <c>MPMusicPlayerControllerNowPlayingItemDidChangeNotification</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.EndGeneratingPlaybackNotifications">
            <summary>
            Ends the generation of playback notifications.
            <br></br>Equivalent to the native <c>endGeneratingPlaybackNotifications</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>MPMusicPlayerControllerPlaybackStateDidChangeNotification</c>
                    </li>
                    <li>
                        <c>MPMusicPlayerControllerNowPlayingItemDidChangeNotification</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.SetQueue(U3DXT.iOS.Native.MediaPlayer.MPMediaItemCollection)">
            <summary>
            Sets a music player’s playback queue using a media item collection.
            <br></br>Equivalent to the native <c>setQueueWithItemCollection:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>itemCollection</em>
                <p>A media item collection that you want as the playback queue. See <em>MPMediaItemCollection Class Reference</em> for a description of media item collections and how to use them.</p>
                <b>Discussion</b>
                <p>To begin playback after establishing a playback queue, call <c>play</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setQueueWithQuery:</c>
                    </li>
                </ul>
            </remarks>
            <param name="itemCollection">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.SetQueue(U3DXT.iOS.Native.MediaPlayer.MPMediaQuery)">
            <summary>
            Sets a music player’s playback queue based on a media query.
            <br></br>Equivalent to the native <c>setQueueWithQuery:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>query</em>
                <p>A media query that specifies the collection of media items that you want as the playback queue. See <em>MPMediaQuery Class Reference</em> for a description of query types and how to create them.</p>
                <b>Discussion</b>
                <p>To begin playback after establishing a playback queue, call <c>play</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setQueueWithItemCollection:</c>
                    </li>
                </ul>
            </remarks>
            <param name="query">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.SkipToBeginning">
            <summary>
            Restarts playback at the beginning of the currently playing media item.
            <br></br>Equivalent to the native <c>skipToBeginning</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– skipToNextItem</c>
                    </li>
                    <li>
                        <c>– skipToPreviousItem</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.SkipToNextItem">
            <summary>
            Starts playback of the next media item in the playback queue; or, the music player is not playing, designates the next media item as the next to be played.
            <br></br>Equivalent to the native <c>skipToNextItem</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If already at the last item in the playback queue when this method is called, ends playback.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>nowPlayingItem</c>
                    </li>
                    <li>
                        <c>– skipToBeginning</c>
                    </li>
                    <li>
                        <c>– skipToPreviousItem</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.SkipToPreviousItem">
            <summary>
            Starts playback of the previous media item in the playback queue; or, the music player is not playing, designates the previous media item as the next to be played.
            <br></br>Equivalent to the native <c>skipToPreviousItem</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If already at the first item in the playback queue when this method is called, ends playback.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>nowPlayingItem</c>
                    </li>
                    <li>
                        <c>– skipToBeginning</c>
                    </li>
                    <li>
                        <c>– skipToNextItem</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.BeginSeekingBackward">
            <summary>
            Begins seeking backward through the media content. (required)
            <br></br>Equivalent to the native <c>beginSeekingBackward</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method to move the current playback position backward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the <c>endSeeking</c> method.  </p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.BeginSeeking">
            <summary>
            Begins seeking forward through the media content. (required)
            <br></br>Equivalent to the native <c>beginSeekingForward</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method to move the current playback position forward in time at an accelerated rate. Seeking begins when you call this method and continues until you call the <c>endSeeking</c> method.   </p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.EndSeeking">
            <summary>
            Ends forward and backward seeking through the media content. (required)
            <br></br>Equivalent to the native <c>endSeeking</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You must call this method to end a seeking operation begun by calling either the <c>beginSeekingBackward</c> or <c>beginSeekingForward</c> method. After calling this method, the player returns to the same state it was in prior to seeking. In other words, if the item was playing before seeking began, it continues playing from the new playhead position after calling this method.</p>
                <p>If the underlying content is streamed, this method has no effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.Pause">
            <summary>
            Pauses playback of the current item. (required)
            <br></br>Equivalent to the native <c>pause</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If playback is not currently underway, this method has no effect. To resume playback of the current item from the pause point, call the <c>play</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.Play">
            <summary>
            Initiates playback of the current item. (required)
            <br></br>Equivalent to the native <c>play</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If playback was previously paused, this method resumes playback where it left off; otherwise, this method plays the first available item, from the beginning.</p>
                <p>If a movie player is not prepared for playback when you call this method, this method first prepares the movie player and then starts playback. To minimize playback delay, call the <c>prepareToPlay</c> method before you call this method.</p>
                <p>To be notified when a movie player is ready to play, register for the <c>MPMoviePlayerLoadStateDidChangeNotification</c> notification. You can then check load state by accessing the movie player’s <c>loadState</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.PrepareToPlay">
            <summary>
            Prepares a movie player for playback. (required)
            <br></br>Equivalent to the native <c>prepareToPlay</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If a movie player is not already prepared to play when you call the <c>play</c> method, that method automatically calls this method. However, to minimize playback delay, call this method before you call <c>play</c>.</p>
                <p>Calling this method may interrupt the movie player’s audio session. For information on interruptions and how to resond to them, see <em>Audio Session Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPMusicPlayerController.Stop">
            <summary>
            Ends playback of the current item. (required)
            <br></br>Equivalent to the native <c>stop</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method stops playback of the current item and resets the playhead to the start of the item. Calling the <c>play</c> method again initiates playback from the beginning of the item.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMusicRepeatMode">
            <summary>
            Values for the <c>repeatMode</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicRepeatMode.All">
            <summary>
                <p>The music player will repeat the current playlist.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicRepeatModeAll</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicRepeatMode.Default">
            <summary>
                <p>The user’s preferred repeat mode.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicRepeatModeDefault</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicRepeatMode.One">
            <summary>
                <p>The music player will repeat the current song.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicRepeatModeOne</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicRepeatMode.None">
            <summary>
                <p>The music player will not repeat the current song or playlist.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicRepeatModeNone</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPMusicShuffleMode">
            <summary>
            Values for the <c>shuffleMode</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicShuffleMode.Albums">
            <summary>
                <p>The playlist is shuffled by album.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicShuffleModeAlbums</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicShuffleMode.Songs">
            <summary>
                <p>The playlist is shuffled by song.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicShuffleModeSongs</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicShuffleMode.Default">
            <summary>
                <p>The user’s preferred shuffle mode.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicShuffleModeDefault</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPMusicShuffleMode.Off">
            <summary>
                <p>The playlist is not shuffled.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMusicShuffleModeOff</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter">
            <summary>
            Use a now playing info center to set now-playing information for media being played by your app.
            </summary>
            <remarks>
                <p>The system displays now-playing information on the device lock screen and in the multimedia controls in the multitasking UI. If the user directs playback of your media to Apple TV via AirPlay, the now-playing information appears on the television screen. If the user connects a device to an iPod accessory, such as in a car, the accessory may display now-playing information.</p>
                <p>
                    <strong>Important:</strong> To ensure that your app interacts successfully with the widest possible range of accessories, provide values for as many information properties as you can in the <c>nowPlayingInfo</c> dictionary.</p>
                <p>
                </p>
                <p>The information you can specify includes a subset of the properties available in the media item class (<c>MPMediaItem</c>), as well as some properties specific to this class. In iOS 5.0, the now playing info center supports the following media item property keys:</p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyAlbumTitle</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyAlbumTrackCount</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyAlbumTrackNumber</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyArtist</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyArtwork</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyComposer</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyDiscCount</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyDiscNumber</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyGenre</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyPersistentID</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyPlaybackDuration</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>MPMediaItemPropertyTitle</c>
                        </p>
                    </li>
                </ul>
                <p>Additional properties you can set are described in this document in  “Additional Metadata Properties.” </p>
                <p>You do not have direct control over which information is displayed, or its formatting. You set the values of the now playing info center dictionary according to the information you want to provide to the system. The system, or the connected accessory, handles the information’s display in a consistent manner for all apps.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.MPNowPlayingInfoPropertyPlaybackQueueIndex">
            <summary>
                <p>The index of the now-playing item in the app’s playback queue.</p>
                <p>Value is an <c>double</c> object configured as an <c>uint</c>. The playback queue uses zero-based indexing. If you want the first item in the queue to be displayed as “item 1 of 10,” for example, set the item’s index to <c>0</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPNowPlayingInfoPropertyPlaybackQueueIndex</c> constant.
            </summary>
            <remarks>
            These properties for the now playing info center dictionary supplement the available media item properties, as described in the Overview in this document.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Additional Metadata Properties".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.MPNowPlayingInfoPropertyPlaybackQueueCount">
            <summary>
                <p>The total number of items in the app’s playback queue.</p>
                <p>Value is an <c>double</c> object configured as an <c>uint</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPNowPlayingInfoPropertyPlaybackQueueCount</c> constant.
            </summary>
            <remarks>
            These properties for the now playing info center dictionary supplement the available media item properties, as described in the Overview in this document.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Additional Metadata Properties".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.MPNowPlayingInfoPropertyChapterNumber">
            <summary>
                <p>The number corresponding to the chapter currently being played.</p>
                <p>Value is an <c>double</c> object configured as an <c>uint</c>. Chapter numbering uses zero-based indexing. If you want the first chapter in the now-playing item to be displayed as “Chapter 1,” for example, set the chapter number to <c>0</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPNowPlayingInfoPropertyChapterNumber</c> constant.
            </summary>
            <remarks>
            These properties for the now playing info center dictionary supplement the available media item properties, as described in the Overview in this document.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Additional Metadata Properties".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.MPNowPlayingInfoPropertyChapterCount">
            <summary>
                <p>The total number of chapters in the now-playing item.</p>
                <p>Value is an <c>double</c> object configured as an <c>uint</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPNowPlayingInfoPropertyChapterCount</c> constant.
            </summary>
            <remarks>
            These properties for the now playing info center dictionary supplement the available media item properties, as described in the Overview in this document.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Additional Metadata Properties".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.MPNowPlayingInfoPropertyPlaybackRate">
            <summary>
                <p>The playback rate of the now-playing item, with a value of <c>1.0</c> indicating the normal playback rate.</p>
                <p>Value is an <c>double</c> object configured as a double. The default value is <c>1.0</c>. A playback rate value of <c>2.0</c> means twice the normal playback rate; a piece of media played at this rate would take half as long to play to completion. A value of <c>0.5</c> means half the normal playback rate; a piece of media played at this rate would take twice as long to play to completion.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPNowPlayingInfoPropertyPlaybackRate</c> constant.
            </summary>
            <remarks>
            These properties for the now playing info center dictionary supplement the available media item properties, as described in the Overview in this document.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Additional Metadata Properties".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.UP_MPNowPlayingInfoCenter_defaultCenter">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.UP_MPNowPlayingInfoCenter_get_nowPlayingInfo(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.UP_MPNowPlayingInfoCenter_set_nowPlayingInfo(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter" /> class.
            <br></br>Equivalent to the native <c>[[MPNowPlayingInfoCenter alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.ClassExists">
            <summary>
            Returns whether the native MPNowPlayingInfoCenter class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.DefaultCenter">
            <summary>
            Returns the singleton now playing info center.
            <br></br>Equivalent to the native <c>defaultCenter</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default now playing info center holds now-playing information for the app that is designated as the receiver for remote-control events. For information on how to configure your app to receive remote-control events, see  “Remote Control of Multimedia” .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPNowPlayingInfoCenter.nowPlayingInfo">
            <summary>
            The current now-playing information for the default now playing info center.
            <br></br>Equivalent to the native <c>nowPlayingInfo</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>To clear the now playing info center dictionary, set it to <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata">
            <summary>
            An instance of the <c>MPTimedMetadata</c> class, called a <em>timed metadata object</em>, carries time-based information within HTTP streamed media. Content providers can embed such objects when creating a stream. The properties and constants in this class let you extract the metadata as you play the stream using an <c>MPMoviePlayerController</c> object.
            </summary>
            <remarks>
                <p>For example, the provider of a live sports video stream could use <c>MPTimedMetadata</c> instances to embed game scores, with timestamps, in the stream. On the client side—that is, on the user’s device—their application could employ the properties of this class to update their app’s user interface in real time during the game.</p>
                <p>A Javascript implementation of this class is also available for use by web-based applications.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MPMoviePlayerTimedMetadataKeyLanguageCode">
            <summary>
                <p>The metadata language, expressed using ISO 639-2, in a string object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerTimedMetadataKeyLanguageCode</c> constant.
            </summary>
            <remarks>
            Dictionary keys for use with the <c>allMetadata</c> property. All keys are optional.
            <p></p><p></p>This is a constant for "Timed Metadata Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MPMoviePlayerTimedMetadataKeyInfo">
            <summary>
                <p>Arbitrary information about the timed metadata.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerTimedMetadataKeyInfo</c> constant.
            </summary>
            <remarks>
            Dictionary keys for use with the <c>allMetadata</c> property. All keys are optional.
            <p></p><p></p>This is a constant for "Timed Metadata Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MPMoviePlayerTimedMetadataKeyMIMEType">
            <summary>
                <p>The MIME type for the timed metadata.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerTimedMetadataKeyMIMEType</c> constant.
            </summary>
            <remarks>
            Dictionary keys for use with the <c>allMetadata</c> property. All keys are optional.
            <p></p><p></p>This is a constant for "Timed Metadata Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MPMoviePlayerTimedMetadataKeyName">
            <summary>
                <p>The name of the timed metadata key.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerTimedMetadataKeyName</c> constant.
            </summary>
            <remarks>
            Dictionary keys for use with the <c>allMetadata</c> property. All keys are optional.
            <p></p><p></p>This is a constant for "Timed Metadata Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MPMoviePlayerTimedMetadataKeyDataType">
            <summary>
                <p>The data type of the timed metadata.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>MPMoviePlayerTimedMetadataKeyDataType</c> constant.
            </summary>
            <remarks>
            Dictionary keys for use with the <c>allMetadata</c> property. All keys are optional.
            <p></p><p></p>This is a constant for "Timed Metadata Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MPMoviePlayerTimedMetadataUpdatedNotification">
            <summary>
            Constant name for the native <c>MPMoviePlayerTimedMetadataUpdatedNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MoviePlayerTimedMetadataUpdated">
            <summary>
                <b>MPMoviePlayerTimedMetadataUpdatedNotification</b> Posted when new timed metadata arrives. <b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerTimedMetadataUpdatedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MPMoviePlayerTimedMetadataUserInfoKey">
            <summary>
            Constant name for the native <c>MPMoviePlayerTimedMetadataUserInfoKey</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.MoviePlayerTimedMetadataUserInfoKey">
            <summary>
                <b>MPMoviePlayerTimedMetadataUserInfoKey</b> An NSArray object containing the most recent <c>MPTimedMetadata</c> objects. <b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerTimedMetadataUserInfoKey</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>MPTimedMetadata</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.AllInstances.MoviePlayerTimedMetadataUpdated">
            <summary>
                <b>MPMoviePlayerTimedMetadataUpdatedNotification</b> Posted when new timed metadata arrives. <b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerTimedMetadataUpdatedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.AllInstances.MoviePlayerTimedMetadataUserInfoKey">
            <summary>
                <b>MPMoviePlayerTimedMetadataUserInfoKey</b> An NSArray object containing the most recent <c>MPTimedMetadata</c> objects. <b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>MPMoviePlayerTimedMetadataUserInfoKey</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.UP_MPTimedMetadata_get_allMetadata(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.UP_MPTimedMetadata_get_key(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.UP_MPTimedMetadata_get_keyspace(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.UP_MPTimedMetadata_get_timestamp(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.UP_MPTimedMetadata_get_value(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata" /> class.
            <br></br>Equivalent to the native <c>[[MPTimedMetadata alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.ClassExists">
            <summary>
            Returns whether the native MPTimedMetadata class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.allMetadata">
            <summary>
            A dictionary containing all the metadata in the object. (read-only)
            <br></br>Equivalent to the native <c>allMetadata</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>To retrieve metadata from the dictionary, use the keys described in  “Timed Metadata Dictionary Keys.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.key">
            <summary>
            A key that identifies a piece of timed metadata. (read-only)
            <br></br>Equivalent to the native <c>key</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.keyspace">
            <summary>
            The namespace of the identifying key. (read-only)
            <br></br>Equivalent to the native <c>keyspace</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.timestamp">
            <summary>
            The timestamp of the metadata, in the timebase of the media stream. (read-only)
            <br></br>Equivalent to the native <c>timestamp</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPTimedMetadata.value">
            <summary>
            The timed metadata. (read-only)
            <br></br>Equivalent to the native <c>value</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPVolumeSettings">
            <summary>
            Functions belonging to MPVolumeSettings.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeSettings.UP_MPVolumeSettings_MPVolumeSettingsAlertHide">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeSettings.UP_MPVolumeSettings_MPVolumeSettingsAlertIsVisible">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeSettings.UP_MPVolumeSettings_MPVolumeSettingsAlertShow">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeSettings.AlertHide">
            <summary>
            Hides the alert panel that controls the system volume.
            <br></br>Equivalent to the native <c>MPVolumeSettingsAlertHide</c> function.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>MPVolumeSettingsAlertShow</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeSettings.AlertIsVisible">
            <summary>
            Returns a Boolean value indicating whether the volume alert panel is currently visible.
            <br></br>Equivalent to the native <c>MPVolumeSettingsAlertIsVisible</c> function.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the volume alert is visible; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>MPVolumeSettingsAlertShow</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeSettings.AlertShow">
            <summary>
            Displays an alert panel for controlling the system volume.
            <br></br>Equivalent to the native <c>MPVolumeSettingsAlertShow</c> function.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The alert panel displayed by this function floats above the contents of the current window. It contains a slider for adjusting the system volume setting and a Done button so that the user can dismiss the panel. You can also dismiss the panel programmatically using the <c>MPVolumeSettingsAlertHide</c> function.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>MPVolumeSettingsAlertHide</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MPVolumeView">
            <summary>
            Use a volume view to present the user with a slider control for setting the system audio output volume, and a button for choosing the audio output route. When first displayed, the slider’s position reflects the current system audio output volume. As the user drags the slider, the changes update the volume. If the user presses the device volume buttons while sound is playing, the slider moves to reflect the new volume.
            </summary>
            <remarks>
                <p>If there is an Apple TV or other AirPlay-enabled device in range, the route button allows the user to choose it. If there is only one audio output route available, the route button is not displayed.</p>
                <p>Use this class by embedding an instance of it in your view hierarchy. The following code snippet assumes you have placed an instance of the <c>UIView</c> class on a view using Interface Builder, sizing and positioning it as desired to contain the volume view. Point to the <c>UIView</c> instance with an outlet variable—named, in the case of this example, <c>mpVolumeViewParentView</c>. You would typically place code like that shown in  Listing 1  in your <c>viewDidLoad</c> method.</p>
                <p class="codesample clear">
                    <strong class="caption_number">Listing 1</strong>  Adding a volume view to your view hierarchy</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>mpVolumeViewParentView.backgroundColor = [UIColor clearColor];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>MPVolumeView *myVolumeView =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [[MPVolumeView alloc] initWithFrame: mpVolumeViewParentView.bounds];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[mpVolumeViewParentView addSubview: myVolumeView];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[myVolumeView release];  </pre>
                        </td>
                    </tr>
                </table>
                <p>
                </p>
                <p>When an audio output route that does not support volume control, such as A2DP, is active, the volume slider is replaced with the route name.</p>
                <p>To instead display a volume slider as an alert, use the functions described in <em>Media Player Functions Reference</em>.</p>
                <b>Customizing the Volume Slider’s Appearance</b>
                <p>The volume slider is a UISlider object. Sliders are always displayed as horizontal bars and an indicator, or <strong>thumb</strong>, notes the current value of the slider and can be moved by the user to change the setting.</p>
                <p>Slider controls draw the volume slider track using two distinct images, which are customizable. The region between the thumb and the end of the track associated with the slider’s minimum value is drawn using the <strong>minimum volume slider image</strong>. The region between the thumb and the end of the track associated with the slider’s maximum value is drawn using the <strong>maximum volume slider image</strong>. Assigning different images to each state lets you customize the appearance of the slider when it is enabled, disabled, highlighted, and so on.</p>
                <p>You can also customize the volume thumb image for the slider.</p>
                <p>
                    <strong>Note:</strong> The volume slider control provides a set of default images for both the track and thumb. If you do not specify any custom images, those images are used automatically.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_get_showsRouteButton(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_set_showsRouteButton(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_get_showsVolumeSlider(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_set_showsVolumeSlider(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_maximumVolumeSliderImageForState_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_minimumVolumeSliderImageForState_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_routeButtonImageForState_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_routeButtonRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_setMaximumVolumeSliderImage_forState_(System.String,System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_setMinimumVolumeSliderImage_forState_(System.String,System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_setRouteButtonImage_forState_(System.String,System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_setVolumeThumbImage_forState_(System.String,System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_sizeThatFits_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_volumeSliderRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_volumeThumbImageForState_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.UP_MPVolumeView_volumeThumbRectForBounds_volumeSliderRect_value_(System.String,System.String,System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.MediaPlayer.MPVolumeView" /> class.
            <br></br>Equivalent to the native <c>[[MPVolumeView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.ClassExists">
            <summary>
            Returns whether the native MPVolumeView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.showsRouteButton">
            <summary>
            Determines whether or not the route button is visible in the volume view.
            <br></br>Equivalent to the native <c>showsRouteButton</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The route button is visible by default when there is more than one audio output route available. To hide the route button, set this property’s value to <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.showsVolumeSlider">
            <summary>
            Determines whether or not the volume slider is visible in the volume view.
            <br></br>Equivalent to the native <c>showsVolumeSlider</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The volume slider is visible by default. To hide the volume slider, set this property’s value to <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.MaximumVolumeSliderImage(U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Returns the maximum volume image associated with the specified control state.
            <br></br>Equivalent to the native <c>maximumVolumeSliderImageForState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>state</em>
                <p>The control state whose maximum volume image you want. You should specify only one control state value for this parameter.</p>
                <b>Return Value</b>
                <p>The maximum volume image associated with the specified state, or <c>null</c> if an appropriate image could not be retrieved. This method might return <c>null</c> if you specify multiple control states in the <em>state</em> parameter.</p>
                <b>Discussion</b>
                <p>For a description of slider and thumb images, see  “Customizing the Volume Slider’s Appearance.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMaximumVolumeSliderImage:forState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.MinimumVolumeSliderImage(U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Returns the minimum volume image associated with the specified control state.
            <br></br>Equivalent to the native <c>minimumVolumeSliderImageForState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>state</em>
                <p>The control state whose minimum volume image you want. You should specify only one control state value for this parameter.</p>
                <b>Return Value</b>
                <p>The maximum volume image associated with the specified state, or <c>null</c> if an appropriate image could not be retrieved. This method might return <c>null</c> if you specify multiple control states in the <em>state</em> parameter.</p>
                <b>Discussion</b>
                <p>For a description of slider and thumb images, see  “Customizing the Volume Slider’s Appearance.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinimumVolumeSliderImage:forState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.RouteButtonImage(U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Returns the button image associated with the specified control state.
            <br></br>Equivalent to the native <c>routeButtonImageForState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>state</em>
                <p>The control state whose thumb image you want. You should specify only one control state value for this parameter.</p>
                <b>Return Value</b>
                <p>The button image associated with the specified state, or <c>null</c> if an appropriate image could not be retrieved. This method might return <c>null</c> if you specify multiple control states in the state parameter.</p>
                <b>Discussion</b>
                <p>Use this method to retrieve the corresponding button image for a specific state.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setRouteButtonImage:forState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.RouteButtonRect(UnityEngine.Rect)">
            <summary>
            Returns the drawing rectangle for the route button.
            <br></br>Equivalent to the native <c>routeButtonRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver.</p>
                <b>Return Value</b>
                <p>The computed drawing rectangle for the route button.</p>
                <b>Discussion</b>
                <p>Use this method to retieve the bounding rectangle for the route button.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.SetMaximumVolumeSliderImage(U3DXT.iOS.Native.UIKit.UIImage,U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Assigns a maximum volume slider image to the specified control states.
            <br></br>Equivalent to the native <c>setMaximumVolumeSliderImage:forState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The maximum volume slider image to associate with the specified states.</p>
                <em>state</em>
                <p>The control state with which to associate the image.</p>
                <b>Discussion</b>
                <p>The orientation of the track image must match the orientation of the slider control. To facilitate the stretching of the image to fill the space between the thumb and end point, track images are usually defined in three regions. A stretchable region sits between two end cap regions. The end caps define the portions of the image that remain as is and are not stretched. The stretchable region is a 1-point wide area between the end caps that can be replicated to make the image appear longer.</p>
                <p>To define the end cap sizes for a horizontally-oriented slider, assign an appropriate value to the image’s <c>capInsets</c> property. For more information about how this value defines the regions of the slider, see the <em>UIImage Class Reference</em>.</p>
                <p>For a description of slider and thumb images, see  “Customizing the Volume Slider’s Appearance.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– maximumVolumeSliderImageForState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.SetMinimumVolumeSliderImage(U3DXT.iOS.Native.UIKit.UIImage,U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Assigns a minimum volume slider image to the specified control states.
            <br></br>Equivalent to the native <c>setMinimumVolumeSliderImage:forState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The minimum volume slider image to associate with the specified states.</p>
                <em>state</em>
                <p>The control state with which to associate the image.</p>
                <b>Discussion</b>
                <p>The orientation of the track image must match the orientation of the slider control. To facilitate the stretching of the image to fill the space between the thumb and end point, track images are usually defined in three regions. A stretchable region sits between two end cap regions. The end caps define the portions of the image that remain as is and are not stretched. The stretchable region is a 1-point wide area between the end caps that can be replicated to make the image appear longer.</p>
                <p>To define the end cap sizes for a horizontally-oriented slider, assign an appropriate value to the image’s <c>capInsets</c> property. For more information about how this value defines the regions of the slider, see the <em>UIImage Class Reference</em>.</p>
                <p>For a description of slider and thumb images, see  “Customizing the Volume Slider’s Appearance.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinimumVolumeSliderImage:forState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.SetRouteButtonImage(U3DXT.iOS.Native.UIKit.UIImage,U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Assigns a button image to the specified control states.
            <br></br>Equivalent to the native <c>setRouteButtonImage:forState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image to associate with the specified states.</p>
                <em>state</em>
                <p>The control state with which to associate the image.</p>
                <b>Discussion</b>
                <p>Use this to customize the appearance of the route button when it is enabled, disbaled, highlighted, and so on.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– routeButtonImageForState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.SetVolumeThumbImage(U3DXT.iOS.Native.UIKit.UIImage,U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Assigns a thumb image to the specified control states.
            <br></br>Equivalent to the native <c>setVolumeThumbImage:forState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The thumb image to associate with the specified states.</p>
                <em>state</em>
                <p>The control state with which to associate the image.</p>
                <b>Discussion</b>
                <p>For a description of slider and thumb images, see  “Customizing the Volume Slider’s Appearance.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– volumeThumbImageForState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.SizeThatFits(U3DXT.Utils.Size)">
            <summary>
            Calculates and returns a size that best fits the receiver’s subviews.
            <br></br>Equivalent to the native <c>sizeThatFits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The preferred size of the receiver.</p>
                <b>Return Value</b>
                <p>A new size that fits the receiver’s subviews.</p>
                <b>Discussion</b>
                <p>This method overrides the like-named method from the <c>UIView</c> class. It returns the preferred size the volume view needs to display the contained slider. You should not need to override this method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="size">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.VolumeSliderRect(UnityEngine.Rect)">
            <summary>
            Returns the drawing rectangle for the slider’s track.
            <br></br>Equivalent to the native <c>volumeSliderRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver.</p>
                <b>Return Value</b>
                <p>The computed drawing rectangle for the volume slider track. This rectangle corresponds to the entire length of the track between the minimum and maximum value images.</p>
                <b>Discussion</b>
                <p>The returned rectangle is used to scale the track and thumb images during drawing.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.VolumeThumbImage(U3DXT.iOS.Native.UIKit.UIControlState)">
            <summary>
            Returns the thumb image associated with the specified control state.
            <br></br>Equivalent to the native <c>volumeThumbImageForState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>state</em>
                <p>The control state whose thumb image you want. You should specify only one control state value for this parameter.</p>
                <b>Return Value</b>
                <p>The thumb image associated with the specified state, or <c>null</c> if an appropriate image could not be retrieved. This method might return <c>null</c> if you specify multiple control states in the state parameter.</p>
                <b>Discussion</b>
                <p>For a description of slider and thumb images, see  “Customizing the Volume Slider’s Appearance.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setVolumeThumbImage:forState:</c>
                    </li>
                </ul>
            </remarks>
            <param name="state">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.VolumeThumbRect(UnityEngine.Rect,UnityEngine.Rect,System.Single)">
            <summary>
            Returns the drawing rectangle for the volume slider’s thumb image.
            <br></br>Equivalent to the native <c>volumeThumbRectForBounds:volumeSliderRect:value:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver.</p>
                <em>rect</em>
                <p>The drawing rectangle for the receiver’s track, as returned by the <c>volumeSliderRectForBounds:</c> method.</p>
                <em>value</em>
                <p>The current value of the volume slider.</p>
                <b>Return Value</b>
                <p>The computed drawing rectangle for the thumb image.</p>
                <b>Discussion</b>
                <p> The rectangle you return should reflect the size of your thumb image and its current position on the slider’s track.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
            <param name="rect">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MPVolumeView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native MPVolumeView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[MPVolumeView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.MediaPlayer.MediaPlayerExtensions">
            <summary>
            Extension methods provided by the MediaPlayer framework.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MediaPlayerExtensions.UP_UIViewController_dismissMoviePlayerViewControllerAnimated(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MediaPlayerExtensions.UP_UIViewController_presentMoviePlayerViewControllerAnimated_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MediaPlayerExtensions.DismissMoviePlayerViewControllerAnimated(U3DXT.iOS.Native.UIKit.UIViewController)">
            <summary>
            Dismisses a movie player view controller using the standard movie player transition.
            <br></br>Equivalent to the native <c>dismissMoviePlayerViewControllerAnimated</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the receiver’s <c>modalViewController</c> property does not contain a movie player view controller, this method does nothing.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MediaPlayer.MediaPlayerExtensions.PresentMoviePlayerViewController(U3DXT.iOS.Native.UIKit.UIViewController,U3DXT.iOS.Native.MediaPlayer.MPMoviePlayerViewController)">
            <summary>
            Presents the movie player view controller using the standard movie player transition.
            <br></br>Equivalent to the native <c>presentMoviePlayerViewControllerAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>moviePlayerViewController</em>
                <p>The movie player view controller to present.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
            <param name="moviePlayerViewController">
            </param>
        </member>
    </members>
</doc>
