<?xml version="1.0"?>
<doc>
    <assembly>
        <name>U3DXTCoreExtras</name>
    </assembly>
    <members>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAsset">
            <summary>
            An <c>ALAsset</c> object represents a photo or a video managed by the Photo application.
            </summary>
            <remarks>
                <p>Assets can have multiple representations, for example a photo which was captured in RAW and JPG. Different representations of the same asset may have different dimensions.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.TypeVideo">
            <summary>
                <p>Specifies that the asset is a video.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetTypeVideo</c> constant.
            </summary>
            <remarks>
            Constants that specify the type of an asset.
            <p></p><b>Discussion</b><p>These constants represent the values you may get back for the <c>ALAssetPropertyType</c> property.</p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Asset Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.TypeUnknown">
            <summary>
                <p>Specifies that the asset's type cannot be determined.</p>
                <p>The asset could be a sound file, a video or photo file that the system doesn’t know about or something else. This is possible only for assets imported from a camera onto the device.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetTypeUnknown</c> constant.
            </summary>
            <remarks>
            Constants that specify the type of an asset.
            <p></p><b>Discussion</b><p>These constants represent the values you may get back for the <c>ALAssetPropertyType</c> property.</p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Asset Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.TypePhoto">
            <summary>
                <p>Specifies that the asset is a photo.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetTypePhoto</c> constant.
            </summary>
            <remarks>
            Constants that specify the type of an asset.
            <p></p><b>Discussion</b><p>These constants represent the values you may get back for the <c>ALAssetPropertyType</c> property.</p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Asset Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.ALErrorInvalidProperty">
            <summary>
                <p>Value returned by <c>valueForProperty:</c> if the property you tried to access is invalid.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALErrorInvalidProperty</c> constant.
            </summary>
            <remarks>
            A constant to indicate that a property accessed by <c>valueForProperty:</c> is invalid.
            <p></p><p></p>This is a constant for "Invalid Property Value".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyDuration">
            <summary>
                <p>The key to retrieve the play time duration of a video asset.</p>
                <p>The corresponding value is a double wrapped in an <c>double</c> object. For photos, <c>ALErrorInvalidProperty</c> is returned.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyDuration</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyLocation">
            <summary>
                <p>The key to retrieve the location information of the asset.</p>
                <p>The corresponding value is a <c>CLLocation</c> object. This is only available if location services are enabled for the caller.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyLocation</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyType">
            <summary>
                <p>A key to retrieve the type of the asset.</p>
                <p>Possible values are given in  “Asset Types.” </p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyType</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyRepresentations">
            <summary>
                <p>The key to retrieve the representations available for a given asset (for example RAW, JPEG).</p>
                <p>The corresponding value is an <c>object[]</c> object containing UTIs expressed as strings.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyRepresentations</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyAssetURL">
            <summary>
                <p>The key to retrieve a URL identifier for the asset.</p>
                <p>The corresponding value is an <c>NSURL</c> object.</p>
                <p>This URL is used by the library-change notifications to identify assets and asset groups. Only the <c>ALAssetRepresentation</c> and <c>ALAssetsGroup</c> classes support this property.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyAssetURL</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyDate">
            <summary>
                <p>The key to retrieve the creation date of the asset.</p>
                <p>The corresponding value is an <c>DateTime</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyDate</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyOrientation">
            <summary>
                <p>The key to retrieve the orientation of the asset.</p>
                <p>The corresponding value is an <c>double</c> object containing an asset's orientation as described by the TIFF format.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyOrientation</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAsset.PropertyURLs">
            <summary>
                <p>The key to retrieve a dictionary that maps asset representations UTIs to URLs that uniquely identify the asset.</p>
                <p>The corresponding value is an <c>Dictionary</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetPropertyURLs</c> constant.
            </summary>
            <remarks>
            Constants for the keys for the properties you can get from an asset.
            <p></p><p></p>This is a constant for "Property Keys".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_get_editable(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_get_originalAsset(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_aspectRatioThumbnail(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_defaultRepresentation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_representationForUTI_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_setImageData_metadata_completionBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_setVideoAtPath_completionBlock_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_thumbnail(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_valueForProperty_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_writeModifiedImageDataToSavedPhotosAlbum_metadata_completionBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.UP_ALAsset_writeModifiedVideoAtPathToSavedPhotosAlbum_completionBlock_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AssetsLibrary.ALAsset" /> class.
            <br></br>Equivalent to the native <c>[[ALAsset alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAsset.ClassExists">
            <summary>
            Returns whether the native ALAsset class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAsset.editable">
            <summary>
            Indicates whether the asset is editable. (read-only)
            <br></br>Equivalent to the native <c>editable</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The property value is <c>true</c> if the application is able to edit the asset, and <c>false</c> if the application is not able to edit the asset. Applications are only allowed to edit assets that they originally wrote.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAsset.originalAsset">
            <summary>
            The original version of the asset. (read-only)
            <br></br>Equivalent to the native <c>originalAsset</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The property value is the original asset if the receiver was saved as a modified version of an asset. The property value is <c>null</c> if the asset was not saved as a modified version of another asset.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.AspectRatioThumbnail">
            <summary>
            Returns an aspect ratio thumbnail of the asset.
            <br></br>Equivalent to the native <c>aspectRatioThumbnail</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An aspect ratio thumbnail of the asset.</p>
                <b>Discussion</b>
                <p>Returns a CGImage with an aspect ratio thumbnail of the asset. The size of the thumbnail is the appropriate size for the platform, and in the correct orientation.</p>
                <p>This method returns <c>NULL</c> for assets from a shared photo stream that are not yet available locally. If the asset becomes available in the future, an <c>ALAssetsLibraryChangedNotification</c> notification is posted.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.DefaultRepresentation">
            <summary>
            Returns an asset representation object for the default representation.
            <br></br>Equivalent to the native <c>defaultRepresentation</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An asset representation object for the default representation.</p>
                <b>Discussion</b>
                <p>This method returns <c>null</c> for assets from a shared photo stream that are not yet available locally. If the asset becomes available in the future, an <c>ALAssetsLibraryChangedNotification</c> notification is posted.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.Representation(System.String)">
            <summary>
            Returns an an asset representation object for a given representation UTI.
            <br></br>Equivalent to the native <c>representationForUTI:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>representationUTI</em>
                <p>A UTI describing a representation for the asset.</p>
                <b>Return Value</b>
                <p>An an asset representation object for the representation specified by <em>representationUTI</em>, or <c>null</c> if the asset does not support the representation.</p>
                <b>Discussion</b>
                <p>This method returns <c>null</c> for assets from a shared photo stream that are not yet available locally. If the asset becomes available in the future, an <c>ALAssetsLibraryChangedNotification</c> notification is posted.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="representationUTI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.SetImageData(U3DXT.iOS.Native.Foundation.NSData,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Replaces the image data in the receiver with given image data
            <br></br>Equivalent to the native <c>setImageData:metadata:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageData</em>
                <p>Image data for the asset. </p>
                <em>metadata</em>
                <p>Metadata for the image. </p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>If the application is able to edit the asset, the completion block returns the same asset URL as the receiver, because a new asset is not created.</p>
                <p>If the application is not able to edit the asset, the completion blocks return a <c>null</c> asset URL and an <c>ALAssetsLibraryWriteFailedError</c>.</p>
                <b>Discussion</b>
                <p>Before invoking this method, you should check the <c>editable</c> property of the asset to determine whether it is possible to replace the image data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="imageData">
            </param>
            <param name="metadata">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.SetVideoAtPath(U3DXT.iOS.Native.Foundation.NSURL,System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Replaces the video data in receiver with the video at a given URL.
            <br></br>Equivalent to the native <c>setVideoAtPath:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>videoPathURL</em>
                <p>An URL that specifies the location of video data. </p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>If the application is able to edit the asset, the completion block returns the same asset URL as the receiver, because a new asset is not created.</p>
                <p>If the application is not able to edit the asset, the completion blocks return a <c>null</c> asset URL and an <c>ALAssetsLibraryWriteFailedError</c>.</p>
                <b>Discussion</b>
                <p>Before invoking this method, you should check the <c>editable</c> property of the asset to determine whether it is possible to replace the video data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="videoPathURL">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.Thumbnail">
            <summary>
            Returns a thumbnail representation of the asset.
            <br></br>Equivalent to the native <c>thumbnail</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A thumbnail representation of the asset.</p>
                <b>Discussion</b>
                <p>The size of the thumbnail is the appropriate for the platform. The image is returned in the correct orientation (that is, “pointing up”—you shouldn’t have to rotate the image).</p>
                <p>This method returns <c>NULL</c> for assets from a shared photo stream that are not yet available locally. If the asset becomes available in the future, an <c>ALAssetsLibraryChangedNotification</c> notification is posted.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.Value(System.String)">
            <summary>
            Returns the value for a given property.
            <br></br>Equivalent to the native <c>valueForProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>property</em>
                <p>The property for which you want the value. For valid keys, see  “Property Keys.” </p>
                <b>Return Value</b>
                <p>The value for <em>property</em>. If <em>property</em> is not a valid key, returns <c>ALErrorInvalidProperty</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="property">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.WriteModifiedImageDataToSavedPhotosAlbum(U3DXT.iOS.Native.Foundation.NSData,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Saves image data to the Saved Photos album.
            <br></br>Equivalent to the native <c>writeModifiedImageDataToSavedPhotosAlbum:metadata:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageData</em>
                <p>Image data for the asset. </p>
                <em>metadata</em>
                <p>Metadata for the image. </p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <b>Discussion</b>
                <p>This method saves <em>imageData</em> to the saved photos album as a new asset that is considered a modified version of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="imageData">
            </param>
            <param name="metadata">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAsset.WriteModifiedVideoAtPathToSavedPhotosAlbum(U3DXT.iOS.Native.Foundation.NSURL,System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Saves the video at a specified path to the Saved Photos album.
            <br></br>Equivalent to the native <c>writeModifiedVideoAtPathToSavedPhotosAlbum:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>videoPathURL</em>
                <p>An URL that specifies the location of video data. </p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <b>Discussion</b>
                <p>This method saves the video at <em>videoPathURL</em> to the Saved Photos album as a new asset that is considered a modified version of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="videoPathURL">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation">
            <summary>
            Constants to indicate the orientation of an asset.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.LeftMirrored">
            <summary>
                <p>Indicates that the picture has been rotated through 90 degrees counter-clockwise with respect to <c>ALAssetOrientationUp</c> and then flipped vertically, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationLeftMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.RightMirrored">
            <summary>
                <p>Indicates that the picture has been rotated through 90 degrees clockwise with respect to <c>ALAssetOrientationUp</c> and then flipped vertically, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationRightMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.Right">
            <summary>
                <p>Indicates that the picture has been rotated through 90 degrees clockwise with respect to <c>ALAssetOrientationUp</c>, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.Up">
            <summary>
                <p>Indicates that the picture is in its default orientation, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.UpMirrored">
            <summary>
                <p>Indicates that the picture has been flipped horizontally with respect to <c>ALAssetOrientationUp</c>, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationUpMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.DownMirrored">
            <summary>
                <p>Indicates that the picture has been rotated through 180 degrees with respect to <c>ALAssetOrientationUp</c> and then flipped horizontally, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationDownMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.Left">
            <summary>
                <p>Indicates that the picture has been rotated through 90 degrees counter-clockwise with respect to <c>ALAssetOrientationUp</c>, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation.Down">
            <summary>
                <p>Indicates that the picture has been rotated through 180 degrees with respect to <c>ALAssetOrientationUp</c>, as shown here.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetOrientationDown</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation">
            <summary>
            An <c>ALAssetRepresentation</c> object encapsulates one of the representations of a given <c>ALAsset</c> object.
            </summary>
            <remarks>
                <p>A given asset in the library may have more than one representation. For example, if a camera provides RAW and JPEG versions of an image, the resulting asset will have two representations—one for the RAW file and one for the JPEG file.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_CGImageWithOptions_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_filename(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_fullResolutionImage(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_fullScreenImage(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_metadata(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_orientation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_scale(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_size(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_url(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UP_ALAssetRepresentation_UTI(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation" /> class.
            <br></br>Equivalent to the native <c>[[ALAssetRepresentation alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.ClassExists">
            <summary>
            Returns whether the native ALAssetRepresentation class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.CGImage(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Returns a full resolution CGImage of the representation.
            <br></br>Equivalent to the native <c>CGImageWithOptions:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>options</em>
                <p>A dictionary of options as described for <c>CGImageSourceCreateWithData</c> or <c>CGImageSourceCreateWithURL</c>.</p>
                <b>Return Value</b>
                <p>A full resolution CGImage of the representation.</p>
                <b>Discussion</b>
                <p>This method provides a convenient way to obtain a CGImage representation of an asset. This method returns the biggest, best representation available, unadjusted in any way.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.Filename">
            <summary>
            Returns a string representing the filename of the representation on disk.
            <br></br>Equivalent to the native <c>filename</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string representing the filename of the representation on disk.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.FullResolutionImage">
            <summary>
            Returns a CGImage representation of the asset.
            <br></br>Equivalent to the native <c>fullResolutionImage</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A <c>CGImage</c> representation of the asset, or <c>NULL</c> if a CGImage representation could not be generated.</p>
                <b>Discussion</b>
                <p>This method returns the biggest, best representation available, unadjusted in any way.</p>
                <p>To create a correctly-rotated UIImage object from the CGImage, you use <c>imageWithCGImage:scale:orientation:</c> or <c>initWithCGImage:scale:orientation:</c>, passing the values of <c>orientation</c> and <c>scale</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.FullScreenImage">
            <summary>
            Returns a CGImage of the representation that is appropriate for displaying full screen.
            <br></br>Equivalent to the native <c>fullScreenImage</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A CGImage of the representation that is appropriate for displaying full screen, or <c>NULL</c> if a CGImage representation could not be generated.</p>
                <b>Discussion</b>
                <p>The dimensions of the image are dependent on the device your application is running on; the dimensions may not, however, exactly match the dimensions of the screen.</p>
                <p>In iOS 5 and later, this method returns a fully cropped, rotated, and adjusted image—exactly as a user would see in Photos or in the image picker.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.Metadata">
            <summary>
            Returns a dictionary of dictionaries of metadata for the representation.
            <br></br>Equivalent to the native <c>metadata</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary of dictionaries of metadata for the representation. Returns <c>null</c> if the representation is one that the system cannot interpret. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.Orientation">
            <summary>
            Returns the representation’s orientation.
            <br></br>Equivalent to the native <c>orientation</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The representation’s orientation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.Scale">
            <summary>
            Returns the representation’s scale.
            <br></br>Equivalent to the native <c>scale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The representation’s scale.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.Size">
            <summary>
            Returns the size in bytes of the file for the representation.
            <br></br>Equivalent to the native <c>size</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The size  in bytes of the file for the representation.</p>
                <b>Discussion</b>
                <p>You typically use this method to allocate a buffer of the right size for <c>getBytes:fromOffset:length:error:</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.Url">
            <summary>
            Returns a persistent URL uniquely identifying the representation.
            <br></br>Equivalent to the native <c>url</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A persistent URL uniquely identifying the representation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetRepresentation.UTI">
            <summary>
            Returns the representation's UTI.
            <br></br>Equivalent to the native <c>UTI</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The representation's UTI</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter">
            <summary>
                <c>ALAssetsFilter</c> encapsulates filtering criteria to be used when retrieving assets from a group.
            </summary>
            <remarks>
                <p>You use filters with the <c>setAssetsFilter:</c> method in <c>ALAssetsGroup</c>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.UP_ALAssetsFilter_allAssets">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.UP_ALAssetsFilter_allPhotos">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.UP_ALAssetsFilter_allVideos">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter" /> class.
            <br></br>Equivalent to the native <c>[[ALAssetsFilter alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.ClassExists">
            <summary>
            Returns whether the native ALAssetsFilter class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.AllAssets">
            <summary>
            Returns a filter that gets all assets in the assets group.
            <br></br>Equivalent to the native <c>allAssets</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A filter that gets all assets in the assets group.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.AllPhotos">
            <summary>
            Returns a filter that gets all photos in the assets group.
            <br></br>Equivalent to the native <c>allPhotos</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A filter that gets all photos in the assets group.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter.AllVideos">
            <summary>
            Returns a filter that gets all videos in the assets group.
            <br></br>Equivalent to the native <c>allVideos</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A filter that gets all videos in the assets group.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup">
            <summary>
            An <c>ALAssetsGroup</c> object represents an ordered set of the assets managed by the Photos application. The order of the elements is the same as the user sees in the Photos application. An asset can belong to multiple assets groups.
            </summary>
            <remarks>
                <p>Assets groups themselves are synced via iTunes, created to hold the user’s saved photos or created during camera import. You cannot directly modify the groups using <c>ALAssetsGroup</c>. You can indirectly modify the Saved Photos group by saving images or videos into it using the <c>ALAssetsLibrary</c> class.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.PropertyType">
            <summary>
                <p>Key to retrieve the group type.</p>
                <p>The corresponding value is an <c>ALAssetsGroupType</c> constant wrapped in an <c>double</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupPropertyType</c> constant.
            </summary>
            <remarks>
            Constants for the names of group properties, used by <c>valueForProperty:</c>.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Group Property Names".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.PropertyName">
            <summary>
                <p>Key to retrieve the name of the group.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupPropertyName</c> constant.
            </summary>
            <remarks>
            Constants for the names of group properties, used by <c>valueForProperty:</c>.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Group Property Names".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.PropertyURL">
            <summary>
                <p>Key to retrieve a URL that uniquely identifies the group.</p>
                <p>The corresponding value is an <c>NSURL</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupPropertyURL</c> constant.
            </summary>
            <remarks>
            Constants for the names of group properties, used by <c>valueForProperty:</c>.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Group Property Names".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.PropertyPersistentID">
            <summary>
                <p>Key to retrieve the group’s persistent ID.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupPropertyPersistentID</c> constant.
            </summary>
            <remarks>
            Constants for the names of group properties, used by <c>valueForProperty:</c>.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Group Property Names".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_get_editable(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_addAsset_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_enumerateAssetsAtIndexes_options_usingBlock_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_enumerateAssetsUsingBlock_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_enumerateAssetsWithOptions_usingBlock_(System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_numberOfAssets(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_posterImage(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_setAssetsFilter_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.UP_ALAssetsGroup_valueForProperty_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup" /> class.
            <br></br>Equivalent to the native <c>[[ALAssetsGroup alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.ClassExists">
            <summary>
            Returns whether the native ALAssetsGroup class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.editable">
            <summary>
            Indicates whether the application can edit the group. (read-only)
            <br></br>Equivalent to the native <c>editable</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of the property is <c>true</c> if the application is able to edit the group, otherwise it is <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.AddAsset(U3DXT.iOS.Native.AssetsLibrary.ALAsset)">
            <summary>
            Adds an existing asset to the receiver.
            <br></br>Equivalent to the native <c>addAsset:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>asset</em>
                <p>The asset to add to the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>asset</em> was added successfully, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>The method may fail (return <c>false</c>) if the group is not editable, or if the asset could not be added to the group.</p>
                <p>You should check the <c>editable</c> property of the group to see if it is possible to add an asset to the group.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="asset">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.EnumerateAssetsAtIndexes(U3DXT.iOS.Native.Foundation.NSIndexSet,U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Action{U3DXT.iOS.Native.AssetsLibrary.ALAsset,System.UInt32,System.Boolean})">
            <summary>
            Invokes a given block using each of the assets in the group at specified indexes.
            <br></br>Equivalent to the native <c>enumerateAssetsAtIndexes:options:usingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexSet</em>
                <p>The indexes of the assets to enumerate.</p>
                <p>The index set must not specify any indexes exceeding <c>numberOfAssets</c>.</p>
                <em>options</em>
                <p>Options for the enumeration.</p>
                <em>enumerationBlock</em>
                <p>The block to invoke using each of the assets in the group at the indexes in <em>indexSet</em>.</p>
                <b>Discussion</b>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="indexSet">
            </param>
            <param name="options">
            </param>
            <param name="enumerationBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.EnumerateAssetsUsingBlock(System.Action{U3DXT.iOS.Native.AssetsLibrary.ALAsset,System.UInt32,System.Boolean})">
            <summary>
            Invokes a given block using each of the assets in the group.
            <br></br>Equivalent to the native <c>enumerateAssetsUsingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>enumerationBlock</em>
                <p>The block to invoke using each of the assets in the group.</p>
                <b>Discussion</b>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="enumerationBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.EnumerateAssets(U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Action{U3DXT.iOS.Native.AssetsLibrary.ALAsset,System.UInt32,System.Boolean})">
            <summary>
            Invokes a given block using each of the assets in the group.
            <br></br>Equivalent to the native <c>enumerateAssetsWithOptions:usingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>options</em>
                <p>Options for the enumeration.</p>
                <em>enumerationBlock</em>
                <p>The block to invoke using each of the assets in the group.</p>
                <b>Discussion</b>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="options">
            </param>
            <param name="enumerationBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.NumberOfAssets">
            <summary>
            Returns the number of assets in the group that match the current filter.
            <br></br>Equivalent to the native <c>numberOfAssets</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of assets in the group that match the current filter. If no filter is set, returns the count of all assets in the group.</p>
                <b>Discussion</b>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setAssetsFilter:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.PosterImage">
            <summary>
            Returns the group’s poster image
            <br></br>Equivalent to the native <c>posterImage</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The group’s poster image.</p>
                <b>Discussion</b>
                <p>The image is returned in the correct orientation (that is, “pointing up”—you shouldn’t have to rotate the image).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.SetAssetsFilter(U3DXT.iOS.Native.AssetsLibrary.ALAssetsFilter)">
            <summary>
            Sets the filter for the group.
            <br></br>Equivalent to the native <c>setAssetsFilter:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>filter</em>
                <p>The filter for the group.</p>
                <b>Discussion</b>
                <p>This method sets the filter the group; it does not execute the filter. The filter is applied when you invoke <c>numberOfAssets</c> or enumerate the contents.</p>
                <p>If you don’t set the filter, or set it to <c>null</c>, the enumeration returns all the assets in the group.</p>
                <b>Special Considerations</b>
                <p>Only one filter is active at a time. Any enumeration currently in flight continues to completion using the previous filter. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="filter">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup.Value(System.String)">
            <summary>
            Returns the group’s value for a given property.
            <br></br>Equivalent to the native <c>valueForProperty:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>property</em>
                <p>The name of a group property. For valid values, see  “Group Property Names.” </p>
                <b>Return Value</b>
                <p>The group’s value for <em>property</em>.</p>
                <b>Discussion</b>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="property">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary">
            <summary>
            An instance of <c>ALAssetsLibrary</c> provides access to the videos and photos that are under the control of the Photos application.
            </summary>
            <remarks>
                <p>The library includes those that are in the Saved Photos album, those coming from iTunes, and those that were directly imported into the device. You use it to retrieve the list of all asset groups and to save images and videos into the Saved Photos album.</p>
                <p>You create an instance of <c>ALAssetsLibrary</c> using <c>alloc</c> and <c>init</c>:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>ALAssetsLibrary* library = [[ALAssetsLibrary alloc] init];  </pre>
                        </td>
                    </tr>
                </table>
                <p>The lifetimes of objects you get back from a library instance are tied to the lifetime of the library instance.</p>
                <p>Many of the methods declared by <c>ALAssetsLibrary</c> take blocks for failure and success as arguments. These methods are all asynchronous because the user may need to be asked to grant access to the data.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ErrorDomain">
            <summary>
                <p>Constant used by <c>NSError</c> to distinguish errors belonging to the AssetsLibrary domain.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryErrorDomain</c> constant.
            </summary>
            <remarks>
            Constant for the AssetsLibrary domain.
            <p></p><p></p>This is a constant for "Error Domain".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ALAssetLibraryUpdatedAssetsKey">
            <summary>
                <p>Value is a set of <c>NSURL</c> objects identifying the assets that were updated.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetLibraryUpdatedAssetsKey</c> constant.
            </summary>
            <remarks>
            Keys used to get values from the user information dictionary of the <c>ALAssetsLibraryChangedNotification</c> notification.
            <p></p><b>Discussion</b><p>Assets that are modified use the <c>ALAssetLibraryUpdatedAssetsKey</c> key. Assets that are inserted or deleted use the <c>ALAssetLibraryUpdatedAssetGroupsKey</c> key for the asset group that contains the asset.</p><p>Assets and asset groups that have no strong references are omitted from the notification’s user information dictionary.</p><p></p>This is a constant for "Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ALAssetLibraryInsertedAssetGroupsKey">
            <summary>
                <p>Value is a set of <c>NSURL</c> objects identifying the assets that were inserted.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetLibraryInsertedAssetGroupsKey</c> constant.
            </summary>
            <remarks>
            Keys used to get values from the user information dictionary of the <c>ALAssetsLibraryChangedNotification</c> notification.
            <p></p><b>Discussion</b><p>Assets that are modified use the <c>ALAssetLibraryUpdatedAssetsKey</c> key. Assets that are inserted or deleted use the <c>ALAssetLibraryUpdatedAssetGroupsKey</c> key for the asset group that contains the asset.</p><p>Assets and asset groups that have no strong references are omitted from the notification’s user information dictionary.</p><p></p>This is a constant for "Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ALAssetLibraryUpdatedAssetGroupsKey">
            <summary>
                <p>Value is a set of <c>NSURL</c> objects identifying the asset groups that were updated.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetLibraryUpdatedAssetGroupsKey</c> constant.
            </summary>
            <remarks>
            Keys used to get values from the user information dictionary of the <c>ALAssetsLibraryChangedNotification</c> notification.
            <p></p><b>Discussion</b><p>Assets that are modified use the <c>ALAssetLibraryUpdatedAssetsKey</c> key. Assets that are inserted or deleted use the <c>ALAssetLibraryUpdatedAssetGroupsKey</c> key for the asset group that contains the asset.</p><p>Assets and asset groups that have no strong references are omitted from the notification’s user information dictionary.</p><p></p>This is a constant for "Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ALAssetLibraryDeletedAssetGroupsKey">
            <summary>
                <p>Value is a set of <c>NSURL</c> objects identifying the asset groups that were deleted.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetLibraryDeletedAssetGroupsKey</c> constant.
            </summary>
            <remarks>
            Keys used to get values from the user information dictionary of the <c>ALAssetsLibraryChangedNotification</c> notification.
            <p></p><b>Discussion</b><p>Assets that are modified use the <c>ALAssetLibraryUpdatedAssetsKey</c> key. Assets that are inserted or deleted use the <c>ALAssetLibraryUpdatedAssetGroupsKey</c> key for the asset group that contains the asset.</p><p>Assets and asset groups that have no strong references are omitted from the notification’s user information dictionary.</p><p></p>This is a constant for "Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ALAssetsLibraryChangedNotification">
            <summary>
            Constant name for the native <c>ALAssetsLibraryChangedNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.Changed">
            <summary>
                <b>ALAssetsLibraryChangedNotification</b> Sent when the contents of the assets library have changed from under the app that is using the data. <p></p><p>In iOS 4.0, the notification’s <c>object</c> is <c>null</c>. In iOS 4.1 and later, the notification object is the library object that posted the notification.</p><p>In iOS 6.0 and later, the user information dictionary describes what changed:</p><ul class="ul"><li class="li"><p>If the user information dictionary is <c>null</c>, reload all assets and asset groups.</p></li><li class="li"><p>If the user information dictionary an empty dictionary, there is no need to reload assets and asset groups.</p></li><li class="li"><p>If the user information dictionary is not empty, reload the effected assets and asset groups. For the keys used, see  “Notification Keys.” </p></li></ul><p>This notification is sent on an arbitrary thread.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>ALAssetsLibraryChangedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>ALAssetsLibrary</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.AllInstances.Changed">
            <summary>
                <b>ALAssetsLibraryChangedNotification</b> Sent when the contents of the assets library have changed from under the app that is using the data. <p></p><p>In iOS 4.0, the notification’s <c>object</c> is <c>null</c>. In iOS 4.1 and later, the notification object is the library object that posted the notification.</p><p>In iOS 6.0 and later, the user information dictionary describes what changed:</p><ul class="ul"><li class="li"><p>If the user information dictionary is <c>null</c>, reload all assets and asset groups.</p></li><li class="li"><p>If the user information dictionary an empty dictionary, there is no need to reload assets and asset groups.</p></li><li class="li"><p>If the user information dictionary is not empty, reload the effected assets and asset groups. For the keys used, see  “Notification Keys.” </p></li></ul><p>This notification is sent on an arbitrary thread.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>ALAssetsLibraryChangedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_authorizationStatus">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_disableSharedPhotoStreamsSupport">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_addAssetsGroupAlbumWithName_resultBlock_failureBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_assetForURL_resultBlock_failureBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_enumerateGroupsWithTypes_usingBlock_failureBlock_(System.String,System.UInt32,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_groupForURL_resultBlock_failureBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_videoAtPathIsCompatibleWithSavedPhotosAlbum_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_writeImageDataToSavedPhotosAlbum_metadata_completionBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_writeImageToSavedPhotosAlbum_metadata_completionBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_writeImageToSavedPhotosAlbum_orientation_completionBlock_(System.String,System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_writeVideoAtPathToSavedPhotosAlbum_completionBlock_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary" /> class.
            <br></br>Equivalent to the native <c>[[ALAssetsLibrary alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ClassExists">
            <summary>
            Returns whether the native ALAssetsLibrary class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.AuthorizationStatus">
            <summary>
            Returns photo data authorization status for this application.
            <br></br>Equivalent to the native <c>authorizationStatus</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Photo data authorization status for this application. For the constants returned, see  “ALAuthorizationStatus.” </p>
                <b>Discussion</b>
                <p>This method does not prompt the user for access.</p>
                <p>You can use it to detect restricted access and simply hide UI instead of prompting for access.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.DisableSharedPhotoStreamsSupport">
            <summary>
            Disables shared photo streams notifications and asset retrieval.
            <br></br>Equivalent to the native <c>disableSharedPhotoStreamsSupport</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Shared photo streams can generate frequent notifications. Use this method to disable support if appropriate for your app.</p>
                <p>Apps compiled against versions of iOS prior to iOS 6.0 do not have support for shared photo streams.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.AddAssetsGroupAlbum(System.String,System.Action{U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup},System.Action{U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Adds a new assets group to the library.
            <br></br>Equivalent to the native <c>addAssetsGroupAlbumWithName:resultBlock:failureBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name for the new group.</p>
                <p>If <em>name</em> conflicts with another assets group with the same name, then the group is not created and <em>resultBlock</em> returns a <c>null</c> group.</p>
                <em>resultBlock</em>
                <p>The block invoked after the add operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryAccessFailureBlock</c>.</p>
                <em>failureBlock</em>
                <p>The block to invoke if the add operation fails—for example, if the user denies access to the application.</p>
                <p>For a description of the block, see <c>ALAssetsGroupFaces</c>.</p>
                <b>Discussion</b>
                <p>The name of the new asset group is <em>name</em>, its type is <c>ALAssetsGroupAlbum</c>, and the <c>editable</c> property is <c>true</c>.</p>
                <p>This method is asynchronous. When the assets group is added, the user may be asked to confirm the application’s access to the data; the method, though, returns immediately. You should perform whatever work you want with the group in <em>resultBlock</em>.</p>
                <p>If the user denies access to the application, or if no application is allowed to access the data, or if the data is currently unavailable, the failure block is called.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="resultBlock"> A callback delegate.</param>
            <param name="failureBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.Asset(U3DXT.iOS.Native.Foundation.NSURL,System.Action{U3DXT.iOS.Native.AssetsLibrary.ALAsset},System.Action{U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Invokes a given block passing as a parameter an asset identified by a specified file URL.
            <br></br>Equivalent to the native <c>assetForURL:resultBlock:failureBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>assetURL</em>
                <p>An asset URL previously retrieved from an <c>ALAsset</c> object.</p>
                <em>resultBlock</em>
                <p>The block to invoke using the asset identified by <em>assetURL</em>.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryAssetForURLResultBlock</c>.</p>
                <em>failureBlock</em>
                <p>The block to invoke if the user denies access to the assets library.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryAccessFailureBlock</c>.</p>
                <b>Discussion</b>
                <p>This method is asynchronous. When the asset is requested, the user may be asked to confirm the application's access to the library; the method, though, returns immediately. You should perform whatever work you want with the asset in <em>resultBlock</em>.</p>
                <p>If the user denies access to the application, or if no application is allowed to access the data, the failure block is called.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="assetURL">
            </param>
            <param name="resultBlock"> A callback delegate.</param>
            <param name="failureBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.EnumerateGroups(System.UInt32,System.Action{U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup,System.Boolean},System.Action{U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Invokes a given block passing as a parameter each of the asset groups that match the given asset group type.
            <br></br>Equivalent to the native <c>enumerateGroupsWithTypes:usingBlock:failureBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>types</em>
                <p>The types of asset group over which to enumerate.</p>
                <p>The value is a bitfield; you can OR together values from  writeImageDataToSavedPhotosAlbum:metadata:completionBlock: .</p>
                <em>enumerationBlock</em>
                <p>The block to invoke using each asset in turn.</p>
                <p>When the enumeration is done, <em>enumerationBlock</em> is invoked with <em>group</em> set to <c>null</c>.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryGroupsEnumerationResultsBlock</c>.</p>
                <em>failureBlock</em>
                <p>The block to invoke if the user denies access to the assets library.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryAccessFailureBlock</c>.</p>
                <b>Discussion</b>
                <p>The results are passed one by one to the caller by executing the enumeration block.</p>
                <p>This method is asynchronous. When groups are enumerated, the user may be asked to confirm the application's access to the data; the method, though, returns immediately. You should perform whatever work you want with the assets in <em>enumerationBlock</em>.</p>
                <p>If the user denies access to the application, or if no application is allowed to access the data, the <em>failureBlock</em> is called.</p>
                <b>Special Considerations</b>
                <p>This method will fail with error <c>ALAssetsLibraryAccessGloballyDeniedError</c> if the user has not enabled Location Services (in Settings &gt; General). </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="types">
            </param>
            <param name="enumerationBlock"> A callback delegate.</param>
            <param name="failureBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.Group(U3DXT.iOS.Native.Foundation.NSURL,System.Action{U3DXT.iOS.Native.AssetsLibrary.ALAssetsGroup},System.Action{U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Returns an assets group in the result block for a URL previously retrieved from an <c>ALAssetsGroup</c> object.
            <br></br>Equivalent to the native <c>groupForURL:resultBlock:failureBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>groupURL</em>
                <p>The URL for an <c>ALAssetsGroup</c> object.</p>
                <em>resultBlock</em>
                <p>The block invoked after the access operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryAccessFailureBlock</c>.</p>
                <em>failureBlock</em>
                <p>The block to invoke if the access operation fails—for example, if the user denies access to the application.</p>
                <p>For a description of the block, see <c>ALAssetsGroupFaces</c>.</p>
                <b>Discussion</b>
                <p>This method is asynchronous: it returns immediately. You should perform whatever work you want with the assets group in <em>resultBlock</em>.</p>
                <p>This method is asynchronous. When the assets group is requested, the user may be asked to confirm the application’s access to the data; the method, though, returns immediately. You should perform whatever work you want with the asset group in <em>resultBlock</em>.</p>
                <p>If the user denies access to the application, or if no application is allowed to access the data, or if the data is currently unavailable, the failure block is called.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="groupURL">
            </param>
            <param name="resultBlock"> A callback delegate.</param>
            <param name="failureBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.VideoAtPathIsCompatible(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Returns a Boolean value that indicates whether a video identified by a given URL is compatible with the Saved Photos album.
            <br></br>Equivalent to the native <c>videoAtPathIsCompatibleWithSavedPhotosAlbum:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>videoPathURL</em>
                <p>An URL that points to a video file.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the video identified by <em>videoPathURL</em> is compatible with the Saved Photos album, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method returns the same value as <c>UIVideoAtPathIsCompatibleWithSavedPhotosAlbum</c> would for the same URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c>
                    </li>
                </ul>
            </remarks>
            <param name="videoPathURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.WriteImageDataToSavedPhotosAlbum(U3DXT.iOS.Native.Foundation.NSData,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Writes given image data and metadata to the Photos Album.
            <br></br>Equivalent to the native <c>writeImageDataToSavedPhotosAlbum:metadata:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageData</em>
                <p>Data for the image to add to the album.</p>
                <em>metadata</em>
                <p>The metadata to associate with the image.</p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryWriteImageCompletionBlock</c>.</p>
                <b>Discussion</b>
                <p>If there is a conflict between the metadata in the image data and the metadata dictionary, the image data metadata values will be overwritten.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.1 and later.</li>
                </ul>
            </remarks>
            <param name="imageData">
            </param>
            <param name="metadata">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.WriteImageToSavedPhotosAlbum(U3DXT.iOS.Native.CoreGraphics.CGImage,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Writes a given image and metadata to the Photos Album.
            <br></br>Equivalent to the native <c>writeImageToSavedPhotosAlbum:metadata:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageRef</em>
                <p>The image to add to the album.</p>
                <em>metadata</em>
                <p>The metadata to associate with the image.</p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryWriteImageCompletionBlock</c>.</p>
                <b>Discussion</b>
                <p>You must specify the orientation key in the metadata dictionary to preserve the orientation of the image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.1 and later.</li>
                </ul>
            </remarks>
            <param name="imageRef">
            </param>
            <param name="metadata">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.WriteImageToSavedPhotosAlbum(U3DXT.iOS.Native.CoreGraphics.CGImage,U3DXT.iOS.Native.AssetsLibrary.ALAssetOrientation,System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Saves a given image to the Saved Photos album.
            <br></br>Equivalent to the native <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageRef</em>
                <p>The image to save to the Saved Photos album.</p>
                <em>orientation</em>
                <p>The orientation at which to save the image.</p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryWriteImageCompletionBlock</c>.</p>
                <b>Discussion</b>
                <p>If you want to save a <c>UIImage</c> object, you can use the <c>UIImage</c> method <c>CGImage</c> to get a <c>CGImageRef</c>, and cast the image’s <c>imageOrientation</c> to <c>ALAssetOrientation</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c>
                    </li>
                </ul>
            </remarks>
            <param name="imageRef">
            </param>
            <param name="orientation">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.WriteVideoAtPathToSavedPhotosAlbum(U3DXT.iOS.Native.Foundation.NSURL,System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Saves a video identified by a given URL to the Saved Photos album.
            <br></br>Equivalent to the native <c>writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>videoPathURL</em>
                <p>An URL that points to a video file.</p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryWriteVideoCompletionBlock</c>.</p>
                <b>Discussion</b>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– videoAtPathIsCompatibleWithSavedPhotosAlbum:</c>
                    </li>
                    <li>
                        <c>– writeImageToSavedPhotosAlbum:orientation:completionBlock:</c>
                    </li>
                </ul>
            </remarks>
            <param name="videoPathURL">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes">
            <summary>
            AssetsLibrary-related error codes
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.AccessGloballyDeniedError">
            <summary>
                <p>Access to the library was denied globally.</p>
                <p>This error may be returned in the <c>ALAssetsLibraryAccessFailureBlock</c> block for <c>enumerateGroupsWithTypes:usingBlock:failureBlock:</c> and <c>assetForURL:resultBlock:failureBlock:</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryAccessGloballyDeniedError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.AccessUserDeniedError">
            <summary>
                <p>The user denied access to the library.</p>
                <p>This error may be returned in the <c>ALAssetsLibraryAccessFailureBlock</c> block for <c>enumerateGroupsWithTypes:usingBlock:failureBlock:</c> and <c>assetForURL:resultBlock:failureBlock:</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryAccessUserDeniedError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.WriteIncompatibleDataError">
            <summary>
                <p>The data contained incompatible data.</p>
                <p>This error may be returned in the completion block for <c>writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c> and <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> as well as the completion selector for <c>UIImageWriteToSavedPhotosAlbum</c> and <c>UISaveVideoAtPathToSavedPhotosAlbum</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryWriteIncompatibleDataError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.WriteFailedError">
            <summary>
                <p>The attempt to write data failed.</p>
                <p>This error may be returned in the completion block for <c>writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c> and <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> as well as the completion selector for <c>UIImageWriteToSavedPhotosAlbum</c> and <c>UISaveVideoAtPathToSavedPhotosAlbum</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryWriteFailedError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.UnknownError">
            <summary>
                <p>The reason for the error is unknown.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryUnknownError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.WriteBusyError">
            <summary>
                <p>Writing was already busy when the attempt to write was made.</p>
                <p>You should attempt the write again.</p>
                <p>This error may be returned in the completion block for <c>writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c> and <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> as well as the completion selector for <c>UIImageWriteToSavedPhotosAlbum</c> and <c>UISaveVideoAtPathToSavedPhotosAlbum</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryWriteBusyError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.WriteDiskSpaceError">
            <summary>
                <p>There was not enough space on the disk to write the data.</p>
                <p>This error may be returned in the completion block for <c>writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c> and <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> as well as the completion selector for <c>UIImageWriteToSavedPhotosAlbum</c> and <c>UISaveVideoAtPathToSavedPhotosAlbum</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryWriteDiskSpaceError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.WriteDataEncodingError">
            <summary>
                <p>The data contained data with the wrong encoding.</p>
                <p>This error may be returned in the completion block for <c>writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c> and <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> as well as the completion selector for <c>UIImageWriteToSavedPhotosAlbum</c> and <c>UISaveVideoAtPathToSavedPhotosAlbum</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryWriteDataEncodingError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.WriteInvalidDataError">
            <summary>
                <p>The data was invalid.</p>
                <p>This error may be returned in the completion block for <c>writeVideoAtPathToSavedPhotosAlbum:completionBlock:</c> and <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> as well as the completion selector for <c>UIImageWriteToSavedPhotosAlbum</c> and <c>UISaveVideoAtPathToSavedPhotosAlbum</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryWriteInvalidDataError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryErrorCodes.DataUnavailableError">
            <summary>
                <p>The data was not available.</p>
                <p>This error may be returned in the <c>ALAssetsLibraryAccessFailureBlock</c> for <c>enumerateGroupsWithTypes:usingBlock:failureBlock:</c> and <c>assetForURL:resultBlock:failureBlock:</c>; and in the completion blocks for <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c> and <c>writeImageToSavedPhotosAlbum:orientation:completionBlock:</c>; as well as in the completion selector for <c>UIImageWriteToSavedPhotosAlbum</c> and <c>UISaveVideoAtPathToSavedPhotosAlbum</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsLibraryDataUnavailableError</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset">
            <summary>
            Constants to identify types of asset.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset.Faces">
            <summary>
                <p>All the faces albums synced from iTunes.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupFaces</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset.All">
            <summary>
                <p>The same as ORing together all the group types except for <c>ALAssetsGroupLibrary</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupAll</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset.Library">
            <summary>
                <p>The Library group that includes all assets that are synced from iTunes.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupLibrary</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset.SavedPhotos">
            <summary>
                <p>All the photos in the Camera Roll.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupSavedPhotos</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset.PhotoStream">
            <summary>
                <p>The PhotoStream album.</p>
                <p>In iOS 6.0 and later, this also includes Shared Streams.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupPhotoStream</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset.Event">
            <summary>
                <p>All events, including those created during Camera Connection Kit import.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupEvent</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibraryTypesofAsset.Album">
            <summary>
                <p>All the albums created on the device or synced from iTunes, not including Photo Stream or Shared Streams</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAssetsGroupAlbum</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAuthorizationStatus">
            <summary>
            Constants to indicate authorization status.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAuthorizationStatus.Denied">
            <summary>
                <p>User has explicitly denied this application access to photos data.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAuthorizationStatusDenied</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAuthorizationStatus.Restricted">
            <summary>
                <p>This application is not authorized to access photo data.</p>
                <p>The user cannot change this application’s status, possibly due to active restrictions such as parental controls being in place.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAuthorizationStatusRestricted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAuthorizationStatus.Authorized">
            <summary>
                <p>User has authorized this application to access photos data.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAuthorizationStatusAuthorized</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AssetsLibrary.ALAuthorizationStatus.NotDetermined">
            <summary>
                <p>User has not yet made a choice with regards to this application.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>ALAuthorizationStatusNotDetermined</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSCoder">
            <summary>
            The <c>NSCoder</c> abstract class declares the interface used by concrete subclasses to transfer objects and other Objective-C data items between memory and some other format. This capability provides the basis for archiving (where objects and data items are stored on disk) and distribution (where objects and data items are copied between different processes or threads). The concrete subclasses provided by Foundation for these purposes are <c>NSArchiver</c>, <c>NSUnarchiver</c>, <c>NSKeyedArchiver</c>, <c>NSKeyedUnarchiver</c>, and <c>NSPortCoder</c>. Concrete subclasses of <c>NSCoder</c> are referred to in general as coder classes, and instances of these classes as coder objects (or simply coders). A coder object that can only encode values is referred to as an encoder object, and one that can only decode values as a decoder object.
            </summary>
            <remarks>
                <p>
                    <c>NSCoder</c> operates on objects, scalars, C arrays, structures, and strings, and on pointers to these types. It does not handle types whose implementation varies across platforms, such as union, void *, function pointers, and long chains of pointers. A coder object stores object type information along with the data, so an object decoded from a stream of bytes is normally of the same class as the object that was originally encoded into the stream. An object can change its class when encoded, however; this is described in <em>Archives and Serializations Programming Guide</em>.</p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	For details of how to create a subclass of <c>NSCoder</c>, see  “Subclassing NSCoder”  in <em>Archives and Serializations Programming Guide</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_allowsKeyedCoding(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_containsValueForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeBoolForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeCGAffineTransformForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeCGPointForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeCGRectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeCGSizeForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeDataObject(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeDoubleForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeFloatForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeInt32ForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeInt64ForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeIntegerForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeIntForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeObject(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodeObjectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_decodePropertyListForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeBool_forKey_(System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeBycopyObject_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeByrefObject_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeCGAffineTransform_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeCGPoint_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeCGRect_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeCGSize_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeConditionalObject_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeConditionalObject_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeDataObject_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeDouble_forKey_(System.String,System.Double,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeFloat_forKey_(System.String,System.Single,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeInt32_forKey_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeInt64_forKey_(System.String,System.Int64,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeInt_forKey_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeInteger_forKey_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeObject_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeObject_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_encodeRootObject_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_requiresSecureCoding(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.UP_NSCoder_systemVersion(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSCoder" /> class.
            <br></br>Equivalent to the native <c>[[NSCoder alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSCoder.ClassExists">
            <summary>
            Returns whether the native NSCoder class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.AllowsKeyedCoding">
            <summary>
            Returns a Boolean value that indicates whether the receiver supports keyed coding of objects.
            <br></br>Equivalent to the native <c>allowsKeyedCoding</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default implementation returns <c>false</c>. Concrete subclasses that support keyed coding, such as <c>NSKeyedArchiver</c>, need to override this method to return <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.ContainsValue(System.String)">
            <summary>
            Returns a Boolean value that indicates whether an encoded value is available for a string.
            <br></br>Equivalent to the native <c>containsValueForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding. </p>
                <p>The string is passed as <em>key</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeBool(System.String)">
            <summary>
            Decodes and returns a boolean value that was previously encoded with <c>encodeBool:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeBoolForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeCGAffineTransform(System.String)">
            <summary>
            Decodes and returns the <c>Matrix4x4</c> structure associated with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>decodeCGAffineTransformForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key that identifies the affine transform.</p>
                <b>Return Value</b>
                <p>The affine transform.</p>
                <b>Discussion</b>
                <p>Use this method to decode size information that was previously encoded using the <c>encodeCGAffineTransform:forKey:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeCGAffineTransform:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeCGPoint(System.String)">
            <summary>
            Decodes and returns the <c>Vector2</c> structure associated with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>decodeCGPointForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key that identifies the point.</p>
                <b>Return Value</b>
                <p>The <c>Vector2</c> structure.</p>
                <b>Discussion</b>
                <p>Use this method to decode a point that was previously encoded using the <c>encodeCGPoint:forKey:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeCGPoint:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeCGRect(System.String)">
            <summary>
            Decodes and returns the <c>Rect</c> structure associated with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>decodeCGRectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key that identifies the rectangle.</p>
                <b>Return Value</b>
                <p>The <c>Rect</c> structure.</p>
                <b>Discussion</b>
                <p>Use this method to decode a rectangle that was previously encoded using the <c>encodeCGRect:forKey:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeCGRect:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeCGSize(System.String)">
            <summary>
            Decodes and returns the <c>Size</c> structure associated with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>decodeCGSizeForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key that identifies the size information.</p>
                <b>Return Value</b>
                <p>The <c>Size</c> structure.</p>
                <b>Discussion</b>
                <p>Use this method to decode size information that was previously encoded using the <c>encodeCGSize:forKey:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeCGSize:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeDataObject">
            <summary>
            Decodes and returns an <c>NSData</c> object that was previously encoded with <c>encodeDataObject:</c>. Subclasses must override this method.
            <br></br>Equivalent to the native <c>decodeDataObject</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The implementation of your overriding method must match the implementation of your <c>encodeDataObject:</c> method. For example, a typical <c>encodeDataObject:</c> method encodes the number of bytes of data followed by the bytes themselves. Your override of this method must read the number of bytes, create an <c>NSData</c> object of the appropriate size, and decode the bytes into the new <c>NSData</c> object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeDouble(System.String)">
            <summary>
            Decodes and returns a double value that was previously encoded with either <c>encodeFloat:forKey:</c> or <c>encodeDouble:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeDoubleForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeFloat(System.String)">
            <summary>
            Decodes and returns a float value that was previously encoded with <c>encodeFloat:forKey:</c> or <c>encodeDouble:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeFloatForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the value was encoded as a double, the extra precision is lost. If the encoded real value does not fit into a float, the method raises an <c>NSRangeException</c>. Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeInt32(System.String)">
            <summary>
            Decodes and returns a 32-bit integer value that was previously encoded with <c>encodeInt:forKey:</c>, <c>encodeInteger:forKey:</c>, <c>encodeInt32:forKey:</c>, or <c>encodeInt64:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeInt32ForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the encoded integer does not fit into a 32-bit integer, the method raises an <c>NSRangeException</c>. Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeInt64(System.String)">
            <summary>
            Decodes and returns a 64-bit integer value that was previously encoded with <c>encodeInt:forKey:</c>, <c>encodeInteger:forKey:</c>, <c>encodeInt32:forKey:</c>, or <c>encodeInt64:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeInt64ForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeInteger(System.String)">
            <summary>
            Decodes and returns an NSInteger value that was previously encoded with <c>encodeInt:forKey:</c>, <c>encodeInteger:forKey:</c>, <c>encodeInt32:forKey:</c>, or <c>encodeInt64:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeIntegerForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the encoded integer does not fit into the NSInteger size, the method raises an <c>NSRangeException</c>. Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeInt(System.String)">
            <summary>
            Decodes and returns an int value that was previously encoded with <c>encodeInt:forKey:</c>, <c>encodeInteger:forKey:</c>, <c>encodeInt32:forKey:</c>, or <c>encodeInt64:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeIntForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the encoded integer does not fit into the default integer size, the method raises an <c>NSRangeException</c>. Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeObject">
            <summary>
            Decodes an Objective-C object that was previously encoded with any of the <c>encode...Object:</c> methods.
            <br></br>Equivalent to the native <c>decodeObject</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>NSCoder</c>’s implementation invokes <c>decodeValueOfObjCType:at:</c> to decode the object data.</p>
                <p>Subclasses may need to override this method if they override any of the corresponding <c>encode...Object:</c> methods. For example, if an object was encoded conditionally using the <c>encodeConditionalObject:</c> method, this method needs to check whether the object had actually been encoded.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeBycopyObject:</c>
                    </li>
                    <li>
                        <c>– encodeByrefObject:</c>
                    </li>
                    <li>
                        <c>– encodeObject:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodeObject(System.String)">
            <summary>
            Decodes and returns an Objective-C object that was previously encoded with <c>encodeObject:forKey:</c> or <c>encodeConditionalObject:forKey:</c> and associated with the string <em>key</em>.
            <br></br>Equivalent to the native <c>decodeObjectForKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.DecodePropertyList(System.String)">
            <summary>
            Returns a decoded property list for the specified key.
            <br></br>Equivalent to the native <c>decodePropertyListForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The coder key.</p>
                <b>Return Value</b>
                <p>A decoded object containing a property list.</p>
                <b>Discussion</b>
                <p>This method calls <c>decodeObjectOfClasses:forKey:</c> with a set allowing only property list types.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeBool(System.Boolean,System.String)">
            <summary>
            Encodes <em>boolv</em> and associates it with the string <em>key</em>.
            <br></br>Equivalent to the native <c>encodeBool:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeBoolForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="boolv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeBycopyObject(System.Object)">
            <summary>
            Can be overridden by subclasses to encode <em>object</em> so that a copy, rather than a proxy, is created upon decoding.
            <br></br>Equivalent to the native <c>encodeBycopyObject:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>NSCoder</c>’s implementation simply invokes <c>encodeObject:</c>.</p>
                <p>This method must be matched by a corresponding <c>decodeObject</c> message.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeRootObject:</c>
                    </li>
                    <li>
                        <c>– encodeConditionalObject:</c>
                    </li>
                    <li>
                        <c>– encodeByrefObject:</c>
                    </li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeByrefObject(System.Object)">
            <summary>
            Can be overridden by subclasses to encode <em>object</em> so that a proxy, rather than a copy, is created upon decoding.
            <br></br>Equivalent to the native <c>encodeByrefObject:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>NSCoder</c>’s implementation simply invokes <c>encodeObject:</c>.</p>
                <p>This method must be matched by a corresponding <c>decodeObject</c> message.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeBycopyObject:</c>
                    </li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeCGAffineTransform(UnityEngine.Matrix4x4,System.String)">
            <summary>
            Encodes an affine transform and associates it with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>encodeCGAffineTransform:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>transform</em>
                <p>The transform information to encode.</p>
                <em>key</em>
                <p>The key identifying the data. </p>
                <b>Discussion</b>
                <p>When decoding the data from the archive, you pass the value in the <em>key</em> parameter to the corresponding <c>decodeCGAffineTransformForKey:</c> method to retrieve the data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeCGAffineTransformForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="transform">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeCGPoint(UnityEngine.Vector2,System.String)">
            <summary>
            Encodes a point and associates it with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>encodeCGPoint:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>point</em>
                <p>The point to encode.</p>
                <em>key</em>
                <p>The key identifying the data. </p>
                <b>Discussion</b>
                <p>When decoding the data from the archive, you pass the value in the <em>key</em> parameter to the corresponding <c>decodeCGPointForKey:</c> method to retrieve the data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeCGPointForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="point">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeCGRect(UnityEngine.Rect,System.String)">
            <summary>
            Encodes a rectangle and associates it with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>encodeCGRect:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle to encode.</p>
                <em>key</em>
                <p>The key identifying the data. </p>
                <b>Discussion</b>
                <p>When decoding the data from the archive, you pass the value in the <em>key</em> parameter to the corresponding <c>decodeCGRectForKey:</c> method to retrieve the data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeCGRectForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeCGSize(U3DXT.Utils.Size,System.String)">
            <summary>
            Encodes size information and associates it with the specified key in the receiver’s archive.
            <br></br>Equivalent to the native <c>encodeCGSize:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The size information to encode.</p>
                <em>key</em>
                <p>The key identifying the data. </p>
                <b>Discussion</b>
                <p>When decoding the data from the archive, you pass the value in the <em>key</em> parameter to the corresponding <c>decodeCGSizeForKey:</c> method to retrieve the data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeCGSizeForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="size">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeConditionalObject(System.Object)">
            <summary>
            Can be overridden by subclasses to conditionally encode <em>object</em>, preserving common references to that object.
            <br></br>Equivalent to the native <c>encodeConditionalObject:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>In the overriding method, <em>object</em> should be encoded only if it’s unconditionally encoded elsewhere (with any other <c>encode...Object:</c> method).</p>
                <p>This method must be matched by a subsequent <c>decodeObject</c> message. Upon decoding, if <em>object</em> was never encoded unconditionally, <c>decodeObject</c> returns <c>null</c> in place of <em>object</em>. However, if <em>object</em> was encoded unconditionally, all references to <em>object</em> must be resolved.</p>
                <p>
                    <c>NSCoder</c>’s implementation simply invokes <c>encodeObject:</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeRootObject:</c>
                    </li>
                    <li>
                        <c>– encodeObject:</c>
                    </li>
                    <li>
                        <c>– encodeBycopyObject:</c>
                    </li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeConditionalObject(System.Object,System.String)">
            <summary>
            Conditionally encodes a reference to <em>objv</em> and associates it with the string <em>key</em> only if <em>objv</em> has been unconditionally encoded with <c>encodeObject:forKey:</c>.
            <br></br>Equivalent to the native <c>encodeConditionalObject:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they support keyed coding.</p>
                <p>The encoded object is decoded with the <c>decodeObjectForKey:</c> method. If <em>objv</em> was never encoded unconditionally, <c>decodeObjectForKey:</c> returns <c>null</c> in place of <em>objv</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="objv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeDataObject(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Encodes a given <c>NSData</c> object.
            <br></br>Equivalent to the native <c>encodeDataObject:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method.</p>
                <p>This method must be matched by a subsequent <c>decodeDataObject</c> message. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeObject:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeDouble(System.Double,System.String)">
            <summary>
            Encodes <em>realv</em> and associates it with the string <em>key</em>.
            <br></br>Equivalent to the native <c>encodeDouble:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeDoubleForKey:</c>
                    </li>
                    <li>
                        <c>– decodeFloatForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="realv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeFloat(System.Single,System.String)">
            <summary>
            Encodes <em>realv</em> and associates it with the string <em>key</em>.
            <br></br>Equivalent to the native <c>encodeFloat:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeFloatForKey:</c>
                    </li>
                    <li>
                        <c>– decodeDoubleForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="realv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeInt32(System.Int32,System.String)">
            <summary>
            Encodes the 32-bit integer <em>intv</em> and associates it with the string <em>key</em>.
            <br></br>Equivalent to the native <c>encodeInt32:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeIntForKey:</c>
                    </li>
                    <li>
                        <c>– decodeIntegerForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt32ForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt64ForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="intv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeInt64(System.Int64,System.String)">
            <summary>
            Encodes the 64-bit integer <em>intv</em> and associates it with the string <em>key</em>.
            <br></br>Equivalent to the native <c>encodeInt64:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeIntForKey:</c>
                    </li>
                    <li>
                        <c>– decodeIntegerForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt32ForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt64ForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="intv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeInt(System.Int32,System.String)">
            <summary>
            Encodes <em>intv</em> and associates it with the string <em>key</em>.
            <br></br>Equivalent to the native <c>encodeInt:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeIntForKey:</c>
                    </li>
                    <li>
                        <c>– decodeIntegerForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt32ForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt64ForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="intv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeInteger(System.Int32,System.String)">
            <summary>
            Encodes a given <c>int</c> and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeInteger:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method if they perform keyed coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeIntForKey:</c>
                    </li>
                    <li>
                        <c>– decodeIntegerForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt32ForKey:</c>
                    </li>
                    <li>
                        <c>– decodeInt64ForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="intv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeObject(System.Object)">
            <summary>
            Encodes <em>object</em>.
            <br></br>Equivalent to the native <c>encodeObject:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>NSCoder</c>’s implementation simply invokes <c>encodeValueOfObjCType:at:</c> to encode <em>object</em>. Subclasses can override this method to encode a reference to <em>object</em> instead of <em>object</em> itself. For example, <c>NSArchiver</c> detects duplicate objects and encodes a reference to the original object rather than encode the same object twice.</p>
                <p>This method must be matched by a subsequent <c>decodeObject</c> message.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeRootObject:</c>
                    </li>
                    <li>
                        <c>– encodeConditionalObject:</c>
                    </li>
                    <li>
                        <c>– encodeBycopyObject:</c>
                    </li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeObject(System.Object,System.String)">
            <summary>
            Encodes the object <em>objv</em> and associates it with the string <em>key</em>.
            <br></br>Equivalent to the native <c>encodeObject:forKey:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses must override this method to identify multiple encodings of <em>objv</em> and encode a reference to <em>objv</em> instead. For example, <c>NSKeyedArchiver</c> detects duplicate objects and encodes a reference to the original object rather than encode the same object twice.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decodeObjectForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="objv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.EncodeRootObject(System.Object)">
            <summary>
            Can be overridden by subclasses to encode an interconnected group of Objective-C objects, starting with <em>rootObject</em>.
            <br></br>Equivalent to the native <c>encodeRootObject:</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>NSCoder</c>’s implementation simply invokes <c>encodeObject:</c>.</p>
                <p>This method must be matched by a subsequent <c>decodeObject</c> message.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– encodeObject:</c>
                    </li>
                    <li>
                        <c>– encodeConditionalObject:</c>
                    </li>
                    <li>
                        <c>– encodeBycopyObject:</c>
                    </li>
                </ul>
            </remarks>
            <param name="rootObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.RequiresSecureCoding">
            <summary>
            Returns whether the coder requires secure coding.
            <br></br>Equivalent to the native <c>requiresSecureCoding</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if this coder requires secure coding; <c>false</c> otherwise.</p>
                <b>Discussion</b>
                <p>Secure coders check a set of allowed classes before decoding objects, and all objects must implement the <c>NSSecureCoding</c> protocol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– allowsKeyedCoding</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCoder.SystemVersion">
            <summary>
            During encoding, this method should return the system version currently in effect.
            <br></br>Equivalent to the native <c>systemVersion</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>During decoding, this method should return the version that was in effect when the data was encoded.</p>
                <p>By default, this method returns the current system version, which is appropriate for encoding but not for decoding. Subclasses that implement decoding must override this method to return the system version of the data being decoded.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerationOptions">
            <summary>
            Options for enumerating the contents of directories with the <c>contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:</c> method.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerationOptions.PackageDescendants">
            <summary>
                <p>Do not descend into packages.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDirectoryEnumerationSkipsPackageDescendants</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerationOptions.HiddenFiles">
            <summary>
                <p>Do not enumerate hidden files.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDirectoryEnumerationSkipsHiddenFiles</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerationOptions.SubdirectoryDescendants">
            <summary>
                <p>Perform a shallow enumeration; do not descend into directories.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDirectoryEnumerationSkipsSubdirectoryDescendants</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator">
            <summary>
            An <c>NSDirectoryEnumerator</c> object enumerates the contents of a directory, returning the pathnames of all files and directories contained within that directory. These pathnames are relative to the directory.
            </summary>
            <remarks>
                <p>You obtain a directory enumerator using <c>NSFileManager</c>’s <c>enumeratorAtPath:</c> method. For more details, see <em><!--a target="_self" -->Low-Level File Management Programming Topics<!--/a--></em>.</p>
                <p>An enumeration is recursive, including the files of all subdirectories, and crosses device boundaries. An enumeration does not resolve symbolic links, or attempt to traverse symbolic links that point to directories.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.UP_NSDirectoryEnumerator_directoryAttributes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.UP_NSDirectoryEnumerator_fileAttributes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.UP_NSDirectoryEnumerator_level(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.UP_NSDirectoryEnumerator_skipDescendants(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.UP_NSDirectoryEnumerator_skipDescendents(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator" /> class.
            <br></br>Equivalent to the native <c>[[NSDirectoryEnumerator alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.ClassExists">
            <summary>
            Returns whether the native NSDirectoryEnumerator class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.DirectoryAttributes">
            <summary>
            Returns an <c>Dictionary</c> object that contains the attributes of the directory at which enumeration started.
            <br></br>Equivalent to the native <c>directoryAttributes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>Dictionary</c> object that contains the attributes of the directory at which enumeration started.</p>
                <b>Discussion</b>
                <p>See the description of the <c>fileAttributesAtPath:traverseLink:</c> method of <c>NSFileManager</c> for details on obtaining the attributes from the dictionary. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>createDirectoryAtPath:attributes:</c> (<c>NSFileManager</c>)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.FileAttributes">
            <summary>
            Returns an object that contains the attributes of the most recently returned file or subdirectory (as referenced by the pathname).
            <br></br>Equivalent to the native <c>fileAttributes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary that contains the attributes of the most recently returned file or subdirectory (as referenced by the pathname).</p>
                <b>Discussion</b>
                <p>See the description of the <c>fileAttributesAtPath:traverseLink:</c> method of <c>NSFileManager</c> for details on obtaining the attributes from the dictionary. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.Level">
            <summary>
            Returns the number of levels deep the current object is in the directory hierarchy being enumerated.
            <br></br>Equivalent to the native <c>level</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of levels, with the directory passed to <c>enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c> (<c>NSFileManager</c>) considered to be level <c>0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.SkipDescendants">
            <summary>
            Causes the receiver to skip recursion into the most recently obtained subdirectory.
            <br></br>Equivalent to the native <c>skipDescendants</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method is identical to <c>skipDescendents</c> except for the spelling.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDirectoryEnumerator.SkipDescendents">
            <summary>
            Causes the receiver to skip recursion into the most recently obtained subdirectory.
            <br></br>Equivalent to the native <c>skipDescendents</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– skipDescendants</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSFileManager">
            <summary>
            The <c>NSFileManager</c> class enables you to perform many generic file-system operations and insulates an app from the underlying file system. Most file operations can be performed using the shared file manager object. In iOS and in OS X v10.5 and later, you can also create a unique instance of <c>NSFileManager</c> in cases where you want to use a delegate object in conjunction with the file manager.
            </summary>
            <remarks>
                <p>In Cocoa apps, a file manager object is usually your first interaction with the file system. You use this object to locate, create, copy, and move files and directories. You also use this object to get information about files and directories, such as its size,  modification date, and BSD permissions. You can also use a file manager object to change the values of many file and directory attributes. </p>
                <p>The <c>NSFileManager</c> class supports both the <c>NSURL</c> and <c>String</c> classes as ways to specify the location of a file or directory. The use of the <c>NSURL</c> class is generally preferred for specifying file-system items because they can convert path information to a more efficient representation internally. You can also obtain a bookmark from an <c>NSURL</c> object, which is similar to an alias and offers a more sure way of locating the file or directory later.</p>
                <p>If you are moving, copying, linking, or removing files or directories, you can use a delegate in conjunction with a file manager object to manage those operations. The delegate’s role is to affirm the operation and to decide whether to proceed when errors occur. In OS X v10.7 and later, the delegate must conform to the <c>NSFileManagerDelegate</c> protocol. </p>
                <p>In iOS 5.0 and later and in OS X v10.7 and later, <c>NSFileManager</c> includes methods for managing items stored in the cloud. Files and directories tagged for cloud storage are synced to iCloud so that they can be made available to the user’s iOS devices and Macintosh computers. Changes to an item in one location are propagated to all other locations to ensure the items stay in sync. </p>
                <b>Threading Considerations</b>
                <p>The methods of the shared <c>NSFileManager</c> object can be called from multiple threads safely. However, if you use a delegate to receive notifications about the status of move, copy, remove, and link operations, you should create a unique instance of the file manager object, assign your delegate to that object, and use that file manager to initiate your operations.  </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSFileManager.NSUbiquityIdentityDidChangeNotification">
            <summary>
            Constant name for the native <c>NSUbiquityIdentityDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSFileManager.UbiquityIdentityDidChange">
            <summary>
                <b>NSUbiquityIdentityDidChangeNotification</b> Sent after the iCloud (“ubiquity”) identity has changed. <p>When your app receives this notification, call the <c>ubiquityIdentityToken</c> method to obtain a token that represents the new ubiquity identity, or <c>null</c> if the user has disabled iCloud. There is no <c>userInfo</c> dictionary.</p><b>Availability</b><ul><li>Available in iOS 6.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSUbiquityIdentityDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSFileManager.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSFileManager.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>NSFileManager</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSFileManager.AllInstances.UbiquityIdentityDidChange">
            <summary>
                <b>NSUbiquityIdentityDidChangeNotification</b> Sent after the iCloud (“ubiquity”) identity has changed. <p>When your app receives this notification, call the <c>ubiquityIdentityToken</c> method to obtain a token that represents the new ubiquity identity, or <c>null</c> if the user has disabled iCloud. There is no <c>userInfo</c> dictionary.</p><b>Availability</b><ul><li>Available in iOS 6.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSUbiquityIdentityDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_defaultManager">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_attributesOfFileSystemForPath_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_attributesOfItemAtPath_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_changeCurrentDirectoryPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_changeFileAttributes_atPath_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_componentsToDisplayForPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_contentsAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_contentsEqualAtPath_andPath_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_contentsOfDirectoryAtPath_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(System.String,System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_copyItemAtPath_toPath_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_copyItemAtURL_toURL_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_createDirectoryAtPath_attributes_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_createFileAtPath_contents_attributes_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_createSymbolicLinkAtPath_pathContent_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_createSymbolicLinkAtPath_withDestinationPath_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_createSymbolicLinkAtURL_withDestinationURL_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_currentDirectoryPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_destinationOfSymbolicLinkAtPath_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_directoryContentsAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_displayNameAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_enumeratorAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(System.String,System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_evictUbiquitousItemAtURL_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_fileAttributesAtPath_traverseLink_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_fileExistsAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_fileSystemAttributesAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_isDeletableFileAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_isExecutableFileAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_isReadableFileAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_isUbiquitousItemAtURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_isWritableFileAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_linkItemAtPath_toPath_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_linkItemAtURL_toURL_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_mountedVolumeURLsIncludingResourceValuesForKeys_options_(System.String,System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_moveItemAtPath_toPath_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_moveItemAtURL_toURL_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_pathContentOfSymbolicLinkAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_removeItemAtPath_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_removeItemAtURL_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(System.String,System.String,System.String,System.String,System.UInt32,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_setAttributes_ofItemAtPath_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_setDelegate_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_setUbiquitous_itemAtURL_destinationURL_error_(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_startDownloadingUbiquitousItemAtURL_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_subpathsAtPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_subpathsOfDirectoryAtPath_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_ubiquityIdentityToken(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_URLForDirectory_inDomain_appropriateForURL_create_error_(System.String,System.UInt32,System.UInt32,System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_URLForUbiquityContainerIdentifier_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UP_NSFileManager_URLsForDirectory_inDomains_(System.String,System.UInt32,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSFileManager" /> class.
            <br></br>Equivalent to the native <c>[[NSFileManager alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManager.ClassExists">
            <summary>
            Returns whether the native NSFileManager class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.DefaultManager">
            <summary>
            Returns the shared file manager object for the process.
            <br></br>Equivalent to the native <c>defaultManager</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The default <c>NSFileManager</c> object for the file system.</p>
                <b>Discussion</b>
                <p>This method always returns the same file manager object. If you plan to use a delegate with the file manager to receive notifications about the completion of file-based operations, you should create a new instance of <c>NSFileManager</c> (using the <c>init</c> method) rather than using the shared object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.AttributesOfFileSystem(System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns a dictionary that describes the attributes of the mounted file system on which a given path resides.
            <br></br>Equivalent to the native <c>attributesOfFileSystemForPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>Any pathname within the mounted file system.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>An <c>Dictionary</c> object that describes the attributes of the mounted file system on which <em>path</em> resides. See  “File-System Attribute Keys”  for a description of the keys available in the dictionary.</p>
                <b>Discussion</b>
                <p>This method does not traverse a terminal symbolic link.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– attributesOfItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.AttributesOfItemAtPath(System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns the attributes of the item at a given path.
            <br></br>Equivalent to the native <c>attributesOfItemAtPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of a file or directory.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>An <c>Dictionary</c> object that describes the attributes (file, directory, symlink, and so on) of the file specified by <em>path</em>. The keys in the dictionary are described in <c>“File Attribute Keys”</c>.</p>
                <b>Special Considerations</b>
                <p>This method does not traverse symbolic links. If the item at the path is a symbolic link—that is, the value of the <c>NSFileType</c> key in the attributes dictionary is <c>NSFileTypeSymbolicLink</c>—you can use the <c>destinationOfSymbolicLinkAtPath:error:</c> method to retrieve the path of the item pointed to by the link. You can also use the <c>stringByResolvingSymlinksInPath</c> method of <c>String</c> to resolve links in the path before retrieving the item’s attributes. </p>
                <p>As a convenience, <c>Dictionary</c> provides a set of methods (declared as a category on <c>Dictionary</c>) for quickly and efficiently obtaining attribute information from the returned dictionary: <c>fileGroupOwnerAccountName</c>, <c>fileModificationDate</c>, <c>fileOwnerAccountName</c>, <c>filePosixPermissions</c>, <c>fileSize</c>, <c>fileSystemFileNumber</c>, <c>fileSystemNumber</c>, and <c>fileType</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ChangeCurrentDirectoryPath(System.String)">
            <summary>
            Changes the path of the current working directory to the specified path.
            <br></br>Equivalent to the native <c>changeCurrentDirectoryPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of the directory to which to change.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if successful, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>All relative pathnames refer implicitly to the current working directory. Changing the current working directory affects only paths created in the current process.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currentDirectoryPath</c>
                    </li>
                    <li>
                        <c>– fileExistsAtPath:isDirectory:</c>
                    </li>
                    <li>
                        <c>– contentsOfDirectoryAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ChangeFileAttributes(System.Collections.Generic.Dictionary{System.Object,System.Object},System.String)">
            <summary>
            Changes the attributes of a given file or directory.  ( Deprecated in iOS 2.0.  Use <c>setAttributes:ofItemAtPath:error:</c> instead.)
            <br></br>Equivalent to the native <c>changeFileAttributes:atPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>attributes</em>
                <p>A dictionary containing as keys the attributes to set for <em>path</em> and as values the corresponding value for the attribute. You can set following: <c>NSFileBusy</c>, <c>NSFileCreationDate</c>, <c>NSFileExtensionHidden</c>, <c>NSFileGroupOwnerAccountID</c>, <c>NSFileGroupOwnerAccountName</c>, <c>NSFileHFSCreatorCode</c>, <c>NSFileHFSTypeCode</c>, <c>NSFileImmutable</c>, <c>NSFileModificationDate</c>, <c>NSFileOwnerAccountID</c>, <c>NSFileOwnerAccountName</c>, <c>NSFilePosixPermissions</c>. You can change single attributes or any combination of attributes; you need not specify keys for all attributes.</p>
                <p>For the <c>NSFilePosixPermissions</c> value, specify a file mode from the OR’d permission bit masks defined in <c>sys/stat.h</c>. See the man page for the <c>chmod</c> function (<c>man 2 chmod</c>) for an explanation.</p>
                <em>path</em>
                <p>A path to a file or directory.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>all</em> changes succeed. If any change fails, returns <c>false</c>, but it is undefined whether any changes actually occurred.</p>
                <b>Discussion</b>
                <p>As in the POSIX standard, the app either must own the file or directory or must be running as superuser for attribute changes to take effect. The method attempts to make all changes specified in attributes and ignores any rejection of an attempted modification. </p>
                <p>The <c>NSFilePosixPermissions</c> value must be initialized with the code representing the POSIX file-permissions bit pattern. <c>NSFileHFSCreatorCode</c> and <c>NSFileHFSTypeCode</c> will only be heeded when <em>path</em> specifies a file.</p>
                <b>Special Considerations</b>
                <p>Because this method does not return error information, it has been deprecated as of OS X v10.5. Use <c>setAttributes:ofItemAtPath:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 2.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– attributesOfItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="attributes">
            </param>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ComponentsToDisplay(System.String)">
            <summary>
            Returns an array of strings representing the user-visible components of a given path.
            <br></br>Equivalent to the native <c>componentsToDisplayForPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A pathname.</p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects representing the user-visible (for the Finder, Open and Save panels, and so on) components of <em>path</em>. Returns <c>null</c> if path does not exist.</p>
                <b>Discussion</b>
                <p>These components cannot be used for path operations and are only suitable for display to the user.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ContentsAtPath(System.String)">
            <summary>
            Returns the contents of the file at the specified path.
            <br></br>Equivalent to the native <c>contentsAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of the file whose contents you want.</p>
                <b>Return Value</b>
                <p>An <c>NSData</c> object with the contents of the file. If <em>path</em> specifies a directory, or if some other error occurs, this method returns <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– contentsEqualAtPath:andPath:</c>
                    </li>
                    <li>
                        <c>– createFileAtPath:contents:attributes:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ContentsEqualAtPath(System.String,System.String)">
            <summary>
            Returns a Boolean value that indicates whether the files or directories in specified paths have the same contents.
            <br></br>Equivalent to the native <c>contentsEqualAtPath:andPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path1</em>
                <p>The path of a file or directory to compare with the contents of <em>path2</em>.</p>
                <em>path2</em>
                <p>The path of a file or directory to compare with the contents of <em>path1</em>.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if file or directory specified in <em>path1</em> has the same contents as that specified in <em>path2</em>, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>If <em>path1</em> and <em>path2</em> are directories, the contents are the list of files and subdirectories each contains—contents of subdirectories are also compared. For files, this method checks to see if they’re the same file, then compares their size, and finally compares their contents. This method does not traverse symbolic links, but compares the links themselves.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– contentsAtPath:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path1">
            </param>
            <param name="path2">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ContentsOfDirectoryAtPath(System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Performs a shallow search of the specified directory and returns the paths of any contained items.
            <br></br>Equivalent to the native <c>contentsOfDirectoryAtPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path to the directory whose contents you want to enumerate. </p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which identifies a file, directory, or symbolic link contained in <em>path</em>. Returns an empty array if the directory exists but has no contents. If an error occurs, this method returns <c>null</c> and assigns an appropriate error object to the <em>error</em> parameter </p>
                <b>Discussion</b>
                <p>This method performs a shallow search of the directory and therefore does not traverse symbolic links or return the contents of any subdirectories. This method also does not return URLs for the current directory (“.”), parent directory (“..”), or resource forks (files that begin with “<c>._</c>”) but it does return other hidden files (files that begin with a period character). If you need to perform a deep enumeration, use the <c>enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c> method instead.</p>
                <p>The order of the files in the returned array is undefined.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currentDirectoryPath</c>
                    </li>
                    <li>
                        <c>– fileExistsAtPath:isDirectory:</c>
                    </li>
                    <li>
                        <c>– enumeratorAtPath:</c>
                    </li>
                    <li>
                        <c>– subpathsAtPath:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ContentsOfDirectoryAtURL(U3DXT.iOS.Native.Foundation.NSURL,System.Object[],U3DXT.iOS.Native.Foundation.NSDirectoryEnumerationOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Performs a shallow search of the specified directory and returns URLs for the contained items.
            <br></br>Equivalent to the native <c>contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The URL for the directory whose contents you want to enumerate.</p>
                <em>keys</em>
                <p>An array of keys that identify the file properties that you want pre-fetched for each item in the directory. For each returned URL, the specified properties are fetched and cached in the <c>NSURL</c> object. For a list of keys you can specify, see <c>Common File System Resource Keys</c>. </p>
                <em>mask</em>
                <p>Options for the enumeration. Because this method performs only shallow enumerations, the only supported option is  <c>NSDirectoryEnumerationSkipsHiddenFiles</c>.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>An array of <c>NSURL</c> objects, each of which identifies a file, directory, or symbolic link contained in <em>url</em>. If the directory contains no entries, this method returns an empty array. If an error occurs, this method returns <c>null</c> and assigns an appropriate error object to the <em>error</em> parameter.</p>
                <b>Discussion</b>
                <p>This method performs a shallow search of the directory and therefore does not traverse symbolic links or return the contents of any subdirectories. This method also does not return URLs for the current directory (“.”), parent directory (“..”), or resource forks (files that begin with “<c>._</c>”) but it does return other hidden files (files that begin with a period character). If you need to perform a deep enumeration, use the <c>enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c> method instead.</p>
                <p>The order of the files in the returned array is undefined.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– contentsOfDirectoryAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="keys">
            </param>
            <param name="mask">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CopyItemAtPath(System.String,System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Copies the item at the specified path to a new location synchronously.
            <br></br>Equivalent to the native <c>copyItemAtPath:toPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>srcPath</em>
                <p>The path to the file or directory you want to move. This parameter must not be <c>null</c>. </p>
                <em>dstPath</em>
                <p>The path at which to place the copy of <em>srcPath</em>. This path must include the name of the file or directory in its new location. This parameter must not be <c>null</c>.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item was copied successfully or the file manager’s delegate aborted the operation deliberately. Returns <c>false</c> if an error occurred. </p>
                <b>Discussion</b>
                <p>When copying items, the current process must have permission to read the file or directory at <em>srcPath</em> and write the parent directory of <em>dstPath</em>. If the item at <em>srcPath</em> is a directory, this method copies the directory and all of its contents, including any hidden files. If a file with the same name already exists at <em>dstPath</em>, this method aborts the copy attempt and returns an appropriate error. If the last component of <em>srcPath</em> is a symbolic link, only the link is copied to the new path.</p>
                <p>Prior to copying an item, the file manager asks its delegate if it should actually do so for each item. It does this by calling the <c>fileManager:shouldCopyItemAtURL:toURL:</c> method; if that method is not implemented it calls the <c>fileManager:shouldCopyItemAtPath:toPath:</c> method instead. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager copies the given file or directory. If there is an error copying an item, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:</c> or <c>fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:</c> method to determine how to proceed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CopyItemAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Copies the file at the specified URL to a new location synchronously.
            <br></br>Equivalent to the native <c>copyItemAtURL:toURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>srcURL</em>
                <p>The file URL that identifies the file you want to copy. The URL in this parameter must not be a file reference URL. This parameter must not be <c>null</c>.</p>
                <em>dstURL</em>
                <p>The URL at which to place the copy of <em>srcURL</em>. The URL in this parameter must not be a file reference URL and must include the name of the file in its new location. This parameter must not be <c>null</c>. </p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item was copied successfully or the file manager’s delegate aborted the operation deliberately. Returns <c>false</c> if an error occurred. </p>
                <b>Discussion</b>
                <p>When copying items, the current process must have permission to read the file or directory at <em>srcURL</em> and write the parent directory of <em>dstURL</em>. If the item at <em>srcURL</em> is a directory, this method copies the directory and all of its contents, including any hidden files. If a file with the same name already exists at <em>dstURL</em>, this method aborts the copy attempt and returns an appropriate error. If the last component of <em>srcURL</em> is a symbolic link, only the link is copied to the new path.</p>
                <p>Prior to copying each item, the file manager asks its delegate if it should actually do so. It does this by calling the <c>fileManager:shouldCopyItemAtURL:toURL:</c> method; if that method is not implemented (or the process is running in OS X 10.5 or earlier) it calls the <c>fileManager:shouldCopyItemAtPath:toPath:</c> method instead. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager proceeds to copy the file or directory. If there is an error copying an item, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:</c> or <c>fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:</c> method to determine how to proceed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CreateDirectoryAtPath(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates a directory (without contents) at a given path with given attributes. ( Deprecated in iOS 2.0.  Use <c>createDirectoryAtURL:withIntermediateDirectories:attributes:error:</c> instead.)
            <br></br>Equivalent to the native <c>createDirectoryAtPath:attributes:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path at which to create the new directory. The directory to be created must not yet exist, but its parent directory must exist.</p>
                <em>attributes</em>
                <p>The file attributes for the new directory. The attributes you can set are owner and group numbers, file permissions, and modification date. If you specify <c>null</c> for <em>attributes</em>, default values for these attributes are set (particularly write access for the creator and read access for others). The  “Constants”  section lists the global constants used as keys in the <em>attributes</em> dictionary. Some of the keys, such as <c>NSFileHFSCreatorCode</c> and <c>NSFileHFSTypeCode</c>, do not apply to directories.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation was successful or the directory already exists, otherwise <c>false</c>.</p>
                <b>Special Considerations</b>
                <p>Because this method does not return error information, it has been deprecated as of OS X v10.5. Use <c>createDirectoryAtPath:withIntermediateDirectories:attributes:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 2.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– createDirectoryAtPath:withIntermediateDirectories:attributes:error:</c>
                    </li>
                    <li>
                        <c>– changeCurrentDirectoryPath:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– createFileAtPath:contents:attributes:</c>
                    </li>
                    <li>
                        <c>– currentDirectoryPath</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="attributes">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CreateDirectoryAtPath(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.Object,System.Object},U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates a directory with given attributes at the specified path.
            <br></br>Equivalent to the native <c>createDirectoryAtPath:withIntermediateDirectories:attributes:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A path string identifying the directory to create. You may specify a full path or a path that is relative to the current working directory. This parameter must not be <c>null</c>.</p>
                <em>createIntermediates</em>
                <p>If <c>true</c>, this method creates any non-existent parent directories as part of creating the directory in <em>url</em>. If <c>false</c>, this method fails if any of the intermediate parent directories does not exist. This method also fails if any of the intermediate path elements corresponds to a file and not a directory.</p>
                <em>attributes</em>
                <p>The file attributes for the new directory and any newly created intermediate directories. You can set the owner and group numbers, file permissions, and modification date. If you specify <c>null</c> for this parameter or omit a particular value, one or more default values are used as described in the discussion. For a list of keys you can include in this dictionary, see  “Constants”  section lists the global constants used as keys in the <em>attributes</em> dictionary. Some of the keys, such as <c>NSFileHFSCreatorCode</c> and <c>NSFileHFSTypeCode</c>, do not apply to directories.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the directory was created or already exists or <c>false</c> if an error occurred. </p>
                <b>Discussion</b>
                <p>If you specify <c>null</c> for the <em>attributes</em> parameter, this method uses a default set of values for the owner, group, and permissions of any newly created directories in the path. Similarly, if you omit a specific attribute, the default value is used. The default values for newly created directories are as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Permissions are set according to the umask of the current process. For more information, see <c>umask</c>. </p>
                    </li>
                    <li class="li">
                        <p>The owner ID is set to the effective user ID of the process.</p>
                    </li>
                    <li class="li">
                        <p>The group ID is set to that of the parent directory.</p>
                    </li>
                </ul>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– createDirectoryAtURL:withIntermediateDirectories:attributes:error:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="createIntermediates">
            </param>
            <param name="attributes">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CreateDirectoryAtURL(U3DXT.iOS.Native.Foundation.NSURL,System.Boolean,System.Collections.Generic.Dictionary{System.Object,System.Object},U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates a directory with the given attributes at the specified URL.
            <br></br>Equivalent to the native <c>createDirectoryAtURL:withIntermediateDirectories:attributes:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>A file URL that specifies the directory to create. If you want to specify a relative path, you must set the current working directory before creating the corresponding <c>NSURL</c> object. This parameter must not be <c>null</c>. </p>
                <em>createIntermediates</em>
                <p>If <c>true</c>, this method creates any non-existent parent directories as part of creating the directory in <em>url</em>. If <c>false</c>, this method fails if any of the intermediate parent directories does not exist. </p>
                <em>attributes</em>
                <p>The file attributes for the new directory. You can set the owner and group numbers, file permissions, and modification date. If you specify <c>null</c> for this parameter, the directory is created according to the <c>umask(2) OS X Developer Tools
            Manual Page</c> of the process. The  “Constants”  section lists the global constants used as keys in the <em>attributes</em> dictionary. Some of the keys, such as <c>NSFileHFSCreatorCode</c> and <c>NSFileHFSTypeCode</c>, do not apply to directories.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the directory was created or already exists or <c>false</c> if an error occurred. </p>
                <b>Discussion</b>
                <p>If you specify <c>null</c> for the <em>attributes</em> parameter, this method uses a default set of values for the owner, group, and permissions of any newly created directories in the path. Similarly, if you omit a specific attribute, the default value is used. The default values for newly created directories are as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Permissions are set according to the umask of the current process. For more information, see <c>umask</c>. </p>
                    </li>
                    <li class="li">
                        <p>The owner ID is set to the effective user ID of the process.</p>
                    </li>
                    <li class="li">
                        <p>The group ID is set to that of the parent directory.</p>
                    </li>
                </ul>
                <p>If you want to specify a relative path for url, you must set the current working directory before creating the corresponding <c>NSURL</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– createDirectoryAtPath:withIntermediateDirectories:attributes:error:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="createIntermediates">
            </param>
            <param name="attributes">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CreateFileAtPath(System.String,U3DXT.iOS.Native.Foundation.NSData,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates a file with the specified content and attributes at the given location.
            <br></br>Equivalent to the native <c>createFileAtPath:contents:attributes:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path for the new file.</p>
                <em>contents</em>
                <p>A data object containing the contents of the new file.</p>
                <em>attributes</em>
                <p>A dictionary containing the attributes to associate with the new file. You can use these attributes to set the owner and group numbers, file permissions, and modification date. For a list of keys, see  “File Attribute Keys.”  If you specify <c>null</c> for <em>attributes</em>, the file is created with a set of default attributes.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation was successful, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>If you specify <c>null</c> for the <em>attributes</em> parameter, this method uses a default set of values for the owner, group, and permissions of any newly created directories in the path. Similarly, if you omit a specific attribute, the default value is used. The default values for newly created files are as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Permissions are set according to the umask of the current process. For more information, see <c>umask</c>. </p>
                    </li>
                    <li class="li">
                        <p>The owner ID is set to the effective user ID of the process.</p>
                    </li>
                    <li class="li">
                        <p>The group ID is set to that of the parent directory.</p>
                    </li>
                </ul>
                <p>If a file already exists at <em>path</em>, this method overwrites the contents of that file if the current process has the appropriate privileges to do so.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– contentsAtPath:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– attributesOfItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="data">
            </param>
            <param name="attr">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CreateSymbolicLinkAtPath(System.String,System.String)">
            <summary>
            Creates a symbolic link identified by a given path that refers to a given location. ( Deprecated in iOS 2.0.  Use <c>createSymbolicLinkAtURL:withDestinationURL:error:</c> instead.)
            <br></br>Equivalent to the native <c>createSymbolicLinkAtPath:pathContent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path for a symbolic link.</p>
                <em>otherPath</em>
                <p>The path to which <em>path</em> should refer.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation is successful, otherwise <c>false</c>. Returns <c>false</c> if a file, directory, or symbolic link identical to <em>path</em> already exists.</p>
                <b>Discussion</b>
                <p>Creates a symbolic link identified by <em>path</em> that refers to the location <em>otherPath</em> in the file system.</p>
                <b>Special Considerations</b>
                <p>Because this method does not return error information, it has been deprecated as of OS X v10.5. Use <c>createSymbolicLinkAtPath:withDestinationPath:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 2.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– createSymbolicLinkAtPath:withDestinationPath:error:</c>
                    </li>
                    <li>
                        <c>– destinationOfSymbolicLinkAtPath:error:</c>
                    </li>
                    <li>
                        <c>– removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="otherpath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CreateSymbolicLinkAtPath(System.String,System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates a symbolic link that points to the specified destination.
            <br></br>Equivalent to the native <c>createSymbolicLinkAtPath:withDestinationPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path at which to create the new symbolic link. The last path component is used as the name of the link.</p>
                <em>destPath</em>
                <p>The path that contains the item to be pointed to by the link. In other words, this is the destination of the link.</p>
                <em>error</em>
                <p>If an error occurs, upon return contains an <c>NSError</c> object that describes the problem. Pass <c>NULL</c> if you do not want error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the symbolic link was created or <c>false</c> if an error occurred. This method also returns <c>false</c> if a file, directory, or link already exists at <em>path</em>.</p>
                <b>Discussion</b>
                <p>This method does not traverse symbolic links contained in either <em>path</em> or <em>destPath</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– destinationOfSymbolicLinkAtPath:error:</c>
                    </li>
                    <li>
                        <c>– removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="destPath">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CreateSymbolicLinkAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates a symbolic link at the specified URL that points to an item at the given URL.
            <br></br>Equivalent to the native <c>createSymbolicLinkAtURL:withDestinationURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The file URL at which to create the new symbolic link. The last path component of the URL issued as the name of the link.</p>
                <em>destURL</em>
                <p>The file URL that contains the item to be pointed to by the link. In other words, this is the destination of the link.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the symbolic link was created or <c>false</c> if an error occurred. This method also returns <c>false</c> if a file, directory, or link already exists at <em>path</em>.</p>
                <b>Discussion</b>
                <p>This method does not traverse symbolic links contained in either <em>url</em> or <em>destURL</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– createSymbolicLinkAtPath:withDestinationPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="destURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.CurrentDirectoryPath">
            <summary>
            Returns the path of the program’s current directory.
            <br></br>Equivalent to the native <c>currentDirectoryPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The path of the program’s current directory. If the program’s current working directory isn’t accessible, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>The string returned by this method is initialized to the current working directory; you can change the working directory by invoking <c>changeCurrentDirectoryPath:</c>. </p>
                <p>Relative pathnames refer implicitly to the current directory. For example, if the current directory is <c>/tmp</c>, and the relative pathname <c>reports/info.txt</c> is specified, the resulting full pathname is <c>/tmp/reports/info.txt</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– changeCurrentDirectoryPath:</c>
                    </li>
                    <li>
                        <c>– createDirectoryAtPath:withIntermediateDirectories:attributes:error:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.Delegate">
            <summary>
            Returns the delegate for the receiver.
            <br></br>Equivalent to the native <c>delegate</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The delegate for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.DestinationOfSymbolicLinkAtPath(System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns the path of the item pointed to by a symbolic link.
            <br></br>Equivalent to the native <c>destinationOfSymbolicLinkAtPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of a file or directory.</p>
                <em>error</em>
                <p>If an error occurs, upon return contains an <c>NSError</c> object that describes the problem. Pass <c>NULL</c> if you do not want error information.</p>
                <b>Return Value</b>
                <p>An <c>String</c> object containing the path of the directory or file to which the symbolic link <em>path</em> refers, or <c>null</c> upon failure. If the symbolic link is specified as a relative path, that relative path is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– createSymbolicLinkAtPath:withDestinationPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.DirectoryContentsAtPath(System.String)">
            <summary>
            Returns the directories and files (including symbolic links) contained in a given directory. ( Deprecated in iOS 2.0.  Use <c>contentsOfDirectoryAtPath:error:</c> instead.)
            <br></br>Equivalent to the native <c>directoryContentsAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A path to a directory.</p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects identifying the directories and files (including symbolic links) contained in <em>path</em>. Returns an empty array if the directory exists but has no contents. Returns <c>null</c> if the directory specified at <em>path</em> does not exist or there is some other error accessing it. </p>
                <b>Discussion</b>
                <p>The search is shallow and therefore does not return the contents of any subdirectories. This returned array does not contain strings for the current directory (“.”), parent directory (“..”), or resource forks (begin with “._”) and does not traverse symbolic links. </p>
                <b>Special Considerations</b>
                <p>Because this method does not return error information, it has been deprecated as of OS X v10.5. Use <c>contentsOfDirectoryAtPath:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 2.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– contentsOfDirectoryAtPath:error:</c>
                    </li>
                    <li>
                        <c>– currentDirectoryPath</c>
                    </li>
                    <li>
                        <c>– fileExistsAtPath:isDirectory:</c>
                    </li>
                    <li>
                        <c>– enumeratorAtPath:</c>
                    </li>
                    <li>
                        <c>– subpathsAtPath:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.DisplayNameAtPath(System.String)">
            <summary>
            Returns the display name of the file or directory at a specified path.
            <br></br>Equivalent to the native <c>displayNameAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of a file or directory.</p>
                <b>Return Value</b>
                <p>The name of the file or directory at <em>path</em> in a localized form appropriate for presentation to the user. If there is no file or directory at <em>path</em>, or if an error occurs, returns <c>path</c> as is.</p>
                <b>Discussion</b>
                <p>Display names are user-friendly names for files. They are typically used to localize standard file and directory names according to the user’s language settings. They may also reflect other modifications, such as the removal of filename extensions. Such modifications are used only when displaying the file or directory to the user and do not reflect the actual path to the item in the file system. For example, if the current user’s preferred language is French, the following code fragment logs the name <c>Bibliothèque</c> and not the name <c>Library</c>, which is the actual name of the directory. </p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *paths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>if ([paths count] &gt; 0)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>{  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSString *documentsDirectory = [paths objectAtIndex:0];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSFileManager *fileManager = [[NSFileManager alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSString *displayNameAtPath = [fileManager displayNameAtPath:documentsDirectory];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSLog("%", displayNameAtPath);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [fileManager release];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.EnumeratorAtPath(System.String)">
            <summary>
            Returns a directory enumerator object that can be used to perform a deep enumeration of the directory at the specified path.
            <br></br>Equivalent to the native <c>enumeratorAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of the directory to enumerate.</p>
                <b>Return Value</b>
                <p>An <c>NSDirectoryEnumerator</c> object that enumerates the contents of the directory at <em>path</em>.</p>
                <p>If <em>path</em> is a filename, the method returns an enumerator object that enumerates no files—the first call to <c>nextObject</c> will return <c>null</c>.</p>
                <b>Discussion</b>
                <p>Because the enumeration is deep—that is, it lists the contents of all subdirectories—this enumerator object is useful for performing actions that involve large file-system subtrees. This method does not resolve symbolic links encountered in the traversal process, nor does it recurse through them if they point to a directory.</p>
                <p>This code fragment enumerates the subdirectories and files under a user’s <c>Documents</c> directory and processes all files with an extension of <c>.doc</c>:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSString *docsDir = [NSHomeDirectory() stringByAppendingPathComponent:  "Documents"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSFileManager *localFileManager=[[NSFileManager alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDirectoryEnumerator *dirEnum =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [localFileManager enumeratorAtPath:docsDir];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSString *file;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>while (file = [dirEnum nextObject]) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    if ([[file pathExtension] isEqualToString: "doc"]) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        // process the document  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        [self scanDocument: [docsDir stringByAppendingPathComponent:file]];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[localFileManager release];  </pre>
                        </td>
                    </tr>
                </table>
                <p>The <c>NSDirectoryEnumerator</c> class has methods for obtaining the attributes of the existing path and of the parent directory and for skipping descendants of the existing path.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currentDirectoryPath</c>
                    </li>
                    <li>
                        <c>– attributesOfItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– contentsOfDirectoryAtPath:error:</c>
                    </li>
                    <li>
                        <c>– subpathsAtPath:</c>
                    </li>
                    <li>
                        <c>– enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.EnumeratorAtURL(U3DXT.iOS.Native.Foundation.NSURL,System.Object[],U3DXT.iOS.Native.Foundation.NSDirectoryEnumerationOptions,System.Func{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError,System.Boolean})">
            <summary>
            Returns a directory enumerator object that can be used to perform a deep enumeration of the directory at the specified URL.
            <br></br>Equivalent to the native <c>enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The location of the directory for which you want an enumeration. This URL must not be a symbolic link that points to the desired directory. You can use the <c>URLByResolvingSymlinksInPath</c> method to resolve any symlinks in the URL. </p>
                <em>keys</em>
                <p>An array of keys that identify the properties that you want pre-fetched for each item in the enumeration. The values for these keys are cached in the corresponding <c>NSURL</c> objects. You may specify <c>null</c> for this parameter. For a list of keys you can specify, see <c>Common File System Resource Keys</c>. </p>
                <em>mask</em>
                <p>Options for the enumeration. For a list of valid options, see  “Directory Enumeration Options.” </p>
                <em>handler</em>
                <p>An optional <c>'errorHandler'</c> block argument to call when an error occurs. The <em>url</em> parameter specifies the item for which the error occurred and the <em>error</em> parameter contains the error information. Your handler should return <c>true</c> when it wants the enumeration to continue or <c>false</c> when it wants the enumeration to stop. </p>
                <b>Return Value</b>
                <p>An <c>NSDirectoryEnumerator</c> object that enumerates the contents of the directory at <em>url</em>. If <em>url</em> is a filename, the method returns an enumerator object that enumerates no files—the first call to <c>nextObject</c> returns <c>null</c>. </p>
                <b>Discussion</b>
                <p>Because the enumeration is deep—that is, it lists the contents of all subdirectories—this enumerator object is useful for performing actions that involve large file-system subtrees. If the method is passed a directory on which another file system is mounted (a mount point), it traverses the mount point. This method does not resolve symbolic links encountered in the traversal process, nor does it recurse through them if they point to a directory.</p>
                <p>The <c>NSDirectoryEnumerator</c> class has methods for skipping descendants of the existing path and for returning the number of levels deep the current object is in the directory hierarchy being enumerated (where the directory passed to <c>enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c> is considered to be level 0).</p>
                <p>This code fragment enumerates a URL and it’s subdirectories, collecting the URLs of files (skips directories). It also demonstrates how to ignore the contents of specified directories, in this case directories named “_extras”. </p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>-(void)scanURLIgnoringExtras:(NSURL *)directoryToScan  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>{  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Create a local file manager instance  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSFileManager *localFileManager=[[NSFileManager alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Enumerate the directory (specified elsewhere in your code)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Request the two properties the method uses, name and isDirectory  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Ignore hidden files  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // The errorHandler: parameter is set to nil. Typically you'd want to present a panel  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSDirectoryEnumerator *dirEnumerator = [localFileManager enumeratorAtURL:directoryToScan  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                        includingPropertiesForKeys:[NSArray arrayWithObjects:NSURLNameKey,  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                                                    NSURLIsDirectoryKey,nil]  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                        options:NSDirectoryEnumerationSkipsHiddenFiles  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                        errorHandler:nil];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // An array to store the all the enumerated file names in  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSMutableArray *theArray=[NSMutableArray array];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Enumerate the dirEnumerator results, each value is stored in allURLs  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    for (NSURL *theURL in dirEnumerator) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        // Retrieve the file name. From NSURLNameKey, cached during the enumeration.  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        NSString *fileName;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        [theURL getResourceValue:&amp;fileName forKey:NSURLNameKey error:NULL];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        // Retrieve whether a directory. From NSURLIsDirectoryKey, also  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        // cached during the enumeration.  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        NSNumber *isDirectory;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        [theURL getResourceValue:&amp;isDirectory forKey:NSURLIsDirectoryKey error:NULL];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        // Ignore files under the _extras directory  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        if (([fileName caseInsensitiveCompare:"_extras"]==NSOrderedSame) &amp;&amp;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>            ([isDirectory boolValue]==YES))  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>            [dirEnumerator skipDescendants];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        else  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>            // Add full path for non directories  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>            if ([isDirectory boolValue]==NO)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                [theArray addObject:theURL];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Do something with the path URLs.  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSLog("theArray - %",theArray);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // Release the localFileManager.  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [localFileManager release];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– enumeratorAtPath:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="keys">
            </param>
            <param name="mask">
            </param>
            <param name="handler"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.EvictUbiquitousItemAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Removes the local copy of the specified cloud-based item.
            <br></br>Equivalent to the native <c>evictUbiquitousItemAtURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>Specify the URL to a file or directory in iCloud storage. </p>
                <em>errorOut</em>
                <p>On input, a pointer to variable for an <c>NSError</c> object. If an error occurs, this pointer is set to an <c>NSError</c> object containing information about the error. You may specify <c>null</c> for this parameter if you do not want the error information. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the local item was removed successfully or NO if it was not. If <c>false</c> is returned and <em>errorOut</em> is not <c>null</c>, an <c>NSError</c> object describing the error is returned in that parameter.</p>
                <b>Discussion</b>
                <p>This method does not remove the item from the cloud. It removes only the local version. You can use this method to force iCloud to download a new version of the file or directory from the server. </p>
                <p>To delete a file permanently from the user’s iCloud storage, use the regular <c>NSFileManager</c> routines for deleting files and directories. Remember that deleting items from iCloud cannot be undone. Once deleted, the item is gone forever.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setUbiquitous:itemAtURL:destinationURL:error:</c>
                    </li>
                    <li>
                        <c>– removeItemAtURL:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.FileAttributesAtPath(System.String,System.Boolean)">
            <summary>
            Returns a dictionary that describes the POSIX attributes of the file specified at a given. ( Deprecated in iOS 2.0.  Use <c>attributesOfItemAtPath:error:</c> instead.)
            <br></br>Equivalent to the native <c>fileAttributesAtPath:traverseLink:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A file path.</p>
                <em>flag</em>
                <p>If <em>path</em> is not a symbolic link, this parameter has no effect. If <em>path</em> is a symbolic link, then:</p>
                <ul class="termdef">
                    <li class="termdef">
                        <p>If <c>true</c> the attributes of the linked-to file are returned, or if the link points to a nonexistent file the method returns <c>null</c>. </p>
                    </li>
                    <li class="termdef">
                        <p>If <c>false</c>, the attributes of the symbolic link are returned.</p>
                    </li>
                </ul>
                <b>Return Value</b>
                <p>An <c>Dictionary</c> object that describes the POSIX attributes of the file specified at <em>path</em>. The keys in the dictionary are described in <c>“File Attribute Keys”</c>. If there is no item at <em>path</em>, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>This code example gets several attributes of a file and logs them.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSFileManager *fileManager = [[NSFileManager alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSString *path = "/tmp/List";  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDictionary *fileAttributes = [fileManager fileAttributesAtPath:path traverseLink:YES];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>if (fileAttributes != nil) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSNumber *fileSize;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSString *fileOwner;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSDate *fileModDate;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    if (fileSize = [fileAttributes objectForKey:NSFileSize]) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        NSLog("File size: %qi\n", [fileSize unsignedLongLongValue]);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    if (fileOwner = [fileAttributes objectForKey:NSFileOwnerAccountName]) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        NSLog("Owner: %@\n", fileOwner);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    if (fileModDate = [fileAttributes objectForKey:NSFileModificationDate]) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        NSLog("Modification date: %@\n", fileModDate);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    }  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>else {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSLog("Path (%@) is invalid.", path);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[fileManager release];  </pre>
                        </td>
                    </tr>
                </table>
                <p>As a convenience, <c>Dictionary</c> provides a set of methods (declared as a category in <c>NSFileManager.h</c>) for quickly and efficiently obtaining attribute information from the returned dictionary: <c>fileGroupOwnerAccountName</c>, <c>fileModificationDate</c>, <c>fileOwnerAccountName</c>, <c>filePosixPermissions</c>, <c>fileSize</c>, <c>fileSystemFileNumber</c>, <c>fileSystemNumber</c>, and <c>fileType</c>. For example, you could rewrite the file modification statement in the code example above as:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>if (fileModDate = [fileAttributes fileModificationDate])  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSLog("Modification date: %@\n", fileModDate);  </pre>
                        </td>
                    </tr>
                </table>
                <b>Special Considerations</b>
                <p>Because this method does not return error information, it has been deprecated as of OS X v10.5. Use <c>attributesOfItemAtPath:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 2.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– attributesOfItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="yorn">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.FileExistsAtPath(System.String)">
            <summary>
            Returns a Boolean value that indicates whether a file or directory exists at a specified path.
            <br></br>Equivalent to the native <c>fileExistsAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of the file or directory. If <em>path</em> begins with a tilde (<c>~</c>), it must first be expanded with <c>stringByExpandingTildeInPath</c>, otherwise, this method returns <c>false</c>.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if a file at the specified path exists or <c>false</c> if the file’s does not exist or its existence could not be determined. </p>
                <b>Discussion</b>
                <p>If the file at <em>path</em> is inaccessible to your app, perhaps because one or more parent directories are inaccessible, this method returns <c>false</c>. If the final element in <em>path</em> specifies a symbolic link, this method traverses the link and returns <c>true</c> or <c>false</c> based on the existence of the file at the link destination. </p>
                <p>
                    <strong>Note:</strong> Attempting to predicate behavior based on the current state of the file system or a particular file on the file system is not recommended. Doing so can cause odd behavior or race conditions. It's far better to attempt an operation (such as loading a file or creating a directory), check for errors, and handle those errors gracefully than it is to try to figure out ahead of time whether the operation will succeed. For more information on file system race conditions, see  “Race Conditions and Secure File Operations”  in <em>Secure Coding Guide</em>.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– fileExistsAtPath:isDirectory:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.FileSystemAttributesAtPath(System.String)">
            <summary>
            Returns a dictionary that describes the attributes of the mounted file system on which a given path resides. ( Deprecated in iOS 2.0.  Use <c>attributesOfFileSystemForPath:error:</c> instead.)
            <br></br>Equivalent to the native <c>fileSystemAttributesAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>Any pathname within the mounted file system.</p>
                <b>Return Value</b>
                <p>An <c>Dictionary</c> object that describes the attributes of the mounted file system on which <em>path</em> resides. See  “File-System Attribute Keys”  for a description of the keys available in the dictionary.</p>
                <b>Special Considerations</b>
                <p>Because this method does not return error information, it has been deprecated as of OS X v10.5. Use <c>attributesOfFileSystemForPath:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 2.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– attributesOfFileSystemForPath:error:</c>
                    </li>
                    <li>
                        <c>– attributesOfItemAtPath:error:</c>
                    </li>
                    <li>
                        <c>– setAttributes:ofItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.IsDeletableFileAtPath(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the invoking object appears able to delete a specified file.
            <br></br>Equivalent to the native <c>isDeletableFileAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A file path.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the current process has delete privileges for the file at <em>path</em>; otherwise <c>false</c> if the process does not have delete privileges or the existence of the file could not be determined. </p>
                <b>Discussion</b>
                <p>For a directory or file to be deletable, the current process must either be able to write to the parent directory of <em>path</em> or it must have the same owner as the item at <em>path</em>. If <em>path</em> is a directory, every item contained in <em>path</em> must be deletable by the current process.</p>
                <p>If the file at <em>path</em> is inaccessible to your app, perhaps because it does not have search privileges for one or more parent directories, this method returns <c>false</c>. This method does not traverse symbolic links in the path.</p>
                <p>
                    <strong>Note:</strong> Attempting to predicate behavior based on the current state of the file system or a particular file on the file system is not recommended. Doing so can cause odd behavior or race conditions. It's far better to attempt an operation (such as loading a file or creating a directory), check for errors, and handle those errors gracefully than it is to try to figure out ahead of time whether the operation will succeed. For more information on file system race conditions, see  “Race Conditions and Secure File Operations”  in <em>Secure Coding Guide</em>.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.IsExecutableFileAtPath(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the operating system appears able to execute a specified file.
            <br></br>Equivalent to the native <c>isExecutableFileAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A file path.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the current process has execute privileges for the file at <em>path</em>; otherwise <c>false</c> if the process does not have execute privileges or the existence of the file could not be determined. </p>
                <b>Discussion</b>
                <p>If the file at <em>path</em> is inaccessible to your app, perhaps because it does not have search privileges for one or more parent directories, this method returns <c>false</c>. This method traverses symbolic links in the path. This method also uses the real user ID and group ID, as opposed to the effective user and group IDs, to determine if the file is executable. </p>
                <p>
                    <strong>Note:</strong> Attempting to predicate behavior based on the current state of the file system or a particular file on the file system is not recommended. Doing so can cause odd behavior or race conditions. It's far better to attempt an operation (such as loading a file or creating a directory), check for errors, and handle those errors gracefully than it is to try to figure out ahead of time whether the operation will succeed. For more information on file system race conditions, see  “Race Conditions and Secure File Operations”  in <em>Secure Coding Guide</em>.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.IsReadableFileAtPath(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the invoking object appears able to read a specified file.
            <br></br>Equivalent to the native <c>isReadableFileAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A file path.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the current process has read privileges for the file at <em>path</em>; otherwise <c>false</c> if the process does not have read privileges or the existence of the file could not be determined. </p>
                <b>Discussion</b>
                <p>If the file at <em>path</em> is inaccessible to your app, perhaps because it does not have search privileges for one or more parent directories, this method returns <c>false</c>. This method traverses symbolic links in the path. This method also uses the real user ID and group ID, as opposed to the effective user and group IDs, to determine if the file is readable. </p>
                <p>
                    <strong>Note:</strong> Attempting to predicate behavior based on the current state of the file system or a particular file on the file system is not recommended. Doing so can cause odd behavior or race conditions. It's far better to attempt an operation (such as loading a file or creating a directory), check for errors, and handle those errors gracefully than it is to try to figure out ahead of time whether the operation will succeed. For more information on file system race conditions, see  “Race Conditions and Secure File Operations”  in <em>Secure Coding Guide</em>.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.IsUbiquitousItemAtURL(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Returns a Boolean indicating whether the item is targeted for storage in iCloud.
            <br></br>Equivalent to the native <c>isUbiquitousItemAtURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>Specify the URL for the file or directory whose status you want to check.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item is targeted for iCloud storage or <c>false</c> if it is not. This method also returns <c>false</c> if no item exists at <em>url</em>.</p>
                <b>Discussion</b>
                <p>This method reflects only whether the item should be stored in iCloud because a call was made to the  <c>setUbiquitous:itemAtURL:destinationURL:error:</c> method with a value of <c>true</c> for its <em>flag</em> parameter. This method does not reflect whether the file has actually been uploaded to any iCloud servers. To determine a file’s upload status, check the <c>NSURLUbiquitousItemIsUploadedKey</c> attribute of the corresponding <c>NSURL</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setUbiquitous:itemAtURL:destinationURL:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.IsWritableFileAtPath(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the invoking object appears able to write to a specified file.
            <br></br>Equivalent to the native <c>isWritableFileAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A file path.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the current process has write privileges for the file at <em>path</em>; otherwise <c>false</c> if the process does not have write privileges or the existence of the file could not be determined. </p>
                <b>Discussion</b>
                <p>If the file at <em>path</em> is inaccessible to your app, perhaps because it does not have search privileges for one or more parent directories, this method returns <c>false</c>. This method traverses symbolic links in the path. This method also uses the real user ID and group ID, as opposed to the effective user and group IDs, to determine if the file is writable. </p>
                <p>
                    <strong>Note:</strong> Attempting to predicate behavior based on the current state of the file system or a particular file on the file system is not recommended. Doing so can cause odd behavior or race conditions. It's far better to attempt an operation (such as loading a file or creating a directory), check for errors, and handle those errors gracefully than it is to try to figure out ahead of time whether the operation will succeed. For more information on file system race conditions, see  “Race Conditions and Secure File Operations”  in <em>Secure Coding Guide</em>.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.LinkItemAtPath(System.String,System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates a hard link between the items at the specified paths.
            <br></br>Equivalent to the native <c>linkItemAtPath:toPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>srcPath</em>
                <p>The path that specifies where you want to create the hard link. The value in this parameter must not be <c>null</c>. </p>
                <em>dstPath</em>
                <p>The path that identifies the destination of the link. The value in this parameter must not be <c>null</c>. </p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the hard link was created or <c>false</c> if an error occurred. This method also returns <c>false</c> if a file, directory, or link already exists at <em>path</em>.</p>
                <b>Discussion</b>
                <p>Use this method to create hard links between files in the current file system. If <em>dstPath</em> is a directory, this method creates a new directory at <em>srcPath</em> and then creates hard links for the items in that directory. If <em>dstPath</em> is (or contains) a symbolic link, the symbolic link is copied to the new location and not converted to a hard link.</p>
                <p>Prior to linking each item, the file manager asks its delegate if it should actually create the link. It does this by calling the <c>fileManager:shouldLinkItemAtURL:toURL:</c> method; if that method is not implemented it calls the <c>fileManager:shouldLinkItemAtPath:toPath:</c> method instead. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager creates the hard link. If there is an error moving one out of several items, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:</c> or <c>fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:</c> method to determine how to proceed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.LinkItemAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates a hard link between the items at the specified URLs.
            <br></br>Equivalent to the native <c>linkItemAtURL:toURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>srcURL</em>
                <p>The file URL that identifies the destination of the link. The URL in this parameter must not be a file reference URL; it must specify the actual path to the item. The value in this parameter must not be <c>null</c>. </p>
                <em>dstURL</em>
                <p>The file URL that specifies where you want to create the hard link. The URL in this parameter must not be a file reference URL; it must specify the actual path to the item. The value in this parameter must not be <c>null</c>. </p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the hard link was created or <c>false</c> if an error occurred. This method also returns <c>false</c> if a file, directory, or link already exists at <em>path</em>.</p>
                <b>Discussion</b>
                <p>Use this method to create hard links between files in the current file system. If <em>dstURL</em> is a directory, this method creates a new directory at <em>srcURL</em> and then creates hard links for the items in that directory. If <em>dstURL</em> is (or contains) a symbolic link, the symbolic link is copied and not converted to a hard link at <em>srcURL</em>.</p>
                <p>Prior to linking each item, the file manager asks its delegate if it should actually create the link. It does this by calling the <c>fileManager:shouldLinkItemAtURL:toURL:</c> method; if that method is not implemented it calls the <c>fileManager:shouldLinkItemAtPath:toPath:</c> method instead. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager creates the hard link. If there is an error moving one out of several items, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:</c> or <c>fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:</c> method to determine how to proceed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.MountedVolumeURLsIncludingResourceValues(System.Object[],U3DXT.iOS.Native.Foundation.NSVolumeEnumerationOptions)">
            <summary>
            Returns an array of URLs that identify the mounted volumes available on the computer.
            <br></br>Equivalent to the native <c>mountedVolumeURLsIncludingResourceValuesForKeys:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>propertyKeys</em>
                <p>An array of keys that identify the file properties that you want pre-fetched for each volume. For each returned URL, the values for these keys are cached in the corresponding <c>NSURL</c> objects. You may specify <c>null</c> for this parameter. For a list of keys you can specify, see <c>Common File System Resource Keys</c>. </p>
                <em>options</em>
                <p>Option flags for the enumeration. See  “Mounted Volume Enumeration Options.” </p>
                <b>Return Value</b>
                <p>An array of <c>NSURL</c> objects identifying the mounted volumes. </p>
                <b>Discussion</b>
                <p>This call may block if I/O is required to determine values for the requested <em>propertyKeys</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="propertyKeys">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.MoveItemAtPath(System.String,System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Moves the file or directory at the specified path to a new location synchronously.
            <br></br>Equivalent to the native <c>moveItemAtPath:toPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>srcPath</em>
                <p>The path to the file or directory you want to move. This parameter must not be <c>null</c>. </p>
                <em>dstPath</em>
                <p>The new path for the item in <em>srcPath</em>. This path must include the name of the file or directory in its new location. This parameter must not be <c>null</c>.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item was moved successfully or the file manager’s delegate aborted the operation deliberately. Returns <c>false</c> if an error occurred. </p>
                <b>Discussion</b>
                <p>When moving items, the current process must have permission to read the item at <em>srcPath</em> and write the parent directory of <em>dstPath</em>. If the item at <em>srcPath</em> is a directory, this method moves the directory and all of its contents, including any hidden files. If an item with the same name already exists at <em>dstPath</em>, this method aborts the move attempt and returns an appropriate error. If the last component of <em>srcPath</em> is a symbolic link, only the link is moved to the new path; the item pointed to by the link remains at its current location.</p>
                <p>Prior to moving the item, the file manager asks its delegate if it should actually move it. It does this by calling the <c>fileManager:shouldMoveItemAtURL:toURL:</c> method; if that method is not implemented it calls the <c>fileManager:shouldMoveItemAtPath:toPath:</c> method instead. If the item being moved is a directory, the file manager notifies the delegate only for the directory itself and not for any of its contents. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager moves the file. If there is an error moving one out of several items, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:movingItemAtURL:toURL:</c> or <c>fileManager:shouldProceedAfterError:movingItemAtPath:toPath:</c> method to determine how to proceed.</p>
                <p>If the source and destination of the move operation are not on the same volume, this method copies the item first and then removes it from its current location. This behavior may trigger additional delegate notifications related to copying and removing individual items. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– moveItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>– copyItemAtPath:toPath:error:</c>
                    </li>
                    <li>
                        <c>– removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.MoveItemAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Moves the file or directory at the specified URL to a new location synchronously.
            <br></br>Equivalent to the native <c>moveItemAtURL:toURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>srcURL</em>
                <p>The file URL that identifies the file or directory you want to move. The URL in this parameter must not be a file reference URL. This parameter must not be <c>null</c>.</p>
                <em>dstURL</em>
                <p>The new location for the item in <em>srcURL</em>. The URL in this parameter must not be a file reference URL and must include the name of the file or directory in its new location. This parameter must not be <c>null</c>. </p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item was moved successfully or the file manager’s delegate aborted the operation deliberately. Returns <c>false</c> if an error occurred. </p>
                <b>Discussion</b>
                <p>When moving items, the current process must have permission to read the item at <em>srcURL</em> and write the parent directory of <em>dstURL</em>. If the item at <em>srcURL</em> is a directory, this method moves the directory and all of its contents, including any hidden files. If an item with the same name already exists at <em>dstURL</em>, this method aborts the move attempt and returns an appropriate error. If the last component of <em>srcURL</em> is a symbolic link, only the link is moved to the new path; the item pointed to by the link remains at its current location.</p>
                <p>Prior to moving the item, the file manager asks its delegate if it should actually move it. It does this by calling the <c>fileManager:shouldMoveItemAtURL:toURL:</c> method; if that method is not implemented it calls the <c>fileManager:shouldMoveItemAtPath:toPath:</c> method instead. If the item being moved is a directory, the file manager notifies the delegate only for the directory itself and not for any of its contents. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager moves the file. If there is an error moving one out of several items, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:movingItemAtURL:toURL:</c> or <c>fileManager:shouldProceedAfterError:movingItemAtPath:toPath:</c> method to determine how to proceed.</p>
                <p>If the source and destination of the move operation are not on the same volume, this method copies the item first and then removes it from its current location. This behavior may trigger additional delegate notifications related to copying and removing individual items. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– moveItemAtPath:toPath:error:</c>
                    </li>
                    <li>
                        <c>– copyItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>– removeItemAtURL:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.PathContentOfSymbolicLinkAtPath(System.String)">
            <summary>
            Returns the path of the directory or file that a symbolic link at a given path refers to. ( Deprecated in iOS 2.0.  Use <c>destinationOfSymbolicLinkAtPath:error:</c> instead.)
            <br></br>Equivalent to the native <c>pathContentOfSymbolicLinkAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of a symbolic link.</p>
                <b>Return Value</b>
                <p>The path of the directory or file to which the symbolic link <em>path</em> refers, or <c>null</c> upon failure. If the symbolic link is specified as a relative path, that relative path is returned.</p>
                <b>Special Considerations</b>
                <p>Because this method does not return error information, it has been deprecated as of OS X v10.5. Use <c>destinationOfSymbolicLinkAtPath:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 2.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– destinationOfSymbolicLinkAtPath:error:</c>
                    </li>
                    <li>
                        <c>– createSymbolicLinkAtPath:withDestinationPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.RemoveItemAtPath(System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Removes the file or directory at the specified path.
            <br></br>Equivalent to the native <c>removeItemAtPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A path string indicating the file or directory to remove. If the path specifies a directory, the contents of that directory are recursively removed. You may specify <c>null</c> for this parameter. </p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item was removed successfully or if <em>path</em> was <c>null</c>. Returns <c>false</c> if an error occurred. If the delegate aborts the operation for a file, this method returns <c>true</c>. However, if the delegate aborts the operation for a directory, this method returns <c>false</c>. </p>
                <b>Discussion</b>
                <p>Prior to removing each item, the file manager asks its delegate if it should actually do so. It does this by calling the <c>fileManager:shouldRemoveItemAtURL:</c> method; if that method is not implemented (or the process is running in OS X 10.5 or earlier) it calls the <c>fileManager:shouldRemoveItemAtPath:</c> method instead. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager proceeds to remove the file or directory. If there is an error removing an item, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:removingItemAtURL:</c> or <c>fileManager:shouldProceedAfterError:removingItemAtPath:</c> method to determine how to proceed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.RemoveItemAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Removes the file or directory at the specified URL.
            <br></br>Equivalent to the native <c>removeItemAtURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>A file URL specifying the file or directory to remove. If the URL specifies a directory, the contents of that directory are recursively removed. You may specify <c>null</c> for this parameter.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item was removed successfully or if <em>URL</em> was <c>null</c>. Returns <c>false</c> if an error occurred. If the delegate aborts the operation for a file, this method returns <c>true</c>. However, if the delegate aborts the operation for a directory, this method returns <c>false</c>.  </p>
                <b>Discussion</b>
                <p>Prior to removing each item, the file manager asks its delegate if it should actually do so. It does this by calling the <c>fileManager:shouldRemoveItemAtURL:</c> method; if that method is not implemented (or the process is running in OS X 10.5 or earlier) it calls the <c>fileManager:shouldRemoveItemAtPath:</c> method instead. If the delegate method returns <c>true</c>, or if the delegate does not implement the appropriate methods, the file manager proceeds to remove the file or directory. If there is an error removing an item, the file manager may also call the delegate’s <c>fileManager:shouldProceedAfterError:removingItemAtURL:</c> or <c>fileManager:shouldProceedAfterError:removingItemAtPath:</c> method to determine how to proceed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.ReplaceItemAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL,System.String,U3DXT.iOS.Native.Foundation.NSFileManagerItemReplacementOptions,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Replaces the contents of the item at the specified URL in a manner that insures no data loss occurs.
            <br></br>Equivalent to the native <c>replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>originalItemURL</em>
                <p>The item whose contents you want to replace.</p>
                <em>newItemURL</em>
                <p>The item containing the new content for <em>originalItemURL</em>. It is recommended that you put this item in a temporary directory as provided by the OS. If a temporary directory is not available, put this item in a uniquely named directory that is in the same directory as the original item.</p>
                <em>backupItemName</em>
                <p>Optional. If provided, this name is used to create a backup of the original item.</p>
                <p>The backup is placed in the same directory as the original item. If an error occurs during the creation of the backup item, the operation will fail. If there is already an item with the same name as the backup item, that item will be removed.</p>
                <p>The backup item will be removed in the event of success unless the <c>NSFileManagerItemReplacementWithoutDeletingBackupItem</c> option is provided in <em>options</em>.</p>
                <em>options</em>
                <p>Specifies the options to use during the replacement. Typically, you pass <c>0</c> for this parameter, which uses only the metadata from the new item. You can also combine the options described in  “NSFileManagerItemReplacementOptions”  using the C-bitwise OR operator.</p>
                <em>resultingURL</em>
                <p>On input, a pointer for a URL object. When the item is replaced, this pointer is set to the URL of the new item. If no new file system object is required, the URL object in this parameter may be the same passed to the <em>originalItemURL</em> parameter. However, if a new file system object is required, the URL object may be different. For example, replacing an RTF document with an RTFD document requires the creation of a new file.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the replacement was successful or <c>false</c> if an error occurred.</p>
                <b>Discussion</b>
                <p>By default, the creation date, permissions, Finder label and color, and Spotlight comments of the original item will be preserved on the resulting item.</p>
                <p>If an error occurs and the original item is not in the original location or a temporary location, the returned error object contains a user info dictionary with the <c>NSFileOriginalItemLocationKey</c> key. The value assigned to that key is an <c>NSURL</c> object with the location of the item. The error code is one of the file-related errors described in <c>NSError Codes</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="originalItemURL">
            </param>
            <param name="newItemURL">
            </param>
            <param name="backupItemName">
            </param>
            <param name="options">
            </param>
            <param name="resultingURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.SetAttributes(System.Collections.Generic.Dictionary{System.Object,System.Object},System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Sets the attributes of the specified file or directory.
            <br></br>Equivalent to the native <c>setAttributes:ofItemAtPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>attributes</em>
                <p>A dictionary containing as keys the attributes to set for <em>path</em> and as values the corresponding value for the attribute. You can set the following attributes: <c>NSFileBusy</c>, <c>NSFileCreationDate</c>, <c>NSFileExtensionHidden</c>, <c>NSFileGroupOwnerAccountID</c>, <c>NSFileGroupOwnerAccountName</c>, <c>NSFileHFSCreatorCode</c>, <c>NSFileHFSTypeCode</c>, <c>NSFileImmutable</c>, <c>NSFileModificationDate</c>, <c>NSFileOwnerAccountID</c>, <c>NSFileOwnerAccountName</c>, <c>NSFilePosixPermissions</c>. You can change single attributes or any combination of attributes; you need not specify keys for all attributes.</p>
                <em>path</em>
                <p>The path of a file or directory.</p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>all</em> changes succeed. If any change fails, returns <c>false</c>, but it is undefined whether any changes actually occurred.</p>
                <b>Discussion</b>
                <p>As in the POSIX standard, the app either must own the file or directory or must be running as superuser for attribute changes to take effect. The method attempts to make all changes specified in attributes and ignores any rejection of an attempted modification. If the last component of the path is a symbolic link it is traversed.</p>
                <p>The <c>NSFilePosixPermissions</c> value must be initialized with the code representing the POSIX file-permissions bit pattern. <c>NSFileHFSCreatorCode</c> and <c>NSFileHFSTypeCode</c> will only be heeded when <em>path</em> specifies a file.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– attributesOfItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="attributes">
            </param>
            <param name="path">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.SetDelegate(System.Object)">
            <summary>
            Sets the delegate for the receiver.
            <br></br>Equivalent to the native <c>setDelegate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>delegate</em>
                <p>The delegate for the receiver. The delegate must implement the <c>NSFileManagerDelegate</c> protocol.</p>
                <b>Discussion</b>
                <p>It is recommended that you assign a delegate only to file manager objects that you create explicitly using the alloc/init convention. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDelegate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.SetUbiquitous(System.Boolean,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Sets whether the item at the specified URL should be stored in the cloud.
            <br></br>Equivalent to the native <c>setUbiquitous:itemAtURL:destinationURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>Specify <c>true</c> to move the item to iCloud or <c>false</c> to remove it from iCloud (if it is there currently).</p>
                <em>url</em>
                <p>Specify the URL of the item (file or directory) that you want to store in iCloud.</p>
                <em>destinationURL</em>
                <p>Specify the location in iCloud at which to store the file or directory. This URL must be constructed from a URL returned by the <c>URLForUbiquityContainerIdentifier:</c> method, which you use to retrieve the desired iCloud container directory. The URL you specify may contain additional subdirectories so that you can organize your files hierarchically in iCloud. However, you are responsible for creating those intermediate subdirectories (using the <c>NSFileManager</c> class) in your iCloud container directory.</p>
                <em>errorOut</em>
                <p>On input, a pointer to variable for an <c>NSError</c> object. If an error occurs, this pointer is set to an <c>NSError</c> object containing information about the error. You may specify <c>null</c> for this parameter if you do not want the error information. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item’s status was updated successfully or <c>false</c> if an error occurred. If this method returns <c>false</c> and you specified a value for the <em>errorOut</em> parameter, this method returns an error object in the provided pointer. </p>
                <b>Discussion</b>
                <p>Use this method to move a file from its current location to iCloud. For files located in an app’s sandbox, this involves physically removing the file from the sandbox container. (The system extends your app’s sandbox privileges to give it access to files it moves to iCloud.) You can also use this method to move files out of iCloud and back into a local directory.</p>
                <p>Your app must have an active file presenter object configured to monitor the specified file or directory before calling this method. When you specify <c>true</c> for the <em>flag</em> parameter, this method attempts to move the file or directory to the cloud and returns <c>true</c> if it is successful. This method also notifies your file presenter of the new location of the file so that your app can continue to operate on it.</p>
                <p>
                    <strong>Important:</strong> Do not call this method from your app’s main thread. This method performs a coordinated write operation on the file you specify, and calling this method from the main thread can trigger a deadlock with the file presenter you have monitoring the file. Instead, use a dispatch queue (other than the main thread queue) to call this method from a secondary thread. You can message your main thread after the call finishes to update the rest of your app’s data structures.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– startDownloadingUbiquitousItemAtURL:error:</c>
                    </li>
                    <li>
                        <c>– isUbiquitousItemAtURL:</c>
                    </li>
                    <li>
                        <c>– URLForPublishingUbiquitousItemAtURL:expirationDate:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="flag">
            </param>
            <param name="url">
            </param>
            <param name="destinationURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.StartDownloadingUbiquitousItemAtURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Starts downloading (if necessary) the specified item to the local system.
            <br></br>Equivalent to the native <c>startDownloadingUbiquitousItemAtURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>Specify the URL for the file or directory in the cloud that you want to download.</p>
                <em>errorOut</em>
                <p>On input, a pointer to variable for an <c>NSError</c> object. If an error occurs, this pointer is set to an <c>NSError</c> object containing information about the error. You may specify <c>null</c> for this parameter if you do not want the error information. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the download started successfully or was not necessary, otherwise <c>false</c>. If <c>false</c> is returned and <em>errorOut</em> is not <c>null</c>, an <c>NSError</c> object describing the error is returned in that parameter.</p>
                <b>Discussion</b>
                <p>If a cloud-based file or directory has not been downloaded yet, calling this method starts the download process. If the item exists locally, calling this method synchronizes the local copy with the version in the cloud. </p>
                <p>For a given URL, you can determine if a file is downloaded by getting the value of the <c>NSMetadataUbiquitousItemIsDownloadedKey</c> key. You can also use related keys to determine the current progress in downloading the file.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setUbiquitous:itemAtURL:destinationURL:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.SubpathsAtPath(System.String)">
            <summary>
            Returns an array of strings identifying the paths for all items in the specified directory.
            <br></br>Equivalent to the native <c>subpathsAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of the directory to list.</p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which contains the path of an item in the directory specified by <em>path</em>. If <em>path</em> is a symbolic link, this method traverses the link. This method returns <c>null</c> if it cannot retrieve the device of the linked-to file.</p>
                <b>Discussion</b>
                <p>This method recurses the specified directory and its subdirectories. The method skips the “.” and “..” directories at each level of the recursion.</p>
                <p>This method reveals every element of the subtree at <em>path</em>, including the contents of file packages (such as apps, nib files, and RTFD files). This code fragment gets the contents of <c>/System/Library/Fonts</c> after verifying that the directory exists:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>BOOL isDir=NO;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *subpaths;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSString *fontPath = "/System/Library/Fonts";  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSFileManager *fileManager = [[NSFileManager alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>if ([fileManager fileExistsAtPath:fontPath isDirectory:&amp;isDir] &amp;&amp; isDir)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    subpaths = [fileManager subpathsAtPath:fontPath];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[fileManager release];  </pre>
                        </td>
                    </tr>
                </table>
                <b>Special Considerations</b>
                <p>On OS X v10.5 and later, use <c>subpathsOfDirectoryAtPath:error:</c> instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– subpathsOfDirectoryAtPath:error:</c>
                    </li>
                    <li>
                        <c>– contentsOfDirectoryAtPath:error:</c>
                    </li>
                    <li>
                        <c>– enumeratorAtPath:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.SubpathsOfDirectoryAtPath(System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Performs a deep enumeration of the specified directory and returns the paths of all of the contained subdirectories.
            <br></br>Equivalent to the native <c>subpathsOfDirectoryAtPath:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path of the directory to list.</p>
                <em>error</em>
                <p>If an error occurs, upon return contains an <c>NSError</c> object that describes the problem. Pass <c>NULL</c> if you do not want error information.</p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which contains the path of an item in the directory specified by <em>path</em>. If <em>path</em> is a symbolic link, this method traverses the link. This method returns <c>null</c> if it cannot retrieve the device of the linked-to file.</p>
                <b>Discussion</b>
                <p>This method recurses the specified directory and its subdirectories. The method skips the “.” and “..” directories at each level of the recursion.</p>
                <p>Because this method recurses the directory’s contents, you might not want to use it in performance-critical code. Instead, consider using the <c>enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c> or <c>enumeratorAtPath:</c> method to enumerate the directory contents yourself. Doing so gives you more control over the retrieval of items and more opportunities to abort the enumeration or perform other tasks at the same time.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:</c>
                    </li>
                    <li>
                        <c>– enumeratorAtPath:</c>
                    </li>
                    <li>
                        <c>– contentsOfDirectoryAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.UbiquityIdentityToken">
            <summary>
            Returns an opaque token that represents the current iCloud (“ubiquity”) identity.
            <br></br>Equivalent to the native <c>ubiquityIdentityToken</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Call this method to check if iCloud is available. You can call this method on the main thread.</p>
                <p>You can also use this method, together with the <c>NSUbiquityIdentityDidChangeNotification</c> notification, to detect when a user changes to a different iCloud account, or logs in or out of iCloud. When the ubiquity identity changes, the system posts that notification.</p>
                <p>You can copy or encode a ubiquity identity token, and you can compare it to previously-obtained values by using the <c>isEqual:</c> method.</p>
                <p>This method returns <c>null</c> if ubiquity containers are unavailable because the user has disabled them, or if the user is not logged in to iCloud.</p>
                <p>Calling this method does not establish access to your app’s ubiquity containers. To establish access to a ubiquity container, call the <c>URLForUbiquityContainerIdentifier:</c> method. In OS X, you can instead use an <c><!--a target="_self" -->NSDocument<!--/a--></c> object, which establishes access automatically.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– URLForUbiquityContainerIdentifier:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.URL(U3DXT.iOS.Native.Foundation.NSSearchPathDirectory,U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask,U3DXT.iOS.Native.Foundation.NSURL,System.Boolean,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Locates and optionally creates the specified common directory in a domain.
            <br></br>Equivalent to the native <c>URLForDirectory:inDomain:appropriateForURL:create:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>directory</em>
                <p>The search path directory. The supported values are described in <c>NSSearchPathDirectory</c>.</p>
                <em>domain</em>
                <p>The file system domain to search. The value for this parameter is one of the constants described in <c>NSSearchPathDomainMask</c>. You should specify only one domain for your search and you may not specify the <c>NSAllDomainsMask</c> constant for this parameter.</p>
                <em>url</em>
                <p>The name of a directory inside of which you want to create a unique temporary directory for autosaving documents or some other use. This parameter is ignored unless the <em>directory</em> parameter contains the value <c>NSItemReplacementDirectory</c> and the <em>domain</em> parameter contains the value <c>NSUserDomainMask</c>. When creating a temporary directory, the <em>shouldCreate</em> parameter is ignored and the directory is always created.</p>
                <em>shouldCreate</em>
                <p>Specify <c>true</c> if you want the directory to be created if it does not exist. </p>
                <em>error</em>
                <p>On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object containing the error information. You may specify <c>null</c> for this parameter if you do not want the error information.</p>
                <b>Return Value</b>
                <p>The <c>NSURL</c> for the requested directory or <c>null</c> if an error occurred. </p>
                <b>Discussion</b>
                <p>You typically use this method to locate one of the standard system directories, such as the <c>Documents</c>, <c>Application Support</c> or <c>Caches</c> directories. You can also use this method to create a new temporary directory for storing things like autosave files; to do so, specify <c>NSItemReplacementDirectory</c> for the <em>directory</em> parameter, <c>NSUserDomainMask</c> for the <em>domain</em> parameter, and a valid parent directory for the <em>url</em> parameter. After locating (or creating) the desired directory, this method returns the URL for that directory. If more than one appropriate directory exists in the specified domain, this method returns only the first one it finds.</p>
                <p>Passing a directory and domain pair that makes no sense (for example <c>NSDesktopDirectory</c> and <c>NSNetworkDomainMask</c>) raises an exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>NSSearchPathForDirectoriesInDomains</c>
                    </li>
                </ul>
            </remarks>
            <param name="directory">
            </param>
            <param name="domain">
            </param>
            <param name="url">
            </param>
            <param name="shouldCreate">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.URL(System.String)">
            <summary>
            Returns the URL for the ubiquity (iCloud) container associated with the specified container identifier, and establishes access to that container.
            <br></br>Equivalent to the native <c>URLForUbiquityContainerIdentifier:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>containerID</em>
                <p>The fully-qualified container identifier for a ubiquity container. The string you specify must not contain wildcards and must be of the form <em>&lt;TEAMID&gt;</em><c>.</c><em>&lt;CONTAINER&gt;</em>, where <em>&lt;TEAMID&gt;</em> is your development team ID and <em>&lt;CONTAINER&gt;</em> describes the bundle identifier of the container you want to access.</p>
                <p>The container identifiers for your app must be declared in the <c>com.apple.developer.ubiquity-container-identifiers</c> array of the <c>.entitlements</c> property list file in your Xcode project.</p>
                <p>If you specify <c>null</c> in this parameter, this method returns the first container listed in the <c>com.apple.developer.ubiquity-container-identifiers</c> entitlement array.</p>
                <b>Return Value</b>
                <p>A URL pointing to the specified ubiquity container, or <c>null</c> if the container could not be located or if iCloud storage is unavailable for the current user or device.</p>
                <b>Discussion</b>
                <p>In OS X, you do not need to call this method if you use <c><!--a target="_self" -->NSDocument<!--/a--></c>-based objects, because the system then calls this method automatically.</p>
                <p>You can use the URL returned by this method to build paths to files and directories within your app’s ubiquity container. Each app that syncs documents to the cloud must have at least one associated ubiquity container in which to put those files. This container can be unique to the app or shared by multiple apps.</p>
                <p>
                    <strong>Important:</strong> Do not call this method from your app’s main thread. Instead, use a dispatch queue (other than the main thread queue) to call this method from a secondary thread. </p>
                <p>
                </p>
                <p>In addition to writing to its own ubiquity container, an app can write to any container directory for which it has the appropriate permission. Each additional ubiquity container should be listed as an additional value in the <c>com.apple.developer.ubiquity-container-identifiers</c> entitlement array. </p>
                <p>To learn how to view your development team’s unique <em>&lt;TEAM_ID&gt;</em> value, read  <!--a target="_self" -->“To view the team ID…”<!--/a-->  in <em><!--a target="_self" -->Tools Workflow Guide for Mac<!--/a--></em>.</p>
                <p>
                    <strong>Note:</strong> The development team ID that precedes each container ID string is the unique identifier associated with your development team. To learn how to view your development team’s unique <em>&lt;TEAM_ID&gt;</em> value, read  <!--a target="_self" -->“To view the team ID…”<!--/a-->  in <em><!--a target="_self" -->Tools Workflow Guide for Mac<!--/a--></em>.</p>
                <p>
                </p>
                <p>The first time you call this method for a given ubiquity container, the system extends your app’s sandbox to include that container. In iOS, you must call this method at least once before trying to search for cloud-based files in the ubiquity container. If your app accesses multiple ubiquity containers, call this method once for each container.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– ubiquityIdentityToken</c>
                    </li>
                    <li>
                        <c>– URLForPublishingUbiquitousItemAtURL:expirationDate:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="containerIdentifier">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManager.URLs(U3DXT.iOS.Native.Foundation.NSSearchPathDirectory,U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask)">
            <summary>
            Returns an array of URLs for the specified common directory in the requested domains.
            <br></br>Equivalent to the native <c>URLsForDirectory:inDomains:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>directory</em>
                <p>The search path directory. The supported values are described in <c>NSSearchPathDirectory</c>.</p>
                <em>domainMask</em>
                <p>The file system domain to search. The value for this parameter is one or more of the constants described in <c>NSSearchPathDomainMask</c>. </p>
                <b>Return Value</b>
                <p>An array of <c>NSURL</c> objects identifying the requested directories. The directories are ordered according to the order of the domain mask constants, with items in the user domain first and items in the system domain last. </p>
                <b>Discussion</b>
                <p>This method is intended to locate known and common directories in the system. For example, setting the directory to <c>NSApplicationDirectory</c>, will return the Applications directories in the requested domain. There are a number of common directories available in the <c>NSSearchPathDirectory</c>, including: <c>NSDesktopDirectory</c>, <c>NSApplicationSupportDirectory</c>, and many more.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="directory">
            </param>
            <param name="domainMask">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate">
            <summary>
            The <c>NSFileManagerDelegate</c> protocol defines optional methods for managing operations involving the copying, moving, linking, or removal of files and directories. When you use an <c>NSFileManager</c> object to initiate a copy, move, link, or remove operation, the file manager asks its delegate whether the operation should begin at all and whether it should proceed when an error occurs.
            </summary>
            <remarks>
                <p>The methods of this protocol accept either <c>NSURL</c> or <c>String</c> objects. The file manager always prefers methods that take an <c>NSURL</c> object over those that take an <c>String</c> object.</p>
                <p>You should associate your delegate with a unique instance of the <c>NSFileManager</c> class, as opposed to the shared instance. </p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldCopyItemAtPath_toPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldCopyItemAtURL_toURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldLinkItemAtPath_toPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldLinkItemAtURL_toURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldMoveItemAtPath_toPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldMoveItemAtURL_toURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_copyingItemAtPath_toPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_copyingItemAtURL_toURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_linkingItemAtPath_toPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_linkingItemAtURL_toURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_movingItemAtPath_toPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_movingItemAtURL_toURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_removingItemAtPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldProceedAfterError_removingItemAtURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldRemoveItemAtPath__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.UP_NSFileManagerDelegate_set__fileManager_shouldRemoveItemAtURL__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldCopyItemAtPath(U3DXT.iOS.Native.Foundation.NSFileManager,System.String,System.String)">
            <summary>
            (optional) Asks the delegate if the file manager should copy the specified item to the new path.
            <br></br>Equivalent to the native <c>fileManager:shouldCopyItemAtPath:toPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to copy the file or directory.</p>
                <em>srcPath</em>
                <p>The path to the file or directory that the file manager wants to copy.</p>
                <em>dstPath</em>
                <p>The new path for the copied file or directory.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item should be copied or <c>false</c> if the file manager should stop copying items associated with the current operation. If you do not implement this method, the file manager assumes a response of <c>true</c>. </p>
                <b>Discussion</b>
                <p>This method is called once for each item that needs to be copied. Thus, for a directory, this method is called once for the directory and once for each item in the directory.</p>
                <p>This method performs the same task as the <c>fileManager:shouldCopyItemAtURL:toURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>copyItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>copyItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldCopyItemAt(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate if the file manager should copy the specified item to the new URL.
            <br></br>Equivalent to the native <c>fileManager:shouldCopyItemAtURL:toURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to copy the file or directory.</p>
                <em>srcURL</em>
                <p>The URL of the file or directory that the file manager wants to copy.</p>
                <em>dstURL</em>
                <p>The URL specifying the location for the copied file or directory.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item should be copied or <c>false</c> if the file manager should stop copying items associated with the current operation. If you do not implement this method, the file manager assumes a response of <c>true</c>.</p>
                <b>Discussion</b>
                <p>This method is called once for each item that needs to be copied. Thus, for a directory, this method is called once for the directory and once for each item in the directory.</p>
                <p>This method performs the same task as the <c>fileManager:shouldCopyItemAtPath:toPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>copyItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>copyItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldLinkItemAtPath(U3DXT.iOS.Native.Foundation.NSFileManager,System.String,System.String)">
            <summary>
            (optional) Asks the delegate if a hard link should be created between the items at the two paths.
            <br></br>Equivalent to the native <c>fileManager:shouldLinkItemAtPath:toPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to create the link.</p>
                <em>srcPath</em>
                <p>The path or a file or directory that <em>fileManager</em> is about to attempt to link.</p>
                <em>dstPath</em>
                <p>The path or a file or directory to which <em>fileManager</em> is about to attempt to link.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed, otherwise <c>false</c>. </p>
                <b>Discussion</b>
                <p>If the item specified by <em>destURL</em> is a directory, returning <c>false</c> prevents links from being created to both the directory and its children.</p>
                <p>This method performs the same task as the <c>fileManager:shouldLinkItemAtURL:toURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>linkItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>linkItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldLinkItemAt(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate if a hard link should be created between the items at the two URLs.
            <br></br>Equivalent to the native <c>fileManager:shouldLinkItemAtURL:toURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to create the link.</p>
                <em>srcURL</em>
                <p>The URL identifying the new hard link to be created.</p>
                <em>dstURL</em>
                <p>The URL identifying the destination of the link.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the link should be created or <c>false</c> if it should not be created.</p>
                <b>Discussion</b>
                <p>If the item specified by <em>destURL</em> is a directory, returning <c>false</c> prevents links from being created to both the directory and its children.</p>
                <p>This method performs the same task as the <c>fileManager:shouldLinkItemAtPath:toPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>linkItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>linkItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldMoveItemAtPath(U3DXT.iOS.Native.Foundation.NSFileManager,System.String,System.String)">
            <summary>
            (optional) Asks the delegate if the file manager should move the specified item to the new path.
            <br></br>Equivalent to the native <c>fileManager:shouldMoveItemAtPath:toPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to move the file or directory.</p>
                <em>srcPath</em>
                <p>The path to the file or directory that the file manager wants to move.</p>
                <em>dstPath</em>
                <p>The new path for the file or directory.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed, otherwise <c>false</c>. If you do not implement this method, the file manager assumes a response of <c>true</c>.</p>
                <b>Discussion</b>
                <p>This method is called only once for the item being moved, regardless of whether the item is a file, directory, or symbolic link.</p>
                <p>This method performs the same task as the <c>fileManager:shouldMoveItemAtURL:toURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>moveItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>moveItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldMoveItemAt(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate if the file manager should move the specified item to the new URL.
            <br></br>Equivalent to the native <c>fileManager:shouldMoveItemAtURL:toURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to move the file or directory.</p>
                <em>srcURL</em>
                <p>The URL of the file or directory that the file manager wants to move.</p>
                <em>dstURL</em>
                <p>The URL specifying the new location for the file or directory.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the item should be moved or <c>false</c> if it should not be moved. If you do not implement this method, the file manager assumes a response of <c>true</c>.</p>
                <b>Discussion</b>
                <p>This method is called only once for the item being moved, regardless of whether the item is a file, directory, or symbolic link.</p>
                <p>This method performs the same task as the <c>fileManager:shouldMoveItemAtPath:toPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>moveItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>moveItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInCopying(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,System.String,System.String)">
            <summary>
            (optional) Asks the delegate if the move operation should continue after an error occurs while copying the item at the specified path.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The <c>NSFileManager</c> object that sent this message. </p>
                <em>error</em>
                <p>The error that occurred during the attempt to copy.</p>
                <em>srcPath</em>
                <p>The path or a file or directory that <em>fileManager</em> is attempting to copy.</p>
                <em>dstPath</em>
                <p>The path or a file or directory to which <em>fileManager</em> is attempting to copy.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem copying the item to the specified location. If you return <c>true</c>, the file manager continues copying any other items and ignores the error.</p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>copyItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>copyItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInCopying(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate if the move operation should continue after an error occurs while copying the item at the specified URL.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that attempted to copy the item.</p>
                <em>error</em>
                <p>The error that occurred during the attempt to copy.</p>
                <em>srcURL</em>
                <p>The URL or a file or directory that <em>fileManager</em> is attempting to copy.</p>
                <em>dstURL</em>
                <p>The URL or a file or directory to which <em>fileManager</em> is attempting to copy.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem copying the item to the specified location. If you return <c>true</c>, the file manager continues copying any other items and ignores the error.</p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>copyItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>copyItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInLinking(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,System.String,System.String)">
            <summary>
            (optional) Asks the delegate if the operation should continue after an error occurs while linking to the item at the specified path.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that attempted to create the link. </p>
                <em>error</em>
                <p>The error that occurred during the link attempt.</p>
                <em>srcPath</em>
                <p>The path to the attempted link location.</p>
                <em>dstPath</em>
                <p>The path to the file or directory that was the destination of the hard link.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem creating a hard link to the item at the specified location. If you return <c>true</c>, the file manager continues creating any other links associated with the current operation and ignores the error.</p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>linkItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>linkItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInLinking(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate if the operation should continue after an error occurs while linking to the item at the specified URL.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that attempted to create the link. </p>
                <em>error</em>
                <p>The error that occurred during the link attempt.</p>
                <em>srcURL</em>
                <p>The URL of the attempted link location.</p>
                <em>dstURL</em>
                <p>The URL of the file or directory that was the destination of the hard link.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem creating a hard link to the item at the specified location. If you return <c>true</c>, the file manager continues creating any other links associated with the current operation and ignores the error.</p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>linkItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>linkItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInMoving(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,System.String,System.String)">
            <summary>
            (optional) Asks the delegate if the move operation should continue after an error occurs while moving the item at the specified path.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:movingItemAtPath:toPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that attempted to move the item.</p>
                <em>error</em>
                <p>The error that occurred while trying to move the item in <em>srcPath</em>.</p>
                <em>srcPath</em>
                <p>The path of the file or directory that the file manager tried to move.</p>
                <em>dstPath</em>
                <p>The path of the intended destination for the item in <em>srcPath</em>.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem moving the item to the specified location. If you return <c>true</c>, the file manager proceeds to remove the item from its current location as if the move operation had completed successfully.  </p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:movingItemAtURL:toURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>moveItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>moveItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="srcPath">
            </param>
            <param name="dstPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInMoving(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate if the move operation should continue after an error occurs while moving the item at the specified URL.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:movingItemAtURL:toURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that attempted to move the item.</p>
                <em>error</em>
                <p>The error that occurred while trying to move the item in <em>srcURL</em>.</p>
                <em>srcURL</em>
                <p>The URL of the file or directory that the file manager tried to move.</p>
                <em>dstURL</em>
                <p>The URL of the intended destination for the item in <em>srcURL</em>.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem moving the item to the specified location. If you return <c>true</c>, the file manager proceeds to remove the item from its current location as if the move operation had completed successfully.  </p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:movingItemAtPath:toPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>moveItemAtURL:toURL:error:</c>
                    </li>
                    <li>
                        <c>moveItemAtPath:toPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="srcURL">
            </param>
            <param name="dstURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInRemoving(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,System.String)">
            <summary>
            (optional) Asks the delegate if the operation should continue after an error occurs while removing the item at the specified path.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:removingItemAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that attempted to remove the item.</p>
                <em>error</em>
                <p>The error that occurred during the attempt to copy.</p>
                <em>path</em>
                <p>The path for the file or directory that the file manager tried to delete.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem deleting the item to the specified location. If you return <c>true</c>, the file manager continues deleting any remaining items and ignores the error.</p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:removingItemAtURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>removeItemAtURL:error:</c>
                    </li>
                    <li>
                        <c>removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldProceedAfterErrorInRemoving(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSError,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate if the operation should continue after an error occurs while removing the item at the specified URL.
            <br></br>Equivalent to the native <c>fileManager:shouldProceedAfterError:removingItemAtURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that attempted to remove the item.</p>
                <em>error</em>
                <p>The error that occurred while attempting to remove the item at <em>URL</em>.</p>
                <em>URL</em>
                <p>The URL for the file or directory that the file manager tried to delete.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation should proceed or <c>false</c> if it should be aborted. If you do not implement this method, the file manager assumes a response of <c>false</c>. </p>
                <b>Discussion</b>
                <p>The file manager calls this method when there is a problem deleting the item to the specified location. If you return <c>true</c>, the file manager continues deleting any remaining items and ignores the error.</p>
                <p>This method performs the same task as the <c>fileManager:shouldProceedAfterError:removingItemAtPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>removeItemAtURL:error:</c>
                    </li>
                    <li>
                        <c>removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="error">
            </param>
            <param name="URL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldRemoveItemAtPath(U3DXT.iOS.Native.Foundation.NSFileManager,System.String)">
            <summary>
            (optional) Asks the delegate whether the item at the specified path should be deleted.
            <br></br>Equivalent to the native <c>fileManager:shouldRemoveItemAtPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to remove the file or directory.</p>
                <em>path</em>
                <p>The path to the file or directory that the file manager is attempting to delete.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the specified item should be deleted or <c>false</c> if it should not be deleted. </p>
                <b>Discussion</b>
                <p>Removed items are deleted immediately and not placed in the Trash. If the specified item is a directory, returning <c>false</c> prevents both the directory and its children from being deleted.  </p>
                <p>This method performs the same task as the <c>fileManager:shouldRemoveItemAtURL:</c> method, which is preferred over this method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>removeItemAtURL:error:</c>
                    </li>
                    <li>
                        <c>removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate.ShouldRemoveItemAt(U3DXT.iOS.Native.Foundation.NSFileManager,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            (optional) Asks the delegate whether the item at the specified URL should be deleted.
            <br></br>Equivalent to the native <c>fileManager:shouldRemoveItemAtURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fileManager</em>
                <p>The file manager object that is attempting to remove the file or directory.</p>
                <em>URL</em>
                <p>The URL indicating the file or directory that the file manager is attempting to delete.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the specified item should be removed or <c>false</c> if it should not be removed. </p>
                <b>Discussion</b>
                <p>Removed items are deleted immediately and not placed in the Trash. If the specified item is a directory, returning <c>false</c> prevents both the directory and its children from being deleted.</p>
                <p>This method performs the same task as the <c>fileManager:shouldRemoveItemAtPath:</c> method and is preferred over that method in OS X v10.6 and later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 5.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>removeItemAtURL:error:</c>
                    </li>
                    <li>
                        <c>removeItemAtPath:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fileManager">
            </param>
            <param name="URL">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldCopyItemAtPath_toPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldCopyItemAtPath_toPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldCopyItemAtURL_toURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldCopyItemAtURL_toURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldLinkItemAtPath_toPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldLinkItemAtPath_toPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldLinkItemAtURL_toURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldLinkItemAtURL_toURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldMoveItemAtPath_toPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldMoveItemAtPath_toPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldMoveItemAtURL_toURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldMoveItemAtURL_toURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_copyingItemAtPath_toPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_copyingItemAtURL_toURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_linkingItemAtPath_toPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_linkingItemAtURL_toURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_movingItemAtPath_toPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_movingItemAtPath_toPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_movingItemAtURL_toURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_movingItemAtURL_toURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_removingItemAtPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_removingItemAtPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldProceedAfterError_removingItemAtURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldProceedAfterError_removingItemAtURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldRemoveItemAtPath__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldRemoveItemAtPath__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFileManagerDelegate._fileManager_shouldRemoveItemAtURL__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_fileManager_shouldRemoveItemAtURL__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSFileManagerItemReplacementOptions">
            <summary>
            The constants specify the replacement behavior in <c>NSFileManagerItemReplacementWithoutDeletingBackupItem</c>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSFileManagerItemReplacementOptions.UsingNewMetadataOnly">
            <summary>
                <p>Causes <c>NSFileManagerItemReplacementWithoutDeletingBackupItem</c> to use metadata from the new item only and not to attempt to preserve metadata from the original item.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSFileManagerItemReplacementUsingNewMetadataOnly</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSFileManagerItemReplacementOptions.WithoutDeletingBackupItem">
            <summary>
                <p>Causes <c>NSFileManagerItemReplacementWithoutDeletingBackupItem</c> to leave the backup item in place after a successful replacement. The default behavior is to remove the item.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSFileManagerItemReplacementWithoutDeletingBackupItem</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSKeyedArchiver">
            <summary>
                <c>NSKeyedArchiver</c>, a concrete subclass of <c>NSCoder</c>, provides a way to encode objects (and scalar values) into an architecture-independent format that can be stored in a file. When you archive a set of objects, the class information and instance variables for each object are written to the archive. <c>NSKeyedArchiver</c>’s companion class, <c>NSKeyedUnarchiver</c>, decodes the data in an archive and creates a set of objects equivalent to the original set.
            </summary>
            <remarks>
                <p>A keyed archive differs from a non-keyed archive in that all the objects and values encoded into the archive are given names, or keys. When decoding a non-keyed archive, values have to be decoded in the same order in which they were encoded. When decoding a keyed archive, because values are requested by name, values can be decoded out of sequence or not at all. Keyed archives, therefore, provide better support for forward and backward compatibility.</p>
                <p>The keys given to encoded values must be unique only within the scope of the current object being encoded. A keyed archive is hierarchical, so the keys used by object A to encode its instance variables do not conflict with the keys used by object B, even if A and B are instances of the same class. Within a single object, however, the keys used by a subclass can conflict with keys used in its superclasses.</p>
                <p>An <c><!--a target="_self" -->NSArchiver<!--/a--></c> object can write the archive data to a file or to a mutable-data object (an instance of <c>NSMutableData</c>) that you provide.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_archivedDataWithRootObject_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_archiveRootObject_toFile_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeBool_forKey_(System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeConditionalObject_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeDouble_forKey_(System.String,System.Double,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeFloat_forKey_(System.String,System.Single,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeInt32_forKey_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeInt64_forKey_(System.String,System.Int64,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeInt_forKey_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_encodeObject_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_finishEncoding(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_outputFormat(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_setDelegate_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_setOutputFormat_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.UP_NSKeyedArchiver_setRequiresSecureCoding_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSKeyedArchiver" /> class.
            <br></br>Equivalent to the native <c>[[NSKeyedArchiver alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.ClassExists">
            <summary>
            Returns whether the native NSKeyedArchiver class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.ArchivedData(System.Object)">
            <summary>
            Returns an <c>NSData</c> object containing the encoded form of the object graph whose root object is given.
            <br></br>Equivalent to the native <c>archivedDataWithRootObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rootObject</em>
                <p>The root of the object graph to archive.</p>
                <b>Return Value</b>
                <p>An <c>NSData</c> object containing the encoded form of the object graph whose root object is <em>rootObject</em>. The format of the archive is <c>NSPropertyListBinaryFormat_v1_0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="rootObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.ArchiveRootObject(System.Object,System.String)">
            <summary>
            Archives an object graph rooted at a given object by encoding it into a data object then atomically writes the resulting data object to a file at a given path, and returns a Boolean value that indicates whether the operation was successful.
            <br></br>Equivalent to the native <c>archiveRootObject:toFile:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rootObject</em>
                <p>The root of the object graph to archive.</p>
                <em>path</em>
                <p>The path of the file in which to write the archive.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation was successful, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>The format of the archive is <c>NSPropertyListBinaryFormat_v1_0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="rootObject">
            </param>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.Delegate">
            <summary>
            Returns the receiver’s delegate.
            <br></br>Equivalent to the native <c>delegate</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver's delegate.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDelegate:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeBool(System.Boolean,System.String)">
            <summary>
            Encodes a given Boolean value and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeBool:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>boolv</em>
                <p>The value to encode.</p>
                <em>key</em>
                <p>The key with which to associate <em>boolv</em>. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>decodeBoolForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                </ul>
            </remarks>
            <param name="boolv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeConditionalObject(System.Object,System.String)">
            <summary>
            Encodes a reference to a given object and associates it with a given key only if it has been unconditionally encoded elsewhere in the archive with <c>encodeObject:forKey:</c>.
            <br></br>Equivalent to the native <c>encodeConditionalObject:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>objv</em>
                <p>The object to encode. </p>
                <em>key</em>
                <p>The key with which to associate the encoded value. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="objv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeDouble(System.Double,System.String)">
            <summary>
            Encodes a given <c>double</c> value and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeDouble:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>realv</em>
                <p>The value to encode.</p>
                <em>key</em>
                <p>The key with which to associate <em>realv</em>. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>decodeDoubleForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                    <li>
                        <c>decodeFloatForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                </ul>
            </remarks>
            <param name="realv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeFloat(System.Single,System.String)">
            <summary>
            Encodes a given <c>float</c> value and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeFloat:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>realv</em>
                <p>The value to encode.</p>
                <em>key</em>
                <p>The key with which to associate <em>realv</em>. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>decodeFloatForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                    <li>
                        <c>decodeDoubleForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                </ul>
            </remarks>
            <param name="realv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeInt32(System.Int32,System.String)">
            <summary>
            Encodes a given 32-bit integer value and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeInt32:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>intv</em>
                <p>The value to encode.</p>
                <em>key</em>
                <p>The key with which to associate <em>intv</em>. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>decodeInt32ForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                </ul>
            </remarks>
            <param name="intv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeInt64(System.Int64,System.String)">
            <summary>
            Encodes a given 64-bit integer value and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeInt64:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>intv</em>
                <p>The value to encode.</p>
                <em>key</em>
                <p>The key with which to associate <em>intv</em>. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>decodeInt64ForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                </ul>
            </remarks>
            <param name="intv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeInt(System.Int32,System.String)">
            <summary>
            Encodes a given <c>int</c> value and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeInt:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>intv</em>
                <p>The value to encode.</p>
                <em>key</em>
                <p>The key with which to associate <em>intv</em>. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>decodeIntForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                </ul>
            </remarks>
            <param name="intv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.EncodeObject(System.Object,System.String)">
            <summary>
            Encodes a given object and associates it with a given key.
            <br></br>Equivalent to the native <c>encodeObject:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>objv</em>
                <p>The value to encode. This value may be <c>null</c>.</p>
                <em>key</em>
                <p>The key with which to associate <em>objv</em>. This value must not be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>decodeObjectForKey:</c> (<c>NSKeyedUnarchiver</c>)</li>
                </ul>
            </remarks>
            <param name="objv">
            </param>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.FinishEncoding">
            <summary>
            Instructs the receiver to construct the final data stream.
            <br></br>Equivalent to the native <c>finishEncoding</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>No more values can be encoded after this method is called. You must call this method when finished.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initForWritingWithMutableData:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.Output">
            <summary>
            Returns the format in which the receiver encodes its data.
            <br></br>Equivalent to the native <c>outputFormat</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The format in which the receiver encodes its data. The available formats are <c>NSPropertyListXMLFormat_v1_0</c> and <c>NSPropertyListBinaryFormat_v1_0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setOutputFormat:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.SetDelegate(U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate)">
            <summary>
            Sets the delegate for the receiver.
            <br></br>Equivalent to the native <c>setDelegate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>delegate</em>
                <p>The delegate for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– delegate</c>
                    </li>
                </ul>
            </remarks>
            <param name="aDelegate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.SetOutput(U3DXT.iOS.Native.Foundation.NSPropertyListFormat)">
            <summary>
            Sets the format in which the receiver encodes its data.
            <br></br>Equivalent to the native <c>setOutputFormat:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>format</em>
                <p>The format in which the receiver encodes its data. <em>format</em> can be <c>NSPropertyListXMLFormat_v1_0</c> or <c>NSPropertyListBinaryFormat_v1_0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– outputFormat</c>
                    </li>
                </ul>
            </remarks>
            <param name="format">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiver.SetRequiresSecureCoding(System.Boolean)">
            <summary>
            Indicates whether the receiver requires all archived classes to conform to <c>NSSecureCoding</c>.
            <br></br>Equivalent to the native <c>setRequiresSecureCoding:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>
                    <c>true</c> if the receiver requires <c>NSSecureCoding</c>; <c>false</c> if not.</p>
                <b>Discussion</b>
                <p>If you set the receiver to require secure coding, it will throw an exception if you attempt to archive a class which does not conform to <c>NSSecureCoding</c>.</p>
                <p>Note that the getter is on the superclass, <c>NSCoder</c>. See <c>NSCoder</c> for more information about secure coding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="b">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate">
            <summary>
            The <c>NSKeyedArchiverDelegate</c> protocol defines the optional methods implemented by delegates of <c>NSKeyedArchiver</c> objects.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.UP_NSKeyedArchiverDelegate_set__archiver_didEncodeObject__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.UP_NSKeyedArchiverDelegate_set__archiver_willEncodeObject__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.UP_NSKeyedArchiverDelegate_set__archiver_willReplaceObject_withObject__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.UP_NSKeyedArchiverDelegate_set__archiverDidFinish__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.UP_NSKeyedArchiverDelegate_set__archiverWillFinish__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.DidEncodeObject(U3DXT.iOS.Native.Foundation.NSKeyedArchiver,System.Object)">
            <summary>
            (optional) Informs the delegate that a given object has been encoded.
            <br></br>Equivalent to the native <c>archiver:didEncodeObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>archiver</em>
                <p>The archiver that sent the message.</p>
                <em>object</em>
                <p>The object that has been encoded. <em>object</em> may be <c>null</c>.</p>
                <b>Discussion</b>
                <p>The delegate might restore some state it had modified previously, or use this opportunity to keep track of the objects that are encoded.</p>
                <p>This method is not called for conditional objects until they are actually encoded (if ever).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="archiver">
            </param>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.WillEncodeObject(U3DXT.iOS.Native.Foundation.NSKeyedArchiver,System.Object)">
            <summary>
            (optional) Informs the delegate that <em>object</em> is about to be encoded.
            <br></br>Equivalent to the native <c>archiver:willEncodeObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>archiver</em>
                <p>The archiver that sent the message.</p>
                <em>object</em>
                <p>The object that is about to be encoded. This value is never <c>null</c>.</p>
                <b>Return Value</b>
                <p>Either <em>object</em> or a different object to be encoded in its stead. The delegate can also modify the coder state. If the delegate returns <c>null</c>, <c>null</c> is encoded.</p>
                <b>Discussion</b>
                <p>This method is called after the original object may have replaced itself with <c>replacementObjectForKeyedArchiver:</c>:.</p>
                <p>This method is called whether or not the object is being encoded conditionally.</p>
                <p>This method is not called for an object once a replacement mapping has been set up for that object (either explicitly, or because the object has previously been encoded). This method is also not called when <c>null</c> is about to be encoded.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="archiver">
            </param>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.WillReplaceObject(U3DXT.iOS.Native.Foundation.NSKeyedArchiver,System.Object,System.Object)">
            <summary>
            (optional) Informs the delegate that one given object is being substituted for another given object.
            <br></br>Equivalent to the native <c>archiver:willReplaceObject:withObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>archiver</em>
                <p>The archiver that sent the message.</p>
                <em>object</em>
                <p>The object being replaced in the archive.</p>
                <em>newObject</em>
                <p>The object replacing <em>object</em> in the archive.</p>
                <b>Discussion</b>
                <p>This method is called even when the delegate itself is doing, or has done, the substitution. The delegate may use this method if it is keeping track of the encoded or decoded objects.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="archiver">
            </param>
            <param name="anObject">
            </param>
            <param name="newObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.DidFinish(U3DXT.iOS.Native.Foundation.NSKeyedArchiver)">
            <summary>
            (optional) Notifies the delegate that encoding has finished.
            <br></br>Equivalent to the native <c>archiverDidFinish:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>archiver</em>
                <p>The archiver that sent the message.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="archiver">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate.WillFinish(U3DXT.iOS.Native.Foundation.NSKeyedArchiver)">
            <summary>
            (optional) Notifies the delegate that encoding is about to finish.
            <br></br>Equivalent to the native <c>archiverWillFinish:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>archiver</em>
                <p>The archiver that sent the message.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="archiver">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate._archiver_didEncodeObject__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_archiver_didEncodeObject__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate._archiver_willEncodeObject__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_archiver_willEncodeObject__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate._archiver_willReplaceObject_withObject__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_archiver_willReplaceObject_withObject__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate._archiverDidFinish__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_archiverDidFinish__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedArchiverDelegate._archiverWillFinish__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_archiverWillFinish__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver">
            <summary>
                <c>NSKeyedUnarchiver</c>, a concrete subclass of <c>NSCoder</c>, defines methods for decoding a set of named objects (and scalar values) from a keyed archive. Such archives are produced by instances of the <c>NSKeyedArchiver</c> class.
            </summary>
            <remarks>
                <p>A keyed archive is encoded as a hierarchy of objects. Each object in the hierarchy serves as a namespace into which other objects are encoded. The objects available for decoding are restricted to those that were encoded within the immediate scope of a particular object. Objects encoded elsewhere in the hierarchy, whether higher than, lower than, or parallel to this particular object, are not accessible. In this way, the keys used by a particular object to encode its instance variables need to be unique only within the scope of that object.</p>
                <p>If you invoke one of the <c>decode...</c> methods of this class using a key that does not exist in the archive, a non-positive value is returned. This value varies by decoded type. For example, if a key does not exist in an archive, <c>decodeBoolForKey:</c> returns <c>false</c>, <c>decodeIntForKey:</c> returns <c>0</c>, and <c>decodeObjectForKey:</c> returns <c>null</c>.</p>
                <p>
                    <c>NSKeyedUnarchiver</c> supports limited type coercion. A value encoded as any type of integer, whether a standard int or an explicit 32-bit or 64-bit integer, can be decoded using any of the integer decode methods. Likewise, a value encoded as a float or double can be decoded as either a float or a double value. If an encoded value is too large to fit within the coerced type, the decoding method raises an <c>NSRangeException</c>. Further, when trying to coerce a value to an incompatible type, for example decoding an int as a float, the decoding method raises an <c>NSInvalidUnarchiveOperationException</c>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_unarchiveObjectWithData_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_unarchiveObjectWithFile_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_containsValueForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_decodeBoolForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_decodeDoubleForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_decodeFloatForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_decodeInt32ForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_decodeInt64ForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_decodeIntForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_decodeObjectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_finishDecoding(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_alloc_initForReadingWithData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UP_NSKeyedUnarchiver_setDelegate_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver" /> class.
            <br></br>Equivalent to the native <c>[[NSKeyedUnarchiver alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.ClassExists">
            <summary>
            Returns whether the native NSKeyedUnarchiver class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UnarchiveObject(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Decodes and returns the object graph previously encoded by <c>NSKeyedArchiver</c> and stored in a given <c>NSData</c> object.
            <br></br>Equivalent to the native <c>unarchiveObjectWithData:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>An object graph previously encoded by <c>NSKeyedArchiver</c>.</p>
                <b>Return Value</b>
                <p>The object graph previously encoded by <c>NSKeyedArchiver</c> and stored in <em>data</em>.</p>
                <b>Discussion</b>
                <p>This method raises an <c>NSInvalidArchiveOperationException</c> if <em>data</em> is not a valid archive.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.UnarchiveObject(System.String)">
            <summary>
            Decodes and returns the object graph previously encoded by <c>NSKeyedArchiver</c> written to the file at a given path.
            <br></br>Equivalent to the native <c>unarchiveObjectWithFile:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>A path to a file that contains an object graph previously encoded by <c>NSKeyedArchiver</c>.</p>
                <b>Return Value</b>
                <p>The object graph previously encoded by <c>NSKeyedArchiver</c> written to the file <em>path</em>. Returns <c>null</c> if there is no file at <em>path</em>.</p>
                <b>Discussion</b>
                <p>This method raises an <c>NSInvalidArgumentException</c> if the file at <em>path</em> does not contain a valid archive.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.ContainsValue(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the archive contains a value for a given key within the current decoding scope.
            <br></br>Equivalent to the native <c>containsValueForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the archive contains a value for <em>key</em> within the current decoding scope, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.DecodeBool(System.String)">
            <summary>
            Decodes a Boolean value associated with a given key.
            <br></br>Equivalent to the native <c>decodeBoolForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The Boolean value associated with the key <em>key</em>. Returns <c>false</c> if <em>key</em> does not exist.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>encodeBool:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.DecodeDouble(System.String)">
            <summary>
            Decodes a double-precision floating-point value associated with a given key.
            <br></br>Equivalent to the native <c>decodeDoubleForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The double-precision floating-point value associated with the key <em>key</em>. Returns <c>0.0</c> if <em>key</em> does not exist.</p>
                <b>Discussion</b>
                <p>If the archived value was encoded as single-precision, the type is coerced. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>encodeDouble:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                    <li>
                        <c>encodeFloat:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.DecodeFloat(System.String)">
            <summary>
            Decodes a single-precision floating-point value associated with a given key.
            <br></br>Equivalent to the native <c>decodeFloatForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The single-precision floating-point value associated with the key <em>key</em>. Returns <c>0.0</c> if <em>key</em> does not exist.</p>
                <b>Discussion</b>
                <p>If the archived value was encoded as double precision, the type is coerced, loosing precision. If the archived value is too large for single precision, the method raises an <c>NSRangeException</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>encodeFloat:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                    <li>
                        <c>encodeDouble:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.DecodeInt32(System.String)">
            <summary>
            Decodes a 32-bit integer value associated with a given key.
            <br></br>Equivalent to the native <c>decodeInt32ForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The 32-bit integer value associated with the key <em>key</em>. Returns <c>0</c> if <em>key</em> does not exist.</p>
                <b>Discussion</b>
                <p>If the archived value was encoded with a different size but is still an integer, the type is coerced. If the archived value is too large to fit into a 32-bit integer, the method raises an <c>NSRangeException</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>encodeInt32:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.DecodeInt64(System.String)">
            <summary>
            Decodes a 64-bit integer value associated with a given key.
            <br></br>Equivalent to the native <c>decodeInt64ForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The 64-bit integer value associated with the key <em>key</em>. Returns <c>0</c> if <em>key</em> does not exist.</p>
                <b>Discussion</b>
                <p>If the archived value was encoded with a different size but is still an integer, the type is coerced. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>encodeInt64:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.DecodeInt(System.String)">
            <summary>
            Decodes an integer value associated with a given key.
            <br></br>Equivalent to the native <c>decodeIntForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The integer value associated with the key <c>key</c>. Returns <c>0</c> if <em>key</em> does not exist.</p>
                <b>Discussion</b>
                <p>If the archived value was encoded with a different size but is still an integer, the type is coerced. If the archived value is too large to fit into the default size for an integer, the method raises an <c>NSRangeException</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>encodeInt:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.DecodeObject(System.String)">
            <summary>
            Decodes and returns an object associated with a given key.
            <br></br>Equivalent to the native <c>decodeObjectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the archive within the current decoding scope. <em>key</em> must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The object associated with the key <em>key</em>. Returns <c>null</c> if <em>key</em> does not exist, or if the value for <em>key</em> is <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>encodeObject:forKey:</c> (<c>NSKeyedArchiver</c>)</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.Delegate">
            <summary>
            Returns the receiver’s delegate.
            <br></br>Equivalent to the native <c>delegate</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s delegate.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDelegate:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.FinishDecoding">
            <summary>
            Tells the receiver that you are finished decoding objects.
            <br></br>Equivalent to the native <c>finishDecoding</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Invoking this method allows the receiver to notify its delegate and to perform any final operations on the archive. Once this method is invoked, the receiver cannot decode any further values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.#ctor(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates an instance of the native NSKeyedUnarchiver and initializes the object. Initializes the receiver for decoding an archive previously encoded by <c>NSKeyedArchiver</c>.
            <br></br>Equivalent to the native <c>[[NSKeyedUnarchiver alloc] initForReadingWithData:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>An archive previously encoded by <c>NSKeyedArchiver</c>.</p>
                <b>Return Value</b>
                <p>An <c>NSKeyedUnarchiver</c> object initialized for for decoding <em>data</em>.</p>
                <b>Discussion</b>
                <p>When you finish decoding data, you should invoke <c>finishDecoding</c>.</p>
                <p>This method raises an <c>NSInvalidArchiveOperationException</c> if <em>data</em> is not a valid archive.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver.SetDelegate(U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate)">
            <summary>
            Sets the receiver’s delegate.
            <br></br>Equivalent to the native <c>setDelegate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>delegate</em>
                <p>The delegate for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– delegate</c>
                    </li>
                </ul>
            </remarks>
            <param name="aDelegate">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate">
            <summary>
            The <c>NSKeyedUnarchiverDelegate</c> protocol defines the optional methods implemented by delegates of <c>NSKeyedUnarchiver</c> objects.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.UP_NSKeyedUnarchiverDelegate_set__unarchiver_didDecodeObject__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.UP_NSKeyedUnarchiverDelegate_set__unarchiver_willReplaceObject_withObject__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.UP_NSKeyedUnarchiverDelegate_set__unarchiverDidFinish__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.UP_NSKeyedUnarchiverDelegate_set__unarchiverWillFinish__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.DidDecodeObject(U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver,System.Object)">
            <summary>
            (optional) Informs the delegate that a given object has been decoded.
            <br></br>Equivalent to the native <c>unarchiver:didDecodeObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unarchiver</em>
                <p>An unarchiver for which the receiver is the delegate.</p>
                <em>object</em>
                <p>The object that has been decoded. <em>object</em> may be <c>null</c>.</p>
                <b>Return Value</b>
                <p>The object to use in place of <em>object</em>. The delegate can either return <em>object</em> or return a different object to replace the decoded one. If the delegate returns <c>null</c>, the decoded value will be unchanged (that is, the original object will be decoded).</p>
                <b>Discussion</b>
                <p>This method is called after <em>object</em> has been sent <c>initWithCoder:</c> and <c>awakeAfterUsingCoder:</c>.</p>
                <p>The delegate may use this method to keep track of the decoded objects.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="unarchiver">
            </param>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.WillReplaceObject(U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver,System.Object,System.Object)">
            <summary>
            (optional) Informs the delegate that one object is being substituted for another.
            <br></br>Equivalent to the native <c>unarchiver:willReplaceObject:withObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unarchiver</em>
                <p>An unarchiver for which the receiver is the delegate.</p>
                <em>object</em>
                <p>An object in the archive.</p>
                <em>newObject</em>
                <p>The object with which <em>unarchiver</em> will replace <em>object</em>.</p>
                <b>Discussion</b>
                <p> This method is called even when the delegate itself is doing, or has done, the substitution with <c>unarchiver:didDecodeObject:</c>.</p>
                <p>The delegate may use this method if it is keeping track of the encoded or decoded objects.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="unarchiver">
            </param>
            <param name="anObject">
            </param>
            <param name="newObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.DidFinish(U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver)">
            <summary>
            (optional) Notifies the delegate that decoding has finished.
            <br></br>Equivalent to the native <c>unarchiverDidFinish:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unarchiver</em>
                <p>An unarchiver for which the receiver is the delegate.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="unarchiver">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate.WillFinish(U3DXT.iOS.Native.Foundation.NSKeyedUnarchiver)">
            <summary>
            (optional) Notifies the delegate that decoding is about to finish.
            <br></br>Equivalent to the native <c>unarchiverWillFinish:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unarchiver</em>
                <p>An unarchiver for which the receiver is the delegate.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Available as part of an informal protocol prior to iOS 4.0.</li>
                </ul>
            </remarks>
            <param name="unarchiver">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate._unarchiver_didDecodeObject__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_unarchiver_didDecodeObject__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate._unarchiver_willReplaceObject_withObject__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_unarchiver_willReplaceObject_withObject__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate._unarchiverDidFinish__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_unarchiverDidFinish__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSKeyedUnarchiverDelegate._unarchiverWillFinish__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_unarchiverWillFinish__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSPropertyListFormat">
            <summary>
            These constants are used to specify a property list serialization format.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPropertyListFormat.BinaryFormat_v1_0">
            <summary>
                <p>Specifies the binary property list format.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPropertyListBinaryFormat_v1_0</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPropertyListFormat.XMLFormat_v1_0">
            <summary>
                <p>Specifies the XML property list format.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPropertyListXMLFormat_v1_0</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPropertyListFormat.OpenStepFormat">
            <summary>
                <p>Specifies the ASCII property list format inherited from the OpenStep APIs.</p>
                <p>
                    <strong>Important:</strong> The <c>NSPropertyListOpenStepFormat</c> constant is not supported for writing. It can be used only for reading old-style property lists.</p>
                <p>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPropertyListOpenStepFormat</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSPropertyListMutabilityOptions">
            <summary>
            These constants specify mutability options in property lists.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPropertyListMutabilityOptions.Immutable">
            <summary>
                <p>Causes the returned property list to contain immutable objects.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPropertyListImmutable</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPropertyListMutabilityOptions.MutableContainers">
            <summary>
                <p>Causes the returned property list to have mutable containers but immutable leaves.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPropertyListMutableContainers</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPropertyListMutabilityOptions.MutableContainersAndLeaves">
            <summary>
                <p>Causes the returned property list to have mutable containers and leaves.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPropertyListMutableContainersAndLeaves</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization">
            <summary>
            The <c>NSPropertyListSerialization</c> class provides methods that convert  property list objects  to and from several serialized formats. Property list objects include <c>NSData</c>, <c>String</c>, <c>object[]</c>, <c>Dictionary</c>, <c>DateTime</c>, and <c>double</c> objects. These objects are toll-free bridged with their respective Core Foundation types (<c>CFData</c>, <c>CFString</c>, and so on). For more about toll-free bridging, see  <!--a target="_self" -->“Interchangeable Data Types”<!--/a--> .
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.UP_NSPropertyListSerialization_dataWithPropertyList_format_options_error_(System.String,System.Int32,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.UP_NSPropertyListSerialization_propertyList_isValidForFormat_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.UP_NSPropertyListSerialization_propertyListWithData_options_format_error_(System.String,System.UInt32,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization" /> class.
            <br></br>Equivalent to the native <c>[[NSPropertyListSerialization alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.ClassExists">
            <summary>
            Returns whether the native NSPropertyListSerialization class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.Data(System.Object,U3DXT.iOS.Native.Foundation.NSPropertyListFormat,System.UInt32,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns an <c>NSData</c> object containing a given property list in a specified format.
            <br></br>Equivalent to the native <c>dataWithPropertyList:format:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>plist</em>
                <p>A property list object. Passing <c>null</c> for this value will cause an exception to be raised.</p>
                <em>format</em>
                <p>A property list format. Possible values for <em>format</em> are described in  NSPropertyListFormat .</p>
                <em>opt</em>
                <p>The <em>opt</em> parameter is currently unused and should be set to <c>0</c>.</p>
                <em>error</em>
                <p>If the method does not complete successfully, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>An <c>NSData</c> object containing <em>plist</em> in the format specified by <em>format</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="plist">
            </param>
            <param name="format">
            </param>
            <param name="opt">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.PropertyList(System.Object,U3DXT.iOS.Native.Foundation.NSPropertyListFormat)">
            <summary>
            Returns a Boolean value that indicates whether a given property list is valid for a given format.
            <br></br>Equivalent to the native <c>propertyList:isValidForFormat:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>plist</em>
                <p>A property list object.</p>
                <em>format</em>
                <p>A property list format. Possible values for <em>format</em> are listed in  NSPropertyListFormat .</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>plist</em> is a valid property list in format <em>format</em>, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="plist">
            </param>
            <param name="format">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPropertyListSerialization.PropertyList(U3DXT.iOS.Native.Foundation.NSData,System.UInt32,U3DXT.iOS.Native.Foundation.NSPropertyListFormat,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates and returns a property list from the specified data.
            <br></br>Equivalent to the native <c>propertyListWithData:options:format:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>A data object containing a serialized property list.</p>
                <em>opt</em>
                <p>The options can be any of those listed in  “NSPropertyListMutabilityOptions.” </p>
                <em>format</em>
                <p>Upon return, contains the format that the property list was stored in.</p>
                <p>Pass <c>NULL</c>, if you do not need to know the format. Possible values are described in  NSPropertyListFormat .</p>
                <em>error</em>
                <p>If the method does not complete successfully, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>A property list object corresponding to the representation in <em>data</em>. If data is not in a supported format, returns <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="opt">
            </param>
            <param name="format">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory">
            <summary>
            These constants specify the location of a variety of directories by the <c>URLsForDirectory:inDomains:</c> and <c>URLForDirectory:inDomain:appropriateForURL:create:error:</c><c>NSFileManager</c> methods.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Desktop">
            <summary>
                <p>Location of user’s desktop directory.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDesktopDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Document">
            <summary>
                <p>Document directory.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDocumentDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Downloads">
            <summary>
                <p>Location of the user’s downloads directory. </p>
                <p>The <c>NSDownloadsDirectory</c> flag will only produce a path only when the <c>NSUserDomainMask</c> is provided.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDownloadsDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Pictures">
            <summary>
                <p>Location of user's Pictures directory (<c>~/Pictures</c>)</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPicturesDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.DemoApplication">
            <summary>
                <p>Unsupported applications and demonstration versions.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDemoApplicationDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.DeveloperApplication">
            <summary>
                <p>Developer applications (<c>/Developer/Applications</c>).</p>
                <p>Deprecated: As of Xcode 4.3, there is no longer a Developer Application directory directory; instead, Xcode.app is a self-contained application that gets installed in the user’s Applications directory, by default, although it can be put anywhere.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDeveloperApplicationDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Developer">
            <summary>
                <p>Developer resources (<c>/Developer</c>).</p>
                <p>Deprecated: As of Xcode 4.3, there is no longer a Developer directory; instead, Xcode.app is a self-contained application that gets installed in the user’s Applications directory, by default, although it can be put anywhere.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDeveloperDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Application">
            <summary>
                <p>Supported applications (<c>/Applications</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSApplicationDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Caches">
            <summary>
                <p>Location of discardable cache files (<c>Library/Caches</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSCachesDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.AllLibraries">
            <summary>
                <p>All directories where resources can occur.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAllLibrariesDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.ApplicationSupport">
            <summary>
                <p>Location of application support files (<c>Library/Application Support</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSApplicationSupportDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Documentation">
            <summary>
                <p>Documentation.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDocumentationDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.AdminApplication">
            <summary>
                <p>System and network administration applications.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAdminApplicationDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Library">
            <summary>
                <p>Various user-visible documentation, support, and configuration files (<c>/Library</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLibraryDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.CoreService">
            <summary>
                <p>Location of core services (<c>System/Library/CoreServices</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSCoreServiceDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Music">
            <summary>
                <p>Location of user's Music directory (<c>~/Music</c>)</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSMusicDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.SharedPublic">
            <summary>
                <p>Location of user's Public sharing directory (<c>~/Public</c>)</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSSharedPublicDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.Movies">
            <summary>
                <p>Location of user's Movies directory <c>(~/Movies</c>)</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSMoviesDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.ItemReplacement">
            <summary>
                <p>For use with <c>NSFileManager</c> method <c>URLForDirectory:inDomain:appropriateForURL:create:error:</c></p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSItemReplacementDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.PrinterDescription">
            <summary>
                <p>Location of system's PPDs directory (<c>Library/Printers/PPDs</c>)</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPrinterDescriptionDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.AutosavedInformation">
            <summary>
                <p>Location of user’s autosaved documents <c>Library/Autosave Information</c></p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAutosavedInformationDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.PreferencePanes">
            <summary>
                <p>Location of the PreferencePanes directory for use with System Preferences (<c>Library/PreferencePanes</c>)</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPreferencePanesDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.AllApplications">
            <summary>
                <p>All directories where applications can occur.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAllApplicationsDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.User">
            <summary>
                <p>User home directories (<c>/Users</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUserDirectory</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDirectory.InputMethods">
            <summary>
                <p>Location of Input Methods (<em>Library/Input Methods</em>)</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSInputMethodsDirectory</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask">
            <summary>
            Search path domain constants specifying base locations for the <c>NSSearchPathDirectory</c> type. These constants are used by the <c>URLsForDirectory:inDomains:</c> and <c>URLForDirectory:inDomain:appropriateForURL:create:error:</c><c>NSFileManager</c> methods.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask.LocalDomain">
            <summary>
                <p>Local to the current machine—the place to install items available to everyone on this machine.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocalDomainMask</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask.AllDomains">
            <summary>
                <p>All domains. </p>
                <p>Includes all of the above and future items.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAllDomainsMask</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask.NetworkDomain">
            <summary>
                <p>Publicly available location in the local area network—the place to install items available on the network (<c>/Network</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNetworkDomainMask</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask.UserDomain">
            <summary>
                <p>The user’s home directory—the place to install user’s personal items (<c>~</c>).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUserDomainMask</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSSearchPathDomainMask.SystemDomain">
            <summary>
                <p>Provided by Apple—can’t be modified (<c>/System</c>) .</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSSystemDomainMask</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore">
            <summary>
            Use the iCloud key-value store to make preference, configuration, and app-state data available to every instance of your app on every device connected to a user’s iCloud account. You can store scalar values such as <c>bool</c>, as well as values containing any of the property list object types: <c>double</c>, <c>String</c>, <c>DateTime</c>, <c>NSData</c>, <c>object[]</c>, and <c>Dictionary</c>.
            </summary>
            <remarks>
                <p>Changes your app writes to the key-value store object are initially held in memory, then written to disk by the system at appropriate times. The system automatically reconciles your local, on-disk keys and values with those on the iCloud server.</p>
                <p>Any device running your app, and attached to the same iCloud account, can upload key-value changes to iCloud. To keep track of such changes, register for the <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification during app launch. Then, obtain the keys and values from iCloud (which may be newer than those that are local) by calling the <c>synchronize</c> method. You need not call the <c>synchronize</c> method again during your app’s life cycle, unless your app design requires fast-as-possible upload to iCloud after you change a value.</p>
                <p>For more information on adopting key-value storage in your app, see  “Designing for Key-Value Data in iCloud”  in <em>iCloud Design Guide</em>.</p>
                <p>
                </p>
                <p>
                </p>
                <p>
                </p>
                <p>Avoid using this class for data that is essential to your app’s behavior when offline; instead, store such data directly into the local user defaults database.</p>
                <p>The total amount of space available in your app’s key-value store, for a given user, is 1 MB. There is a per-key value size limit of 1 MB, and a maximum of 1024 keys. If you attempt to write data that exceeds these quotas, the write attempt fails and no change is made to your iCloud key-value storage. In this scenario, the system posts the  <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification with a change reason of <c>NSUbiquitousKeyValueStoreQuotaViolationChange</c>.</p>
                <p>The maximum length for key strings for the iCloud key-value store is 64 bytes using UTF8 encoding. Attempting to write a value to a longer key name results in a runtime error.</p>
                <p>To use this class, you must distribute your app through the App Store or Mac App Store, and you must request the <c>com.apple.developer.ubiquity-kvstore-identifier</c> entitlement in your Xcode project. For more on this, see  “Request Access to iCloud Storage By Using Entitlements”  in <em>iCloud Design Guide</em>.</p>
                <p>This class is not meant to be subclassed.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.ChangedKeysKey">
            <summary>
                <p>The value of this key is an array of <c>String</c> objects, where each is the name of a key that changed in the key-value store.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUbiquitousKeyValueStoreChangedKeysKey</c> constant.
            </summary>
            <remarks>
            These keys can be included in the user info dictionary of the <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification.
            <p></p><p></p>This is a constant for "Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.ChangeReasonKey">
            <summary>
                <p>The value of this key indicates the reason the key-value store changed, as described in  “Change Reason Values .” </p>
                <p>An <c>double</c> object with an integer value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUbiquitousKeyValueStoreChangeReasonKey</c> constant.
            </summary>
            <remarks>
            These keys can be included in the user info dictionary of the <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification.
            <p></p><p></p>This is a constant for "Notification Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.NSUbiquitousKeyValueStoreDidChangeExternallyNotification">
            <summary>
            Constant name for the native <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.DidChangeExternally">
            <summary>
                <b>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</b> Posted when the value of one or more keys in the local key-value store changed due to incoming data pushed from iCloud. <p>This notification is sent only upon a change received from iCloud; it is not sent when your app sets a value.</p><p>The user info dictionary can contain the reason for the notification as well as a list of which values changed, as follows:</p><ul class="ul"><li class="li"><p>The value of the <c>NSUbiquitousKeyValueStoreChangeReasonKey</c> key, when present, indicates why the key-value store changed. Its value is one of the constants in  “Change Reason Values .” </p></li><li class="li"><p>The value of the <c>NSUbiquitousKeyValueStoreChangedKeysKey</c>, when present, is an array of strings, each the name of a key whose value changed.</p></li></ul><p>The notification object is the <c>NSUbiquitousKeyValueStore</c> object whose contents changed.</p><p><strong>Important:</strong> Early in your app’s launch sequence, register for the <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification using the <c>NSNotificationCenter</c> class. Specify the default key-value store object (obtained using the <c>defaultStore</c> class method) as the object whose notifications you want to receive.</p><p></p><p></p><b>Availability</b><ul><li>Available in iOS 5.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>NSUbiquitousKeyValueStore</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.AllInstances.DidChangeExternally">
            <summary>
                <b>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</b> Posted when the value of one or more keys in the local key-value store changed due to incoming data pushed from iCloud. <p>This notification is sent only upon a change received from iCloud; it is not sent when your app sets a value.</p><p>The user info dictionary can contain the reason for the notification as well as a list of which values changed, as follows:</p><ul class="ul"><li class="li"><p>The value of the <c>NSUbiquitousKeyValueStoreChangeReasonKey</c> key, when present, indicates why the key-value store changed. Its value is one of the constants in  “Change Reason Values .” </p></li><li class="li"><p>The value of the <c>NSUbiquitousKeyValueStoreChangedKeysKey</c>, when present, is an array of strings, each the name of a key whose value changed.</p></li></ul><p>The notification object is the <c>NSUbiquitousKeyValueStore</c> object whose contents changed.</p><p><strong>Important:</strong> Early in your app’s launch sequence, register for the <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification using the <c>NSNotificationCenter</c> class. Specify the default key-value store object (obtained using the <c>defaultStore</c> class method) as the object whose notifications you want to receive.</p><p></p><p></p><b>Availability</b><ul><li>Available in iOS 5.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSUbiquitousKeyValueStoreDidChangeExternallyNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_defaultStore">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_arrayForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_boolForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_dataForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_dictionaryForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_dictionaryRepresentation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_doubleForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_longLongForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_objectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_removeObjectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setArray_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setBool_forKey_(System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setData_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setDictionary_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setDouble_forKey_(System.String,System.Double,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setLongLong_forKey_(System.String,System.Int64,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setObject_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_setString_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_stringForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.UP_NSUbiquitousKeyValueStore_synchronize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore" /> class.
            <br></br>Equivalent to the native <c>[[NSUbiquitousKeyValueStore alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.ClassExists">
            <summary>
            Returns whether the native NSUbiquitousKeyValueStore class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.DefaultStore">
            <summary>
            Returns the shared iCloud key-value store object.
            <br></br>Equivalent to the native <c>defaultStore</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The shared iCloud key-value store object.</p>
                <b>Discussion</b>
                <p>An app must always use the default iCloud key-value store object to get and set values. This store is tied to the unique identifier string your app provides in its entitlement requests.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.Array(System.String)">
            <summary>
            Returns the array associated with the specified key.
            <br></br>Equivalent to the native <c>arrayForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>The array associated with the specified key, or <c>null</c> if the key was not found or its value is not an <c>object[]</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setArray:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.Bool(System.String)">
            <summary>
            Returns the Boolean value associated with the specified key.
            <br></br>Equivalent to the native <c>boolForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>If a Boolean value is associated with the specified key, that value is returned. If the key was not found, this method returns <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setBool:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.Data(System.String)">
            <summary>
            Returns the data object associated with the specified key.
            <br></br>Equivalent to the native <c>dataForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>The data object associated with the specified key or <c>null</c> if the key was not found or its value is not an <c>NSData</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setData:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.Dictionary(System.String)">
            <summary>
            Returns the dictionary object associated with the specified key.
            <br></br>Equivalent to the native <c>dictionaryForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>The dictionary object associated with the specified key or <c>null</c> if the key was not found or its value is not an <c>Dictionary</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDictionary:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.DictionaryRepresentation">
            <summary>
            Returns a dictionary containing all of the key-value pairs in the key-value store.
            <br></br>Equivalent to the native <c>dictionaryRepresentation</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary containing the key and value data in the key-value store.</p>
                <b>Discussion</b>
                <p>This method returns the in-memory version of the keys and values. If you want to ensure that this dictionary contains the most recent set of changes, call <c>synchronize</c> shortly before calling this method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.Double(System.String)">
            <summary>
            Returns the double value associated with the specified key.
            <br></br>Equivalent to the native <c>doubleForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>The double value associated with the specified key or <c>0</c> if the key was not found. If the key exists but does not contain a numerical value, this method returns <c>0</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDouble:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.LongLong(System.String)">
            <summary>
            Returns the long long value associated with the specified key.
            <br></br>Equivalent to the native <c>longLongForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>The long long value associated with the specified key or <c>0</c> if the key was not found. If the key exists but does not contain a numerical value, this method returns <c>0</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setLongLong:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.Object(System.String)">
            <summary>
            Returns the object associated with the specified key.
            <br></br>Equivalent to the native <c>objectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>The object associated with the specified key or <c>null</c> if the key was not found. </p>
                <b>Discussion</b>
                <p>You can use this method to retrieve objects whose type you do not necessarily know from the key-value store. The object returned by this method is always one of the property list types: <c>double</c>, <c>String</c>, <c>DateTime</c>, <c>NSData</c>, <c>object[]</c>, or <c>Dictionary</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setObject:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.RemoveObject(System.String)">
            <summary>
            Removes the value associated with the specified key from the key-value store.
            <br></br>Equivalent to the native <c>removeObjectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>The key corresponding to the value you want to remove. </p>
                <b>Discussion</b>
                <p>If the specified key is not found in the key-value store, this method does nothing. This method removes the key from the in-memory version of the store only. Call the synchronize method at appropriate times to update the information on disk. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetArray(System.Object[],System.String)">
            <summary>
            Sets an array object for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setArray:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>anArray</em>
                <p>An array whose contents can be stored in a property list format. In other words, the objects in the array must be of the types <c>double</c>, <c>String</c>, <c>DateTime</c>, <c>NSData</c>, <c>object[]</c>, or <c>Dictionary</c>. The total size (in bytes) of the array and its contents must not exceed the per-key size limits.</p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="anArray">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetBool(System.Boolean,System.String)">
            <summary>
            Sets a Boolean value for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setBool:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The Boolean value to store. </p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.\ </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetData(U3DXT.iOS.Native.Foundation.NSData,System.String)">
            <summary>
            Sets a data object for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setData:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aData</em>
                <p>The data object to store. The total size of this data object (including any object overhead) must not exceed 1 MB.</p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</p>
                <b>Discussion</b>
                <!-- Original
            <Para>START_AAA Although you can archive objects to an <uAPI-No-Link LinkToAppleRefId="//apple_ref/occ/cl/NSData" targetElementType="">NSData</uAPI-No-Link> object and write them to the key-value store, doing so is not recommended. The contents of the key-value store are shared among multiple instances of your app, and possibly among multiple apps you create. Ensuring the integrity and validity of custom objects between different versions of your app (or among different apps) is difficult and error-prone.END_AAA</Para>
            -->
                <p>Using an <c>NSData</c> object as a value in key-value storage lets you store arbitrary data. For example, in a game app, you can use it to store game state to iCloud.</p>
                <p>Be sure to exercise caution when storing a data object. Because it is available to be read and modified by every instance of your app attached to a user’s iCloud account, some of which may be older versions or running on another platform, you must diligently protect a data object’s integrity. For more information, see “Exercise Caution When Using NSData Objects as Values” in <em>iCloud Design Guide</em>.</p>
                <!-- Minimal rewrite of original
            <Para>START_BBB Although you can archive data to an <uAPI-No-Link LinkToAppleRefId="//apple_ref/occ/cl/NSData" targetElementType="">NSData</uAPI-No-Link> value in key-value storage, doing so is not recommended. The contents of the key-value store are available to every instance of your app attached to a user’s iCloud account, and possibly available to other apps from your team that share the same primary ubiquity container. Ensuring the integrity and validity of custom objects between different versions of your app (or among different apps) is difficult and error-prone.END_BBB</Para>
            -->
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="aData">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetDictionary(System.Collections.Generic.Dictionary{System.Object,System.Object},System.String)">
            <summary>
            Sets a dictionary object for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setDictionary:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aDictionary</em>
                <p>A dictionary whose contents can be stored in a property list format. In other words, the objects in the dictionary must be of the types <c>double</c>, <c>String</c>, <c>DateTime</c>, <c>NSData</c>, <c>object[]</c>, or <c>Dictionary</c>. The total size (in bytes) of the dictionary and its contents must not exceed the per-key size limits.</p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDictionary">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetDouble(System.Double,System.String)">
            <summary>
            Sets a double value for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setDouble:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The double value to store.</p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetLongLong(System.Int64,System.String)">
            <summary>
            Sets a long long value for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setLongLong:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The long long value to store.</p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetObject(System.Object,System.String)">
            <summary>
            Sets an object for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setObject:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>anObject</em>
                <p>The object you want to store. The type of the object must be one of the property list types: <c>double</c>, <c>String</c>, <c>DateTime</c>, <c>NSData</c>, <c>object[]</c>, or <c>Dictionary</c>. The total size (in bytes) of the object must not exceed the per-key size limits.</p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</p>
                <b>Discussion</b>
                <p>If the type of <em>anObject</em> is not one of the property list types, this method does not set it in the key-value store. Instead, it logs an error and silently ignores the object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.SetString(System.String,System.String)">
            <summary>
            Sets a string object for the specified key in the key-value store.
            <br></br>Equivalent to the native <c>setString:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aString</em>
                <p>The string you want to store. The total size (in bytes) of the string must not exceed the per-key size limits.</p>
                <em>aKey</em>
                <p>The key under which to store the value. The length of this key must not exceed 64 bytes using UTF8 encoding.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.String(System.String)">
            <summary>
            Returns the string associated with the specified key.
            <br></br>Equivalent to the native <c>stringForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aKey</em>
                <p>A key in the key-value store.</p>
                <b>Return Value</b>
                <p>The string associated with the specified key or <c>null</c> if the key was not found or its value is not an <c>String</c> object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setString:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aKey">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStore.Synchronize">
            <summary>
            Explicitly synchronizes in-memory keys and values with those stored on disk.
            <br></br>Equivalent to the native <c>synchronize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the in-memory and on-disk keys and values were synchronized, or <c>false</c> if an error occurred. For example, this method returns <c>false</c> if an app was not built with the proper entitlement requests.</p>
                <b>Discussion</b>
                <p>The only recommended time to call this method is upon app launch, or upon returning to the foreground, to ensure that the in-memory key-value store representation is up-to-date.</p>
                <p>Changes you make to the key-value store are saved to memory. The system then synchronizes the in-memory keys and values with the local on-disk cache, automatically and at appropriate times. For example, it synchronizes the keys when your app is put into the background, when changes are received from iCloud, and when your app makes changes to a key but does not call the <c>synchronize</c> method for several seconds.</p>
                <p>This method does not force new keys and values to be written to iCloud. Rather, it lets iCloud know that new keys and values are available to be uploaded. Do not rely on your keys and values being available on other devices immediately. The system controls when those keys and values are uploaded. The frequency of upload requests for key-value storage is limited to several per minute. </p>
                <p>During synchronization between memory and disk, this method updates your in-memory set of keys and values with changes previously received from iCloud.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStoreChangeReasonValues">
            <summary>
            Possible values associated with the <c>NSUbiquitousKeyValueStoreChangeReasonKey</c> key.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStoreChangeReasonValues.ServerChange">
            <summary>
                <p>A value changed in iCloud. This occurs when another device, running another instance of your app and attached to the same iCloud account, uploads a new value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUbiquitousKeyValueStoreServerChange</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStoreChangeReasonValues.InitialSyncChange">
            <summary>
                <p>Your attempt to write to key-value storage was discarded because an initial download from iCloud has not yet happened. That is, before you can first write key-value data, the system must ensure that your app’s local, on-disk cache matches the truth in iCloud.</p>
                <p>Initial downloads happen the first time a device is connected to an iCloud account, and when a user switches their primary iCloud account.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUbiquitousKeyValueStoreInitialSyncChange</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStoreChangeReasonValues.AccountChange">
            <summary>
                <p>The user has changed the primary iCloud account. The keys and values in the local key-value store have been replaced with those from the new account, regardless of the relative timestamps.</p>
                <p>
                </p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUbiquitousKeyValueStoreAccountChange</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUbiquitousKeyValueStoreChangeReasonValues.QuotaViolationChange">
            <summary>
                <p>Your app’s key-value store has exceeded its space quota on the iCloud server.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUbiquitousKeyValueStoreQuotaViolationChange</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSUserDefaults">
            <summary>
            The <c>NSUserDefaults</c> class provides a programmatic interface for interacting with the defaults system. The defaults system allows an application to customize its behavior to match a user’s preferences. For example, you can allow users to determine what units of measurement your application displays or how often documents are automatically saved. Applications record such preferences by assigning values to a set of parameters in a user’s defaults database. The parameters are referred to as defaults since they’re commonly used to determine an application’s default state at startup or the way it acts by default.
            </summary>
            <remarks>
                <p>At runtime, you use an <c>NSUserDefaults</c> object to read the defaults that your application uses from a user’s defaults database. <c>NSUserDefaults</c> caches the information to avoid having to open the user’s defaults database each time you need a default value. The <c>synchronize</c> method, which is automatically invoked at periodic intervals, keeps the in-memory cache in sync with a user’s defaults database.</p>
                <p>The <c>NSUserDefaults</c> class provides convenience methods for accessing common types such as floats, doubles, integers, Booleans, and URLs. A default object must be a property list, that is, an instance of (or for collections a combination of instances of): <c>NSData</c>, <c>String</c>, <c>double</c>, <c>DateTime</c>, <c>object[]</c>, or <c>Dictionary</c>. If you want to store any other type of object, you should typically archive it to create an instance of <c>NSData</c>. For more details, see <em>Preferences and Settings Programming Guide</em>.</p>
                <p>Values returned from <c>NSUserDefaults</c> are <em>immutable</em>, even if you set a mutable object as the value. For example, if you set a mutable string as the value for <c>"MyStringDefault"</c>, the string you later retrieve using <c>stringForKey:</c> will be immutable.</p>
                <p>A defaults database is created automatically for each user. The <c>NSUserDefaults</c> class does not currently support per-host preferences. To do this, you must use the CFPreferences API (see <em>Preferences Utilities Reference</em>). However, <c>NSUserDefaults</c> correctly reads per-host preferences, so you can safely mix CFPreferences code with <c>NSUserDefaults</c> code.</p>
                <p>If your application supports managed environments, you can use an <c>NSUserDefaults</c> object to determine which preferences are managed by an administrator for the benefit of the user. Managed environments correspond to computer labs or classrooms where an administrator or teacher may want to configure the systems in a particular way. In these situations, the teacher can establish a set of default preferences and force those preferences on users. If a preference is managed in this manner, applications should prevent users from editing that preference by disabling any appropriate controls.</p>
                <p>The <c>NSUserDefaults</c> class is thread-safe.</p>
                <b>Persistence of NSURL and file reference URLs</b>
                <p>When using NSURL instances to refer to files within a process, it's important to make the distinction between location-based tracking (file: scheme URLs that are basically paths) versus filesystem identity tracking (file: scheme URLs that are file reference URLs). When persisting an NSURL, you should take that behavior into consideration. If your application tracks the resource being located by its identity so that it can be found if the user moves the file, then you should explicitly write the NSURL's bookmark data or encode a file reference URL.</p>
                <p>If you want to track a file by reference but you require explicit control over when resolution occurs, you should take care to write out bookmark data to NSUserDefaults rather than rely on -[NSUserDefaults setURL:forKey:]. This allows you to call +[NSURL URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:] at a time when you know your application will be able to handle the potential I/O or required user interface interactions.</p>
                <b>Sandbox Considerations</b>
                <p>A sandboxed app cannot access or modify the preferences for any other app. (For example, if you add another app's domain using the <c>addSuiteNamed:</c> method, you do not gain access to that app's preferences.)</p>
                <p>Attempting to access or modify with another app's preferences does not result in an error, but when you do, OS X actually reads and writes files located within your app's container, rather than the actual preference files for the other application.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSUserDefaults.NSUserDefaultsDidChangeNotification">
            <summary>
            Constant name for the native <c>NSUserDefaultsDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSUserDefaults.DidChange">
            <summary>
                <b>NSUserDefaultsDidChangeNotification</b>
            This notification is posted when a change is made to defaults in a persistent domain. <p>The notification object is the <c>NSUserDefaults</c> object. This notification does not contain a <em>userInfo</em> dictionary. </p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSUserDefaultsDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSUserDefaults.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSUserDefaults.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>NSUserDefaults</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSUserDefaults.AllInstances.DidChange">
            <summary>
                <b>NSUserDefaultsDidChangeNotification</b>
            This notification is posted when a change is made to defaults in a persistent domain. <p>The notification object is the <c>NSUserDefaults</c> object. This notification does not contain a <em>userInfo</em> dictionary. </p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSUserDefaultsDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_resetStandardUserDefaults">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_standardUserDefaults">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_addSuiteNamed_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_arrayForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_boolForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_dataForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_dictionaryForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_dictionaryRepresentation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_doubleForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_floatForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_alloc_initWithUser_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_integerForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_objectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_objectIsForcedForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_objectIsForcedForKey_inDomain_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_persistentDomainForName_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_persistentDomainNames(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_registerDefaults_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_removeObjectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_removePersistentDomainForName_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_removeSuiteNamed_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_removeVolatileDomainForName_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setBool_forKey_(System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setDouble_forKey_(System.String,System.Double,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setFloat_forKey_(System.String,System.Single,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setInteger_forKey_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setObject_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setPersistentDomain_forName_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setURL_forKey_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_setVolatileDomain_forName_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_stringArrayForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_stringForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_synchronize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_URLForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_volatileDomainForName_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.UP_NSUserDefaults_volatileDomainNames(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSUserDefaults" /> class.
            <br></br>Equivalent to the native <c>[[NSUserDefaults alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSUserDefaults.ClassExists">
            <summary>
            Returns whether the native NSUserDefaults class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.ResetStandardUserDefaults">
            <summary>
            Synchronizes any changes made to the shared user defaults object and releases it from memory.
            <br></br>Equivalent to the native <c>resetStandardUserDefaults</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A subsequent invocation of <c>standardUserDefaults</c> creates a new shared user defaults object with the standard search list.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.StandardUserDefaults">
            <summary>
            Returns the shared defaults object.
            <br></br>Equivalent to the native <c>standardUserDefaults</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The shared defaults object. </p>
                <b>Discussion</b>
                <p> If the shared defaults object does not exist yet, it is created with a search list containing the names of the following domains, in this order: </p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>NSArgumentDomain</c>, consisting of defaults parsed from the application’s arguments</p>
                    </li>
                    <li class="li">
                        <p>A domain identified by the application’s bundle identifier</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>NSGlobalDomain</c>, consisting of defaults meant to be seen by all applications</p>
                    </li>
                    <li class="li">
                        <p>Separate domains for each of the user’s preferred languages </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>NSRegistrationDomain</c>, a set of temporary defaults whose values can be set by the application to ensure that searches will always be successful </p>
                    </li>
                </ul>
                <p>The defaults are initialized for the current user. Subsequent modifications to the standard search list remain in effect even when this method is invoked again—the search list is guaranteed to be standard only the first time this method is invoked. The shared instance is provided as a convenience—you can create custom instances using <c>alloc</c> along with <c>initWithUser:</c> or <c>init</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.AddSuiteNamed(System.String)">
            <summary>
            Inserts the specified domain name into the receiver’s search list.
            <br></br>Equivalent to the native <c>addSuiteNamed:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>suiteName</em>
                <p>The domain name to insert. This domain is inserted after the application domain.</p>
                <b>Discussion</b>
                <p>The <em>suiteName</em> domain is similar to a bundle identifier string, but is not tied to a particular application or bundle. A suite can be used to hold preferences that are shared between multiple applications.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ standardUserDefaults</c>
                    </li>
                    <li>
                        <c>– removeSuiteNamed:</c>
                    </li>
                </ul>
            </remarks>
            <param name="suiteName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Array(System.String)">
            <summary>
            Returns the array associated with the specified key.
            <br></br>Equivalent to the native <c>arrayForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The array associated with the specified key, or <c>null</c> if the key does not exist or its value is not an <c>object[]</c> object. </p>
                <b>Special Considerations</b>
                <p>The returned array and its contents are immutable, even if the values you originally set were mutable.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setObject:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Bool(System.String)">
            <summary>
            Returns the Boolean value associated with the specified key.
            <br></br>Equivalent to the native <c>boolForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>If a boolean value is associated with <em>defaultName</em> in the user defaults, that value is returned. Otherwise, <c>false</c> is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setBool:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Data(System.String)">
            <summary>
            Returns the data object associated with the specified key.
            <br></br>Equivalent to the native <c>dataForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The data object associated with the specified key, or <c>null</c> if the key does not exist or its value is not an <c>NSData</c> object. </p>
                <b>Special Considerations</b>
                <p>The returned data object is immutable, even if the value you originally set was a mutable data object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setObject:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Dictionary(System.String)">
            <summary>
            Returns the dictionary object associated with the specified key.
            <br></br>Equivalent to the native <c>dictionaryForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The dictionary object associated with the specified key, or <c>null</c> if the key does not exist or its value is not an <c>Dictionary</c> object. </p>
                <b>Special Considerations</b>
                <p>The returned dictionary and its contents are immutable, even if the values you originally set were mutable.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setObject:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.DictionaryRepresentation">
            <summary>
            Returns a dictionary that contains a union of all key-value pairs in the domains in the search list.
            <br></br>Equivalent to the native <c>dictionaryRepresentation</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary containing the keys. The keys are names of defaults and the value corresponding to each key is a property list object (<c>NSData</c>, <c>String</c>, <c>double</c>, <c>DateTime</c>, <c>object[]</c>, or <c>Dictionary</c>).</p>
                <b>Discussion</b>
                <p>As with <c>objectForKey:</c>, key-value pairs in domains that are earlier in the search list take precedence. The combined result does not preserve information about which domain each entry came from.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Double(System.String)">
            <summary>
            Returns the double value associated with the specified key.
            <br></br>Equivalent to the native <c>doubleForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database.</p>
                <b>Return Value</b>
                <p>The double value associated with the specified key. If the key does not exist, this method returns <c>0</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDouble:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Float(System.String)">
            <summary>
            Returns the floating-point value associated with the specified key.
            <br></br>Equivalent to the native <c>floatForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The floating-point value associated with the specified key. If the key does not exist, this method returns <c>0</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setFloat:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSUserDefaults and initializes the object. Returns an <c>NSUserDefaults</c> object initialized with the defaults for the specified user account.
            <br></br>Equivalent to the native <c>[[NSUserDefaults alloc] initWithUser:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>username</em>
                <p>The name of the user account.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSUserDefaults</c> object whose argument and registration domains are already set up. If the current user does not have access to the specified user account, this method returns <c>null</c>.  </p>
                <b>Discussion</b>
                <p>This method does not put anything in the search list. Invoke it only if you’ve allocated your own <c>NSUserDefaults</c> instance instead of using the shared one.</p>
                <p>You do not normally use this method to initialize an instance of <c>NSUserDefaults</c>. Applications used by a superuser might use this method to update the defaults databases for a number of users. The user who started the application must have appropriate access (read, write, or both) to the defaults database of the new user, or this method returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ standardUserDefaults</c>
                    </li>
                </ul>
            </remarks>
            <param name="username">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Integer(System.String)">
            <summary>
            Returns the integer value associated with the specified key..
            <br></br>Equivalent to the native <c>integerForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The integer value associated with the specified key. If the specified key does not exist, this method returns <c>0</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setInteger:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Object(System.String)">
            <summary>
            Returns the object associated with the first occurrence of the specified default.
            <br></br>Equivalent to the native <c>objectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The object associated with the specified key, or <c>null</c> if the key was not found. </p>
                <b>Discussion</b>
                <p>This method searches the domains included in the search list in the order they are listed.</p>
                <b>Special Considerations</b>
                <p>The returned object is immutable, even if the value you originally set was mutable.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– arrayForKey:</c>
                    </li>
                    <li>
                        <c>– dataForKey:</c>
                    </li>
                    <li>
                        <c>– dictionaryForKey:</c>
                    </li>
                    <li>
                        <c>– stringArrayForKey:</c>
                    </li>
                    <li>
                        <c>– stringForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.ObjectIs(System.String)">
            <summary>
            Returns a Boolean value indicating whether the specified key is managed by an administrator.
            <br></br>Equivalent to the native <c>objectIsForcedForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key whose status you want to check.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the value of the specified key is managed by an administrator, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method assumes that the key is a preference associated with the current user and application. For managed keys, the application should disable any user interface that allows the user to modify the value of <em>key</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– objectIsForcedForKey:inDomain:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.ObjectIs(System.String,System.String)">
            <summary>
            Returns a Boolean value indicating whether the key in the specified domain is managed by an administrator.
            <br></br>Equivalent to the native <c>objectIsForcedForKey:inDomain:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key whose status you want to check.</p>
                <em>domain</em>
                <p>The domain of the key. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the key is managed by an administrator in the specified domain, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method assumes that the key is a preference associated with the current user. For managed keys, the application should disable any user interface that allows the user to modify the value of <em>key</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– objectIsForcedForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
            <param name="domain">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.PersistentDomain(System.String)">
            <summary>
            Returns a dictionary containing the keys and values in the specified persistent domain.
            <br></br>Equivalent to the native <c>persistentDomainForName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>domainName</em>
                <p>The domain whose keys and values you want. This value should be equal to your application's bundle identifier. </p>
                <b>Return Value</b>
                <p>A dictionary containing the keys. The keys are names of defaults and the value corresponding to each key is a property list object (<c>NSData</c>, <c>String</c>, <c>double</c>, <c>DateTime</c>, <c>object[]</c>, or <c>Dictionary</c>).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– removePersistentDomainForName:</c>
                    </li>
                    <li>
                        <c>– setPersistentDomain:forName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="domainName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.PersistentDomainNames">
            <summary>
            Returns an array of the current persistent domain names.
            <br></br>Equivalent to the native <c>persistentDomainNames</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects containing the domain names.</p>
                <b>Discussion</b>
                <p>You can get the keys and values for each domain by passing the returned domain names to the  <c>persistentDomainForName:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– removePersistentDomainForName:</c>
                    </li>
                    <li>
                        <c>– setPersistentDomain:forName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.RegisterDefaults(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Adds the contents of the specified dictionary to the registration domain.
            <br></br>Equivalent to the native <c>registerDefaults:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>dictionary</em>
                <p>The dictionary of keys and values you want to register.</p>
                <b>Discussion</b>
                <p>If there is no registration domain, one is created using the specified dictionary, and <c>NSRegistrationDomain</c> is added to the end of the search list.</p>
                <p>The contents of the registration domain are not written to disk; you need to call this method each time your application starts. You can place a plist file in the application's Resources directory and call <c>registerDefaults:</c> with the contents that you read in from that file.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="registrationDictionary">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.RemoveObject(System.String)">
            <summary>
            Removes the value of the specified default key in the standard application domain.
            <br></br>Equivalent to the native <c>removeObjectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>The key whose value you want to remove.  </p>
                <b>Discussion</b>
                <p>Removing a default has no effect on the value returned by the <c>objectForKey:</c> method if the same key exists in a domain that precedes the standard application domain in the search list.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setObject:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.RemovePersistentDomain(System.String)">
            <summary>
            Removes the contents of the specified persistent domain from the user’s defaults.
            <br></br>Equivalent to the native <c>removePersistentDomainForName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>domainName</em>
                <p>The domain whose keys and values you want. This value should be equal to your application's bundle identifier. </p>
                <b>Discussion</b>
                <p>When a persistent domain is changed, an <c>NSUserDefaultsDidChangeNotification</c> is posted. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPersistentDomain:forName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="domainName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.RemoveSuiteNamed(System.String)">
            <summary>
            Removes the specified domain name from the receiver’s search list.
            <br></br>Equivalent to the native <c>removeSuiteNamed:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>suiteName</em>
                <p>The domain name to remove.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– addSuiteNamed:</c>
                    </li>
                </ul>
            </remarks>
            <param name="suiteName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.RemoveVolatileDomain(System.String)">
            <summary>
            Removes the specified volatile domain from the user’s defaults.
            <br></br>Equivalent to the native <c>removeVolatileDomainForName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>domainName</em>
                <p>The volatile domain you want to remove. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setVolatileDomain:forName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="domainName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetBool(System.Boolean,System.String)">
            <summary>
            Sets the value of the specified default key to the specified Boolean value.
            <br></br>Equivalent to the native <c>setBool:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The Boolean value to store in the defaults database. </p>
                <em>defaultName</em>
                <p>The key with which to associate with the value.</p>
                <b>Discussion</b>
                <p>Invokes <c>setObject:forKey:</c> as part of its implementation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– boolForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetDouble(System.Double,System.String)">
            <summary>
            Sets the value of the specified default key to the double value.
            <br></br>Equivalent to the native <c>setDouble:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The double value.</p>
                <em>defaultName</em>
                <p>The key with which to associate with the value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetFloat(System.Single,System.String)">
            <summary>
            Sets the value of the specified default key to the specified floating-point value.
            <br></br>Equivalent to the native <c>setFloat:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The floating-point value to store in the defaults database. </p>
                <em>defaultName</em>
                <p>The key with which to associate with the value.</p>
                <b>Discussion</b>
                <p>Invokes <c>setObject:forKey:</c> as part of its implementation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– floatForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetInteger(System.Int32,System.String)">
            <summary>
            Sets the value of the specified default key to the specified integer value.
            <br></br>Equivalent to the native <c>setInteger:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The integer value to store in the defaults database. </p>
                <em>defaultName</em>
                <p>The key with which to associate with the value.</p>
                <b>Discussion</b>
                <p>Invokes <c>setObject:forKey:</c> as part of its implementation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– integerForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetObject(System.Object,System.String)">
            <summary>
            Sets the value of the specified default key in the standard application domain.
            <br></br>Equivalent to the native <c>setObject:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The object to store in the defaults database. </p>
                <em>defaultName</em>
                <p>The key with which to associate with the value.</p>
                <b>Discussion</b>
                <p>The <c>value</c> parameter can be only property list objects: <c>NSData</c>, <c>String</c>, <c>double</c>, <c>DateTime</c>, <c>object[]</c>, or <c>Dictionary</c>. For <c>object[]</c> and <c>Dictionary</c> objects, their contents must be property list objects. See  “What is a Property List?”  in <em>Property List Programming Guide</em>.</p>
                <p>Setting a default has no effect on the value returned by the <c>objectForKey:</c> method if the same key exists in a domain that precedes the application domain in the search list.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– removeObjectForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetPersistentDomain(System.Collections.Generic.Dictionary{System.Object,System.Object},System.String)">
            <summary>
            Sets the dictionary for the specified persistent domain.
            <br></br>Equivalent to the native <c>setPersistentDomain:forName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>domain</em>
                <p>The dictionary of keys and values you want to assign to the domain. </p>
                <em>domainName</em>
                <p>The domain whose keys and values you want to set. This value should be equal to your application's bundle identifier. </p>
                <b>Discussion</b>
                <p>When a persistent domain is changed, an <c>NSUserDefaultsDidChangeNotification</c> is posted. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– persistentDomainForName:</c>
                    </li>
                    <li>
                        <c>– persistentDomainNames</c>
                    </li>
                </ul>
            </remarks>
            <param name="domain">
            </param>
            <param name="domainName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetURL(U3DXT.iOS.Native.Foundation.NSURL,System.String)">
            <summary>
            Sets the value of the specified default key to the specified URL.
            <br></br>Equivalent to the native <c>setURL:forKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The <c>NSURL</c> to store in the defaults database.</p>
                <em>defaultName</em>
                <p>The key with which to associate with the value.</p>
                <b>Discussion</b>
                <p>When an NSURL is stored using -[NSUserDefaults setURL:forKey:], some adjustments are made:</p>
                <ol class="ol">
                    <li class="li">
                        <p>Any non-file URL is written by calling <c>+[NSKeyedArchiver archivedDataWithRootObject:] </c>using the NSURL instance as the root object.</p>
                    </li>
                    <li class="li">
                        <p>Any file reference <c>file:</c> scheme URL will be treated as a non-file URL, and information which makes this URL compatible with 10.5 systems will also be written as part of the archive as well as its minimal bookmark data.</p>
                    </li>
                    <li class="li">
                        <p>Any path-based file: scheme URL is written by first taking the absolute URL, getting the path from that and then determining if the path can be made relative to the user's home directory. If it can, the string is abbreviated by using <c>stringByAbbreviatingWithTildeInPath</c> and written out. This allows pre-10.6 clients to read the default and use <c>-[NSString stringByExpandingTildeInPath]</c> to use this information.</p>
                    </li>
                </ol>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– URLForKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.SetVolatileDomain(System.Collections.Generic.Dictionary{System.Object,System.Object},System.String)">
            <summary>
            Sets the dictionary for the specified volatile domain.
            <br></br>Equivalent to the native <c>setVolatileDomain:forName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>domain</em>
                <p>The dictionary of keys and values you want to assign to the domain. </p>
                <em>domainName</em>
                <p>The domain whose keys and values you want to set. </p>
                <b>Discussion</b>
                <p>This method raises an <c>NSInvalidArgumentException</c> if a volatile domain with the specified name already exists.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– volatileDomainForName:</c>
                    </li>
                    <li>
                        <c>– volatileDomainNames</c>
                    </li>
                </ul>
            </remarks>
            <param name="domain">
            </param>
            <param name="domainName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.StringArray(System.String)">
            <summary>
            Returns the array of strings associated with the specified key.
            <br></br>Equivalent to the native <c>stringArrayForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The array of <c>String</c> objects, or <c>null</c> if the specified default does not exist, the default does not contain an array, or the array does not contain <c>String</c> objects. </p>
                <b>Special Considerations</b>
                <p>The returned array and its contents are immutable, even if the values you originally set were mutable.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setObject:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.String(System.String)">
            <summary>
            Returns the string associated with the specified key.
            <br></br>Equivalent to the native <c>stringForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database. </p>
                <b>Return Value</b>
                <p>The string associated with the specified key, or <c>null</c> if the default does not exist or does not contain a string. </p>
                <b>Special Considerations</b>
                <p>The returned string is immutable, even if the value you originally set was a mutable string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setObject:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.Synchronize">
            <summary>
            Writes any modifications to the persistent domains to disk and updates all unmodified persistent domains to what is on disk.
            <br></br>Equivalent to the native <c>synchronize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the data was saved successfully to disk, otherwise <c>false</c>. </p>
                <b>Discussion</b>
                <p>Because this method is automatically invoked at periodic intervals, use this method only if you cannot wait for the automatic synchronization (for example, if your application is about to exit) or if you want to update the user defaults to what is on disk even though you have not made any changes.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– persistentDomainForName:</c>
                    </li>
                    <li>
                        <c>– persistentDomainNames</c>
                    </li>
                    <li>
                        <c>– removePersistentDomainForName:</c>
                    </li>
                    <li>
                        <c>– setPersistentDomain:forName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.URL(System.String)">
            <summary>
            Returns the <c>NSURL</c> instance associated with the specified key.
            <br></br>Equivalent to the native <c>URLForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>defaultName</em>
                <p>A key in the current user's defaults database.</p>
                <b>Return Value</b>
                <p>The <c>NSURL</c> instance value associated with the specified key. If the key does not exist, this method returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>When an NSURL is read using -[NSUserDefaults URLForKey:], the following logic is used:</p>
                <ol class="ol">
                    <li class="li">
                        <p>If the value for the key is an <c>NSData</c>, the <c>NSData</c> is used as the argument to <c>+[NSKeyedUnarchiver unarchiveObjectWithData:]</c>. If the <c>NSData</c> can be unarchived as an NSURL, the NSURL is returned otherwise nil is returned.</p>
                    </li>
                    <li class="li">
                        <p>If the value for this key was a file reference URL, the file reference URL will be created but its bookmark data will not be resolved until the NSURL instance is later used (e.g. at <c>-[NSData initWithContentsOfURL:]</c>).</p>
                    </li>
                    <li class="li">
                        <p>If the value for the key is an NSString which begins with a ~, the NSString will be expanded using <c>-[NSString stringByExpandingTildeInPath]</c> and a file: scheme NSURL will be created from that.</p>
                    </li>
                </ol>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setURL:forKey:</c>
                    </li>
                </ul>
            </remarks>
            <param name="defaultName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.VolatileDomain(System.String)">
            <summary>
            Returns the dictionary for the specified volatile domain.
            <br></br>Equivalent to the native <c>volatileDomainForName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>domainName</em>
                <p>The domain whose keys and values you want. </p>
                <b>Return Value</b>
                <p>The dictionary of keys and values belonging to the domain. The keys in the dictionary are names of defaults, and the value corresponding to each key is a property list object (<c>NSData</c>, <c>String</c>, <c>double</c>, <c>DateTime</c>, <c>object[]</c>, or <c>Dictionary</c>). </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– removeVolatileDomainForName:</c>
                    </li>
                    <li>
                        <c>– setVolatileDomain:forName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="domainName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUserDefaults.VolatileDomainNames">
            <summary>
            Returns an array of the current volatile domain names.
            <br></br>Equivalent to the native <c>volatileDomainNames</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects with the volatile domain names.</p>
                <b>Discussion</b>
                <p> You can get the contents of each domain by passing the returned domain names to the  <c>volatileDomainForName:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– removeVolatileDomainForName:</c>
                    </li>
                    <li>
                        <c>– setVolatileDomain:forName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSVolumeEnumerationOptions">
            <summary>
            Options for enumerating mounted volumes with the <c>mountedVolumeURLsIncludingResourceValuesForKeys:options:</c> method.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSVolumeEnumerationOptions.SkipHiddenVolumes">
            <summary>
                <p>The enumeration skips hidden volumes.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSVolumeEnumerationSkipHiddenVolumes</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSVolumeEnumerationOptions.ProduceFileReferenceURLs">
            <summary>
                <p>The enumeration produces file reference URLs rather than path-based URLs.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSVolumeEnumerationProduceFileReferenceURLs</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes">
            <summary>
            Constants belonging to UTCoreTypes.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeMessage">
            <summary>
                <p>The abstract type identifier for messages (email, instant message, etc.).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeMessage</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeContact">
            <summary>
                <p>The abstract type identifier for contact information( for example, a person, group, or organization).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeContact</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeArchive">
            <summary>
                <p>The abstract type identifier for an archive of files and directories.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeArchive</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeContent">
            <summary>
                <p>The abstract type identifier for anything containing user-viewable document content (documents, pasteboard data, and document packages).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeContent</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeCompositeContent">
            <summary>
                <p>The abstract type identifier for content formats supporting mixed embedded content (i.e., compound documents).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeCompositeContent</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeItem">
            <summary>
                <p>The generic abstract type identifier for most things (files, directories).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeItem</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeApplication">
            <summary>
                <p>The type identifier for Mac apps.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeApplication</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeDiskImage">
            <summary>
                <p>The type identifier for a data item mountable as a volume.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeDiskImage</c> constant.
            </summary>
            <remarks>
            These are abstract uniform type identifiers that most other type identifiers are derived from.
            <p></p><p></p>This is a constant for "UTI Abstract Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeApplicationBundle">
            <summary>
                <p>The type identifier for a bundled application.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeApplicationBundle</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for application types.
            <p></p><p></p>This is a constant for "UTI Application Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeApplicationFile">
            <summary>
                <p>The type identifier for a single-file Carbon/Classic application.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeApplicationFile</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for application types.
            <p></p><p></p>This is a constant for "UTI Application Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeMovie">
            <summary>
                <p>An abstract type identifier for a media format which may contain both video and audio. Corresponds to what users would label a "movie"</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeMovie</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeAudiovisualContent">
            <summary>
                <p>An abstract type identifier for audio and/or video content.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeAudiovisualContent</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeMPEG">
            <summary>
                <p>The type identifier for a MPEG-1 or MPEG-2 movie.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeMPEG</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeQuickTimeMovie">
            <summary>
                <p>The type identifier for a QuickTime movie.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeQuickTimeMovie</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeMPEG4">
            <summary>
                <p>The type identifier for a MPEG-4 movie.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeMPEG4</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeVideo">
            <summary>
                <p>An abstract type identifier for pure video data(no audio).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeVideo</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeMP3">
            <summary>
                <p>The type identifier for MP3 audio.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeMP3</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeAppleProtectedMPEG4Audio">
            <summary>
            null
            <br></br>Equivalent to the native <c>kUTTypeAppleProtectedMPEG4Audio</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeMPEG4Audio">
            <summary>
                <p>The type identifier for a MPEG-4 audio layer (.m4a, or the MIME type audio/MP4).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeMPEG4Audio</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeAudio">
            <summary>
                <p>An abstract type identifier for pure audio data (no video).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeAudio</c> constant.
            </summary>
            <remarks>
            Uniform type identifier for audio and video content.
            <p></p><c class="jump constantName">kUTTypeAppleProtectedMPEG4Audio</c><p>The type identifier for Apple protected MPEG4 format (.m4p, iTunes music store format).
            </p><p>Available in iOS 3.0 and later.</p><p></p><p></p>This is a constant for "UTI Audio Visual Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeRTFD">
            <summary>
                <p>The type identifier for Rich Text Format Directory (RTF with content embedding, on-disk format).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeRTFD</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for content that includes multiple data types.
            <p></p><p></p>This is a constant for "UTI Composite Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeTXNTextAndMultimediaData">
            <summary>
                <p>The type identifier for MLTE (Textension) format for mixed text and multimedia data. Corresponds to the 'txtn' OSType.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeTXNTextAndMultimediaData</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for content that includes multiple data types.
            <p></p><p></p>This is a constant for "UTI Composite Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeWebArchive">
            <summary>
                <p>The type identifier for the WebKit web archive format</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeWebArchive</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for content that includes multiple data types.
            <p></p><p></p>This is a constant for "UTI Composite Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeFlatRTFD">
            <summary>
                <p>The type identifier for Flattened RTFD (pasteboard format).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeFlatRTFD</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for content that includes multiple data types.
            <p></p><p></p>This is a constant for "UTI Composite Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypePDF">
            <summary>
                <p>The type identifier for Adobe PDF format.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypePDF</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for content that includes multiple data types.
            <p></p><p></p>This is a constant for "UTI Composite Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeData">
            <summary>
                <p>The type identifier for any sort of simple byte stream, including files and in-memory data.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeData</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeAliasRecord">
            <summary>
                <p>The type identifier for raw alias data.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeAliasRecord</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeSymLink">
            <summary>
                <p>The type identifier for a symbolic link.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeSymLink</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeResolvable">
            <summary>
                <p>The type identifier for symbolic links and alias files.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeResolvable</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeDirectory">
            <summary>
                <p>The type identifier for a file system directory, including packages and folders.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeDirectory</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeURL">
            <summary>
                <p>The type identifier for the bytes of a URL.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeURL</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeMountPoint">
            <summary>
                <p>The type identifier for a root directory of a volume.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeMountPoint</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeAliasFile">
            <summary>
                <p>The type identifier for a fully-formed alias file.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeAliasFile</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeFileURL">
            <summary>
                <p>The type identifier for the text of a "file:" URL.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeFileURL</c> constant.
            </summary>
            <remarks>
            These are uniform type identifiers for concrete types.
            <p></p><p></p>This is a constant for "UTI Concrete Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeVCard">
            <summary>
                <p>The type identifier for VCard format.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeVCard</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for contact types.
            <p></p><p></p>This is a constant for "UTI Contact Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeBundle">
            <summary>
                <p>The type identifier for a directory conforming to a <c>CFBundle</c> layout.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeBundle</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for different directory types.
            <p></p><p></p>This is a constant for "UTI Directory Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeFolder">
            <summary>
                <p>The type identifier for a a user-browsable directory (i.e., not a package).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeFolder</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for different directory types.
            <p></p><p></p>This is a constant for "UTI Directory Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeVolume">
            <summary>
                <p>The type identifier for the root folder of a volume/mount point.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeVolume</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for different directory types.
            <p></p><p></p>This is a constant for "UTI Directory Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypePackage">
            <summary>
                <p>The type identifier for a packaged directory.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypePackage</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for different directory types.
            <p></p><p></p>This is a constant for "UTI Directory Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeFramework">
            <summary>
                <p>The type identifier for directory conforming to an OS X framework.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeFramework</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for different directory types.
            <p></p><p></p>This is a constant for "UTI Directory Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeJPEG">
            <summary>
                <p>The type identifier for a JPEG image.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeJPEG</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeJPEG2000">
            <summary>
                <p>The type identifier for a JPEG-2000 image.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeJPEG2000</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypePNG">
            <summary>
                <p>The type identifier for a PNG image.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypePNG</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypePICT">
            <summary>
                <p>The type identifier for a Quickdraw PICT.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypePICT</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeQuickTimeImage">
            <summary>
                <p>The type identifier for a QuickTime image. Corresponds to the 'qtif' OSType.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeQuickTimeImage</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeGIF">
            <summary>
                <p>The type identifier for a GIF image.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeGIF</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeICO">
            <summary>
                <p>The type identifier for Windows icon data.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeICO</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeTIFF">
            <summary>
                <p>The type identifier for a TIFF image.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeTIFF</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeBMP">
            <summary>
                <p>The type identifier for a Windows bitmap.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeBMP</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeImage">
            <summary>
                <p>The abstract type identifier for image data.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeImage</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for graphics content.
            <p></p><p></p>This is a constant for "UTI Image Content Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeInkText">
            <summary>
                <p>The type identifier for Opaque InkText data.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeInkText</c> constant.
            </summary>
            <remarks>
            Uniform type identifiers for types that do not fit in other categories.
            <p></p><br />
            	Provide Feedback
            <p></p>This is a constant for "UTI Miscellaneous Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeObjectiveCPlusPlusSource">
            <summary>
                <p>The type identifier for Objective-C++ source code.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeObjectiveCPlusPlusSource</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeCPlusPlusHeader">
            <summary>
                <p>The type identifier for a C++ header.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeCPlusPlusHeader</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeCHeader">
            <summary>
                <p>The type identifier for a C header.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeCHeader</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeJavaSource">
            <summary>
                <p>The type identifier for Java source code.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeJavaSource</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeCPlusPlusSource">
            <summary>
                <p>The type identifier for C++ source code (.cp, etc.).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeCPlusPlusSource</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeUTF16ExternalPlainText">
            <summary>
                <p>The type identifier for plain text in a UTF-16 encoding. If the encoded text does not include a byte order mark (BOM), the data has "external representation" byte order (big-endian).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeUTF16ExternalPlainText</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeXML">
            <summary>
                <p>The type identifier for XML data.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeXML</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeObjectiveCSource">
            <summary>
                <p>The type identifier for Objective-C source code (.m).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeObjectiveCSource</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeText">
            <summary>
                <p>The type identifier for all text-encoded data, including text with markup (HTML, RTF, etc.).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeText</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeUTF8PlainText">
            <summary>
                <p>The type identifier for plain text in a UTF-8 encoding.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeUTF8PlainText</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeRTF">
            <summary>
                <p>The type identifier for Rich Text Format.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeRTF</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeSourceCode">
            <summary>
                <p>The abstract type identifier for source code (any language).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeSourceCode</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeUTF16PlainText">
            <summary>
                <p>The type identifier for plain text in a UTF-16 encoding in native byte order. The byte order mark (BOM) is optional. Correspondes to the 'utxt' OSType.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeUTF16PlainText</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeCSource">
            <summary>
                <p>The type identifier for C source code (.c).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeCSource</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypePlainText">
            <summary>
                <p>The type identifier for text with no markup and in an unspecified encoding.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypePlainText</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTCoreTypes.kUTTypeHTML">
            <summary>
                <p>The type identifier for HTML, any version.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeHTML</c> constant.
            </summary>
            <remarks>
            These are the uniform type identifiers for text content.
            <p></p><p></p>This is a constant for "UTI Text Types".
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.MobileCoreServices.UTType">
            <summary>
            Functions belonging to UTType.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTypeTagSpecificationKey">
            <summary>
                <p>A dictionary containing conversions of the uniform type identifier to equivalent tags in other classification schemes. See  “Type Tag Classes”  for examples.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeTagSpecificationKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTypeIdentifierKey">
            <summary>
                <p>The uniform type identifier for the declared type. This key is required.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeIdentifierKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTypeConformsToKey">
            <summary>
                <p>The UTIs to which this identifier conforms.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeConformsToKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTImportedTypeDeclarationsKey">
            <summary>
                <p>An array of imported UTI declarations.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTImportedTypeDeclarationsKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTypeVersionKey">
            <summary>
                <p>A version string. </p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeVersionKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTypeDescriptionKey">
            <summary>
                <p>A user-visible description of this type (may be localized).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeDescriptionKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTExportedTypeDeclarationsKey">
            <summary>
                <p>An array of exported UTI declarations.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTExportedTypeDeclarationsKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTypeIconFileKey">
            <summary>
                <p>The name of the bundle icon resource to associate with this UTI.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeIconFileKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTypeReferenceURLKey">
            <summary>
                <p>The URL of a reference document describing this type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTypeReferenceURLKey</c> constant.
            </summary>
            <remarks>
            These are keys for values found in a UTI dictionary. For more information about UTI dictionaries, see <em>Uniform Type Identifiers Overview</em>.
            <p></p><p></p>This is a constant for "Type Declaration Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTagClassFilenameExtension">
            <summary>
                <p>Indicates that the tag is a filename extension.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTagClassFilenameExtension</c> constant.
            </summary>
            <remarks>
            These strings identify other tagging classification schemes that a uniform type identifier can be converted to and from.
            <p></p><p></p>This is a constant for "Type Tag Classes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.MobileCoreServices.UTType.kUTTagClassMIMEType">
            <summary>
                <p>Indicates that the tag is a MIME type.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kUTTagClassMIMEType</c> constant.
            </summary>
            <remarks>
            These strings identify other tagging classification schemes that a uniform type identifier can be converted to and from.
            <p></p><p></p>This is a constant for "Type Tag Classes".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeCreateAllIdentifiersForTag(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeCreatePreferredIdentifierForTag(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeCopyDeclaration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeCopyDeclaringBundleURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeCopyDescription(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeCopyPreferredTagWithClass(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeConformsTo(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.UP_UTType_UTTypeEqual(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.CreateAllIdentifiers(System.String,System.String,System.String)">
            <summary>
            Creates an array of all uniform type identifiers for the type indicated by the specified tag.
            <br></br>Equivalent to the native <c>UTTypeCreateAllIdentifiersForTag</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inTagClass</em>
                <p>The class of the <em>inTag</em> parameter. For more information, see <c>“Type Tag Classes”</c>.</p>
                <em>inTag</em>
                <p>The tag to translate into a uniform type identifier.</p>
                <em>inConformingToUTI</em>
                <p>If not <c>null</c>, all returned uniform type identifiers must conform to this parameter.</p>
                <b>Return Value</b>
                <p>An array of uniform type identifiers, or <c>NULL</c> if inTagClass is not a known tag class</p>
                <b>Discussion</b>
                <p>This function is used to translate a type declared using another declaration mechanism (for example, MIME types) into a uniform type identifier. This function searches all UTI declarations for a matching translation and returns all possible results. If a conforming parameter is assigned, the search is reduced to the subset of type identifiers that conform to that type.</p>
                <p>If no result is found, this function creates a dynamic type beginning with the <c>dyn</c> prefix.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>UTTypeCopyPreferredTagWithClass</c>
                    </li>
                </ul>
            </remarks>
            <param name="inTagClass">
            </param>
            <param name="inTag">
            </param>
            <param name="inConformingToUTI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.CreatePreferredIdentifier(System.String,System.String,System.String)">
            <summary>
            Creates a uniform type identifier for the type indicated by the specified tag.
            <br></br>Equivalent to the native <c>UTTypeCreatePreferredIdentifierForTag</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inTagClass</em>
                <p>The class of the <em>inTag</em> parameter. For more information, see <c>“Type Tag Classes”</c>.</p>
                <em>inTag</em>
                <p>The tag to translate into a uniform type identifier.</p>
                <em>inConformingToUTI</em>
                <p>If not <c>NULL</c>, the returned uniform type identifier must conform to this parameter.</p>
                <b>Return Value</b>
                <p>A new CFStringRef containing a uniform type identifier, or <c>NULL</c> if inTagClass is not a known tag class</p>
                <b>Discussion</b>
                <p>This function is used to translate a type declared using another declaration mechanism (for example, MIME types) into a uniform type identifier. This function searches all UTI declarations for a matching translation. If a conforming parameter is assigned, the search is reduced to the subset of type identifiers that conform to that type.</p>
                <p>If there is more than one possible UTI for the specified tag, the UTI that will be returned is undefined. See <c>UTTypeCreateAllIdentifiersForTag</c> if you need to see all search results.</p>
                <p>If no result is found, this function creates a dynamic type beginning with the <c>dyn</c> prefix. This allows you to pass the UTI around and convert it back to the original tag.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>UTTypeCopyPreferredTagWithClass</c>
                    </li>
                </ul>
            </remarks>
            <param name="inTagClass">
            </param>
            <param name="inTag">
            </param>
            <param name="inConformingToUTI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.CopyDeclaration(System.String)">
            <summary>
            Returns a uniform type’s declaration.
            <br></br>Equivalent to the native <c>UTTypeCopyDeclaration</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inUTI</em>
                <p>A uniform type identifier.</p>
                <b>Return Value</b>
                <p>A dictionary that contains the uniform type’s declaration, or <c>NULL</c> if no declaration for that type can be found.</p>
                <b>Discussion</b>
                <p>A uniform type identifier is declared in a bundle’s information  property list  (<c>info.plist</c>). This function extracts and returns a dictionary that contains the complete declaration of the uniform type identifier. This is useful when your application needs to access properties that does not have a built-in accessor function. For more information on the dictionary format, see <em>Uniform Type Identifiers Overview</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="inUTI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.CopyDeclaringBundleURL(System.String)">
            <summary>
            Returns the location of a bundle containing the declaration for a type.
            <br></br>Equivalent to the native <c>UTTypeCopyDeclaringBundleURL</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inUTI</em>
                <p>A uniform type identifier.</p>
                <b>Return Value</b>
                <p>A URL that points to the bundle that holds the uniform type identifier’s declaration, or <c>NULL</c> if a bundle that holds the declaration cannot be located.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="inUTI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.CopyDescription(System.String)">
            <summary>
            Returns the localized, user-readable type description string associated with a uniform type identifier.
            <br></br>Equivalent to the native <c>UTTypeCopyDescription</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inUTI</em>
                <p>A uniform type identifier.</p>
                <b>Return Value</b>
                <p>A localized string describing the type, or <c>NULL</c> if no type description is available.</p>
                <b>Discussion</b>
                <p>The localized string that describes the uniform type is found in the type’s declaration.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="inUTI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.CopyPreferredTag(System.String,System.String)">
            <summary>
            Translates a uniform type identifier to a list of tags in a different type classification method.
            <br></br>Equivalent to the native <c>UTTypeCopyPreferredTagWithClass</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inUTI</em>
                <p>The uniform type identifier to convert.</p>
                <em>inTagClass</em>
                <p>The class of the tags you want to return. For more information, see <c>“Type Tag Classes”</c>.</p>
                <b>Return Value</b>
                <p>An array of tags (as CFStrings), or <c>NULL</c> if there was no translation available to convert the uniform type identifier to the specified class.</p>
                <b>Discussion</b>
                <p>If the type declaration included more than one tag with the specified class, the first tag in the declared tag array is the preferred tag.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="inUTI">
            </param>
            <param name="inTagClass">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.ConformsTo(System.String,System.String)">
            <summary>
            Returns whether a uniform type identifier conforms to another uniform type identifier.
            <br></br>Equivalent to the native <c>UTTypeConformsTo</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inUTI</em>
                <p>A uniform type identifier to compare.</p>
                <em>inConformsToUTI</em>
                <p>The uniform type identifier to compare it to.</p>
                <b>Return Value</b>
                <p>Returns <c>true</c> if the uniform type identifier is equal to or conforms to the second type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="inUTI">
            </param>
            <param name="inConformsToUTI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.MobileCoreServices.UTType.Equal(System.String,System.String)">
            <summary>
            Returns whether two uniform type identifiers are equal.
            <br></br>Equivalent to the native <c>UTTypeEqual</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inUTI1</em>
                <p>A uniform type identifier.</p>
                <em>inUTI2</em>
                <p>The uniform type identifier to compare it to.</p>
                <b>Return Value</b>
                <p>Returns <c>true</c> if the two uniform type identifiers are equivalent.</p>
                <b>Discussion</b>
                <p>If one or both of the identifiers is a dynamic identifier, then the types are equal if either identifier's tag specification is a subset of the other identifier's tag specification.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="inUTI1">
            </param>
            <param name="inUTI2">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController">
            <summary>
            A document interaction controller, along with a delegate object, provides in-app support for managing user interactions with files in the local system. For example, an email program might use this class to allow the user to preview attachments and open them in other apps. Use this class to present an appropriate user interface for previewing, opening, copying, or printing a specified file.
            </summary>
            <remarks>
                <p>After presenting its user interface, a document interaction controller handles all interactions needed to support file preview and menu display. In some cases the object employs a delegate to determine how to respond to specific commands. For example, to provide copying or printing, you must implement the <c>documentInteractionController:canPerformAction:</c> and <c>documentInteractionController:performAction:</c> delegate methods.</p>
                <p>You can also use the delegate to participate with interactions occurring within the presented interface. For example, the delegate is notified when a file is about to be handed off to another application for opening. For a complete description of the methods you can implement in your delegate, see <em>UIDocumentInteractionControllerDelegate Protocol Reference</em>. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DidEndSendingToApplication">
            <summary>
            Called when a document interaction controller’s document has been handed off to the specified application.
            <br></br>Equivalent to implementing the native <c>documentInteractionController:didEndSendingToApplication:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DidEndSendingToApplicationEventArgs">
            <summary>
            Event arguments for DidEndSendingToApplication.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DidEndSendingToApplicationEventArgs.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DidEndSendingToApplicationEventArgs.application">
            <summary>application</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.WillBeginSendingToApplication">
            <summary>
            Called when a document interaction controller’s document is about to be opened by the specified application.
            <br></br>Equivalent to implementing the native <c>documentInteractionController:willBeginSendingToApplication:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.WillBeginSendingToApplicationEventArgs">
            <summary>
            Event arguments for WillBeginSendingToApplication.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.WillBeginSendingToApplicationEventArgs.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.WillBeginSendingToApplicationEventArgs.application">
            <summary>application</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DidDismissOpenInMenu">
            <summary>
            Called when a document interaction controller has dismissed its Open In menu.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerDidDismissOpenInMenu:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DidDismissOptionsMenu">
            <summary>
            Called when a document interaction controller has dismissed its options menu.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerDidDismissOptionsMenu:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DidEndPreview">
            <summary>
            Called when a document interaction controller has dismissed its document preview.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerDidEndPreview:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.rectForPreviewHandler">
            <summary>
            Called when a document interaction controller needs the rectangle to use as the starting point for animating the display of a document preview.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerRectForPreview:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.viewControllerForPreviewHandler">
            <summary>
            Called when a document interaction controller needs a view controller for presenting a document preview.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerViewControllerForPreview:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.viewForPreviewHandler">
            <summary>
            Called when a document interaction controller needs the starting point for animating the display of a document preview.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerViewForPreview:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.WillBeginPreview">
            <summary>
            Called when a document interaction controller is about to display a preview for its document.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerWillBeginPreview:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.WillPresentOpenInMenu">
            <summary>
            Called when a document interaction controller is about to display an Open In menu.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerWillPresentOpenInMenu:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.WillPresentOptionsMenu">
            <summary>
            Called when a document interaction controller is about to display an options menu.
            <br></br>Equivalent to implementing the native <c>documentInteractionControllerWillPresentOptionsMenu:</c> method of <c>UIDocumentInteractionControllerDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_interactionControllerWithURL_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_get_annotation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_set_annotation(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_get_icons(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_get_name(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_set_name(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_get_URL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_set_URL(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_get_UTI(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_set_UTI(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_dismissMenuAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_dismissPreviewAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_presentOpenInMenuFromRect_inView_animated_(System.String,System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_presentOptionsMenuFromRect_inView_animated_(System.String,System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UP_UIDocumentInteractionController_presentPreviewAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController" /> class.
            <br></br>Equivalent to the native <c>[[UIDocumentInteractionController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.ClassExists">
            <summary>
            Returns whether the native UIDocumentInteractionController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.InteractionController(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates and returns a new <c>UIDocumentationInteractionController</c> object initialized with the specified URL.
            <br></br>Equivalent to the native <c>interactionControllerWithURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>A URL that specifies the location of the desired document. This parameter is retained. It can be changed later by modifying the <c>URL</c> property.</p>
                <b>Return Value</b>
                <p>A new document interaction controller object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.annotation">
            <summary>
            Custom property list information for the target file.
            <br></br>Equivalent to the native <c>annotation</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this property to pass information about the document type to the app responsible for opening it. The type of this object should be one used to contain property list information, namely <c>Dictionary</c>, <c>object[]</c>, <c>NSData</c>, <c>String</c>, <c>double</c>, or <c>DateTime</c>.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.Delegate">
            <summary>
            The delegate you want to receive document interaction notifications.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can implement a delegate object to track user interactions with menu items displayed by the document interaction controller. For more information, see <em>UIDocumentInteractionControllerDelegate Protocol Reference</em>. </p>
                <p>The default value of this property is <c>null</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.icons">
            <summary>
            The images associated with the target file. (read-only)
            <br></br>Equivalent to the native <c>icons</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property contains an array of <c>UIImage</c> objects containing the available icons for the given file. The images in the array are sorted from smallest to largest, with the smallest image located at index 0. The returned array always contains at least one image. </p>
                <p>The images themselves are provided by the system and determined by the UTI of the file. Apps can register custom icons for their associated files by including the appropriate meta information in their <c>Info.plist</c> file. If no custom icon exists, the images in this property represent the generic document icon. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.name">
            <summary>
            The name of the target file.
            <br></br>Equivalent to the native <c>name</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property contains the filename without any preceding path information. The default value of this property is derived from the path information in the <c>URL</c> property. You can change the value of this property as needed if you want to associate a different name with the file. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.URL">
            <summary>
            The URL identifying the target file on the local filesystem.
            <br></br>Equivalent to the native <c>URL</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.UTI">
            <summary>
            The type of the target file.
            <br></br>Equivalent to the native <c>UTI</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is used to determine which apps are capable of opening the document. The default value is determined automatically whenever possible. However, if the document is a custom type that cannot be determined readily, the value of this property may be <c>null</c>. If you know the type of the document, you can set the value of this property explicitly. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DismissMenu(System.Boolean)">
            <summary>
            Dismisses the currently active menu.
            <br></br>Equivalent to the native <c>dismissMenuAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the dismissal of the currently active menu or <c>false</c> to dismiss it immediately. </p>
                <b>Discussion</b>
                <p>Use this method to dismiss a menu programmatically. The document interaction controller can also dismiss the menu automatically in response to user actions.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.DismissPreview(System.Boolean)">
            <summary>
            Dismisses the currently active document preview.
            <br></br>Equivalent to the native <c>dismissPreviewAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the dismissal of the document preview or <c>false</c> to dismiss it immediately. </p>
                <b>Discussion</b>
                <p>Use this method to dismiss the document preview programmatically. The document interaction controller may also dismiss the document preview automatically in response to user actions.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.PresentOpenInMenu(UnityEngine.Rect,U3DXT.iOS.Native.UIKit.UIView,System.Boolean)">
            <summary>
            Displays a menu for opening the document and anchors that menu to the specified view.
            <br></br>Equivalent to the native <c>presentOpenInMenuFromRect:inView:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The location (in the coordinate system of <em>view</em>) at which to anchor the menu.</p>
                <em>view</em>
                <p>The view from which to display the menu.</p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the appearance of the menu or <c>false</c> to display it immediately. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if this method was able to display the menu or <c>false</c> if it was not. </p>
                <b>Discussion</b>
                <p>This method is similar to the <c>presentOptionsMenuFromRect:inView:animated:</c> method, but presents a menu restricted to a list of apps capable of opening the current document. This determination is made based on the document type (as indicated by the <c>UTI</c> property) and on the document types supported by the installed apps. To support one or more document types, an app must register those types in its <c>Info.plist</c> file using the <c>CFBundleDocumentTypes</c> key.</p>
                <p>If there are no registered apps that support opening the document, the document interaction controller does not display a menu.</p>
                <p>This method displays the options menu asynchronously. The document interaction controller dismisses the menu automatically when the user selects an appropriate option. You can also dismiss it programmatically using the <c>dismissMenuAnimated:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– presentOpenInMenuFromBarButtonItem:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
            <param name="view">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.PresentOptionsMenu(UnityEngine.Rect,U3DXT.iOS.Native.UIKit.UIView,System.Boolean)">
            <summary>
            Displays an options menu and anchors it to the specified location in the view.
            <br></br>Equivalent to the native <c>presentOptionsMenuFromRect:inView:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The location (in the coordinate system of <em>view</em>) at which to anchor the menu.</p>
                <em>view</em>
                <p>The view from which to display the options menu.</p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the appearance of the menu or <c>false</c> to display it immediately. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the options menu was displayed or <c>false</c> if it was not. The options menu may not be displayed in cases where there are no appropriate items to include in the menu.</p>
                <b>Discussion</b>
                <p>The contents of the options menu are built dynamically based on three things:</p>
                <ul class="ul">
                    <li class="li">
                        <p>The type of the document (as specified by the <c>UTI</c> property)</p>
                    </li>
                    <li class="li">
                        <p>The set of installed apps that have registered support for opening documents</p>
                    </li>
                    <li class="li">
                        <p>The actions that you have indicated as supported in the document interaction controller delegate’s <c>documentInteractionController:canPerformAction:</c> method</p>
                    </li>
                </ul>
                <p>Options that cannot be performed on the current document are not included in the menu. For example, if the document cannot be opened by any known apps, the menu does not include options for opening it.</p>
                <p>This method displays the options menu asynchronously. The menu is dismissed automatically when the user selects one of the available options. You can also dismiss it programmatically using the <c>dismissMenuAnimated:</c> method.</p>
                <p>To instead present a menu that contains only a list of apps capable of opening the current document, the <c>presentOpenInMenuFromRect:inView:animated:</c> method instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– presentOptionsMenuFromBarButtonItem:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
            <param name="view">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionController.PresentPreview(System.Boolean)">
            <summary>
            Displays a full-screen preview of the target document.
            <br></br>Equivalent to the native <c>presentPreviewAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the appearance of the document preview or <c>false</c> to display it immediately. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if this method was able to display the document preview or <c>false</c> if it was not. </p>
                <b>Discussion</b>
                <p>To use this method, you must first provide a delegate object that implements the <c>documentInteractionControllerViewControllerForPreview:</c> method. The view controller returned by that method is used to present the document preview modally.</p>
                <p>If your delegate implements the <c>documentInteractionControllerViewForPreview:</c> and <c>documentInteractionControllerRectForPreview:</c> methods, the view and rectangle returned by those methods is used as the starting point for the animation used to display the document preview. If the animated parameter is <c>true</c> but your delegate does not implement the <c>documentInteractionControllerViewForPreview:</c> method (or that method returns <c>null</c>), the document preview is animated into place using a crossfade transition. </p>
                <p>This method displays the document preview asynchronously. The document interaction controller dismisses the document preview automatically in response to appropriate user interactions. You can also dismiss the preview programmatically using the <c>dismissPreviewAnimated:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate">
            <summary>
            The <c>UIDocumentInteractionControllerDelegate</c> protocol includes methods you can implement to respond to messages from a document interaction controller. Use this protocol to participate when document previews are displayed and when a document is about to be opened by another application. You can also use this protocol to respond to commands (such as “copy” and “print”) from a document interaction controller’s options menu.
            </summary>
            <remarks>
                <p>If you use a document interaction controller to display a document preview, your delegate must implement the <c>documentInteractionControllerViewControllerForPreview:</c> method. All other methods of this protocol are optional.</p>
                <p>For more information about using a document interaction controller, see <em>UIDocumentInteractionController Class Reference</em>.</p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionController_didEndSendingToApplication__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionController_willBeginSendingToApplication__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerDidDismissOpenInMenu__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerDidDismissOptionsMenu__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerDidEndPreview__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerRectForPreview__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerViewControllerForPreview__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerViewForPreview__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerWillBeginPreview__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerWillPresentOpenInMenu__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.UP_UIDocumentInteractionControllerDelegate_set__documentInteractionControllerWillPresentOptionsMenu__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.DidEndSendingToApplication(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController,System.String)">
            <summary>
            (optional) Called when a document interaction controller’s document has been handed off to the specified application.
            <br></br>Equivalent to the native <c>documentInteractionController:didEndSendingToApplication:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller whose document is about to be opened.</p>
                <em>application</em>
                <p>The bundle identifier of the application that is about to open the document. This value corresponds to the value in the <c>CFBundleIdentifier</c> key of the application’s <c>Info.plist</c> file.</p>
                <b>Discussion</b>
                <p>This method is called after the document information has been saved for the specified application.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
            <param name="application">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.WillBeginSendingToApplication(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController,System.String)">
            <summary>
            (optional) Called when a document interaction controller’s document is about to be opened by the specified application.
            <br></br>Equivalent to the native <c>documentInteractionController:willBeginSendingToApplication:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller whose document is about to be opened.</p>
                <em>application</em>
                <p>The bundle identifier of the application that is about to open the document. This value corresponds to the value in the <c>CFBundleIdentifier</c> key of the application’s <c>Info.plist</c> file.</p>
                <b>Discussion</b>
                <p>This method is called when the user chooses to open a document, which could occur from within a document preview. When a document is passed to another application, the contents of the document interaction controller’s <c>annotation</c> property are passed with it. You can use this method to configure the contents of that property or prepare your own application for handing off the document.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
            <param name="application">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.DidDismissOpenInMenu(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller has dismissed its Open In menu.
            <br></br>Equivalent to the native <c>documentInteractionControllerDidDismissOpenInMenu:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller that dismissed its menu.</p>
                <b>Discussion</b>
                <p>You can use this method to remove any additional views or content you placed underneath the Open In menu in your <c>documentInteractionControllerWillPresentOpenInMenu:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.DidDismissOptionsMenu(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller has dismissed its options menu.
            <br></br>Equivalent to the native <c>documentInteractionControllerDidDismissOptionsMenu:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller that dismissed its options menu.</p>
                <b>Discussion</b>
                <p>You can use this method to remove any additional views or content you placed underneath the options menu in your <c>documentInteractionControllerWillPresentOptionsMenu:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.DidEndPreview(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller has dismissed its document preview.
            <br></br>Equivalent to the native <c>documentInteractionControllerDidEndPreview:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller that dismissed its document preview.</p>
                <b>Discussion</b>
                <p>This method is called after the view containing the document preview has been removed from the application’s key window. You can use this notification to remove any interface elements you set up behind the preview elements.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.RectForPreview(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller needs the rectangle to use as the starting point for animating the display of a document preview.
            <br></br>Equivalent to the native <c>documentInteractionControllerRectForPreview:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller requesting the starting rectangle.</p>
                <b>Return Value</b>
                <p>A rectangle in the coordinate system of the view returned by the <c>documentInteractionControllerViewForPreview:</c> method.</p>
                <b>Discussion</b>
                <p>If you do not implement the <c>documentInteractionControllerViewForPreview:</c> method, or if you do implement it but return a <c>null</c> value, this method is not called. If you do not implement this method, the starting rectangle is assumed to be the bounds of the view returned by the <c>documentInteractionControllerViewForPreview:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.ViewControllerForPreview(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller needs a view controller for presenting a document preview.
            <br></br>Equivalent to the native <c>documentInteractionControllerViewControllerForPreview:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller requesting the parent view controller.</p>
                <b>Return Value</b>
                <p>The view controller to use when presenting the document preview. The return value must not be <c>null</c>.</p>
                <b>Discussion</b>
                <p>Although technically optional, this method is required if your application attempts to display a preview for a document. The view controller returned by this method is used as the parent for the document preview.</p>
                <p>If you return a navigation controller from this method, the document interaction controller is pushed onto the navigation stack using the standard navigation controller animations. If you return any other type of view controller, the document interaction controller is displayed modally, in which case, the view controller you return must be capable of presenting a modal view controller. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.ViewForPreview(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller needs the starting point for animating the display of a document preview.
            <br></br>Equivalent to the native <c>documentInteractionControllerViewForPreview:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller requesting the starting view.</p>
                <b>Return Value</b>
                <p>The view to use as the starting point for the animation or <c>null</c> if you want the document preview to fade into place.</p>
                <b>Discussion</b>
                <p>By default, the starting rectangle for the animation is set to the bounds of the returned view. To specify a different starting rectangle, you must also override the <c>documentInteractionControllerRectForPreview:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.WillBeginPreview(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller is about to display a preview for its document.
            <br></br>Equivalent to the native <c>documentInteractionControllerWillBeginPreview:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller that is about to preview its document.</p>
                <b>Discussion</b>
                <p>This method is called shortly before the view containing the document preview is presented modally. You can use this notification to set up any additional interface elements behind the preview elements.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.WillPresentOpenInMenu(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller is about to display an Open In menu.
            <br></br>Equivalent to the native <c>documentInteractionControllerWillPresentOpenInMenu:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller that is about to display a menu.</p>
                <b>Discussion</b>
                <p>The Open In menu is used to select an application for opening the current file. You can use this method to update your user interface in response to displaying the menu.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate.WillPresentOptionsMenu(U3DXT.iOS.Native.UIKit.UIDocumentInteractionController)">
            <summary>
            (optional) Called when a document interaction controller is about to display an options menu.
            <br></br>Equivalent to the native <c>documentInteractionControllerWillPresentOptionsMenu:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>controller</em>
                <p>The document interaction controller that is about to display an options menu.</p>
                <b>Discussion</b>
                <p>The options menu is used to present the user with options for previewing the document, opening it in an application, or copying its contents. You can use this method to update your user interface in response to displaying the menu. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="controller">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionController_didEndSendingToApplication__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionController_didEndSendingToApplication__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionController_willBeginSendingToApplication__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionController_willBeginSendingToApplication__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerDidDismissOpenInMenu__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerDidDismissOpenInMenu__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerDidDismissOptionsMenu__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerDidDismissOptionsMenu__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerDidEndPreview__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerDidEndPreview__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerRectForPreview__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerRectForPreview__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerViewControllerForPreview__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerViewControllerForPreview__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerViewForPreview__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerViewForPreview__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerWillBeginPreview__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerWillBeginPreview__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerWillPresentOpenInMenu__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerWillPresentOpenInMenu__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDocumentInteractionControllerDelegate._documentInteractionControllerWillPresentOptionsMenu__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_documentInteractionControllerWillPresentOptionsMenu__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.AudioToolbox.AudioServices">
            <summary>
            Functions belonging to AudioServices.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.AudioToolbox.AudioServices.kSystemSoundID_Vibrate">
            <summary>
                <p>On the iPhone, use this constant with the <c>AudioServicesPlayAlertSound</c> function to invoke a brief vibration. On the iPod touch, does nothing.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kSystemSoundID_Vibrate</c> constant.
            </summary>
            <remarks>
            Identifiers for alert sounds and alternatives to sounds, for use with the <c>AudioServicesPlayAlertSound</c> function.
            <p></p><p></p>This is a constant for "Alert Sound Identifiers".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.AudioToolbox.AudioServices.UP_AudioServices_AudioServicesPlaySystemSound(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AudioToolbox.AudioServices.UP_AudioServices_AudioServicesPlayAlertSound(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AudioToolbox.AudioServices.PlaySystemSound(System.UInt32)">
            <summary>
            Plays a system sound object.
            <br></br>Equivalent to the native <c>AudioServicesPlaySystemSound</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inSystemSoundID</em>
                <p>The system sound to play. Before using this function, call the <c>AudioServicesCreateSystemSoundID</c> function to obtain a system sound.</p>
                <b>Discussion</b>
                <p>This function plays a short sound (30 seconds or less in duration). Because sound might play for several seconds, this function is executed asynchronously. To know when a sound has finished playing, call the <c>AudioServicesAddSystemSoundCompletion</c> function to register a callback function.</p>
                <p>On some iOS devices, you can pass the <c>kSystemSoundID_Vibrate</c> constant to invoke vibration. On other iOS devices, calling this function with that constant does nothing.</p>
                <p>Sound files that you play using this function must be:</p>
                <ul class="ul">
                    <li class="li">
                        <p>No longer than 30 seconds in duration</p>
                    </li>
                    <li class="li">
                        <p>In linear PCM or IMA4 (IMA/ADPCM) format</p>
                    </li>
                    <li class="li">
                        <p>Packaged in a <c>.caf</c>, <c>.aif</c>, or <c>.wav</c> file</p>
                    </li>
                </ul>
                <p> In addition, when you use the <c>AudioServicesPlaySystemSound</c> function:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Sounds play at the current system audio volume, with no programmatic volume control available</p>
                    </li>
                    <li class="li">
                        <p>Sounds play immediately</p>
                    </li>
                    <li class="li">
                        <p>Looping and stereo positioning are unavailable</p>
                    </li>
                    <li class="li">
                        <p>Simultaneous playback is unavailable: You can play only one sound at a time</p>
                    </li>
                    <li class="li">
                        <p>The sound is played locally on the device speakers; it does not use audio routing.</p>
                    </li>
                </ul>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>AudioServicesCreateSystemSoundID</c>
                    </li>
                    <li>
                        <c>AudioServicesAddSystemSoundCompletion</c>
                    </li>
                    <li>
                        <c>AudioServicesPlayAlertSound</c>
                    </li>
                </ul>
            </remarks>
            <param name="inSystemSoundID">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AudioToolbox.AudioServices.PlayAlertSound(System.UInt32)">
            <summary>
            Plays a system sound as an alert.
            <br></br>Equivalent to the native <c>AudioServicesPlayAlertSound</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>inSystemSoundID</em>
                <p>The system sound object to play as an alert.</p>
                <p>Before using this function, call the <c>AudioServicesCreateSystemSoundID</c> function to obtain a system sound.</p>
                <b>Discussion</b>
                <p>Depending on the particular iOS device, this function plays a short sound and may invoke vibration. Calling this function does the following on various iOS devices:</p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <strong>iPhone</strong>—plays the specified sound. If the user has configured the Settings application for vibration on ring, also invokes vibration. However, the device does <em>not</em> vibrate if your app’s audio session is configured with the  <c>AVAudioSessionCategoryPlayAndRecord</c> or <c>AVAudioSessionCategoryRecord</c> audio session category. This ensures that vibration doesn’t interfere with audio recording. For an explanation of audio session categories, see  “Categories Express Audio Roles”  in <em>Audio Session Programming Guide</em>.</p>
                    </li>
                    <li class="li">
                        <p>
                            <strong>iPod touch, original</strong>—plays a short alert melody.</p>
                    </li>
                    <li class="li">
                        <p>
                            <strong>iPod touch, 2nd generation and newer</strong>—plays the specified sound.</p>
                    </li>
                </ul>
                <p>In iOS, the duration of the sound to be played must not be more than 30 seconds.</p>
                <p>
                    <strong>Note:</strong> System-supplied alert sounds and system-supplied user-interface sound effects are not available to your iOS application. For example, using the <c>kSystemSoundID_UserPreferredAlert</c> constant as a parameter to the <c>AudioServicesPlayAlertSound</c> function will not play anything.</p>
                <p>
                </p>
                <p>In OS X, when a user has configured System Preferences to flash the screen for alerts, or if sound cannot be rendered, calling this function will result in the screen flashing. In OS X, pass the constant <c>kSystemSoundID_UserPreferredAlert</c> to play the alert sound selected by the user in System Preferences. In iOS there is no preferred user alert sound.</p>
                <p>To play a short sound not used as an alert, use <c>AudioServicesPlaySystemSound</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>AudioServicesCreateSystemSoundID</c>
                    </li>
                    <li>
                        <c>AudioServicesPlaySystemSound</c>
                    </li>
                </ul>
            </remarks>
            <param name="inSystemSoundID">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Security.SecCertificate">
            <summary>
            Abstract Core Foundation-type object representing an X.509 certificate.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A <c>SecCertificateRef</c> object for a certificate that is stored in a keychain can be safely cast to a <c>SecKeychainItemRef</c> for manipulation as a keychain item. On the other hand, if the <c>SecCertificateRef</c> is not stored in a keychain, casting the object to a <c>SecKeychainItemRef</c> and passing it to Keychain Services functions returns errors.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.UP_SecCertificate_SecCertificateCopyData(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.UP_SecCertificate_SecCertificateCopySubjectSummary(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.UP_SecCertificate_SecCertificateCreateWithData(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.Create(U3DXT.iOS.Native.CoreFoundation.CFAllocator,U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates a certificate object from a DER representation of a certificate.
            <br></br>Equivalent to the native <c>SecCertificateCreateWithData</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>allocator</em>
                <p>The <c>CFAllocator</c> object you wish to use to allocate the certificate object. Pass <c>NULL</c> to use the default allocator.</p>
                <em>data</em>
                <p>A DER (Distinguished Encoding Rules) representation of an X.509 certificate. </p>
                <b>Return Value</b>
                <p>The newly created certificate object. Call the <c>CFRelease</c> function to release this object when you are finished with it. Returns <c>NULL</c> if the data passed in the <c>data</c> parameter is not a valid DER-encoded X.509 certificate.</p>
                <b>Discussion</b>
                <p>The certificate object returned by this function is used as input to other functions in the API.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>SecCertificateCopyData</c>
                    </li>
                </ul>
            </remarks>
            <param name="allocator">
            </param>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.CopyData">
            <summary>
            Returns a DER representation of a certificate given a certificate object.
            <br></br>Equivalent to the native <c>SecCertificateCopyData</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>certificate</em>
                <p>The certificate object for which you wish to return the DER (Distinguished Encoding Rules) representation of the X.509 certificate. </p>
                <b>Return Value</b>
                <p>The DER representation of the certificate. Call the <c>CFRelease</c> function to release this object when you are finished with it. Returns <c>NULL</c> if the data passed in the <c>certificate</c> parameter is not a valid certificate object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>SecCertificateCreateWithData</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Security.SecCertificate.CopySubjectSummary">
            <summary>
            Returns a human-readable summary of a certificate.
            <br></br>Equivalent to the native <c>SecCertificateCopySubjectSummary</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>certificate</em>
                <p>The certificate object for which you wish to return a summary string. </p>
                <b>Return Value</b>
                <p>A string that contains a human-readable summary of the contents of the certificate. Call the <c>CFRelease</c> function to release this object when you are finished with it. Returns <c>NULL</c> if the data passed in the <c>certificate</c> parameter is not a valid certificate object.</p>
                <b>Discussion</b>
                <p>Because all the data in the string comes from the certificate, the string is in whatever language is used in the certificate.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>SecCertificateCreateWithData</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPasteboard">
            <summary>
            The <c>UIPasteboard</c> class enables an application to share data within the application or with another application using system-wide or application-specific pasteboards.
            </summary>
            <remarks>
                <p>Typically, an object in the application writes data to a pasteboard when the user requests a copy or cut operation on a selection in the user interface. Another object in the same or different application then reads that data from the pasteboard and presents it to the user at a new location; this usually happens when the user requests a paste operation.</p>
                <p>A pasteboard is a named region of memory where data can be shared. There are two system pasteboards: the General pasteboard (<c>UIPasteboardNameGeneral</c>) and the Find pasteboard (<c>UIPasteboardNameFind</c>. You can use the General pasteboard for copy-paste operations involving any kind of data; the Find pasteboard, which is used in search operations, holds the most recent string value in the search bar. Applications can also create pasteboards for their own use or for use by a family of related applications. Pasteboards must be identified by a unique names. You may also mark an application pasteboard as persistent, so that it continues to exist past the termination of the application and past system reboots. System pasteboards are persistent by default.</p>
                <p>When you write an object to a pasteboard, it is stored as a pasteboard item. A pasteboard item is one or more key-value pairs where the key is a string that identifies the representation type of the value. Having multiple representation types per pasteboard item makes it more possible for one application to share data with another application without having to know specific capabilities of that application. For example, the source application could write the same image to the pasteboard in PNG, JPEG, and GIF data formats. If the receiving application can only handle GIF images, it can still obtain the pasteboard data. </p>
                <p>A Uniform Type Identifier (UTI) is frequently used for a representation type (sometimes called a pasteboard type). For example, you could use <c>kUTTypeJPEG</c> (a constant for <c>public.jpeg</c>) as a representation type for JPEG data.  However, applications are free to use any string they want for a representation type; however, for application-specific data types, it is recommended that you use reverse-DNS notation to ensure the uniqueness of the type (for example, <c>com.myCompany.myApp.myType</c>).</p>
                <p>
                    <strong>Note:</strong> For a discussion of Uniform Type Identifiers and a list of common ones, see <em>Uniform Type Identifiers Overview</em>.</p>
                <p>
                </p>
                <p>
                    <c>UIPasteboard</c> provides methods for reading and writing single pasteboard items at a time as well as multiple pasteboard items. The data written and read can be in two general forms. If the data to be written is a property-list objects or can be converted to such an object, use a method such as <c>setValue:forPasteboardType:</c> to write it to the pasteboard. If the data is binary (say, image data) or can’t be converted to a property-list type, you would use the <c>setData:forPasteboardType:</c> to write it to the pasteboard. For <c>UIPasteboard</c>, the classes of the property-list objects are <c>String</c>, <c>object[]</c>, <c>Dictionary</c>, <c>DateTime</c>, <c>double</c> and <c>NSURL</c>. The class also provides convenience methods for writing and reading  strings, images, URLs, and colors to and from single or multiple pasteboard items. </p>
                <p>Although <c>UIPasteboard</c> is central to copy-paste operations, several other UIKit classes and protocols are used in these operations as well: </p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>UIMenuController</c> —Displays a menu with Copy, Cut, Paste, Select, and Select All commands above or below the selection.  </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>UIResponder</c> — Responders implement the <c>canPerformAction:withSender:</c> to enable or disable commands in the above-mentioned menu based on the current context. </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>
                                <!--a target="_self" -->UIResponderStandardEditActions<!--/a--></c> — Responders implement methods declared in this informal protocol to handle the chosen menu commands (for example, <c>copy:</c> and <c>paste:</c>).</p>
                    </li>
                </ul>
                <p>An application that implements copy-paste usually has to handle the management and presentation of selections in its user interface. It must also coordinate the addition and removal of items via paste and cut operations with its data model.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPasteboard.UIPasteboardChangedNotification">
            <summary>
            Constant name for the native <c>UIPasteboardChangedNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIPasteboard.Changed">
            <summary>
                <b>UIPasteboardChangedNotification</b> Posted by a pasteboard object when its contents change.  This happens at the same time the pasteboard’s change count (<c>changeCount</c> property) is incremented. Changes include the addition, removal, and modification of pasteboard items. The <c>userInfo</c> dictionary may contain the representation types of pasteboard items that have been added to or removed from the pasteboard. See  “UserInfo Dictionary Keys”  for the keys used to access these representation types. If pasteboard items have been modified but not added or removed, the <c>userInfo</c> dictionary is <c>null</c>.<b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIPasteboardChangedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPasteboard.UIPasteboardRemovedNotification">
            <summary>
            Constant name for the native <c>UIPasteboardRemovedNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIPasteboard.Removed">
            <summary>
                <b>UIPasteboardRemovedNotification</b> Posted by a pasteboard object just before an application removes it.  The removal class method is <c>removePasteboardWithName:</c>. There is no <c>userInfo</c> dictionary.<b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIPasteboardRemovedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIPasteboard.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPasteboard.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>UIPasteboard</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIPasteboard.AllInstances.Changed">
            <summary>
                <b>UIPasteboardChangedNotification</b> Posted by a pasteboard object when its contents change.  This happens at the same time the pasteboard’s change count (<c>changeCount</c> property) is incremented. Changes include the addition, removal, and modification of pasteboard items. The <c>userInfo</c> dictionary may contain the representation types of pasteboard items that have been added to or removed from the pasteboard. See  “UserInfo Dictionary Keys”  for the keys used to access these representation types. If pasteboard items have been modified but not added or removed, the <c>userInfo</c> dictionary is <c>null</c>.<b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIPasteboardChangedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIPasteboard.AllInstances.Removed">
            <summary>
                <b>UIPasteboardRemovedNotification</b> Posted by a pasteboard object just before an application removes it.  The removal class method is <c>removePasteboardWithName:</c>. There is no <c>userInfo</c> dictionary.<b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIPasteboardRemovedNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_generalPasteboard">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_pasteboardWithName_create_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_pasteboardWithUniqueName">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_removePasteboardWithName_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_changeCount(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_color(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_color(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_colors(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_colors(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_image(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_image(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_images(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_images(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_items(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_items(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_name(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_numberOfItems(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_persistent(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_persistent(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_string(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_string(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_strings(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_strings(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_URL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_URL(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_get_URLs(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_set_URLs(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_addItems_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_containsPasteboardTypes_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_containsPasteboardTypes_inItemSet_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_dataForPasteboardType_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_dataForPasteboardType_inItemSet_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_itemSetWithPasteboardTypes_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_pasteboardTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_pasteboardTypesForItemSet_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_setData_forPasteboardType_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_setValue_forPasteboardType_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_valueForPasteboardType_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.UP_UIPasteboard_valuesForPasteboardType_inItemSet_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIPasteboard" /> class.
            <br></br>Equivalent to the native <c>[[UIPasteboard alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.ClassExists">
            <summary>
            Returns whether the native UIPasteboard class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.GeneralPasteboard">
            <summary>
            Returns the general pasteboard, which is used for general copy-paste operations
            <br></br>Equivalent to the native <c>generalPasteboard</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A shared system pasteboard object with the name of <c>UIPasteboardNameGeneral</c>.</p>
                <b>Discussion</b>
                <p>You may use the general pasteboard for copying and pasting text, images, URLs, colors, and other data within an application or between applications. The general pasteboard is persistent across device restarts and application uninstalls. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ pasteboardWithName:create:</c>
                    </li>
                    <li>
                        <c>+ pasteboardWithUniqueName</c>
                    </li>
                    <li>
                        <c>+ removePasteboardWithName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.Pasteboard(System.String,System.Boolean)">
            <summary>
            Returns a pasteboard identified by name, optionally creating it if it doesn’t exist.
            <br></br>Equivalent to the native <c>pasteboardWithName:create:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardName</em>
                <p>A string or string constant that identifies (or should identify) the pasteboard. Specify <c>null</c> if you want <c>UIPasteboard</c> to create a pasteboard with a unique name.</p>
                <em>create</em>
                <p>A Boolean value that indicates whether the pasteboard should be created if it doesn’t already exist. Specify <c>false</c> for system pasteboards or if you want an existing application pasteboard.</p>
                <b>Return Value</b>
                <p>A pasteboard object that can be used for transferring data within and application or between applications.</p>
                <b>Discussion</b>
                <p>You call this method to obtain the <c>UIPasteboardNameFind</c> pasteboard and to create custom application pasteboards. (You may also use it to obtain the general pasteboard, but <c>generalPasteboard</c> exists for that purpose.) If you create a pasteboard for your application, the name should a unique string to prevent possible name collisions with other applications’ pasteboards; for this, use of reverse DNS notation (for example, <c>com.mycompany.myapp.pboard</c>) is recommended. Application pasteboards returned by this method are not persistent, existing only until the application quits. To make them persistent, set the <c>persistent</c> property to <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ pasteboardWithUniqueName</c>
                    </li>
                    <li>
                        <c>+ removePasteboardWithName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="pasteboardName">
            </param>
            <param name="create">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.Pasteboard">
            <summary>
            Returns an application pasteboard identified by a unique system-generated name.
            <br></br>Equivalent to the native <c>pasteboardWithUniqueName</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An application pasteboard object with a unique name. </p>
                <b>Discussion</b>
                <p>Obtain the value of the <c>name</c> property to discover the name of the returned pasteboard. Application pasteboards returned by this method are not persistent, existing only until the application quits. To make them persistent, set the <c>persistent</c> property to <c>true</c>. Calling this method is equivalent to calling <c>pasteboardWithName:create:</c> with the first parameter set to <c>null</c> and the second set to <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ generalPasteboard</c>
                    </li>
                    <li>
                        <c>+ removePasteboardWithName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.RemovePasteboard(System.String)">
            <summary>
            Invalidates the designated application pasteboard.
            <br></br>Equivalent to the native <c>removePasteboardWithName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardName</em>
                <p>The name of the pasteboard to be invalidated.</p>
                <b>Discussion</b>
                <p>Invalidation of an application pasteboard frees up all resources used by it. Once a pasteboard is invalidated, you cannot use the it; <c>UIPasteboard</c> ignores any calls to it. The method has no effect if called with the name of a system pasteboard.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ pasteboardWithName:create:</c>
                    </li>
                    <li>
                        <c>+ pasteboardWithUniqueName</c>
                    </li>
                </ul>
            </remarks>
            <param name="pasteboardName">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.changeCount">
            <summary>
            The number of times the pasteboard’s contents have changed. (read-only)
            <br></br>Equivalent to the native <c>changeCount</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Whenever the contents of a pasteboard changes—specifically, when pasteboard items are added, modified, or removed—<c>UIPasteboard</c> increments the value of this property. After it increments the change count, UIPasteboard posts the notifications named <c>UIPasteboardChangedNotification</c> (for additions and modifications) and <c>UIPasteboardRemovedNotification</c> (for removals). These notifications include (in the <c>userInfo</c> dictionary) the types of the pasteboard items added or removed. Because <c>UIPasteboard</c> waits until the end of the current event loop before incrementing the change count, notifications can be batched. The class also updates the change count when an application reactivates and another application has changed the pasteboard contents. When users restart a device, the change count is reset to zero.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.color">
            <summary>
            The color object of the first pasteboard item.
            <br></br>Equivalent to the native <c>color</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is a <c>UIColor</c> object. The associated array of representation types is <c>UIPasteboardTypeListColor</c>, which includes type . Setting this property replaces all current items in the pasteboard with the new item.  If the first item has no value of the indicated type, <c>null</c> is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.colors">
            <summary>
            An array of color objects in all pasteboard items.
            <br></br>Equivalent to the native <c>colors</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is an array of <c>UIColor</c> objects. The associated array of representation types is <c>UIPasteboardTypeListColor</c>, which includes type . Setting this property replaces all current items in the pasteboard with the new items. The returned array may have fewer objects than the number of pasteboard items; this happens if a pasteboard item does not have a value of the indicated type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.image">
            <summary>
            The image object of the first pasteboard item.
            <br></br>Equivalent to the native <c>image</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is a <c>UIImage</c> object. The associated array of representation types is <c>UIPasteboardTypeListImage</c>, which includes types <c>kUTTypePNG</c> and <c>kUTTypeJPEG</c>. Setting this property replaces all current items in the pasteboard with the new item.  If the first item has no value of the indicated type, <c>null</c> is returned. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.images">
            <summary>
            An array of image objects in all pasteboard items.
            <br></br>Equivalent to the native <c>images</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is an array of <c>UIImage</c> objects. The associated array of representation types is <c>UIPasteboardTypeListImage</c>, which includes types <c>kUTTypePNG</c> and <c>kUTTypeJPEG</c>. Setting this property replaces all current items in the pasteboard with the new items. The returned array may have fewer objects than the number of pasteboard items; this happens if a pasteboard item does not have a value of the indicated type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.items">
            <summary>
            The pasteboard items on the pasteboard.
            <br></br>Equivalent to the native <c>items</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of the property is an array of dictionaries. Each dictionary represents a pasteboard item, with the key being the representation type and the value the data object or property-list object associated with that type. Setting this property replaces all of the current pasteboard items.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– addItems:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.name">
            <summary>
            The name of the pasteboard. (read-only)
            <br></br>Equivalent to the native <c>name</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Names of application pasteboard objects should be unique across installed applications. If the object is a system pasteboard, this property returns one of the constants described in  “Pasteboard Names.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ pasteboardWithName:create:</c>
                    </li>
                    <li>
                        <c>+ pasteboardWithUniqueName</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.numberOfItems">
            <summary>
            Returns the number of items in the pasteboard (read-only)
            <br></br>Equivalent to the native <c>numberOfItems</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.persistent">
            <summary>
            A Boolean value that indicates whether the pasteboard is persistent.
            <br></br>Equivalent to the native <c>persistent</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When a pasteboard is persistent, it continues to exist past application terminations and across system reboots. Application pasteboards that are not persistent only last until the owning (creating) application quits. System pasteboards are persistent. Application pasteboards by default are not persistent. A persistent application pasteboard is removed when the application that created it is uninstalled.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ pasteboardWithName:create:</c>
                    </li>
                    <li>
                        <c>+ pasteboardWithUniqueName</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.String">
            <summary>
            The string value of the first pasteboard item.
            <br></br>Equivalent to the native <c>string</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is an <c>String</c> object. The associated array of representation types is <c>UIPasteboardTypeListString</c>, which includes type <c>kUTTypeUTF8PlainText</c>. Setting this property replaces all current items in the pasteboard with the new item. If the first item has no value of the indicated type, <c>null</c> is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.strings">
            <summary>
            An array of strings in all pasteboard items.
            <br></br>Equivalent to the native <c>strings</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is an array of <c>String</c> objects. The associated array of representation types is <c>UIPasteboardTypeListString</c>, which includes type <c>kUTTypeUTF8PlainText</c>.Setting this property replaces all current items in the pasteboard with the new items.  The returned array may have fewer objects than the number of pasteboard items; this happens if a pasteboard item does not have a value of the indicated type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.URL">
            <summary>
            The URL object of the first pasteboard item.
            <br></br>Equivalent to the native <c>URL</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is an <c>NSURL</c> object. The associated array of representation types is <c>UIPasteboardTypeListURL</c>, which includes type <c>kUTTypeURL</c>. Setting this property replaces all current items in the pasteboard with the new item.  If the first item has no value of the indicated type, <c>null</c> is returned. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPasteboard.URLs">
            <summary>
            An array of URL objects in all pasteboard items.
            <br></br>Equivalent to the native <c>URLs</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value stored in this property is an array of <c>NSURL</c> objects. The associated array of representation types is <c>UIPasteboardTypeListURL</c>, which includes type <c>kUTTypeURL</c>. Setting this property replaces all current items in the pasteboard with the new items. The returned array may have fewer objects than the number of pasteboard items; this happens if a pasteboard item does not have a value of the indicated type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.AddItems(System.Object[])">
            <summary>
            Appends pasteboard items to the current contents of the pasteboard.
            <br></br>Equivalent to the native <c>addItems:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>items</em>
                <p>An array of dictionaries. Each dictionary represents a pasteboard item, with the key being the representation type and the value the data object or property-list object associated with that type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property items</c></li>
                </ul>
            </remarks>
            <param name="items">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.ContainsPasteboardTypes(System.Object[])">
            <summary>
            Returns whether the pasteboard holds data of the specified representation type.
            <br></br>Equivalent to the native <c>containsPasteboardTypes:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardTypes</em>
                <p>An array of strings. Each string should identify a representation of the pasteboard item that the pasteboard reader can handle. These string are frequently UTIs. See the class description for more information about pasteboard item types.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the pasteboard item holds data of the indicated representation type, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method works on the first item in the pasteboard. If there are other items, it ignores them. You can use this method when enabling or disabling the Paste menu command.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pasteboardTypes</c>
                    </li>
                </ul>
            </remarks>
            <param name="pasteboardTypes">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.ContainsPasteboardTypes(System.Object[],U3DXT.iOS.Native.Foundation.NSIndexSet)">
            <summary>
            Returns whether the specified pasteboard items contain data of the given representation types.
            <br></br>Equivalent to the native <c>containsPasteboardTypes:inItemSet:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardTypes</em>
                <p>An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</p>
                <em>itemSet</em>
                <p>An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in <c>null</c> to request all pasteboard items.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the pasteboard items identified by <em>itemSet</em> have data corresponding to the representation types specified by <em>pasteboardTypes</em>; otherwise, returns <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property numberOfItems</c></li>
                    <li>
                        <c>– pasteboardTypesForItemSet:</c>
                    </li>
                    <li>
                        <c>– itemSetWithPasteboardTypes:</c>
                    </li>
                </ul>
            </remarks>
            <param name="pasteboardTypes">
            </param>
            <param name="itemSet">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.Data(System.String)">
            <summary>
            Returns the data in the pasteboard for the given representation type.
            <br></br>Equivalent to the native <c>dataForPasteboardType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardType</em>
                <p>A string identifying a representation type of a pasteboard item.</p>
                <b>Return Value</b>
                <p>A data object or <c>null</c> if there is no data in the pasteboard of the given type.</p>
                <b>Discussion</b>
                <p>The returned object often holds raw (binary) data, such as image data. This method works on the first item in the pasteboard. If there are other items, it ignores them. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– valueForPasteboardType:</c>
                    </li>
                    <li>
                        <c>– setData:forPasteboardType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="pasteboardType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.Data(System.String,U3DXT.iOS.Native.Foundation.NSIndexSet)">
            <summary>
            Returns the data objects in the indicated pasteboard items that have the given representation type.
            <br></br>Equivalent to the native <c>dataForPasteboardType:inItemSet:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardType</em>
                <p>A string identifying a representation type. Typically this is a UTI.</p>
                <em>itemSet</em>
                <p>An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in <c>null</c> to request all pasteboard items.</p>
                <b>Return Value</b>
                <p>An array of <c>NSData</c> objects or, if a requested pasteboard item has no data of the the type indicated by <em>pasteboardType</em>, a <c>NSNull</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– valuesForPasteboardType:inItemSet:</c>
                    </li>
                    <li>    <c>@property items</c></li>
                </ul>
            </remarks>
            <param name="pasteboardType">
            </param>
            <param name="itemSet">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.ItemSet(System.Object[])">
            <summary>
            Returns an index set identifying pasteboard items having the specified representation types.
            <br></br>Equivalent to the native <c>itemSetWithPasteboardTypes:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardTypes</em>
                <p>An array of strings, with each string identifying a representation type. Typically you use UTIs as pasteboard types.</p>
                <b>Return Value</b>
                <p>An index set with each integer positionally identifying a pasteboard item that has one of the representation types specified in <em>pasteboardTypes</em>. </p>
                <b>Discussion</b>
                <p>You can pass the index set returned in this method in a call to <c>dataForPasteboardType:inItemSet:</c> or <c>valuesForPasteboardType:inItemSet:</c> to get the data in the indicated pasteboard items.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property numberOfItems</c></li>
                    <li>
                        <c>– pasteboardTypesForItemSet:</c>
                    </li>
                    <li>
                        <c>– containsPasteboardTypes:inItemSet:</c>
                    </li>
                </ul>
            </remarks>
            <param name="pasteboardTypes">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.PasteboardTypes">
            <summary>
            Returns the types of the first item on the pasteboard.
            <br></br>Equivalent to the native <c>pasteboardTypes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of strings indicating the representation types of the first item on the pasteboard.</p>
                <b>Discussion</b>
                <p>A type is frequently, but not necessarily, a UTI (Uniform Type Identifier). It identifies a representation of the data on the pasteboard. For example, a pasteboard item could hold image data under <c>public.png</c> and <c>public.tiff</c> representations. Applications can define their own types for custom data such as <c>com.mycompany.myapp.mytype</c>; however, in this case, only those applications that know of the type could understand the data written to the pasteboard. </p>
                <p>With this method, you can determine if the pasteboard holds data of a particular representation type by a line of code such as this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>BOOL pngOnPasteboard = [[pasteboard pasteboardTypes] containsObject:"public.png"];  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– containsPasteboardTypes:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.PasteboardTypes(U3DXT.iOS.Native.Foundation.NSIndexSet)">
            <summary>
            Returns an array of representation types for each specified pasteboard item.
            <br></br>Equivalent to the native <c>pasteboardTypesForItemSet:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>itemSet</em>
                <p>An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in <c>null</c> to request all pasteboard items.</p>
                <b>Return Value</b>
                <p>An array of arrays, with each inner array holding the representation types for a particular pasteboard item. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property numberOfItems</c></li>
                    <li>
                        <c>– itemSetWithPasteboardTypes:</c>
                    </li>
                    <li>
                        <c>– containsPasteboardTypes:inItemSet:</c>
                    </li>
                </ul>
            </remarks>
            <param name="itemSet">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.SetData(U3DXT.iOS.Native.Foundation.NSData,System.String)">
            <summary>
            Puts data in the pasteboard for the specified representation type.
            <br></br>Equivalent to the native <c>setData:forPasteboardType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The data object to be written to the pasteboard.</p>
                <em>pasteboardType</em>
                <p>A string identifying the representation type of the pasteboard item. This is typically a UTI.</p>
                <b>Discussion</b>
                <p>Use this method to put data on the pasteboard when the data is not a standard property-list object—that is, an object of the <c>String</c>, <c>object[]</c>, <c>Dictionary</c>, <c>DateTime</c>, <c>double</c>, or <c>NSURL</c> class. (For property-list objects, use the <c>setValue:forPasteboardType:</c> method.)  For example, you could archive a graph of model objects and pass the resulting <c>NSData</c> object to a related application via a pasteboard using a custom pasteboard type. This method writes data for the first item in the pasteboard. Calling this method replaces any items currently in the pasteboard. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– dataForPasteboardType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="pasteboardType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.SetValue(System.Object,System.String)">
            <summary>
            Puts a property-list object in the pasteboard for the specified representation type.
            <br></br>Equivalent to the native <c>setValue:forPasteboardType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The property-list object to be written to the pasteboard.</p>
                <em>pasteboardType</em>
                <p>A string identifying the representation type of the pasteboard item. If the type is a UTI, it must be compatible with the class of <em>value</em>; otherwise, nothing is written to the pasteboard.</p>
                <b>Discussion</b>
                <p>Use this method to put an object on the pasteboard that is a standard property-list object—that is an object of the <c>String</c>, <c>object[]</c>, <c>Dictionary</c>, <c>DateTime</c>, <c>double</c>, or <c>NSURL</c> class. (For all other data, such as raw binary data, use the <c>setData:forPasteboardType:</c> method.) This method writes the object as the first item in the pasteboard. Calling this method replaces any items currently in the pasteboard.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– valueForPasteboardType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="pasteboardType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.Value(System.String)">
            <summary>
            Returns an object in the pasteboard for the given representation type.
            <br></br>Equivalent to the native <c>valueForPasteboardType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardType</em>
                <p>A string identifying a representation type of a pasteboard item. </p>
                <b>Return Value</b>
                <p>An object that is an instance of the appropriate class based on <em>pasteboardType</em>, a property-list object, or a  <c>NSData</c> object containing “raw” data.</p>
                <b>Discussion</b>
                <p>This method attempts to return an object that is of a class type appropriate to the representation type, which typically is a UTI. For example, if the representation type is <c>kUTTypePlainText</c> (<c>public.plain-text</c>), the method returns an <c>String</c> object. If the method cannot determine the class type from the representation type, it returns the object as a generic property-list object. Property-list objects include <c>String</c>, <c>object[]</c>, <c>Dictionary</c>, <c>DateTime</c>, or <c>double</c> objects, with <c>NSURL</c> objects also as a possibility. If the method cannot decode the value as a property-list object, it returns the pasteboard item as an <c>NSData</c> object. This method works on the first item in the pasteboard. If there are other items, it ignores them. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– dataForPasteboardType:</c>
                    </li>
                    <li>
                        <c>– setValue:forPasteboardType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="pasteboardType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPasteboard.Values(System.String,U3DXT.iOS.Native.Foundation.NSIndexSet)">
            <summary>
            Returns the property-list objects in the indicated pasteboard items that have the given representation type.
            <br></br>Equivalent to the native <c>valuesForPasteboardType:inItemSet:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pasteboardType</em>
                <p>A string identifying a representation type. Typically this is a UTI.</p>
                <em>itemSet</em>
                <p>An index set with each integer value identifying a pasteboard item positionally in the pasteboard. Pass in <c>null</c> to request all pasteboard items.</p>
                <b>Return Value</b>
                <p>An array of <c>NSData</c> objects or, if a requested pasteboard item has no data of the the type indicated by <em>pasteboardType</em>, a <c>NSNull</c> object.</p>
                <b>Discussion</b>
                <p>Returned objects are of one of the following classes: <c>String</c>, <c>object[]</c>, <c>Dictionary</c>, <c>DateTime</c>, <c>double</c>, or <c>NSURL</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– dataForPasteboardType:inItemSet:</c>
                    </li>
                    <li>    <c>@property items</c></li>
                </ul>
            </remarks>
            <param name="pasteboardType">
            </param>
            <param name="itemSet">
            </param>
        </member>
    </members>
</doc>
