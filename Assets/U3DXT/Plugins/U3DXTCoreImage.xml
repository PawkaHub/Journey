<?xml version="1.0"?>
<doc>
    <assembly>
        <name>U3DXTCoreImage</name>
    </assembly>
    <members>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIColor">
            <summary>
            The <c>CIColor</c> class contains color values and the color space for which the color values are valid. You use <c>CIColor</c> objects in conjunction with other Core Image classes, such as  <c>CIFilter</c>, <c>CIContext</c>,and <c>CIImage</c>, to take advantage of the built-in Core Image filters when processing images.
            </summary>
            <remarks>
                <p>A color space defines a one-, two-, three-, or four-dimensional environment whose color components represent intensity values. A color component is also referred to as a color channel. An RGB color space, for example, is a three-dimensional color space whose stimuli are the red, green, and blue intensities that make up a given color. Regardless of the color space, in Core Image, color values range from <c>0.0</c> to <c>1.0</c>, with <c>0.0</c> representing an absence of that component (0 percent) and <c>1.0</c> representing 100 percent.</p>
                <p>Colors also have an alpha component that represents the opacity of the color, with <c>0.0</c> meaning completely transparent and <c>1.0</c> meaning completely opaque. If a color does not have an explicit alpha component, Core Image paints the color as if the alpha component equals <c>1.0</c>. You always provide unpremultiplied color components to Core Image and Core Image provides unpremultiplied color components to you. Core Image premultiplies each color component with the alpha value in order to optimize calculations. For more information on premultiplied alpha values see <em>Core Image Programming Guide</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.FromColor32(UnityEngine.Color32)">
            <summary>
            Creates an CIColor from a Color32.
            </summary>
            <returns>A newly created native CIColor object..</returns>
            <param name="color">Color32.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_colorWithRed_green_blue_(System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_colorWithRed_green_blue_alpha_(System.Single,System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_colorWithString_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_alpha(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_blue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_colorSpace(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_green(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_alloc_initWithCGColor_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_alloc_initWithColor_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_numberOfComponents(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_red(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.UP_CIColor_stringRepresentation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIColor" /> class.
            <br></br>Equivalent to the native <c>[[CIColor alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIColor.ClassExists">
            <summary>
            Returns whether the native CIColor class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.Color(System.Single,System.Single,System.Single)">
            <summary>
            Creates a color object using the specified RGB color component values
            <br></br>Equivalent to the native <c>colorWithRed:green:blue:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>r</em>
                <p>The value of the red component.</p>
                <em>g</em>
                <p>The value of the green component.</p>
                <em>b</em>
                <p>The value of the blue component.</p>
                <b>Return Value</b>
                <p>A Core Image color object that represents an RGB color in the color space specified by the Quartz 2D constant <c><!--a target="_self" -->kCGColorSpaceGenericRGB<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ colorWithCGColor:</c>
                    </li>
                    <li>
                        <c>+ colorWithRed:green:blue:alpha:</c>
                    </li>
                    <li>
                        <c>+ colorWithString:</c>
                    </li>
                </ul>
            </remarks>
            <param name="r">
            </param>
            <param name="g">
            </param>
            <param name="b">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.Color(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color object using the specified RGBA color component values.
            <br></br>Equivalent to the native <c>colorWithRed:green:blue:alpha:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>r</em>
                <p>The value of the red component.</p>
                <em>g</em>
                <p>The value of the green component.</p>
                <em>b</em>
                <p>The value of the blue component.</p>
                <em>a</em>
                <p>The value of the alpha component.</p>
                <b>Return Value</b>
                <p>A Core Image color object that represents an RGB color in the color space specified by the Quartz 2D constant <c><!--a target="_self" -->kCGColorSpaceGenericRGB<!--/a--></c> and an alpha value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ colorWithCGColor:</c>
                    </li>
                    <li>
                        <c>+ colorWithRed:green:blue:</c>
                    </li>
                    <li>
                        <c>+ colorWithString:</c>
                    </li>
                </ul>
            </remarks>
            <param name="r">
            </param>
            <param name="g">
            </param>
            <param name="b">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.Color(System.String)">
            <summary>
            Creates a color object using the RGBA color component values specified by a string.
            <br></br>Equivalent to the native <c>colorWithString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>representation</em>
                <p>A string that is in one of the formats returned by the <c>stringRepresentation</c> method. For example, the string:</p>
                <p>
                    <c>"0.5 0.7 0.3 1.0"</c>
                </p>
                <p>indicates an RGB color whose components are 50% red, 70% green, 30% blue, and 100% opaque (alpha value of 1.0). The string representation always has four components—red, green, blue, and alpha. The default value for the alpha component is <c>1.0</c>. </p>
                <b>Return Value</b>
                <p>A Core Image color object that represents an RGB color in the color space specified by the Quartz 2D constant <c><!--a target="_self" -->kCGColorSpaceGenericRGB<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ colorWithCGColor:</c>
                    </li>
                    <li>
                        <c>+ colorWithRed:green:blue:</c>
                    </li>
                    <li>
                        <c>+ colorWithRed:green:blue:alpha:</c>
                    </li>
                </ul>
            </remarks>
            <param name="representation">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.Alpha">
            <summary>
            Returns the alpha value of the color.
            <br></br>Equivalent to the native <c>alpha</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The alpha value. A color created without an explicit alpha value has an alpha of 1.0 by default.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.Blue">
            <summary>
            Returns the  blue component of the color.
            <br></br>Equivalent to the native <c>blue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The unpremultiplied blue component of the color.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.ColorSpace">
            <summary>
            Returns the Quartz 2D color space associated with the color.
            <br></br>Equivalent to the native <c>colorSpace</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The Quartz 2D color space (<c>CGColorSpaceRef</c> object).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.Green">
            <summary>
            Returns the green component of the color.
            <br></br>Equivalent to the native <c>green</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The unpremultiplied green component of the color.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.#ctor(U3DXT.iOS.Native.CoreGraphics.CGColor)">
            <summary>
            Creates an instance of the native CIColor and initializes the object. Initializes a color object with a Quartz  color.
            <br></br>Equivalent to the native <c>[[CIColor alloc] initWithCGColor:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>c</em>
                <p>A  Quartz color (<c>CGColorRef</c>) created using a Quartz color creation function such as <c>CGColorCreate</c>.</p>
                <b>Discussion</b>
                <p>A <c>CGColorRef</c> object is the fundamental opaque data type used internally by Quartz to represent colors. For more information on Quartz 2D color and color spaces, see <em>Quartz 2D Programming Guide</em>.</p>
                <p>You can pass a <c>CGColorRef</c> object that represents any color space, including CMYK, but Core Image converts all color spaces to the Core Image working color space before it passes the color space to the filter kernel. The Core Image working color space uses three color components plus alpha. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="c">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.#ctor(U3DXT.iOS.Native.UIKit.UIColor)">
            <summary>
            Creates an instance of the native CIColor and initializes the object. Initializes a newly allocated <c>CIColor</c> object using an <c>UIColor</c> object.
            <br></br>Equivalent to the native <c>[[CIColor alloc] initWithColor:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>color</em>
                <p>The initial color value, which can belong to any available colorspace.</p>
                <b>Return Value</b>
                <p>The resulting <c>CIColor</c> object, or <c>null</c> if the object cannot be initialized with the specified value. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="color">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.NumberOfComponents">
            <summary>
            Returns the number of color components in the color.
            <br></br>Equivalent to the native <c>numberOfComponents</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of color components, which includes an alpha component if there is one.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.Red">
            <summary>
            Returns the red component of the color.
            <br></br>Equivalent to the native <c>red</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The unpremultiplied red component of the color.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIColor.StringRepresentation">
            <summary>
            Returns a formatted string that specifies the components of the color.
            <br></br>Equivalent to the native <c>stringRepresentation</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The formatted string.</p>
                <b>Discussion</b>
                <p>The string representation always has four components—red, green, blue, and alpha. The default value for the alpha component is <c>1.0</c>.F or example, this string:</p>
                <p>
                    <c>"0.5 0.7 0.3 1.0"</c>
                </p>
                <p>indicates an RGB color whose components are 50% red, 70% green, 30% blue, and 100% opaque (alpha value of 1.0). </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIContext">
            <summary>
            The <c>CIContext</c> class provides an evaluation context for rendering a <c>CIImage</c> object through Quartz 2D or OpenGL. You use <c>CIContext</c> objects in conjunction with other Core Image classes, such as <c>CIFilter</c>, <c>CIImage</c>, and <c>CIColor</c>, to take advantage of the built-in Core Image filters when processing images.
            </summary>
            <remarks>
                <p>
                    <c>CIContext</c>  and <c>CIImage</c> objects are immutable, which means each can be shared safely among threads. Multiple threads can use the same GPU or CPU <c>CIContext</c> object to render <c>CIImage</c> objects.  However, this is not the case for <c>CIFilter</c> objects, which are mutable. A <c>CIFilter</c> object cannot be shared safely among threads.  If you app is multithreaded, each thread must create its own <c>CIFilter</c> objects. Otherwise, your app could behave unexpectedly.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIContext.kCIContextOutputColorSpace">
            <summary>
                <p>A key for the color space to use for images before they are rendered to the context. By default, Core Image uses the GenericRGB color space, which leaves color matching to the system. You can specify a different output color space by providing a Quartz 2D CGColorSpace object  (<c>CGColorSpaceRef</c>). (See <em>Quartz 2D Programming Guide</em> for information on creating and using CGColorSpace objects.) </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIContextOutputColorSpace</c> constant.
            </summary>
            <remarks>
            Keys in the options dictionary for a <c>CIContext</c> object.
            <p></p><b>Discussion</b><p>For a discussion of when to use options and color management, see <em>Core Image Programming Guide</em>.</p><p></p>This is a constant for "Context Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIContext.kCIContextUseSoftwareRenderer">
            <summary>
                <p>A key for enabling software renderer use.  If the associated <c>double</c> object  is <c>true</c>, then the software renderer is required. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIContextUseSoftwareRenderer</c> constant.
            </summary>
            <remarks>
            Keys in the options dictionary for a <c>CIContext</c> object.
            <p></p><b>Discussion</b><p>For a discussion of when to use options and color management, see <em>Core Image Programming Guide</em>.</p><p></p>This is a constant for "Context Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIContext.kCIContextWorkingColorSpace">
            <summary>
                <p>A key for the color space to use for image operations. By default, Core Image assumes that processing nodes are 128 bits-per-pixel, linear light, premultiplied RGBA floating-point values that use the GenericRGB color space. You can specify a different working color space by providing a Quartz 2D CGColorSpace object  (<c>CGColorSpaceRef</c>). Note that the working color space must be RGB-based. If you have YUV data as input (or other data that is not RGB-based), you can use ColorSync functions to convert to the working color space. (See <em>Quartz 2D Programming Guide</em> for information on creating and using CGColorSpace objects.)</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIContextWorkingColorSpace</c> constant.
            </summary>
            <remarks>
            Keys in the options dictionary for a <c>CIContext</c> object.
            <p></p><b>Discussion</b><p>For a discussion of when to use options and color management, see <em>Core Image Programming Guide</em>.</p><p></p>This is a constant for "Context Options".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_contextWithEAGLContext_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_contextWithEAGLContext_options_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_contextWithOptions_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_createCGImage_fromRect_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_createCGImage_fromRect_format_colorSpace_(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_drawImage_atPoint_fromRect_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_drawImage_inRect_fromRect_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_inputImageMaximumSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_outputImageMaximumSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_render_toCVPixelBuffer_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.UP_CIContext_render_toCVPixelBuffer_bounds_colorSpace_(System.String,System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIContext" /> class.
            <br></br>Equivalent to the native <c>[[CIContext alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIContext.ClassExists">
            <summary>
            Returns whether the native CIContext class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.Context(U3DXT.iOS.Native.OpenGLES.EAGLContext)">
            <summary>
            Creates a Core Image context from an EAGL context.
            <br></br>Equivalent to the native <c>contextWithEAGLContext:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>eaglContext</em>
                <p>The EAGL context to render to.</p>
                <b>Return Value</b>
                <p>A Core Image context that targets OpenGL ES.</p>
                <b>Discussion</b>
                <p>The OpenGL ES context must support OpenGL ES 2.0. All drawing performed using the <c>drawImage:atPoint:fromRect:</c> method or the <c>drawImage:inRect:fromRect:</c> method is rendered directly into the context.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="eaglContext">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.Context(U3DXT.iOS.Native.OpenGLES.EAGLContext,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates a Core Image context from an EAGL context using the specified options.
            <br></br>Equivalent to the native <c>contextWithEAGLContext:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>eaglContext</em>
                <p>The EAGL context to render to.</p>
                <em>options</em>
                <p>A dictionary that contains options for creating a <c>CIContext</c> object. You can pass any of the keys defined in <c>“Context Options”</c> along with the appropriate value.</p>
                <b>Return Value</b>
                <p>A Core Image context that targets OpenGL ES.</p>
                <b>Discussion</b>
                <p>The OpenGL ES context must support OpenGL ES 2.0. All drawing performed using the <c>drawImage:atPoint:fromRect:</c> method or the <c>drawImage:inRect:fromRect:</c> method is rendered directly into the context.</p>
                <p>You should use this method if you want to get real-time performance on a device. One of the advantages of using an EAGL context is that the rendered image stays on the GPU and does not get copied to CPU memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="eaglContext">
            </param>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.Context(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates a CPU-based Core Image context using the specified options.
            <br></br>Equivalent to the native <c>contextWithOptions:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>dict</em>
                <p>A dictionary that contains options for the context. You can pass any of the keys defined in <c>“Context Options”</c> along with the appropriate value.</p>
                <b>Return Value</b>
                <p>A Core Image context.</p>
                <b>Discussion</b>
                <p>You can create a CPU-based context by providing the key <c>kCIContextUseSoftwareRenderer</c>. A CPU-based context supports larger input and output images than a GPU-based context. It also allows your app to perform processing in the background, such as when saving the rendered output to the Photo Library.</p>
                <p>GPU rendering is faster than CPU rendering, but the resulting image is not displayed on the device until after is it copied to CPU memory and converted to another image type, such as a <c>UIImage</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ contextWithEAGLContext:</c>
                    </li>
                    <li>
                        <c>+ contextWithEAGLContext:options:</c>
                    </li>
                </ul>
            </remarks>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.CreateCGImage(U3DXT.iOS.Native.CoreImage.CIImage,UnityEngine.Rect)">
            <summary>
            Creates a Quartz 2D image from a region of a Core Image image object.
            <br></br>Equivalent to the native <c>createCGImage:fromRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>im</em>
                <p>A Core Image image object.</p>
                <em>r</em>
                <p>The region of the image to render.</p>
                <b>Return Value</b>
                <p>A Quartz 2D image. You are responsible for releasing the returned image when you no longer need it.</p>
                <b>Discussion</b>
                <p>Renders a region of an image into a temporary buffer using the context, then creates and returns a Quartz 2D image with the results.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>createCGImage:fromRect:format:colorSpace:</c>
                    </li>
                </ul>
            </remarks>
            <param name="im">
            </param>
            <param name="r">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.CreateCGImage(U3DXT.iOS.Native.CoreImage.CIImage,UnityEngine.Rect,System.Int32,U3DXT.iOS.Native.CoreGraphics.CGColorSpace)">
            <summary>
            Creates a Quartz 2D image from a region of a Core Image image object.
            <br></br>Equivalent to the native <c>createCGImage:fromRect:format:colorSpace:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>im</em>
                <p>A Core Image image object.</p>
                <em>r</em>
                <p>The region of the image to render.</p>
                <em>f</em>
                <p>The format of the image.</p>
                <em>cs</em>
                <p>The color space of the image.</p>
                <b>Return Value</b>
                <p>A Quartz 2D image. You are responsible for releasing the returned image when you no longer need it.</p>
                <b>Discussion</b>
                <p>Renders a region of an image into a temporary buffer using the context, then creates and returns a Quartz 2D image with the results.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>createCGImage:fromRect:</c>
                    </li>
                </ul>
            </remarks>
            <param name="im">
            </param>
            <param name="r">
            </param>
            <param name="f">
            </param>
            <param name="cs">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.DrawImage(U3DXT.iOS.Native.CoreImage.CIImage,UnityEngine.Vector2,UnityEngine.Rect)">
            <summary>
            Renders a region of an image to a point in the context destination. ( Deprecated in iOS 6.0.  Instead use <c>drawImage:inRect:fromRect:</c>.)
            <br></br>Equivalent to the native <c>drawImage:atPoint:fromRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>im</em>
                <p>A Core Image image object.</p>
                <em>p</em>
                <p>The point in the context destination to draw to.</p>
                <em>src</em>
                <p>The region of the image to draw.</p>
                <b>Discussion</b>
                <p>This method because it is ambiguous as to the units of the dimensions and won’t work as expected in a high-resolution environment which is why you should use <c>drawImage:inRect:fromRect:</c> instead. </p>
                <p>On iOS platforms, this method draws the image onto a render buffer for the OpenGL ES context. Use this method only if the <c>CIContext</c> object is created with <c>contextWithEAGLContext:</c>, and hence, you are rendering to a CAEAGLLayer.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                    <li>Deprecated in iOS 6.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– drawImage:inRect:fromRect:</c>
                    </li>
                </ul>
            </remarks>
            <param name="im">
            </param>
            <param name="p">
            </param>
            <param name="src">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.DrawImage(U3DXT.iOS.Native.CoreImage.CIImage,UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            Renders a region of an image to a rectangle in the context destination.
            <br></br>Equivalent to the native <c>drawImage:inRect:fromRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>im</em>
                <p>A <c>CIImage</c> object.</p>
                <em>dest</em>
                <p>The rectangle in the context destination to draw into. The image is scaled to fill the destination rectangle.</p>
                <em>src</em>
                <p>The subregion of the image that you want to draw into the context, with the origin and target size defined by the <c>dest</c> parameter. This rectangle is always in pixel dimensions.</p>
                <b>Discussion</b>
                <p>On iOS, this method draws the <c>CIImage</c> object into a renderbuffer for the OpenGL ES context. Use this method only if the <c>CIContext</c> object is created with <c>contextWithEAGLContext:</c>  and if you are rendering to a CAEAGLayer.</p>
                <p>On OS X, you need to be aware of whether the <c>CIContext</c> object is created with a <c>CGContextRef</c> or a <c>CGLContext</c> object. If you create the <c>CIContext</c> object with a <c>CGContextRef</c>, the dimensions of the destination rectangle are in points. If you create the <c>CIContext</c> object with a <c>CGLContext</c> object, the dimensions are in pixels.</p>
                <p>On iOS 5, this method is synchronous. On iOS 6, this method is asynchronous. For apps linked on iOS 5, this method will continue to be synchronous.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="im">
            </param>
            <param name="dest">
            </param>
            <param name="src">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.InputImageMaximumSize">
            <summary>
            Returns the maximum size allowed for any image rendered into the context.
            <br></br>Equivalent to the native <c>inputImageMaximumSize</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Some contexts limit the maximum size of an image that can be rendered into them. For example, the maximum size might reflect a limitation in the underlying graphics hardware.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.OutputImageMaximumSize">
            <summary>
            Returns the maximum size allowed for any image created by the context.
            <br></br>Equivalent to the native <c>outputImageMaximumSize</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Some contexts limit the maximum size of an image that can be created by them. For example, the maximum size might reflect a limitation in the underlying graphics hardware.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.Render(U3DXT.iOS.Native.CoreImage.CIImage,U3DXT.iOS.Native.CoreVideo.CVPixelBuffer)">
            <summary>
            Renders an image into a pixel buffer.
            <br></br>Equivalent to the native <c>render:toCVPixelBuffer:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>A Core Image image object.</p>
                <em>buffer</em>
                <p>The destination pixel buffer.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="buffer">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIContext.Render(U3DXT.iOS.Native.CoreImage.CIImage,U3DXT.iOS.Native.CoreVideo.CVPixelBuffer,UnityEngine.Rect,U3DXT.iOS.Native.CoreGraphics.CGColorSpace)">
            <summary>
            Renders a region of an image into a pixel buffer.
            <br></br>Equivalent to the native <c>render:toCVPixelBuffer:bounds:colorSpace:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>A Core Image image object.</p>
                <em>buffer</em>
                <p>The destination pixel buffer.</p>
                <em>r</em>
                <p>The rectangle in the destination pixel buffer to draw into.</p>
                <em>cs</em>
                <p>The color space of the destination pixel buffer.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="buffer">
            </param>
            <param name="r">
            </param>
            <param name="cs">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIDetector">
            <summary>
            A <c>CIDetector</c> object uses image processing to look for features (i.e., faces) in a picture. You might also want to use the <c>CIFaceFeature</c> class, which can find eye and mouth positions in faces that are detected with <c>CIDetector</c>.
            </summary>
            <remarks>
                <p>This class can maintain many state variables that can impact performance. So for best performance, reuse <c>CIDetector</c> instances instead of creating new ones.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.AccuracyHigh">
            <summary>
                <p>Indicates that the detector should choose techniques that are higher in accuracy, even if it requires more processing time.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorAccuracyHigh</c> constant.
            </summary>
            <remarks>
            Value options used to specify the desired accuracy of the detector.
            <p></p><p></p>This is a constant for "Detector Accuracy Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.AccuracyLow">
            <summary>
                <p>Indicates that the detector should choose techniques that are lower in accuracy, but can be processed more quickly.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorAccuracyLow</c> constant.
            </summary>
            <remarks>
            Value options used to specify the desired accuracy of the detector.
            <p></p><p></p>This is a constant for "Detector Accuracy Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.Accuracy">
            <summary>
                <p>A key used to specify the desired accuracy for the detector.</p>
                <p>The value associated with the key should be one of the values found in <c>“Detector Accuracy Options”</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorAccuracy</c> constant.
            </summary>
            <remarks>
            Keys used in the options dictionary to configure a detector.
            <p></p><p></p>This is a constant for "Detector Configuration Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.Tracking">
            <summary>
                <p>A key used to enable or disable face tracking for the detector. Use this option when you want to track faces across frames in a video. </p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorTracking</c> constant.
            </summary>
            <remarks>
            Keys used in the options dictionary to configure a detector.
            <p></p><p></p>This is a constant for "Detector Configuration Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.MinFeatureSize">
            <summary>
                <p>A key used to specify the minimum size that the  detector will recognize as a feature. </p>
                <p>The value for this key is an <c>double</c> object ranging from 0.0 through 1.0 that represents a fraction of the minor dimension of the image.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorMinFeatureSize</c> constant.
            </summary>
            <remarks>
            Keys used in the options dictionary to configure a detector.
            <p></p><p></p>This is a constant for "Detector Configuration Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.TypeFace">
            <summary>
                <p>A detector that searches for faces in a photograph.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorTypeFace</c> constant.
            </summary>
            <remarks>
            Strings used to declare the detector for which you are interested.
            <p></p><p></p>This is a constant for "Detector Types".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.ImageOrientation">
            <summary>
                <p>An option for the display orientation of the image whose features you want to detect.</p>
                <p>The value of this key is an <c>double</c> object whose value is an integer between <c>1</c> and <c>8</c>. The TIFF and EXIF specifications define these values to indicate where the pixel coordinate origin (0,0) of the image should appear when it is displayed. The default value is <c>1</c>, indicating that the origin is in the top left corner of the image. For further details, see <c>kCGImagePropertyOrientation</c>.</p>
                <p>Core Image only detects faces whose orientation matches that of the image. You should provide a value for this key if you want to detect faces in a different orientation.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorImageOrientation</c> constant.
            </summary>
            <remarks>
            Keys used in the options dictionary for <c>featuresInImage:options:</c>.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Feature Detection Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.Smile">
            <summary>
                <p>An option for whether Core Image will perform additional processing to recognize smiles in detected faces.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorSmile</c> constant.
            </summary>
            <remarks>
            Keys used in the options dictionary for <c>featuresInImage:options:</c>.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Feature Detection Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIDetector.EyeBlink">
            <summary>
                <p>An option for whether Core Image will perform additional processing to recognize closed eyes in detected faces.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIDetectorEyeBlink</c> constant.
            </summary>
            <remarks>
            Keys used in the options dictionary for <c>featuresInImage:options:</c>.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Feature Detection Keys".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.UP_CIDetector_detectorOfType_context_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.UP_CIDetector_featuresInImage_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.UP_CIDetector_featuresInImage_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIDetector" /> class.
            <br></br>Equivalent to the native <c>[[CIDetector alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIDetector.ClassExists">
            <summary>
            Returns whether the native CIDetector class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.DetectorOfType(System.String,U3DXT.iOS.Native.CoreImage.CIContext,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates and returns a configured detector.
            <br></br>Equivalent to the native <c>detectorOfType:context:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>type</em>
                <p>A string indicating the kind of detector you are interested in. See <c>“Detector Types”</c>.</p>
                <em>context</em>
                <p>A Core Image context that the detector can use when analyzing an image.</p>
                <em>options</em>
                <p>A dictionary containing details on how you want the detector to be configured. See <c>“Detector Configuration Keys”</c>.</p>
                <b>Return Value</b>
                <p>A configured detector.</p>
                <b>Discussion</b>
                <p>A <c>CIDetector</c> object can potentially create and hold a significant amount of resources. Where possible, reuse the same <c>CIDetector</c> instance. Also, when processing <c>CIImages</c> with a detector object, your application performs better if the <c>CIContext</c> used to initialize the detector is the same context used to process the <c>CIImage</c> objects it will process.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="type">
            </param>
            <param name="context">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.FeaturesInImage(U3DXT.iOS.Native.CoreImage.CIImage)">
            <summary>
            Searches for features in an image.
            <br></br>Equivalent to the native <c>featuresInImage:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image you want to examine.</p>
                <b>Return Value</b>
                <p>An array of <c>CIFeature</c> objects. Each object represents a feature detected in the image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIDetector.FeaturesInImage(U3DXT.iOS.Native.CoreImage.CIImage,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Searches for features in an image based on the specified image orientation.
            <br></br>Equivalent to the native <c>featuresInImage:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image you want to examine.</p>
                <em>options</em>
                <p>A dictionary that specifies face detection options. See <c>“Feature Detection Keys”</c> for allowed keys and their possible values.</p>
                <b>Return Value</b>
                <p>An array of <c>CIFeature</c> objects. Each object represents a feature detected in the image.</p>
                <b>Discussion</b>
                <p>The options dictionary should contain a value for the key <c>CIDetectorImageOrientation</c>, and may contain other values specifying optional face-recognition features.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIFaceFeature">
            <summary>
            A <c>CIFaceFeature</c> object describes a face detected in a still or video image. Its properties provide information about the face’s eyes and mouth. A face object in a video can also have properties that track its location over time—tracking ID and frame count.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_bounds(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_faceAngle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_hasFaceAngle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_hasLeftEyePosition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_hasMouthPosition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_hasRightEyePosition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_hasSmile(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_hasTrackingFrameCount(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_hasTrackingID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_leftEyeClosed(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_leftEyePosition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_mouthPosition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_rightEyeClosed(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_rightEyePosition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_trackingFrameCount(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.UP_CIFaceFeature_get_trackingID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIFaceFeature" /> class.
            <br></br>Equivalent to the native <c>[[CIFaceFeature alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFaceFeature.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.ClassExists">
            <summary>
            Returns whether the native CIFaceFeature class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.bounds">
            <summary>
            A rectangle indicating the position and dimensions of the face in image coordinates. (read-only)
            <br></br>Equivalent to the native <c>bounds</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.faceAngle">
            <summary>
            The rotation of the face. (read-only)
            <br></br>Equivalent to the native <c>faceAngle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Rotation is measured counterclockwise in radians, with zero indicating that a line drawn between the eyes is horizontal relative to the image orientation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.hasFaceAngle">
            <summary>
            A Boolean value that indicates whether information about face rotation is available. (read-only)
            <br></br>Equivalent to the native <c>hasFaceAngle</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.hasLeftEyePosition">
            <summary>
            A Boolean value that indicates whether the detector found the face’s left eye. (read-only)
            <br></br>Equivalent to the native <c>hasLeftEyePosition</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.hasMouthPosition">
            <summary>
            A Boolean value that indicates whether the detector found the face’s mouth. (read-only)
            <br></br>Equivalent to the native <c>hasMouthPosition</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.hasRightEyePosition">
            <summary>
            A Boolean value that indicates whether the detector found the face’s right eye. (read-only)
            <br></br>Equivalent to the native <c>hasRightEyePosition</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.hasSmile">
            <summary>
            A Boolean value that indicates whether a smile is detected in the face. (read-only)
            <br></br>Equivalent to the native <c>hasSmile</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For smiles to be detected, the key <c>CIDetectorSmile</c> must be present with a value of <c>true</c> in the dictionary passed to a detector’s <c>featuresInImage:options:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.hasTrackingFrameCount">
            <summary>
            A Boolean value that indicates the face object has a tracking frame count. (read-only)
            <br></br>Equivalent to the native <c>hasTrackingFrameCount</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.hasTrackingID">
            <summary>
            A Boolean value that indicates whether the face object has a tracking ID. (read-only)
            <br></br>Equivalent to the native <c>hasTrackingID</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.leftEyeClosed">
            <summary>
            A Boolean value that indicates whether the a closed left eye is detected in the face. (read-only)
            <br></br>Equivalent to the native <c>leftEyeClosed</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>“Left” is relative to the original (non-mirrored) image orientation, not to the owner of the eye.</p>
                <p>For closed eyes to be detected, the key <c>CIDetectorEyeBlink</c> must be present with a value of <c>true</c> in the dictionary passed to a detector’s <c>featuresInImage:options:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.leftEyePosition">
            <summary>
            The coordinates of the left eye, in image coordinates. (read-only)
            <br></br>Equivalent to the native <c>leftEyePosition</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.mouthPosition">
            <summary>
            The coordinates of the mouth eye, in image coordinates (read-only)
            <br></br>Equivalent to the native <c>mouthPosition</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.rightEyeClosed">
            <summary>
            A Boolean value that indicates whether the a closed left eye is detected in the face. (read-only)
            <br></br>Equivalent to the native <c>rightEyeClosed</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>“Right” is relative to the original (non-mirrored) image orientation, not to the owner of the eye.</p>
                <p>For closed eyes to be detected, the key <c>CIDetectorEyeBlink</c> must be present with a value of <c>true</c> in the dictionary passed to a detector’s <c>featuresInImage:options:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.rightEyePosition">
            <summary>
            The coordinates of the right eye, in image coordinates (read-only)
            <br></br>Equivalent to the native <c>rightEyePosition</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.trackingFrameCount">
            <summary>
            The tracking frame count of the face. (read-only)
            <br></br>Equivalent to the native <c>trackingFrameCount</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFaceFeature.trackingID">
            <summary>
            The tracking identifier of the face object. (read-only)
            <br></br>Equivalent to the native <c>trackingID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Core Image provides a tracking identifier for faces it detects in a video stream, which you can use to identify when a <c>CIFaceFeature</c> objects detected in one video frame is the same face detected in a previous video frame.</p>
                <p>This identifier persists only as long as a face is in the frame and is not associated with a specific face. In other words, if a face moves out of the video frame and comes back into the frame later, another ID is assigned. (Core Image detects faces, but does not recognize specific faces.)</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIFeature">
            <summary>
            A <c>CIFeature</c> object represents a portion of an image that a detector believes matches its criteria. Subclasses of <c>CIFeature</c> typically hold additional information specific to the detector that discovered the feature.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFeature.TypeFace">
            <summary>
                <p>The discovered feature is a person’s face.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CIFeatureTypeFace</c> constant.
            </summary>
            <remarks>
            Strings that define specific kinds of findable features.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Feature Types".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFeature.UP_CIFeature_get_bounds(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFeature.UP_CIFeature_get_type(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFeature.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFeature.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFeature.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIFeature" /> class.
            <br></br>Equivalent to the native <c>[[CIFeature alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFeature.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFeature.ClassExists">
            <summary>
            Returns whether the native CIFeature class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFeature.bounds">
            <summary>
            The rectangle that holds discovered feature. (read-only)
            <br></br>Equivalent to the native <c>bounds</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The rectangle is in the coordinate system of the image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFeature.type">
            <summary>
            The type of feature that was discovered. (read-only)
            <br></br>Equivalent to the native <c>type</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIFilter">
            <summary>
            The <c>CIFilter</c> class produces a <c>CIImage</c> object as output. Typically, a filter takes one or more images as input. Some filters, however, generate an image based on other types of input parameters. The parameters of a <c>CIFilter</c> object are set and retrieved through the use of key-value pairs.
            </summary>
            <remarks>
                <p>You use the <c>CIFilter</c> object in conjunction with other Core Image classes, such as  <c>CIImage</c>, <c>CIContext</c>, and <c>CIColor</c>, to take advantage of the built-in Core Image filters when processing images, creating filter generators, or writing custom filters.</p>
                <p>
                    <c>CIFilter</c> objects, are not mutable. A <c>CIFilter</c> object cannot be shared safely among threads.  If you app is multithreaded, each thread must create its own <c>CIFilter</c> object. Otherwise, your app could behave unexpectedly.</p>
                <p>To get a quick overview of how to set up and use Core Image filters, see <em>Core Image Programming Guide</em>. </p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	You can subclass <c>CIFilter</c> in order to create custom filter effects:</p>
                <ul class="ul">
                    <li class="li">
                        <p>By chaining together two or more built-in Core Image filters (iOS and OS X)</p>
                    </li>
                    <li class="li">
                        <p>By using an image-processing kernel that you write (OS X only)</p>
                    </li>
                </ul>
                <p class="spaceabove">	See <em>Core Image Programming Guide</em> for details.</p>
                <b>Methods to Override</b>
                <p class="spaceabove">Regardless of whether your subclass provides its effect by chaining filters or implementing its own kernel, you should:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Declare any input parameters as properties whose names are prefixed with <c>input</c>, such as <c>inputImage</c>.</p>
                    </li>
                    <li class="li">
                        <p>Override the <c>setDefaults</c> methods to provide default values for any input parameters you’ve declared.</p>
                    </li>
                    <li class="li">
                        <p>Implement an <c>outputImage</c> method to create a new <c>CIImage</c> with your filter’s effect.</p>
                    </li>
                </ul>
                <b>Special Considerations</b>
                <p class="spaceabove">The <c>CIFilter</c> class automatically manages input parameters when archiving, copying, and deallocating filters. For this reason, your subclass must obey the following guidelines to ensure proper behavior:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Store input parameters in instance variables whose names are prefixed with <c>input</c>.</p>
                        <p>Don’t use auto-synthesized instance variables, because their names are automatically prefixed with an underscore. Instead, synthesize the property manually. For example:</p>
                        <p>
                            <c>@synthesize inputMyParameter;</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>If using manual reference counting, don’t release input parameter instance variables in your <c>dealloc</c> method implementation. The <c>dealloc</c> implementation in the <c>CIFilter</c> class uses  key-value coding  to automatically sets the values of all input parameters to <c>null</c>.</p>
                    </li>
                </ul>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeColor">
            <summary>
                <p>A Core Image color (<c>CIColor</c> object) that specifies red, green, and blue component values.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeColor</c> constant.
            </summary>
            <remarks>
            Color types.
            <p></p><p></p>This is a constant for "Color Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeTime">
            <summary>
                <p>A parametric time for transitions, specified as a floating-point value in the range of <c>0.0</c> to <c>1.0</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeTime</c> constant.
            </summary>
            <remarks>
            Numeric data types.
            <p></p><p></p>This is a constant for "Data Type Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeDistance">
            <summary>
                <p>A distance.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeDistance</c> constant.
            </summary>
            <remarks>
            Numeric data types.
            <p></p><p></p>This is a constant for "Data Type Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeScalar">
            <summary>
                <p>A scalar value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeScalar</c> constant.
            </summary>
            <remarks>
            Numeric data types.
            <p></p><p></p>This is a constant for "Data Type Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeCount">
            <summary>
                <p>A positive integer value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeCount</c> constant.
            </summary>
            <remarks>
            Numeric data types.
            <p></p><p></p>This is a constant for "Data Type Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeInteger">
            <summary>
                <p>An integer value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeInteger</c> constant.
            </summary>
            <remarks>
            Numeric data types.
            <p></p><p></p>This is a constant for "Data Type Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeBoolean">
            <summary>
                <p>A Boolean value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeBoolean</c> constant.
            </summary>
            <remarks>
            Numeric data types.
            <p></p><p></p>This is a constant for "Data Type Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeAngle">
            <summary>
                <p>An angle.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeAngle</c> constant.
            </summary>
            <remarks>
            Numeric data types.
            <p></p><p></p>This is a constant for "Data Type Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeIdentity">
            <summary>
                <p>If supplied as a value for a parameter, the parameter has no effect on the input image.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeIdentity</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeFilterCategories">
            <summary>
                <p>An array of filter category keys that specifies all the categories in which the filter is a member.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeFilterCategories</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeClass">
            <summary>
                <p>The class name of the filter.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeClass</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeSliderMin">
            <summary>
                <p>The minimum value, specified as a floating-point value, to use for a slider that controls input values for a filter parameter.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeSliderMin</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeDefault">
            <summary>
                <p>The default value, specified as a floating-point value, for a filter parameter.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeDefault</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeName">
            <summary>
                <p>The name of the attribute.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeName</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeDisplayName">
            <summary>
                <p>The localized display name of the attribute.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeDisplayName</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeType">
            <summary>
                <p>One of the attribute types described in  “Data Type Attributes.”  </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeType</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeMax">
            <summary>
                <p>The maximum value for a filter parameter, specified as a floating-point value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeMax</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeFilterDisplayName">
            <summary>
                <p>The localized version of the filter name that is displayed in the user interface.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeFilterDisplayName</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeFilterName">
            <summary>
                <p>The filter name, specified as an <c>String</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeFilterName</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeMin">
            <summary>
                <p>The minimum value for a filter parameter, specified as a floating-point value. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeMin</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeSliderMax">
            <summary>
                <p>The maximum value, specified as a floating-point value, to use for a slider that controls input values for a filter parameter.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeSliderMax</c> constant.
            </summary>
            <remarks>
            Attributes for a filter and its parameters.
            <p></p><b>Discussion</b><p>Attribute keys are used for the attribute dictionary of a filter.  Most entries in the attribute dictionary are optional. The attribute <c>CIAttributeFilterName</c> is mandatory. For a parameter, the attribute <c>kCIAttributeClass</c> is mandatory because it specifies the class name of the filter.</p><p>A parameter of type <c>double</c> does not necessarily need the attributes <c>kCIAttributeMin</c> and <c>kCIAttributeMax</c>. These attributes are not present when the parameter has no upper or lower bounds. For example, the Gaussian blur filter has a radius parameter with a minimum of <c>0</c> but no maximum value to indicate that all nonnegative values are valid.</p><p></p>This is a constant for "Filter Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryTransition">
            <summary>
                <p>A filter  that provides a bridge between two or more images by applying a motion effect that defines how the pixels of a source image yield to that of the destination image.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryTransition</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryStylize">
            <summary>
                <p>A filter  that makes a photographic image look as if it was painted or sketched. These filters are typically used alone or in combination with other filters to achieve artistic effects.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryStylize</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryHalftoneEffect">
            <summary>
                <p>A filter  that simulates a variety of halftone screens, to mimic the halftone process used in print media. The output of these filters has the familiar “newspaper” look of the various dot patterns. Filters are typically  named after the pattern created by the virtual halftone screen, such as circular screen or hatched screen.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryHalftoneEffect</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryDistortionEffect">
            <summary>
                <p>A filter that reshapes an image by altering its geometry to create a 3D effect. Using distortion filters, you can displace portions of an image, apply lens effects, make a bulge in an image, and perform other operation to achieve an artistic effect.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryDistortionEffect</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryVideo">
            <summary>
                <p>A filter that works on video images.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryVideo</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryReduction">
            <summary>
                <p>A filter that reduces image data. These filters are used to solve image analysis problems.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryReduction</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryBuiltIn">
            <summary>
                <p>A filter provided by Core Image. This distinguishes built-in filters from plug-in filters.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryBuiltIn</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryColorAdjustment">
            <summary>
                <p>A filter  that changes color values. Color adjustment filters are used to eliminate color casts, adjust hue, and correct brightness and contrast. Color adjustment filters do not perform color management; ColorSync performs color management. You can use Quartz 2D to specify the color space associated with an image. For more information, see <em><!--a target="_self" -->Color Management Overview<!--/a--></em> and <em>Quartz 2D Programming Guide</em>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryColorAdjustment</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryGenerator">
            <summary>
                <p>A filter that generates a pattern, such as a solid color, a checkerboard, or a star shine. The generated output is typically used as input to another filter.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryGenerator</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryCompositeOperation">
            <summary>
                <p>A filter  operates on two image sources, using the color values of one image to operate on the other. Composite filters perform computations such as computing maximum values, minimum values, and multiplying values between input images. You can use compositing filters to add effects to an image, crop an image, and achieve a variety of other effects.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryCompositeOperation</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryColorEffect">
            <summary>
                <p>A filter  that modifies the color of an image to achieve an artistic effect. Examples of color effect filters include filters that change a color image to a sepia image or a monochrome image or that produces such effects as posterizing.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryColorEffect</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryGradient">
            <summary>
                <p>A filter that generates a fill whose color varies smoothly. Exactly how color varies depends on the type of gradient—linear, radial, or Gaussian.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryGradient</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryTileEffect">
            <summary>
                <p>A filter that typically applies an effect to an image and then create smaller versions of the image (tiles), which are then laid out to create a pattern that’s infinite in extent.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryTileEffect</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryGeometryAdjustment">
            <summary>
                <p>A filter  that changes the geometry of an image. Some of these filters are used to warp an image to achieve an artistic effects, but these filters can also be used to correct problems in the source image. For example, you can apply an affine transform to straighten an image that is rotated with respect to the horizon.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryGeometryAdjustment</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryStillImage">
            <summary>
                <p>A filter  that works on still images.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryStillImage</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryBlur">
            <summary>
                <p>A filter  that softens images, decreasing the contrast  between the edges in an image. Examples of blur filters are Gaussian blur and zoom blur.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryBlur</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategorySharpen">
            <summary>
                <p>A filter  that sharpens images, increasing the contrast between the edges in an image. Examples of sharpen filters are unsharp mask and sharpen luminance.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategorySharpen</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryHighDynamicRange">
            <summary>
                <p>A filter that works on high dynamic range pixels.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryHighDynamicRange</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryNonSquarePixels">
            <summary>
                <p>A filter that works on non-square pixels.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryNonSquarePixels</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCICategoryInterlaced">
            <summary>
                <p>A filter that works on interlaced images.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCICategoryInterlaced</c> constant.
            </summary>
            <remarks>
            Categories of filters.
            <p></p><p></p>This is a constant for "Filter Category Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputColorKey">
            <summary>
                <p>A key for a <c>CIColor</c> object that specifies a color value.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputColorKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputImageKey">
            <summary>
                <p>A key for the <c>CIImage</c> object to use as an input image. For filters that also use a background image, this key refers to the foreground image.</p>
                <p>Available in OS X v10.5 and later. Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputImageKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputSharpnessKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies the amount of sharpening to apply.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputSharpnessKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIOutputImageKey">
            <summary>
                <p>A key for the <c>CIImage</c> object produced by a filter.</p>
                <p>Available in OS X v10.5 and later. Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIOutputImageKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputTargetImageKey">
            <summary>
                <p>A key for a <c>CIImage</c> object that is the target image for a transition.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputTargetImageKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputMaskImageKey">
            <summary>
                <p>A key for a <c>CIImage</c> object to use as a mask.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputMaskImageKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputCenterKey">
            <summary>
                <p>A key for a <c>CIVector</c> object that specifies the center of the area, as <em>x</em>  and  <em>y</em>- coordinates, to be filtered.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputCenterKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputAngleKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies an angle.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputAngleKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputAspectRatioKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies a ratio.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputAspectRatioKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputTimeKey">
            <summary>
                <p>A key for z scalar value (<c>double</c>) that specifies a time.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputTimeKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputSaturationKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies the amount to adjust the saturation.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputSaturationKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputBrightnessKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies a brightness level. </p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputBrightnessKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputContrastKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies a contrast level.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputContrastKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputScaleKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies  the amount of the effect.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputScaleKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputBackgroundImageKey">
            <summary>
                <p>A key for the <c>CIImage</c> object to use as a background image.</p>
                <p>Available in OS X v10.5 and later. Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputBackgroundImageKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputExtentKey">
            <summary>
                <p>A key for a <c>CIVector</c> object that specifies a rectangle that defines the extent of the effect.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputExtentKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputVersionKey">
            <summary>
                <p>A key for an <c>double</c> object that specifies a version number.</p>
                <p>Not available in OS X. Available in iOS 6.0 and later. </p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputVersionKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputRadiusKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies that specifies the distance from the center of an effect.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputRadiusKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputIntensityKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies an intensity value.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputIntensityKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputWidthKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies the width of the effect.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputWidthKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputTransformKey">
            <summary>
                <p>A key for an <c><!--a target="_self" -->NSAffineTransform<!--/a--></c> object that specifies a transformation to apply.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputTransformKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIInputEVKey">
            <summary>
                <p>A key for a scalar value (<c>double</c>) that specifies how many F-stops brighter or darker the image should be.</p>
                <p>Available in OS X v10.5 and later. Not available in iOS.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIInputEVKey</c> constant.
            </summary>
            <remarks>
            Keys for input parameters to filters.
            <p></p><b>Discussion</b><p>These keys represent some of the most commonly used input parameters. A filter can use other kinds of input parameters.</p><p></p>This is a constant for "Filter Parameter Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeTransform">
            <summary>
                <p>An <c>Matrix4x4</c> is associated with attribute.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeTransform</c> constant.
            </summary>
            <remarks>
            Image Types
            <p></p><p></p>This is a constant for "Image Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeImage">
            <summary>
                <p>A <c>CIImage</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeImage</c> constant.
            </summary>
            <remarks>
            Image Types
            <p></p><p></p>This is a constant for "Image Attribute Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypeOffset">
            <summary>
                <p>An offset. (A 2-element vector type.)</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypeOffset</c> constant.
            </summary>
            <remarks>
            Vector data types.
            <p></p><p></p>This is a constant for "Vector Quantity Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypePosition3">
            <summary>
                <p>A three-dimensional location in the working coordinate space. (A 3-element vector type.)</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypePosition3</c> constant.
            </summary>
            <remarks>
            Vector data types.
            <p></p><p></p>This is a constant for "Vector Quantity Attributes".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIFilter.kCIAttributeTypePosition">
            <summary>
                <p>A two-dimensional location in the working coordinate space. (A 2-element vector type.)</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIAttributeTypePosition</c> constant.
            </summary>
            <remarks>
            Vector data types.
            <p></p><p></p>This is a constant for "Vector Quantity Attributes".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_filterArrayFromSerializedXMP_inputImageExtent_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_filterNamesInCategories_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_filterNamesInCategory_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_filterWithName_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_filterWithName_keysAndValues_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_serializedXMPFromFilters_inputImageExtent_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_get_outputImage(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_attributes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_inputKeys(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_name(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_outputKeys(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.UP_CIFilter_setDefaults(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIFilter" /> class.
            <br></br>Equivalent to the native <c>[[CIFilter alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFilter.ClassExists">
            <summary>
            Returns whether the native CIFilter class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.FilterArrayFromSerializedXMP(U3DXT.iOS.Native.Foundation.NSData,UnityEngine.Rect,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns an array of filter objects de-serialized from XMP data.
            <br></br>Equivalent to the native <c>filterArrayFromSerializedXMP:inputImageExtent:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>xmpData</em>
                <p>The XMP data created previously by calling <c>serializedXMPFromFilters:inputImageExtent:</c>.</p>
                <em>extent</em>
                <p>The extent of the image from which the XMP data was extracted.</p>
                <em>outError</em>
                <p>The address of an <c>NSError</c> object for receiving errors, otherwise <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="xmpData">
            </param>
            <param name="extent">
            </param>
            <param name="outError">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.FilterNamesInCategories(System.Object[])">
            <summary>
            Returns an array of all published filter names that match all the specified categories.
            <br></br>Equivalent to the native <c>filterNamesInCategories:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>categories</em>
                <p>One or more of the filter category keys defined in  “Filter Category Keys.”  Pass <c>null</c> to get all filters in all categories. </p>
                <b>Return Value</b>
                <p>An array that contains all published filter names that match all the categories specified by the <c>categories</c> argument.</p>
                <b>Discussion</b>
                <p>When you pass more than one filter category, this method returns the intersection of the filters in the categories. For example, if you pass the categories <c>kCICategoryBuiltIn</c>  and <c>kCICategoryColorAdjustment</c>, you obtain all the filters that are members of both the built-in and color adjustment categories. But if you pass in <c>kCICategoryGenerator</c> and <c>kCICategoryStylize</c>, you will not get any filters returned to you because there are no filters that are members of both the generator and stylize categories. If you want to obtain all stylize and generator filters, you must call the <c>filterNamesInCategories:</c> method for each category separately and then merge the results.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ filterNamesInCategory:</c>
                    </li>
                </ul>
            </remarks>
            <param name="categories">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.FilterNamesInCategory(System.String)">
            <summary>
            Returns an array of all published filter names in the specified category.
            <br></br>Equivalent to the native <c>filterNamesInCategory:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>category</em>
                <p>A string object that specifies one of the filter categories defined in  “Filter Category Keys.” </p>
                <b>Return Value</b>
                <p>An array that contains all published names of the filter in a category.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ filterNamesInCategories:</c>
                    </li>
                </ul>
            </remarks>
            <param name="category">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.Filter(System.String)">
            <summary>
            Creates a <c>CIFilter</c> object for a specific kind of filter.
            <br></br>Equivalent to the native <c>filterWithName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the filter. You must make sure the name is spelled correctly, otherwise your app will run but not produce any output images. For that reason, you should check for the existence of the filter after calling this method. </p>
                <b>Return Value</b>
                <p>A <c>CIFilter</c> object whose input values are undefined.</p>
                <b>Discussion</b>
                <p>You should call <c>setDefaults</c> after you call this method or set values individually by calling <c>setValue:forKey</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ filterWithName:keysAndValues:</c>
                    </li>
                </ul>
            </remarks>
            <param name="name">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.Filter(System.String,System.Object)">
            <summary>
            Creates a <c>CIFilter</c> object for a specific kind of filter and initializes the input values.
            <br></br>Equivalent to the native <c>filterWithName:keysAndValues:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the filter. You must make sure the name is spelled correctly, otherwise your app will run but not produce any output images. For that reason, you should check for the existence of the filter after calling this method.</p>
                <em>key0,</em>
                <p>A list of key-value pairs to set as input values to the filter. Each key is a constant that specifies the name of the input value to set, and must be followed by a value. You signal the end of the list by passing a <c>null</c> value.</p>
                <b>Return Value</b>
                <p>A <c>CIFilter</c> object whose input values are initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ filterWithName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="key0">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.SerializedXMPFromFilters(System.Object[],UnityEngine.Rect)">
            <summary>
            Serializes filter parameters into XMP form that is suitable for embedding in an image.
            <br></br>Equivalent to the native <c>serializedXMPFromFilters:inputImageExtent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>filters</em>
                <p>The array of filters to serialize. See Discussion for the filters that can be serialized.</p>
                <em>extent</em>
                <p>The extent of the input image to the filter.</p>
                <b>Discussion</b>
                <p>At this time the only filters classes that can be serialized using this method are, CIAffineTransform, CICrop, and the filters returned by the CIImage methods <c>autoAdjustmentFilters</c> and <c>autoAdjustmentFiltersWithOptions:</c>. The parameters of other filter classes will not be serialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="filters">
            </param>
            <param name="extent">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIFilter.outputImage">
            <summary>
            Returns a <c>CIImage</c> object that encapsulates the operations configured in the filter. (read-only)
            <br></br>Equivalent to the native <c>outputImage</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.Attributes">
            <summary>
            Returns a dictionary of key-value pairs that describe the filter.
            <br></br>Equivalent to the native <c>attributes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary that contains a key for each input and output parameter for the filter. Each key is a dictionary that contains all the attributes of an input or output parameter.</p>
                <b>Discussion</b>
                <p>For example, the attributes dictionary for the <c>CIColorControls</c> filter contains the following information:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>CIColorControls:  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>{  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    CIAttributeFilterCategories = (  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CICategoryColorAdjustment,  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CICategoryVideo,  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CICategoryStillImage,  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CICategoryInterlaced,  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CICategoryNonSquarePixels,  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CICategoryBuiltIn  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    );  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    CIAttributeFilterDisplayName = "Color Controls";  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    CIAttributeFilterName = CIColorControls;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    inputBrightness = {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeClass = NSNumber;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeDefault = 0;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeIdentity = 0;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeMin = -1;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeSliderMax = 1;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeSliderMin = -1;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeType = CIAttributeTypeScalar;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    };  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    inputContrast = {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeClass = NSNumber;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeDefault = 1;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeIdentity = 1;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeMin = 0.25;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeSliderMax = 4;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeSliderMin = 0.25;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeType = CIAttributeTypeScalar;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    };  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    inputImage = {CIAttributeClass = CIImage; };  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    inputSaturation = {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeClass = NSNumber;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeDefault = 1;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeIdentity = 1;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeMin = 0;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeSliderMax = 3;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeSliderMin = 0;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        CIAttributeType = CIAttributeTypeScalar;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    };  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    outputImage = {CIAttributeClass = CIImage; };  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.InputKeys">
            <summary>
            Returns an array that contains the names of the input parameters to the filter.
            <br></br>Equivalent to the native <c>inputKeys</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array that contains the names of all input parameters to the filter.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.Name">
            <summary>
            The name of the filter.
            <br></br>Equivalent to the native <c>name</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string that holds the name of the filter.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.OutputKeys">
            <summary>
            Returns an array that contains the names of the output parameters for the filter.
            <br></br>Equivalent to the native <c>outputKeys</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array that contains the names of all output parameters from the filter.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIFilter.SetDefaults">
            <summary>
            Sets all input values for a filter to default values.
            <br></br>Equivalent to the native <c>setDefaults</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Input values whose default values are not defined are left unchanged.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIImage">
            <summary>
            The <c>CIImage</c> class represents an image. Core Image images are immutable. You use <c>CIImage</c> objects in conjunction with other Core Image classes—such as <c>CIFilter</c>, <c>CIContext</c>, <c>CIVector</c>, and <c>CIColor</c>—to take advantage of the built-in Core Image filters when processing images. You can create <c>CIImage</c> objects with data supplied from a variety of sources, including Quartz 2D images, Core Video image buffers (<c>CVImageBufferRef</c>), URL-based objects, and <c>NSData</c> objects.
            </summary>
            <remarks>
                <p>Although a <c>CIImage</c> object has image data associated with it, it is not an image. You can think of a <c>CIImage</c> object as an image “recipe.” A <c>CIImage</c> object has all the information necessary to produce an image, but Core Image doesn’t actually render an image until it is told to do so. This “lazy evaluation” method allows Core Image to operate as efficiently as possible.</p>
                <p>
                    <c>CIContext</c>  and <c>CIImage</c> objects are immutable, which means each can be shared safely among threads. Multiple threads can use the same GPU or CPU <c>CIContext</c> object to render <c>CIImage</c> objects.  However, this is not the case for <c>CIFilter</c> objects, which are mutable. A <c>CIFilter</c> object cannot be shared safely among threads.  If you app is multithreaded, each thread must create its own <c>CIFilter</c> objects. Otherwise, your app could behave unexpectedly.</p>
                <p>Core Image defines methods for creating and initializing images. Additional methods that support drawing and initializing an image with an <c><!--a target="_self" -->NSBitmapImageRep<!--/a--></c> object are defined in <em><!--a target="_self" -->CIImage Additions Reference<!--/a--></em>.</p>
                <p>Core Image also provides autoadjustment methods that analyze an image for common deficiencies and return a set of filters to correct those deficiencies. The filters are preset with values for improving image quality by altering values for skin tones, saturation, contrast, and shadows and for removing red-eye or other artifacts caused by flash. (See <c>“Getting Autoadjustment Filters”</c>.)</p>
                <p>For a discussion of all the methods you can use to create <c>CIImage</c> objects on iOS and OS X, see <em>Core Image Programming Guide</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIImageAutoAdjustRedEye">
            <summary>
                <p>A key used to specify whether to return a red eye filter.</p>
                <p>The value associated with this key is a <c>CFBoolean</c> value. Supply <c>false</c> to indicate not to return a red eye filter. If you don’t specify this option, Core Image assumes its value is <c>true</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIImageAutoAdjustRedEye</c> constant.
            </summary>
            <remarks>
            Constants used as keys in the options dictionary for the <c>autoAdjustmentFiltersWithOptions:</c> method.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Autoadjustment Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIImageAutoAdjustFeatures">
            <summary>
                <p>A key used to specify an array of features that you want to apply enhancement and red eye filters to.</p>
                <p>The associated value is an array of <c>CIFeature</c> objects. If you don’t supply an array, the Core Image searches for features using the <c>CIDetector</c> class.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIImageAutoAdjustFeatures</c> constant.
            </summary>
            <remarks>
            Constants used as keys in the options dictionary for the <c>autoAdjustmentFiltersWithOptions:</c> method.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Autoadjustment Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIImageAutoAdjustEnhance">
            <summary>
                <p>A key used to specify whether to return enhancement filters.</p>
                <p>The value associated with this key is a <c>CFBoolean</c> value. Supply <c>false</c> to indicate not to return enhancement filters. If you don’t specify this option, Core Image assumes its value is <c>true</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIImageAutoAdjustEnhance</c> constant.
            </summary>
            <remarks>
            Constants used as keys in the options dictionary for the <c>autoAdjustmentFiltersWithOptions:</c> method.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Autoadjustment Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIImageColorSpace">
            <summary>
                <p>The key for a color space. The value you supply for this dictionary key must be a <c>CGColorSpaceRef</c> data type. For more information on this data type see <em>CGColorSpace Reference</em>. Typically you use this option when you need to load an elevation, mask, normal vector, or RAW sensor data directly from a file without color correcting it. This constant specifies to override Core Image, which, by default, assumes that data is in GenericRGB.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIImageColorSpace</c> constant.
            </summary>
            <remarks>
            Constants used as keys in the options dictionary when initializing an image.
            <p></p><p></p>This is a constant for "Image Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIImageProperties">
            <summary>
                <p>The key for image metadata properties. If a value for this key isn’t supplied, the image’s <c>colorSpace</c> dictionary are populated automatically by calling <c>CGImageSourceCopyPropertiesAtIndex</c>. To ensure that an image has no metadata properties, set the value of this key to <c>[NSNull null]</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIImageProperties</c> constant.
            </summary>
            <remarks>
            Constants used as keys in the options dictionary when initializing an image.
            <p></p><p></p>This is a constant for "Image Dictionary Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIFormatBGRA8">
            <summary>
                <p>A 32 bit-per-pixel, fixed-point pixel format in which the blue, green, and red color components precede the alpha value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIFormatBGRA8</c> constant.
            </summary>
            <remarks>
            Image data pixel formats.
            <p></p><p></p>This is a constant for "Pixel Formats".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIFormatRGBA8">
            <summary>
                <p>A 32 bit-per-pixel, fixed-point pixel format in which the red, green, and blue color components precede the alpha value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIFormatRGBA8</c> constant.
            </summary>
            <remarks>
            Image data pixel formats.
            <p></p><p></p>This is a constant for "Pixel Formats".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreImage.CIImage.kCIFormatARGB8">
            <summary>
                <p>A 32 bit-per-pixel, fixed-point pixel format in which the alpha value precedes the red, green and blue color components.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCIFormatARGB8</c> constant.
            </summary>
            <remarks>
            Image data pixel formats.
            <p></p><p></p>This is a constant for "Pixel Formats".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.FromTexture2D(UnityEngine.Texture2D,System.Single)">
            <summary>
            Creates and initializes a native CIImage from a Texture2D.
            </summary>
            <returns>The newly created native CIImage.</returns>
            <param name="texture">The input texture.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_emptyImage">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_autoAdjustmentFilters(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_autoAdjustmentFiltersWithOptions_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_extent(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_imageByApplyingTransform_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_imageByCroppingToRect_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithBitmapData_bytesPerRow_size_format_colorSpace_(System.String,System.String,System.UInt32,System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithCGImage_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithCGImage_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithColor_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithContentsOfURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithContentsOfURL_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithCVPixelBuffer_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithCVPixelBuffer_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithData_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithImage_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithImage_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_alloc_initWithTexture_size_flipped_colorSpace_(System.String,System.UInt32,System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_properties(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.UP_CIImage_regionOfInterestForImage_inRect_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIImage" /> class.
            <br></br>Equivalent to the native <c>[[CIImage alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIImage.ClassExists">
            <summary>
            Returns whether the native CIImage class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.EmptyImage">
            <summary>
            Creates and returns an empty image object.
            <br></br>Equivalent to the native <c>emptyImage</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An image object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.AutoAdjustmentFilters">
            <summary>
            Returns all possible automatically selected and configured filters for adjusting the image.
            <br></br>Equivalent to the native <c>autoAdjustmentFilters</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>CIFilter</c> instances preconfigured for correcting deficiencies in the supplied image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.AutoAdjustmentFilters(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Returns a subset of automatically selected and configured filters for adjusting the image.
            <br></br>Equivalent to the native <c>autoAdjustmentFiltersWithOptions:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>options</em>
                <p>You can control which filters are returned by supplying one or more of the keys described in  “Autoadjustment Keys.”  </p>
                <p>The options dictionary can also contain a <c>CIDetectorImageOrientation</c> key. Because some autoadjustment filters rely on face detection, you should specify an image orientation if you want to enable these filters for an image containing face whose orientation does not match that of the image.</p>
                <b>Return Value</b>
                <p>An array of <c>CIFilter</c> instances preconfigured for correcting deficiencies in the supplied image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.Extent">
            <summary>
            Returns a rectangle that specifies the extent of the image.
            <br></br>Equivalent to the native <c>extent</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A rectangle that specifies the extent of the image in working space coordinates.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.ImageByApplyingTransform(UnityEngine.Matrix4x4)">
            <summary>
            Returns a new image that represents the original image after applying an affine transform.
            <br></br>Equivalent to the native <c>imageByApplyingTransform:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>matrix</em>
                <p>An affine transform.</p>
                <b>Return Value</b>
                <p>The transformed image object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– imageByCroppingToRect:</c>
                    </li>
                </ul>
            </remarks>
            <param name="matrix">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.ImageByCroppingToRect(UnityEngine.Rect)">
            <summary>
            Returns a new image that represents the original image after cropping to a rectangle.
            <br></br>Equivalent to the native <c>imageByCroppingToRect:</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An image object cropped to the specified rectangle.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– imageByApplyingTransform:</c>
                    </li>
                </ul>
            </remarks>
            <param name="r">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.Foundation.NSData,System.UInt32,U3DXT.Utils.Size,System.Int32,U3DXT.iOS.Native.CoreGraphics.CGColorSpace)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object with bitmap data.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithBitmapData:bytesPerRow:size:format:colorSpace:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>d</em>
                <p>The bitmap data to use for the image. The data you supply must be premultiplied.</p>
                <em>bpr</em>
                <p>The number of bytes per row.</p>
                <em>size</em>
                <p>The size of the image data.</p>
                <em>f</em>
                <p>A pixel format constant. See <c>“Pixel Formats”</c>.</p>
                <em>c</em>
                <p>The color space that the image is defined in and must be a Quartz 2D color space (<c>CGColorSpaceRef</c>). Pass <c>null</c> for images that don’t contain color data (such as elevation maps, normal vector maps, and sampled function tables).</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ imageWithBitmapData:bytesPerRow:size:format:colorSpace:</c>
                    </li>
                </ul>
            </remarks>
            <param name="d">
            </param>
            <param name="bpr">
            </param>
            <param name="size">
            </param>
            <param name="f">
            </param>
            <param name="c">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.CoreGraphics.CGImage)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object with a Quartz 2D image.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithCGImage:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>A Quartz 2D image (<c>CGImageRef</c>) object. For more information, see <em>Quartz 2D Programming Guide</em> and <em>CGImage Reference</em>.</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithCGImage:options:</c>
                    </li>
                    <li>
                        <c>+ imageWithCGImage:</c>
                    </li>
                </ul>
            </remarks>
            <param name="image">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.CoreGraphics.CGImage,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object with a Quartz 2D image, using the specified options.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithCGImage:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>A Quartz 2D image (<c>CGImageRef</c>) object. For more information, see <em>Quartz 2D Programming Guide</em> and <em>CGImage Reference</em>.</p>
                <em>d</em>
                <p>A dictionary specifying image options. (See <c>“Image Dictionary Keys”</c>.)</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithCGImage:</c>
                    </li>
                    <li>
                        <c>+ imageWithCGImage:options:</c>
                    </li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="d">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.CoreImage.CIColor)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image with the specified color.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithColor:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>color</em>
                <p>A color object.</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ imageWithColor:</c>
                    </li>
                </ul>
            </remarks>
            <param name="color">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object by reading an image from a URL.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithContentsOfURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The location of the image file to read.</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithContentsOfURL:options:</c>
                    </li>
                    <li>
                        <c>+ imageWithContentsOfURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object by reading an image from a URL, using the specified options.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithContentsOfURL:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The location of the image file to read.</p>
                <em>d</em>
                <p>A dictionary specifying image options. (See <c>“Image Dictionary Keys”</c>.)</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithContentsOfURL:</c>
                    </li>
                    <li>
                        <c>+ imageWithContentsOfURL:options:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="d">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.CoreVideo.CVPixelBuffer)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object from the contents of  <c>CVPixelBuffer</c> object.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithCVPixelBuffer:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>buffer</em>
                <p>A  <c>CVPixelBuffer</c> object. </p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithCVPixelBuffer:options:</c>
                    </li>
                    <li>
                        <c>+ imageWithCVPixelBuffer:</c>
                    </li>
                </ul>
            </remarks>
            <param name="buffer">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.CoreVideo.CVPixelBuffer,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object from the contents of  <c>CVPixelBuffer</c> object using the specified options.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithCVPixelBuffer:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>buffer</em>
                <p>A  <c>CVPixelBuffer</c> object. </p>
                <em>dict</em>
                <p>A dictionary that contains options for creating an image object. (See <c>“Image Dictionary Keys”</c>.) The pixel format is supplied by the <c>CVPixelBuffer</c> object.</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithCVPixelBuffer:</c>
                    </li>
                    <li>
                        <c>– initWithCVPixelBuffer:options:</c>
                    </li>
                </ul>
            </remarks>
            <param name="buffer">
            </param>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object with the supplied image data.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithData:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The image data. The data you supply must be premultiplied.</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithData:options:</c>
                    </li>
                    <li>
                        <c>+ imageWithData:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.Foundation.NSData,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object with the supplied image data, using the specified options.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithData:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The image data. The data you supply must be premultiplied.</p>
                <em>d</em>
                <p>A dictionary specifying image options. (See <c>“Image Dictionary Keys”</c>.)</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithData:</c>
                    </li>
                    <li>
                        <c>+ imageWithData:options:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="d">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.UIKit.UIImage)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes a <c>CIImage</c> object with the specified <c>UIImage</c> object.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithImage:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>An image containing the source data. </p>
                <b>Return Value</b>
                <p>The resulting <c>CIImage</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(U3DXT.iOS.Native.UIKit.UIImage,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes a <c>CIImage</c> object with the specified <c>UIImage</c> object, using the specified options.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithImage:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>An image containing the source data. </p>
                <em>options</em>
                <p>A dictionary that contains options for creating an image object. You can supply such options as a pixel format and a color space. See <em>CIImage Class Reference</em>.</p>
                <b>Return Value</b>
                <p>The resulting <c>CIImage</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.#ctor(System.UInt32,U3DXT.Utils.Size,System.Boolean,U3DXT.iOS.Native.CoreGraphics.CGColorSpace)">
            <summary>
            Creates an instance of the native CIImage and initializes the object. Initializes an image object with data supplied by an OpenGL texture.
            <br></br>Equivalent to the native <c>[[CIImage alloc] initWithTexture:size:flipped:colorSpace:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>An OpenGL texture. Because <c>CIImage</c> objects are immutable, the texture  must remain unchanged for the life of the image object. See the discussion for more information.</p>
                <em>size</em>
                <p>The dimensions of the texture.</p>
                <em>flag</em>
                <p>
                    <c>true</c> to have Core Image flip the coordinates of the texture vertically to convert between OpenGL and Core Image coordinate systems.</p>
                <em>cs</em>
                <p>The color space that the image is defined in. This must be a Quartz color space (<c>CGColorSpaceRef</c>). If the <c>colorSpace</c> value is <c>null</c>, the image is not color matched. Pass <c>null</c> for images that don’t contain color data (such as elevation maps, normal vector maps, and sampled function tables).</p>
                <b>Return Value</b>
                <p>The initialized image object or <c>null</c> if the object could not be initialized.</p>
                <b>Discussion</b>
                <p>When using a texture to create a <c>CIImage</c> object, the texture must be valid in the Core Image context (<c>CIContext</c>) that you draw the <c>CIImage</c> object into. This means that one of the following must be true:</p>
                <ul class="ul">
                    <li class="li">
                        <p>The texture must be created using the <c>CGLContext</c> object that the <c>CIContext</c> is based on.</p>
                    </li>
                    <li class="li">
                        <p>The context that the texture was created in must be shared with the <c>CGLContext</c> that the <c>CIContext</c>is based on.</p>
                    </li>
                </ul>
                <p>Note that textures do not have a retain and release mechanism. This means that your application must make sure that the texture exists for the life cycle of the image. When you no longer need the image, you can delete the texture.</p>
                <p>Core Image ignores the texture filtering and wrap modes (<c>GL_TEXTURE_FILTER</c> and <c>GL_TEXTURE_WRAP</c>) that you set through OpenGL. The filter and wrap modes are overridden by what the CISampler object specifies when you apply a filter to the <c>CIImage</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ imageWithTexture:size:flipped:colorSpace:</c>
                    </li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="size">
            </param>
            <param name="flag">
            </param>
            <param name="cs">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.Properties">
            <summary>
            Returns a dictionary containing image metadata.
            <br></br>Equivalent to the native <c>properties</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>Dictionary</c> object containing image metadata.</p>
                <b>Discussion</b>
                <p>If the <c>CIImage</c> object is the output of a filter (or filter chain), this method returns the metadata from the filter’s original input image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIImage.RegionOfInterest(U3DXT.iOS.Native.CoreImage.CIImage,UnityEngine.Rect)">
            <summary>
            Returns the region of interest for the filter chain that generates the image.
            <br></br>Equivalent to the native <c>regionOfInterestForImage:inRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>im</em>
                <p>Another image that is part of the filter chain that generates the image.</p>
                <em>r</em>
                <p>A rectangle in the image’s coordinate space.</p>
                <b>Return Value</b>
                <p>A rectangle in the coordinate space of the input image (the <em>im</em> parameter).</p>
                <b>Discussion</b>
                <p>The region of interest is the rectangle containing pixel data in a source image (the <em>im</em> parameter) necessary to produce a corresponding rectangle in the output image. If the image is not the output of a filter (or of a chain or graph of several <c>CIFilter</c> objects), or the image in the <em>im</em> parameter is not an input to that filter, the rectangle returned is the same as that in the <em>r</em> parameter.</p>
                <p>For example,</p>
                <ul class="ul">
                    <li class="li">
                        <p>If the image is the output of a filter that doubles the size of its input image, the rectangle returned will be half the size of that in the <em>r</em> parameter. (Upscaling causes every pixel in the input image to correspond to multiple pixels in the output image.)</p>
                    </li>
                    <li class="li">
                        <p>If the image is the output of a blur filter, the rectangle returned will be slightly larger than that in the <em>r</em> parameter. (In a blur filter, each pixel in the output image is produced using information from the corresponding pixel and those immediately surrounding it in the input image.)</p>
                    </li>
                </ul>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="im">
            </param>
            <param name="r">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreImage.CIVector">
            <summary>
            The <c>CIVector</c> class is used for coordinate values and direction vectors. You typically use a <c>CIVector</c> object to pass parameter values to Core Image filters. <c>CIVector</c> objects work in conjunction with other Core Image classes, such as <c>CIFilter</c>, <c>CIContext</c>, <c>CIImage</c>, and <c>CIColor</c>, to process images using the Core Image framework.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_CGAffineTransformValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_CGPointValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_CGRectValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_count(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithCGAffineTransform_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithCGPoint_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithCGRect_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithString_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithX_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithX_Y_(System.String,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithX_Y_Z_(System.String,System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_alloc_initWithX_Y_Z_W_(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_stringRepresentation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_valueAtIndex_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_W(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_X(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_Y(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.UP_CIVector_Z(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreImage.CIVector" /> class.
            <br></br>Equivalent to the native <c>[[CIVector alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreImage.CIVector.ClassExists">
            <summary>
            Returns whether the native CIVector class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.CGAffineTransformValue">
            <summary>
            Returns the values stored in the <c>CIVector</c> object as an affine transform.
            <br></br>Equivalent to the native <c>CGAffineTransformValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A transform.</p>
                <b>Discussion</b>
                <p>The first six values in the vector become the values that comprise the affine transform.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.CGPointValue">
            <summary>
            Returns the values stored in the <c>CIVector</c> object as a point.
            <br></br>Equivalent to the native <c>CGPointValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A point.</p>
                <b>Discussion</b>
                <p>The vector’s  X and Y property values become the <c>Vector2</c> structure’s X and Y values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.CGRectValue">
            <summary>
            Returns the values stored in the <c>CIVector</c> object as an rect.
            <br></br>Equivalent to the native <c>CGRectValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A rect.</p>
                <b>Discussion</b>
                <p>The vector’s  X, Y, Z and W property values become the <c>Rect</c> structure’s X, Y, height and width values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.Count">
            <summary>
            Returns the number of items in a vector.
            <br></br>Equivalent to the native <c>count</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of items in the vector.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(UnityEngine.Matrix4x4)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes a vector that is initialized with values provided by a <c>Matrix4x4</c> structure.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithCGAffineTransform:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>r</em>
                <p>A transform.</p>
                <b>Discussion</b>
                <p>The six values that comprise the affine transform fill the first six positions of the resulting <c>CIVector</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="r">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(UnityEngine.Vector2)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes a vector that is initialized with values provided by a <c>Vector2</c> structure.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithCGPoint:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>p</em>
                <p>A point.</p>
                <b>Discussion</b>
                <p>The <c>Vector2</c> structure’s X and Y values are stored in the vector’s X and Y properties.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="p">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes a vector that is initialized with values provided by a <c>Rect</c> structure.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithCGRect:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>r</em>
                <p>A rect.</p>
                <b>Discussion</b>
                <p>The <c>Rect</c> structure’s X, Y, height and width values are stored in the vector’s  X, Y, Z and W properties.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="r">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(System.String)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes a vector with values provided in a string representation.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithString:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>representation</em>
                <p>A string that is in one of the formats returned by the <c>stringRepresentation</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– stringRepresentation</c>
                    </li>
                </ul>
            </remarks>
            <param name="representation">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(System.Single)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes the first position of a vector with the provided values.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithX:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>x</em>
                <p>The initialization value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="x">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(System.Single,System.Single)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes the first two positions of a vector with the provided values.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithX:Y:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>x</em>
                <p>The initialization value for the first position.</p>
                <em>y</em>
                <p>The initialization value for the second position.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="x">
            </param>
            <param name="y">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes the first three positions of a vector with the provided values.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithX:Y:Z:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>x</em>
                <p>The initialization value for the first position.</p>
                <em>y</em>
                <p>The initialization value for the second position.</p>
                <em>z</em>
                <p>The initialization value for the third position.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <param name="z">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the native CIVector and initializes the object. Initializes four positions of a vector with the provided values.
            <br></br>Equivalent to the native <c>[[CIVector alloc] initWithX:Y:Z:W:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>x</em>
                <p>The initialization value for the first position.</p>
                <em>y</em>
                <p>The initialization value for the second position.</p>
                <em>z</em>
                <p>The initialization value for the third position.</p>
                <em>w</em>
                <p>The initialization value for the fourth position.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <param name="z">
            </param>
            <param name="w">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.StringRepresentation">
            <summary>
            Returns a string representation for a vector.
            <br></br>Equivalent to the native <c>stringRepresentation</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string object.</p>
                <b>Discussion</b>
                <p>You convert the string representation returned by this method to a vector by supplying it as a parameter to the <c>vectorWithString:</c> method.</p>
                <p>Some typical string representations for vectors are:</p>
                <p>
                    <c>"[1.0 0.5 0.3]" </c>
                </p>
                <p>which specifies a <c>vec3</c> vector whose components are <c>X = 1.0</c>, <c>Y = 0.5</c>, and <c>Z = 0.3</c></p>
                <p>
                    <c>"[10.0 23.0]</c>
                </p>
                <p>which specifies a <c>vec2</c> vector show components are <c>X = 10.0</c> and <c>Y = 23.0</c></p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ vectorWithString:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.ValueAtIndex(System.UInt32)">
            <summary>
            Returns a value from a specific position in a vector.
            <br></br>Equivalent to the native <c>valueAtIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>index</em>
                <p>The position in the vector of the value that you want to retrieve.</p>
                <b>Return Value</b>
                <p>The value retrieved from the vector or <c>0</c> if the position is undefined.</p>
                <b>Discussion</b>
                <p>The numbering of elements in a vector begins with zero.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="index">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.W">
            <summary>
            Returns the value located in the fourth position in a vector.
            <br></br>Equivalent to the native <c>W</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The value retrieved from the vector.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.X">
            <summary>
            Returns the value located in the first position in a vector.
            <br></br>Equivalent to the native <c>X</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The value retrieved from the vector.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.Y">
            <summary>
            Returns the value located in the second position in a vector.
            <br></br>Equivalent to the native <c>Y</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The value retrieved from the vector.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreImage.CIVector.Z">
            <summary>
            Returns the value located in the third position in a vector.
            <br></br>Equivalent to the native <c>Z</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The value retrieved from the vector.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreVideo.CVBuffer">
            <summary>
            A reference to a Core Video buffer.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>CVBuffer </c>objects represent an abstract type from which all Core Video buffers derive.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreVideo.CVBuffer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreVideo.CVBuffer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreVideo.CVImageBuffer">
            <summary>
            A reference to a Core Video image buffer.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>An image buffer is an abstract type representing Core Video buffers that hold images. In Core Video, pixel buffers, OpenGL buffers, and OpenGL textures all derive from the image buffer type. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreVideo.CVImageBuffer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreVideo.CVImageBuffer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreVideo.CVPixelBuffer">
            <summary>
            A reference to a Core Video pixel buffer object.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The pixel buffer stores an image in main memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreVideo.CVPixelBuffer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreVideo.CVPixelBuffer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.OpenGLES.EAGLContext">
            <summary>
            An <c>EAGLContext</c> object manages the state information, commands, and resources needed to draw using OpenGL ES. All OpenGL ES commands are executed in relation to an EAGL context.
            </summary>
            <remarks>
                <p>Drawing resources such as textures and renderbuffers are managed for the <c>EAGLContext</c> object by an <c>EAGLSharegroup</c> object associated with the context. When a new <c>EAGLContext</c> object is initialized, you can choose to have it create a new <c>EAGLSharegroup</c> object or use one obtained from a previously created EAGL context.</p>
                <p>To draw to an EAGL context, a complete framebuffer object must first be bound to the context. For more information on configuring rendering contexts, see <em>OpenGL ES Programming Guide for iOS</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.UP_EAGLContext_currentContext">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.UP_EAGLContext_setCurrentContext_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.UP_EAGLContext_get_API(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.UP_EAGLContext_get_sharegroup(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.UP_EAGLContext_alloc_initWithAPI_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.UP_EAGLContext_alloc_initWithAPI_sharegroup_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.UP_EAGLContext_presentRenderbuffer_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.OpenGLES.EAGLContext" /> class.
            <br></br>Equivalent to the native <c>[[EAGLContext alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.OpenGLES.EAGLContext.ClassExists">
            <summary>
            Returns whether the native EAGLContext class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.CurrentContext">
            <summary>
            Returns the current rendering context for the calling thread.
            <br></br>Equivalent to the native <c>currentContext</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The current EAGL context for the calling thread.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.SetCurrentContext(U3DXT.iOS.Native.OpenGLES.EAGLContext)">
            <summary>
            Makes the specified context the current rendering context for the calling thread.
            <br></br>Equivalent to the native <c>setCurrentContext:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>context</em>
                <p>The rendering context that you want to make current.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if successful; otherwise<c>false</c>. If an error occurred, the rendering context for the current thread remains unchanged.</p>
                <b>Discussion</b>
                <p>All OpenGL ES calls are issued with respect to the current context and complete in the order they are called, unless otherwise specified.</p>
                <p>EAGL retains the context when it is made current and releases the previous context. Calling this method with a <c><!--a  -->nil<!--/a--></c> parameter releases the current context and leaves OpenGL ES unbound to any drawing context.</p>
                <p>You should avoid making the same context current on multiple threads. OpenGL ES provides no thread safety, so if you want to use the same context on multiple threads, you must employ some form of thread synchronization to prevent simultaneous access to the same context from multiple threads.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="context">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.OpenGLES.EAGLContext.API">
            <summary>
            Specifies the OpenGL ES rendering API version supported by the receiver. (read-only)
            <br></br>Equivalent to the native <c>API</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.OpenGLES.EAGLContext.sharegroup">
            <summary>
            The receiver’s sharegroup object. (read-only)
            <br></br>Equivalent to the native <c>sharegroup</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You retrieve the sharegroup of a context when you want to create two or more contexts that share rendering resources. Call <c>initWithAPI:</c> to initialize the first contex, retrieve its sharegroup, and then initialize additional contexts by calling <c>initWithAPI:sharegroup:</c> passing this sharegroup as the parameter.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithAPI:sharegroup:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.#ctor(U3DXT.iOS.Native.OpenGLES.EAGLRenderingAPI)">
            <summary>
            Creates an instance of the native EAGLContext and initializes the object. Initializes and returns a newly allocated rendering context with the specified version of the OpenGL ES rendering API.
            <br></br>Equivalent to the native <c>[[EAGLContext alloc] initWithAPI:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>api</em>
                <p>The desired version of the OpenGL ES rendering API. For legal values, see  “OpenGL ES Versions.” </p>
                <b>Return Value</b>
                <p>An initialized context object or <c>null</c> if the object couldn't be created.</p>
                <b>Discussion</b>
                <p>To issue OpenGL ES commands to this context, you must first make it the current drawing context by calling <c>setCurrentContext:</c>.</p>
                <p>Calling <c>initWithAPI:</c> creates a new <c>EAGLSharegroup</c> object and attaches it to this context.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="api">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.#ctor(U3DXT.iOS.Native.OpenGLES.EAGLRenderingAPI,U3DXT.iOS.Native.OpenGLES.EAGLSharegroup)">
            <summary>
            Creates an instance of the native EAGLContext and initializes the object. Initializes and returns a newly allocated rendering context with the specified version of OpenGL ES rendering API and the specified sharegroup.
            <br></br>Equivalent to the native <c>[[EAGLContext alloc] initWithAPI:sharegroup:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>api</em>
                <p>The desired version of the OpenGL ES rendering API. For legal values, see  “OpenGL ES Versions.” </p>
                <em>sharegroup</em>
                <p>A sharegroup obtained from another <c>EAGLContext</c> object.</p>
                <b>Return Value</b>
                <p>An initialized context object or <c>null</c> if the object couldn't be created.</p>
                <b>Discussion</b>
                <p>To issue OpenGL ES commands to this context, you must first make it the current drawing context by calling <c>setCurrentContext:</c>.</p>
                <p>OpenGL ES objects such as textures, renderbuffers, framebuffers and vertex buffers are shared across all contexts that are created with the same sharegroup. To specify that a new context should be initialized in an existing sharegroup, retrieve the <c>sharegroup</c> property from a previously initialized context and pass it as a parameter to this initialization method. If <c><!--a  -->nil<!--/a--></c> is passed as the <c>sharegroup</c> parameter, a new  EAGLSharegroup  object is created and attached to the context.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="api">
            </param>
            <param name="sharegroup">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLContext.PresentRenderbuffer(System.UInt32)">
            <summary>
            Displays a renderbuffer’s contents on screen.
            <br></br>Equivalent to the native <c>presentRenderbuffer:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>target</em>
                <p>The OpenGL ES binding point for a currently bound renderbuffer. For contexts that use the OpenGL ES 1.0 API, this must be <c><!--a  -->GL_RENDERBUFFER_OES<!--/a--></c>. For contexts that use the OpenGL ES 2.0 API, the OES suffix should be removed.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if successful; otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>The renderbuffer to be displayed must have allocated storage using the <c>renderbufferStorage:fromDrawable:</c> method. The exact semantics for how and when the renderbuffer contents are displayed is controlled by the drawable object.</p>
                <p>
                    <strong>Important:</strong> The contents of the renderbuffer may be altered after the renderbuffer is presented to the screen. After presenting the renderbuffer, your application must  <em>completely</em> redraw the contents of the renderbuffer before presenting it again. To preserve the contents of the renderbuffer you may set the <c>kEAGLDrawablePropertyRetainedBacking</c> key of the drawableProperties dictionary to <c>true</c>. Setting the key to <c>true</c> may result in reduced graphics performance and increased memory usage, so only do this when the contents of the renderbuffer must remain unchanged.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– renderbufferStorage:fromDrawable:</c>
                    </li>
                </ul>
            </remarks>
            <param name="target">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.OpenGLES.EAGLRenderingAPI">
            <summary>
            These constants are used to choose the version of OpenGL ES that a rendering context provides.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.OpenGLES.EAGLRenderingAPI.S1">
            <summary>
                <p>Context supports OpenGL ES 1.x rendering API.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kEAGLRenderingAPIOpenGLES1</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.OpenGLES.EAGLRenderingAPI.S2">
            <summary>
                <p>Context supports OpenGL ES 2.x rendering API.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kEAGLRenderingAPIOpenGLES2</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.OpenGLES.EAGLSharegroup">
            <summary>
            An <c>EAGLSharegroup</c> object manages OpenGL ES resources associated with one or more <c>EAGLContext</c> objects. It is created when an <c>EAGLContext</c> object is initialized and disposed of when the last <c>EAGLContext</c> object that references it is released. As an opaque object, there is no developer accessible API.
            </summary>
            <remarks>
                <p>Currently, the sharegroup manages textures, buffers, framebuffers, and renderbuffers. It is your application’s responsibility to manage state changes to shared objects when those objects are accessed from multiple contexts in the sharegroup. The results of changing the state of a shared object while it is being used for rendering in another context are undefined. To obtain deterministic results, your application must take explicit steps to ensure that the shared object is not currently being used for rendering while your application modifies it. Further, state changes are not guaranteed to be noticed by another context in the sharegroup until that context rebinds the shared object.</p>
                <p>To ensure defined results of state changes to shared objects across contexts in the sharegroup, your application must perform the following tasks, in this order:</p>
                <ol class="ol">
                    <li class="li">
                        <p>Call <c>glFlush</c> on the rendering context that issues the state-modifying routines.</p>
                    </li>
                    <li class="li">
                        <p>Call <c>glBindTexture</c> or <c>glBindBuffer</c> on the rendering context that depends on the texture or vertex buffer object state changes, respectively.</p>
                    </li>
                </ol>
                <p>A shared object is not deleted until it is no longer bound to any context.</p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLSharegroup.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLSharegroup.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLSharegroup.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.OpenGLES.EAGLSharegroup" /> class.
            <br></br>Equivalent to the native <c>[[EAGLSharegroup alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.OpenGLES.EAGLSharegroup.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.OpenGLES.EAGLSharegroup.ClassExists">
            <summary>
            Returns whether the native EAGLSharegroup class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
