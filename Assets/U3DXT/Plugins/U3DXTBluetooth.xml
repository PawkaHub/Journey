<?xml version="1.0"?>
<doc>
    <assembly>
        <name>U3DXTBluetooth</name>
    </assembly>
    <members>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBATTError">
            <summary>
            The possible errors returned by a GATT server (a remote peripheral) during Bluetooth low energy ATT transactions.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>These error constants are based on the Bluetooth ATT error codes, defined in the Bluetooth 4.0 specification. For more information about these errors, see the Bluetooth 4.0 specification, Volume 3, Part F, Section 3.4.1.1.</p>
                <br />
            	Feedback
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.AttributeNotLong">
            <summary>
                <p>The attribute cannot be read or written using the ATT read blob request.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorAttributeNotLong</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InsufficientResources">
            <summary>
                <p>Resources are insufficient to complete the ATT request.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInsufficientResources</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.UnlikelyError">
            <summary>
                <p>The ATT request has encountered an unlikely error and therefore could not be completed.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorUnlikelyError</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InsufficientAuthentication">
            <summary>
                <p>The attribute requires authentication before its value can be read or written.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInsufficientAuthentication</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.WriteNotPermitted">
            <summary>
                <p>The attribute’s value cannot be written.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorWriteNotPermitted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InsufficientEncryptionKeySize">
            <summary>
                <p>The encryption key size used for encrypting this link is insufficient.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInsufficientEncryptionKeySize</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InsufficientEncryption">
            <summary>
                <p>The attribute requires encryption before its value can be read or written.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInsufficientEncryption</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.UnsupportedGroupType">
            <summary>
                <p>The attribute type is not a supported grouping attribute as defined by a higher-layer specification.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorUnsupportedGroupType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.AttributeNotFound">
            <summary>
                <p>The attribute is not found within the specified attribute handle range.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorAttributeNotFound</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.ReadNotPermitted">
            <summary>
                <p>The attribute’s value cannot be read.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorReadNotPermitted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InvalidPdu">
            <summary>
                <p>The attribute Protocol Data Unit (PDU) or “message” is invalid.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInvalidPdu</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InsufficientAuthorization">
            <summary>
                <p>The attribute requires authorization before its value can be read or written.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInsufficientAuthorization</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.PrepareQueueFull">
            <summary>
                <p>The prepare queue is full, because too many prepare write requests have been queued.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorPrepareQueueFull</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InvalidOffset">
            <summary>
                <p>The specified offset value was past the end of the attribute’s value.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInvalidOffset</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InvalidAttributeValueLength">
            <summary>
                <p>The length of the attribute’s value is invalid for the intended operation.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInvalidAttributeValueLength</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.Success">
            <summary>
                <p>The ATT command or request successfully completed.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorSuccess</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.RequestNotSupported">
            <summary>
                <p>The attribute server does not support the request received by the client.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorRequestNotSupported</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBATTError.InvalidHandle">
            <summary>
                <p>The attribute handle is invalid on this peripheral.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorInvalidHandle</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest">
            <summary>
            The <c>CBATTRequest</c> class represents Attribute Protocol (ATT) read and write requests from remote central devices (represented by <c>CBCentral</c> objects). Remote centrals use these ATT requests to read and write characteristic values on local peripherals (represented by <c>CBPeripheralManager</c> objects). Local peripherals, on the other hand, use the properties of <c>CBATTRequest</c> objects to respond to the read and write requests appropriately, using the <c>respondToRequest:withResult:</c> method of the <c>CBPeripheralManager</c> class.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.UP_CBATTRequest_get_central(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.UP_CBATTRequest_get_characteristic(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.UP_CBATTRequest_get_offset(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.UP_CBATTRequest_get_value(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.UP_CBATTRequest_set_value(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest" /> class.
            <br></br>Equivalent to the native <c>[[CBATTRequest alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.ClassExists">
            <summary>
            Returns whether the native CBATTRequest class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.central">
            <summary>
            The remote central device that originated the request. (read-only)
            <br></br>Equivalent to the native <c>central</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.characteristic">
            <summary>
            The characteristic whose value is to be read or written. (read-only)
            <br></br>Equivalent to the native <c>characteristic</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.offset">
            <summary>
            The zero-based index of the first byte for the read or write request. (read-only)
            <br></br>Equivalent to the native <c>offset</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use the value of this property to ensure that the ATT request is attempting to read or write within the proper bounds of the characteristic’s value. For an example of how to take a request’s offset property into account when responding to a read or write request, see  “Responding to Read and Write Requests from a Central”  in <em>Core Bluetooth Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBATTRequest.value">
            <summary>
            The data being read or written.
            <br></br>Equivalent to the native <c>value</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property differs according to the type of request. For read requests, the property of this value is <c>null</c> and should be set before responding to the remote central through the <c>respondToRequest:withResult:</c> method. For write requests, the value of this property is the data that is to be written to the characteristic’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property offset</c></li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData">
            <summary>
            Constants belonging to CBAdvertisementData.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.OverflowServiceUUIDsKey">
            <summary>
                <p>An array of one or more <c>CBUUID</c> objects, representing <c>CBService</c> UUIDs that were found in the “overflow” area of the advertisement data.</p>
                <p>Due to the nature of the data stored in this area, UUIDs listed here are “best effort” and may not always be accurate. For details about the overflow area of advertisement data, see the <c>startAdvertising:</c> method in <em>CBPeripheralManager Class Reference</em>.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataOverflowServiceUUIDsKey</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.ManufacturerDataKey">
            <summary>
                <p>A <c>NSData</c> object containing the manufacturer data of a peripheral. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataManufacturerDataKey</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.ServiceDataKey">
            <summary>
                <p>A dictionary containing service-specific advertisement data.</p>
                <p>The keys are <c>CBUUID</c> objects, representing <c>CBService</c> UUIDs. The values are <c>NSData</c> objects, representing service-specific data.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataServiceDataKey</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.IsConnectable">
            <summary>
                <p>A Boolean value that indicates whether the advertising event type is connectable.</p>
                <p>The value for this key is an <c>double</c> object. You can use this value to determine whether a peripheral is connectable at a particular moment.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataIsConnectable</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.LocalNameKey">
            <summary>
                <p>A string (an instance of <c>String</c>) containing the local name of a peripheral.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataLocalNameKey</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.ServiceUUIDsKey">
            <summary>
                <p>An array of service UUIDs.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataServiceUUIDsKey</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.SolicitedServiceUUIDsKey">
            <summary>
                <p>An array of one or more <c>CBUUID</c> objects, representing <c>CBService</c> UUIDs.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataSolicitedServiceUUIDsKey</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAdvertisementData.TxPowerLevelKey">
            <summary>
                <p>A number (an instance of <c>double</c>) containing the transmit power of a peripheral.</p>
                <p>This key and value are available if the broadcaster (peripheral) provides its Tx power level in its advertising packet. Using the RSSI value and the Tx power level, it is possible to calculate path loss.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAdvertisementDataTxPowerLevelKey</c> constant.
            </summary>
            <remarks>
            Keys to specify in an <em>advertisementData</em> dictionary.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Advertisement Data Retrieval Keys".
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBAttributePermissions">
            <summary>
            Values representing the read, write, and encryption permissions for a characteristic’s value.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When you initialize a new mutable characteristic, you set the read, write, and encryption permissions for the characteristic’s value. Setting the read and write <em>permissions</em> for a characteristic’s value is different from specifying the read and write <em>properties</em> for a characteristic’s value. Specifying the read and write properties for a characteristic’s value lets the client (a central) know what read and write permissions of the characteristic’s value are set. Specifying the read and write permissions for a characteristic’s value actually sets the permissions for the server (the peripheral) to allow the type of read or write specified by the characteristic’s properties. Therefore, if you specify read or write properties when initializing a mutable characteristic, you must also specify corresponding read or write permissions for that characteristic. If you want to enforce encryption requirements for reads and writes on a characteristic’s value, you must do so by specifying the relevant permission (<c>CBAttributePermissionsReadEncryptionRequired</c> or <c>CBAttributePermissionsWriteEncryptionRequired</c>). You may set more than one permission for a characteristic’s value.</p>
                <br />
            	Feedback
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAttributePermissions.Readable">
            <summary>
                <p>The characteristic’s value has read-only permission.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAttributePermissionsReadable</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAttributePermissions.Writeable">
            <summary>
                <p>The characteristic’s value has write-only permission.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAttributePermissionsWriteable</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAttributePermissions.ReadEncryptionRequired">
            <summary>
                <p>The characteristic’s value is readable only by trusted devices.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAttributePermissionsReadEncryptionRequired</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBAttributePermissions.WriteEncryptionRequired">
            <summary>
                <p>The characteristic’s value is writeable only by trusted devices.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBAttributePermissionsWriteEncryptionRequired</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentral">
            <summary>
            The <c>CBCentral</c> class represents remote central devices that have connected to an app implementing the peripheral role on a local device. That is, when you are implementing the peripheral role using the <c>CBPeripheralManager</c> class, centrals that connect to your local peripheral are represented as <c>CBCentral</c> objects. Remote centrals are identified by universally unique identifiers (UUIDs), represented by <c>NSUUID</c> objects.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentral.UP_CBCentral_get_identifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentral.UP_CBCentral_get_maximumUpdateValueLength(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentral.UP_CBCentral_get_UUID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentral.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentral.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentral.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBCentral" /> class.
            <br></br>Equivalent to the native <c>[[CBCentral alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentral.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentral.ClassExists">
            <summary>
            Returns whether the native CBCentral class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentral.identifier">
            <summary>
            The UUID associated with the central. (read-only)
            <br></br>Equivalent to the native <c>identifier</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property represents the unique identifier of the central. Centrals are identified by <c>NSUUID</c> UUIDs instead of by the <c>CBUUID</c> objects that identify a peripheral’s services, characteristics, and characteristic descriptors.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentral.maximumUpdateValueLength">
            <summary>
            The maximum amount of data, in bytes, that the central can receive in a single notification or indication. (read-only)
            <br></br>Equivalent to the native <c>maximumUpdateValueLength</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>updateValue:forCharacteristic:onSubscribedCentrals:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentral.UUID">
            <summary>
            The UUID of the central. (read-only) ( Deprecated in iOS 7.0.  Use the <c>identifier</c> property instead.)
            <br></br>Equivalent to the native <c>UUID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property represents the unique identifier of the central. Centrals are identified by standard <c>CFUUIDRef</c> UUIDs instead of by the <c>CBUUID</c> objects that identify a peripheral’s services, characteristics, and characteristic descriptors.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                    <li>Deprecated in iOS 7.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager">
            <summary>
                <c>CBCentralManager</c> objects are used to manage discovered or connected remote peripheral devices (represented by <c>CBPeripheral</c> objects), including scanning for, discovering, and connecting to advertising peripherals.
            </summary>
            <remarks>
                <p>Before you call <c>CBCentralManager</c> methods, the state of the central manager object must be powered on, as indicated by the <c>CBCentralManagerStatePoweredOn</c> constant. This state indicates that the central device (your iPhone or iPad, for instance) supports Bluetooth low energy and that Bluetooth is on and available to use.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.OptionShowPowerAlertKey">
            <summary>
                <p>A Boolean value that specifies whether the system should display a warning dialog to the user if Bluetooth is powered off when the central manager is instantiated.</p>
                <p>The value for this key is an <c>double</c> object. If the key is not specified, the default value is <c>false</c>.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerOptionShowPowerAlertKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><p></p>This is a constant for "Central Manager Initialization Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.OptionRestoreIdentifierKey">
            <summary>
                <p>A string (an instance of <c>String</c>) containing a unique identifier (UID) for the central manager that is being instantiated.</p>
                <p>The system uses this UID to identify a specific central manager. As a result, the UID must remain the same for subsequent executions of the app in order for the central manager to be successfully restored.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerOptionRestoreIdentifierKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><p></p>This is a constant for "Central Manager Initialization Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.CBConnectPeripheralOptionNotifyOnNotificationKey">
            <summary>
                <p>A Boolean value that specifies whether the system should display an alert for all notifications received from a given peripheral if the app is suspended at the time.</p>
                <p>The value for this key is an <c>double</c> object. This key is useful for apps that have not specified the <c>bluetooth-central</c> background mode and cannot display their own alert. If more than one app has requested notification for a given peripheral, the one that was most recently in the foreground receives the alert. If the key is not specified, the default value is <c>false</c>.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBConnectPeripheralOptionNotifyOnNotificationKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>connectPeripheral:options:</c> method.
            <p></p><p></p>This is a constant for "Peripheral Connection Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.CBConnectPeripheralOptionNotifyOnConnectionKey">
            <summary>
                <p>A Boolean value that specifies whether the system should display an alert for a given peripheral if the app is suspended when a successful connection is made.</p>
                <p>The value for this key is an <c>double</c> object. This key is useful for apps that have not specified the <c>bluetooth-central</c> background mode and cannot display their own alert. If more than one app has requested notification for a given peripheral, the one that was most recently in the foreground receives the alert. If the key is not specified, the default value is <c>false</c>.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBConnectPeripheralOptionNotifyOnConnectionKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>connectPeripheral:options:</c> method.
            <p></p><p></p>This is a constant for "Peripheral Connection Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.CBConnectPeripheralOptionNotifyOnDisconnectionKey">
            <summary>
                <p>A Boolean value that specifies whether the system should display a disconnection alert for a given peripheral if the app is suspended at the time of the disconnection.</p>
                <p>The value for this key is an <c>double</c> object. This key is useful for apps that have not specified the <c>bluetooth-central</c> background mode and cannot display their own alert. If more than one app has requested notification for a given peripheral, the one that was most recently in the foreground receives the alert. If the key is not specified, the default value is <c>false</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBConnectPeripheralOptionNotifyOnDisconnectionKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>connectPeripheral:options:</c> method.
            <p></p><p></p>This is a constant for "Peripheral Connection Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.ScanOptionAllowDuplicatesKey">
            <summary>
                <p>A Boolean value that specifies whether the scan should run without duplicate filtering.</p>
                <p>The value for this key is an <c>double</c> object. If <c>true</c>, filtering is disabled and a discovery event is generated each time the central receives an advertising packet from the peripheral. Disabling this filtering can have an adverse effect on battery life and should be used only if necessary. If <c>false</c>, multiple discoveries of the same peripheral are coalesced into a single discovery event. If the key is not specified, the default value is <c>false</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerScanOptionAllowDuplicatesKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>scanForPeripheralsWithServices:options:</c> method.
            <p></p><p></p>This is a constant for "Peripheral Scanning Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.ScanOptionSolicitedServiceUUIDsKey">
            <summary>
                <p>An array (an instance of <c>object[]</c>) of service UUIDs (represented by <c>CBUUID</c> objects) that you want to scan for.</p>
                <p>Specifying this scan option causes the central manager to also scan for peripherals soliciting any of the services contained in the array.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerScanOptionSolicitedServiceUUIDsKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>scanForPeripheralsWithServices:options:</c> method.
            <p></p><p></p>This is a constant for "Peripheral Scanning Options".
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidConnect">
            <summary>
            Invoked when a connection is successfully created with a peripheral.
            <br></br>Equivalent to implementing the native <c>centralManager:didConnectPeripheral:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidConnectEventArgs">
            <summary>
            Event arguments for DidConnect.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidConnectEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidConnectEventArgs.peripheral">
            <summary>peripheral</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDisconnect">
            <summary>
            Invoked when an existing connection with a peripheral is torn down.
            <br></br>Equivalent to implementing the native <c>centralManager:didDisconnectPeripheral:error:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDisconnectEventArgs">
            <summary>
            Event arguments for DidDisconnect.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDisconnectEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDisconnectEventArgs.peripheral">
            <summary>peripheral</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDisconnectEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDiscover">
            <summary>
            Invoked when the central manager discovers a peripheral while scanning.
            <br></br>Equivalent to implementing the native <c>centralManager:didDiscoverPeripheral:advertisementData:RSSI:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDiscoverEventArgs">
            <summary>
            Event arguments for DidDiscover.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDiscoverEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Double)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDiscoverEventArgs.peripheral">
            <summary>peripheral</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDiscoverEventArgs.advertisementData">
            <summary>advertisementData</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidDiscoverEventArgs.RSSI">
            <summary>RSSI</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidFailToConnect">
            <summary>
            Invoked when the central manager fails to create a connection with a peripheral.
            <br></br>Equivalent to implementing the native <c>centralManager:didFailToConnectPeripheral:error:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidFailToConnectEventArgs">
            <summary>
            Event arguments for DidFailToConnect.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidFailToConnectEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidFailToConnectEventArgs.peripheral">
            <summary>peripheral</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidFailToConnectEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrieveConnectedPeripherals">
            <summary>
            Invoked when the central manager retrieves a list of peripherals currently connected to the system.
            <br></br>Equivalent to implementing the native <c>centralManager:didRetrieveConnectedPeripherals:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrieveConnectedPeripheralsEventArgs">
            <summary>
            Event arguments for DidRetrieveConnectedPeripherals.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrieveConnectedPeripheralsEventArgs.#ctor(System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrieveConnectedPeripheralsEventArgs.peripherals">
            <summary>peripherals</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrievePeripherals">
            <summary>
            Invoked when the central manager retrieves a list of known peripherals.
            <br></br>Equivalent to implementing the native <c>centralManager:didRetrievePeripherals:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrievePeripheralsEventArgs">
            <summary>
            Event arguments for DidRetrievePeripherals.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrievePeripheralsEventArgs.#ctor(System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidRetrievePeripheralsEventArgs.peripherals">
            <summary>peripherals</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.WillRestoreState">
            <summary>
            Invoked when the central manager is about to be restored by the system.
            <br></br>Equivalent to implementing the native <c>centralManager:willRestoreState:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.WillRestoreStateEventArgs">
            <summary>
            Event arguments for WillRestoreState.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.WillRestoreStateEventArgs.#ctor(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.WillRestoreStateEventArgs.dict">
            <summary>dict</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.DidUpdateState">
            <summary>
            Invoked when the central manager’s state is updated. (required)
            <br></br>Equivalent to implementing the native <c>centralManagerDidUpdateState:</c> method of <c>CBCentralManagerDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_get_state(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_cancelPeripheralConnection_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_connectPeripheral_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_alloc_initWithDelegate_queue_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_alloc_initWithDelegate_queue_options_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_retrieveConnectedPeripherals(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_retrieveConnectedPeripheralsWithServices_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_retrievePeripherals_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_retrievePeripheralsWithIdentifiers_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_scanForPeripheralsWithServices_options_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.UP_CBCentralManager_stopScan(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager" /> class.
            <br></br>Equivalent to the native <c>[[CBCentralManager alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.ClassExists">
            <summary>
            Returns whether the native CBCentralManager class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.Delegate">
            <summary>
            The delegate object you want to receive central events.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For information about how to implement your central manager delegate, see <em>CBCentralManagerDelegate Protocol Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.state">
            <summary>
            Returns the current state of the central manager. (read-only)
            <br></br>Equivalent to the native <c>state</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When a central manager object is initially created, the default value of this property is <c>CBCentralManagerStateUnknown</c>. As the central manager’s state changes, the central manager updates the value of this property and calls the <c><!--a target="_self" -->centralManagerDidUpdateState:<!--/a--></c> delegate method. For a list of the possible values representing the state of the central manager, see  “Central Manager State.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.CancelPeripheralConnection(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral)">
            <summary>
            Cancels an active or pending local connection to a peripheral.
            <br></br>Equivalent to the native <c>cancelPeripheralConnection:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral to which the central manager is either trying to connect or has already connected.</p>
                <b>Discussion</b>
                <p>This method is nonblocking, and any <c>CBPeripheral</c> class commands that are still pending to <em>peripheral</em> may or may not complete. Because other apps may still have a connection to the peripheral, canceling a local connection does not guarantee that the underlying physical link is immediately disconnected. From the app’s perspective, however, the peripheral is considered disconnected, and the central manager object calls the <c><!--a target="_self" -->centralManager:didDisconnectPeripheral:error:<!--/a--></c> method of its delegate object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.ConnectPeripheral(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Establishes a local connection to a peripheral.
            <br></br>Equivalent to the native <c>connectPeripheral:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral to which the central is attempting to connect.</p>
                <em>options</em>
                <p>A dictionary to customize the behavior of the connection. For available options, see  “Peripheral Connection Options.” </p>
                <b>Discussion</b>
                <p>If a local connection to a peripheral is successfully established, the central manager object calls the <c>centralManager:didConnectPeripheral:</c> method of its delegate object. If the connection attempt fails, the central manager object calls the <c>centralManager:didFailToConnectPeripheral:error:</c> method of its delegate object instead. Attempts to connect to a peripheral do not time out. To explicitly cancel a pending connection to a peripheral, call the <c>cancelPeripheralConnection:</c> method. Pending connection attempts are also canceled automatically when <em>peripheral</em> is deallocated.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate,System.Object)">
            <summary>
            Creates an instance of the native CBCentralManager and initializes the object. Initializes the central manager with a specified delegate and dispatch queue.
            <br></br>Equivalent to the native <c>[[CBCentralManager alloc] initWithDelegate:queue:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>delegate</em>
                <p>The delegate to receive the central events.</p>
                <em>queue</em>
                <p>The dispatch queue to use to dispatch the central role events. If the value is <c>null</c>, the central manager dispatches central role events using the main queue.</p>
                <b>Return Value</b>
                <p>Returns a newly initialized central manager.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDelegate">
            </param>
            <param name="queue">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native CBCentralManager and initializes the object. Initializes the central manager with specified delegate, dispatch queue, and initialization options.
            <br></br>Equivalent to the native <c>[[CBCentralManager alloc] initWithDelegate:queue:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>delegate</em>
                <p>The delegate to receive the central events.</p>
                <em>queue</em>
                <p>The dispatch queue to use to dispatch the central role events. If the value is <c>null</c>, the central manager dispatches central role events using the main queue.</p>
                <em>options</em>
                <p>An optional dictionary containing initialization options for a central manager. For available options, see  “Central Manager Initialization Options.” </p>
                <b>Return Value</b>
                <p>Returns a newly initialized central manager.</p>
                <b>Discussion</b>
                <p>This method is the designated initializer for the <c>CBCentralManager</c> class.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDelegate">
            </param>
            <param name="queue">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.RetrieveConnectedPeripherals">
            <summary>
            Retrieves a list of the peripherals currently connected to the system. ( Deprecated in iOS 7.0.  Use the <c>retrieveConnectedPeripheralsWithServices:</c> method instead.)
            <br></br>Equivalent to the native <c>retrieveConnectedPeripherals</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Upon retrieving the list of connected peripherals, the central manager object calls the <c>centralManager:didRetrieveConnectedPeripherals:</c> method of its delegate object. If there are no peripherals currently connected to the system, the central manager object passes an empty array of peripherals to the <c>centralManager:didRetrieveConnectedPeripherals:</c> method. Note that the list of connected peripherals can include those that are connected by other apps and that will need to be connected locally using the <c>connectPeripheral:options:</c> method before they can be used.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                    <li>Deprecated in iOS 7.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.RetrieveConnectedPeripherals(System.Object[])">
            <summary>
            Returns a list of the peripherals (containing any of the specified services) currently connected to the system.
            <br></br>Equivalent to the native <c>retrieveConnectedPeripheralsWithServices:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>serviceUUIDs</em>
                <p>A list of service UUIDs (represented by <c>CBUUID</c> objects).</p>
                <b>Return Value</b>
                <p>A list of the peripherals that are currently connected to the system and that contain any of the services specified in the <em>serviceUUID</em> parameter.</p>
                <b>Discussion</b>
                <p>The list of connected peripherals can include those that are connected by other apps and that will need to be connected locally using the <c>connectPeripheral:options:</c> method before they can be used.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="serviceUUIDs">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.RetrievePeripherals(System.Object[])">
            <summary>
            Retrieves a list of known peripherals by their UUIDs. ( Deprecated in iOS 7.0.  Use the <c>retrievePeripheralsWithIdentifiers:</c> method instead.)
            <br></br>Equivalent to the native <c>retrievePeripherals:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheralUUIDs</em>
                <p>An array of <c>CFUUIDRef</c> objects from which <c>CBPeripheral</c> objects can be retrieved. Because <c>CBUUID</c> objects represent Bluetooth-specific universally unique identifiers (UUIDs) (used for Bluetooth GATT attributes such as services and characteristics), <c>CBPeripheral</c> objects use standard <c>CFUUIDRef</c> UUIDs as their unique identifiers.</p>
                <b>Discussion</b>
                <p>This method retrieves a list of peripherals that the central manager is able to match to the provided UUIDs. Upon retrieving the list of known peripherals, the central manager object calls the <c>centralManager:didRetrievePeripherals:</c> method of its delegate object. If no matches are made, the central manager object passes an empty array of peripherals to the <c>centralManager:didRetrievePeripherals:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                    <li>Deprecated in iOS 7.0.</li>
                </ul>
            </remarks>
            <param name="peripheralUUIDs">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.RetrievePeripheralsWithIdentifiers(System.Object[])">
            <summary>
            Returns a list of known peripherals by their identifiers.
            <br></br>Equivalent to the native <c>retrievePeripheralsWithIdentifiers:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>identifiers</em>
                <p>A list of peripheral identifiers (represented by <c>NSUUID</c> objects) from which <c>CBPeripheral</c> objects can be retrieved.</p>
                <b>Return Value</b>
                <p>A list of peripherals that the central manager is able to match to the provided identifiers.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="identifiers">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.Scan(System.Object[],System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Scans for peripherals that are advertising services.
            <br></br>Equivalent to the native <c>scanForPeripheralsWithServices:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>serviceUUIDs</em>
                <p>An array of <c>CBUUID</c> objects that the app is interested in. In this case, each <c>CBUUID</c> object represents the UUID of a service that a peripheral is advertising.</p>
                <em>options</em>
                <p>An optional dictionary specifying options to customize the scan. For available options, see  “Peripheral Scanning Options.” </p>
                <b>Discussion</b>
                <p>You can provide an array of <c>CBUUID</c> objects—representing service UUIDs—in the <em>serviceUUIDs</em> parameter. When you do, the central manager returns only peripherals that advertise the services you specify (recommended). If the <c>serviceUUIDs</c> parameter is <c>null</c>, all discovered peripherals are returned regardless of their supported services (not recommended). If the central manager is already scanning with different parameters, the provided parameters replace them. When the central manager object discovers a peripheral, it calls the <c>centralManager:didDiscoverPeripheral:advertisementData:RSSI:</c> method of its delegate object.</p>
                <p>Apps that have specified the <c>bluetooth-central</c> background mode are allowed to scan while in the background. That said, they must explicitly scan for one or more services by specifying them in the <em>serviceUUIDs</em> parameter. The <c>CBCentralManagerOptionShowPowerAlertKey</c> scan option is ignored while scanning in the background.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="serviceUUIDs">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManager.StopScan">
            <summary>
            Asks the central manager to stop scanning for peripherals.
            <br></br>Equivalent to the native <c>stopScan</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerConstants">
            <summary>
            Constants belonging to CBCentralManagerConstants.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerConstants.CBCentralManagerRestoredStateScanOptionsKey">
            <summary>
                <p>A dictionary (an instance of <c>Dictionary</c>) that contains all of the peripheral scan options that were being used by the central manager at the time the app was terminated by the system.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerRestoredStateScanOptionsKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><p></p>This is a constant for "Central Manager State Restoration Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerConstants.CBCentralManagerRestoredStatePeripheralsKey">
            <summary>
                <p>An array (an instance of <c>object[]</c>) of <c>CBPeripheral</c> objects that contains all of the peripherals that were connected to the central manager (or had a connection pending) at the time the app was terminated by the system.</p>
                <p>When possible, all the information about a peripheral is restored, including any discovered services, characteristics, characteristic descriptors, and characteristic notification states.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerRestoredStatePeripheralsKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><p></p>This is a constant for "Central Manager State Restoration Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerConstants.CBCentralManagerRestoredStateScanServicesKey">
            <summary>
                <p>An array (an instance of <c>object[]</c>) of service UUIDs (represented by <c>CBUUID</c> objects) that contains all the services the central manager was scanning for at the time the app was terminated by the system.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerRestoredStateScanServicesKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><p></p>This is a constant for "Central Manager State Restoration Options".
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate">
            <summary>
            The <c>CBCentralManagerDelegate</c> protocol defines the methods that a delegate of a <c>CBCentralManager</c> object must adopt. The optional methods of the protocol allow the delegate to monitor the discovery, connectivity, and retrieval of peripheral devices. The only required method of the protocol indicates the availability of the central manager, and is called when the central manager’s state is updated.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManager_didConnectPeripheral__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManager_didDisconnectPeripheral_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManager_didDiscoverPeripheral_advertisementData_RSSI__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManager_didFailToConnectPeripheral_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManager_didRetrieveConnectedPeripherals__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManager_didRetrievePeripherals__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManager_willRestoreState__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.UP_CBCentralManagerDelegate_set__centralManagerDidUpdateState__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.DidConnect(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager,U3DXT.iOS.Native.CoreBluetooth.CBPeripheral)">
            <summary>
            (optional) Invoked when a connection is successfully created with a peripheral.
            <br></br>Equivalent to the native <c>centralManager:didConnectPeripheral:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager providing this information.</p>
                <em>peripheral</em>
                <p>The peripheral that has been connected to the system.</p>
                <b>Discussion</b>
                <p>This method is invoked when a call to <c>connectPeripheral:options:</c> is successful. You typically implement this method to set the peripheral’s delegate and to discover its services.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
            <param name="peripheral">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.DidDisconnect(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager,U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when an existing connection with a peripheral is torn down.
            <br></br>Equivalent to the native <c>centralManager:didDisconnectPeripheral:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager providing this information.</p>
                <em>peripheral</em>
                <p>The peripheral that has been disconnected.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when a peripheral connected via the <c>connectPeripheral:options:</c> method is disconnected. If the disconnection was not initiated by <c>cancelPeripheralConnection:</c>, the cause is detailed in <em>error</em>. After this method is called, no more methods are invoked on the peripheral device’s <c><!--a target="_self" -->CBPeripheralDelegate<!--/a--></c> object.</p>
                <p>Note that when a peripheral is disconnected, all of its services, characteristics, and characteristic descriptors are invalidated.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
            <param name="peripheral">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.DidDiscover(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager,U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Double)">
            <summary>
            (optional) Invoked when the central manager discovers a peripheral while scanning.
            <br></br>Equivalent to the native <c>centralManager:didDiscoverPeripheral:advertisementData:RSSI:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager providing the update.</p>
                <em>peripheral</em>
                <p>The discovered peripheral.</p>
                <em>advertisementData</em>
                <p>A dictionary containing any advertisement data.</p>
                <em>RSSI</em>
                <p>The current received signal strength indicator (RSSI) of the peripheral, in decibels.</p>
                <b>Discussion</b>
                <p>The advertisement data can be accessed through the keys listed in  “Advertisement Data Retrieval Keys.”  You must retain a local copy of the peripheral if any command is to be performed on it. In use cases where it makes sense for your app to automatically connect to a peripheral that is located within a certain range, you can use RSSI data to determine the proximity of a discovered peripheral device.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
            <param name="peripheral">
            </param>
            <param name="advertisementData">
            </param>
            <param name="RSSI">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.DidFailToConnect(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager,U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when the central manager fails to create a connection with a peripheral.
            <br></br>Equivalent to the native <c>centralManager:didFailToConnectPeripheral:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager providing this information.</p>
                <em>peripheral</em>
                <p>The peripheral that failed to connect.</p>
                <em>error</em>
                <p>The cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when a connection initiated via the  <c>connectPeripheral:options:</c> method fails to complete. Because connection attempts do not time out, a failed connection usually indicates a transient issue, in which case you may attempt to connect to the peripheral again.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
            <param name="peripheral">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.DidRetrieveConnectedPeripherals(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager,System.Object[])">
            <summary>
            (optional) Invoked when the central manager retrieves a list of peripherals currently connected to the system.
            <br></br>Equivalent to the native <c>centralManager:didRetrieveConnectedPeripherals:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager providing this information.</p>
                <em>peripherals</em>
                <p>The array of all peripherals currently connected to the system.</p>
                <b>Discussion</b>
                <p>This method returns the result of a <c>retrieveConnectedPeripherals</c> call. Since the array of currently connected peripherals can include those connected to the system by other apps, you typically implement this method to reconnect the peripherals in which your app is interested.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
            <param name="peripherals">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.DidRetrievePeripherals(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager,System.Object[])">
            <summary>
            (optional) Invoked when the central manager retrieves a list of known peripherals.
            <br></br>Equivalent to the native <c>centralManager:didRetrievePeripherals:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager providing this information.</p>
                <em>peripherals</em>
                <p>An array of peripherals currently known by the central manager.</p>
                <b>Discussion</b>
                <p>This method returns the result of a call to <c>retrievePeripherals:</c> with an array of the peripherals that the central manager was able to match to the provided universally unique identifiers (UUIDs). You typically implement this method to reconnect to a known peripheral.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
            <param name="peripherals">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.WillRestoreState(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            (optional) Invoked when the central manager is about to be restored by the system.
            <br></br>Equivalent to the native <c>centralManager:willRestoreState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager providing this information.</p>
                <em>dict</em>
                <p>A dictionary containing information about the central manager that was preserved by the system at the time the app was terminated. For the available keys to this dictionary, see  “Central Manager State Restoration Options.” </p>
                <b>Discussion</b>
                <p>For apps that opt in to the state preservation and restoration feature of Core Bluetooth, this is the first method invoked when your app is relaunched into the background to complete some Bluetooth-related task. Use this method to synchronize the state of your app with the state of the Bluetooth system.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate.DidUpdateState(U3DXT.iOS.Native.CoreBluetooth.CBCentralManager)">
            <summary>
            (<b>required</b>) Invoked when the central manager’s state is updated. (required)
            <br></br>Equivalent to the native <c>centralManagerDidUpdateState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>central</em>
                <p>The central manager whose state has changed.</p>
                <b>Discussion</b>
                <p>You implement this required method to ensure that Bluetooth low energy is supported and available to use on the central device. You should issue commands to the central manager only when the state of the central manager is powered on, as indicated by the <c>CBCentralManagerStatePoweredOn</c> constant. A state with a value lower than <c>CBCentralManagerStatePoweredOn</c> implies that scanning has stopped and that any connected peripherals have been disconnected. If the state moves below <c>CBCentralManagerStatePoweredOff</c>, all <c>CBPeripheral</c> objects obtained from this central manager become invalid and must be retrieved or discovered again. For a complete list and discussion of the possible values representing the state of the central manager, see the <c><!--a target="_self" -->CBCentralManagerState<!--/a--></c> enumeration in <em>CBCentralManager Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="central">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManager_didConnectPeripheral__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManager_didConnectPeripheral__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManager_didDisconnectPeripheral_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManager_didDisconnectPeripheral_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManager_didDiscoverPeripheral_advertisementData_RSSI__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManager_didDiscoverPeripheral_advertisementData_RSSI__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManager_didFailToConnectPeripheral_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManager_didFailToConnectPeripheral_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManager_didRetrieveConnectedPeripherals__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManager_didRetrieveConnectedPeripherals__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManager_didRetrievePeripherals__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManager_didRetrievePeripherals__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManager_willRestoreState__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManager_willRestoreState__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerDelegate._centralManagerDidUpdateState__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_centralManagerDidUpdateState__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerState">
            <summary>
            Values representing the current state of a central manager object.
            </summary>
            <remarks>
                <br />
            	Feedback
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerState.Unauthorized">
            <summary>
                <p>The app is not authorized to use Bluetooth low energy.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerStateUnauthorized</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerState.PoweredOff">
            <summary>
                <p>Bluetooth is currently powered off.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerStatePoweredOff</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerState.PoweredOn">
            <summary>
                <p>Bluetooth is currently powered on and available to use.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerStatePoweredOn</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerState.Resetting">
            <summary>
                <p>The connection with the system service was momentarily lost; an update is imminent.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerStateResetting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerState.Unsupported">
            <summary>
                <p>The platform does not support Bluetooth low energy.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerStateUnsupported</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCentralManagerState.Unknown">
            <summary>
                <p>The current state of the central manager is unknown; an update is imminent.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCentralManagerStateUnknown</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic">
            <summary>
                <c>CBCharacteristic</c> and its subclass <c>CBMutableCharacteristic</c> represent further information about a peripheral’s service. <c>CBCharacteristic</c> objects in particular represent the characteristics of a <em>remote</em> peripheral’s service (remote peripheral devices are represented by <c>CBPeripheral</c> objects). A characteristic contains a single value and any number of descriptors describing that value. The properties of a characteristic determine how the value of the characteristic can be used and how the descriptors can be accessed.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UP_CBCharacteristic_get_descriptors(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UP_CBCharacteristic_get_isBroadcasted(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UP_CBCharacteristic_get_isNotifying(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UP_CBCharacteristic_get_properties(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UP_CBCharacteristic_get_service(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UP_CBCharacteristic_get_UUID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UP_CBCharacteristic_get_value(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic" /> class.
            <br></br>Equivalent to the native <c>[[CBCharacteristic alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.ClassExists">
            <summary>
            Returns whether the native CBCharacteristic class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.descriptors">
            <summary>
            A list of the descriptors that have been discovered in this characteristic. (read-only)
            <br></br>Equivalent to the native <c>descriptors</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is an array of <c>CBDescriptor</c> objects that represent a characteristic’s descriptors. Characteristic descriptors provide more information about a characteristic’s value. For example, they may describe the value in human-readable form and describe how the value should be formatted for presentation purposes. For more information about characteristic descriptors, see <em>CBDescriptor Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.isBroadcasted">
            <summary>
            You should not use this property. (read-only)
            <br></br>Equivalent to the native <c>isBroadcasted</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.isNotifying">
            <summary>
            A Boolean value indicating whether the characteristic is currently notifying a subscribed central of its value. (read-only)
            <br></br>Equivalent to the native <c>isNotifying</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>true</c> if you have enabled notifications or indications for the characteristic by successfully calling the <c>setNotifyValue:forCharacteristic:</c> method of the <c>CBPeripheral</c> class. If the value of this property is <c>true</c>, the peripheral updates the subscribed central that it is connected to whenever the characteristic’s value has changed. If the value of the property is <c>false</c>, notifications (or indications) have not been enabled for the characteristic, and the peripheral does not update the central that it is connected to whenever the characteristic’s value has changed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>setNotifyValue:forCharacteristic:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.properties">
            <summary>
            The properties of the characteristic. (read-only)
            <br></br>Equivalent to the native <c>properties</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The properties of a characteristic determine how the characteristic’s value and descriptors can be used and accessed. For a list of the possible values representing the properties of a characteristic, see  “Characteristic Properties.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.service">
            <summary>
            The service that this characteristic belongs to. (read-only)
            <br></br>Equivalent to the native <c>service</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.UUID">
            <summary>
            The Bluetooth-specific UUID of the characteristic. (read-only)
            <br></br>Equivalent to the native <c>UUID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is a 128-bit UUID that identifies the characteristic.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic.value">
            <summary>
            The value of the characteristic. (read-only)
            <br></br>Equivalent to the native <c>value</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property contains the value of the characteristic. For example, a temperature measurement characteristic of a health thermometer service may have a value that indicates a temperature in Celsius.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties">
            <summary>
            Values representing the possible properties of a characteristic. Since characteristic properties can be combined, a characteristic may have multiple property values set.
            </summary>
            <remarks>
                <br />
            	Feedback
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.AuthenticatedSignedWrites">
            <summary>
                <p>Signed writes of the characteristic’s value are permitted, <em>without</em> a response from the peripheral to indicate that the write was successful.</p>
                <p>If a characteristic has this property set, no error is sent back to the central when writing to the characteristic’s value is unsuccessful.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyAuthenticatedSignedWrites</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.Indicate">
            <summary>
                <p>Indications of the characteristic’s value are permitted, <em>with</em> a response from the central to indicate that the indication was received.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyIndicate</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.Read">
            <summary>
                <p>The characteristic’s value can be read.</p>
                <p>Use the <c>readValueForCharacteristic:</c> method of the <c>CBPeripheral</c> class to read the value of a characteristic.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyRead</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.ExtendedProperties">
            <summary>
                <p>Additional characteristic properties are defined in the characteristic extended properties descriptor.</p>
                <p>This property is not allowed for local characteristics published using the <c>addService:</c> method of the <c>CBPeripheralManager</c> class. That is, you cannot use this property when you initialize a <c>CBMutableCharacteristic</c> object using the <c>initWithType:properties:value:permissions:</c> method of the <c>CBMutableCharacteristic</c> class.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyExtendedProperties</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.NotifyEncryptionRequired">
            <summary>
                <p>Only trusted devices can enable notifications of the characteristic’s value.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyNotifyEncryptionRequired</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.IndicateEncryptionRequired">
            <summary>
                <p>Only trusted devices can enable indications of the characteristic’s value.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyIndicateEncryptionRequired</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.Broadcast">
            <summary>
                <p>The characteristic’s value can be broadcast using a characteristic configuration descriptor.</p>
                <p>This property is not allowed for local characteristics published via the <c>addService:</c> method of the <c>CBPeripheralManager</c> class. This means that you cannot use this property when you initialize a new <c>CBMutableCharacteristic</c> object via the <c>initWithType:properties:value:permissions:</c> method of the <c>CBMutableCharacteristic</c> class.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyBroadcast</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.Notify">
            <summary>
                <p>Notifications of the characteristic’s value are permitted, <em>without</em> a response from the central to indicate that the notification was received.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyNotify</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.WriteWithoutResponse">
            <summary>
                <p>The characteristic’s value can be written, <em>without</em> a response from the peripheral to indicate that the write was successful.</p>
                <p>Use the <c>writeValue:forCharacteristic:type:</c> method of the <c>CBPeripheral</c> class to write to a characteristic’s value, using the <c>CBCharacteristicWriteWithoutResponse</c> constant as the parameter for <c>type:</c>. If a characteristic has this property set, no error is sent back to the central when writing to the characteristic’s value is unsuccessful.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyWriteWithoutResponse</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties.Write">
            <summary>
                <p>The characteristic’s value can be written, <em>with</em> a response from the peripheral to indicate that the write was successful.</p>
                <p>If a characteristic has this property set, an error is sent to back to the central when writing to the characteristic’s value is unsuccessful. This property allows for values to be written to a characteristic’s value that are longer than those permitted by the <c>CBCharacteristicPropertyWriteWithoutResponse</c> constant. Use the <c>writeValue:forCharacteristic:type:</c> method of the <c>CBPeripheral</c> class to write to a characteristic’s value, using the <c>CBCharacteristicWriteWithResponse</c> constant as the parameter for <c>type:</c>.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicPropertyWrite</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicWriteType">
            <summary>
            Values representing the possible types of writes to a characteristic’s value.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Characteristic write types have corresponding restrictions on the length of the data that you can write to a characteristic’s value. For the <c>CBCharacteristicWriteWithResponse</c> write type, the restrictions are defined in the Bluetooth 4.0 specification, Volume 3, Part G, Sections 4.9.3–4. For the <c>CBCharacteristicWriteWithoutResponse</c> write type, the restrictions are defined in the Bluetooth 4.0 specification, Volume 3, Part G, Sections 4.9.1–2. In general, when you write with a response, you can write a characteristic value that is longer than what is permitted when you write without a response.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicWriteType.WithoutResponse">
            <summary>
                <p>A characteristic value is to be written, <em>without</em> any response from the peripheral to indicate whether the write was successful.</p>
                <p>You will not be notified if writing to a characteristic value fails.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicWriteWithoutResponse</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicWriteType.WithResponse">
            <summary>
                <p>A characteristic value is to be written, <em>with</em> a response from the peripheral to indicate whether the write was successful.</p>
                <p>If the write is unsuccessful, the peripheral responds with an error detailing the cause of the failure.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBCharacteristicWriteWithResponse</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor">
            <summary>
                <c>CBDescriptor</c> and it subclass <c>CBMutableDescriptor</c> represent a descriptor of a peripheral’s characteristic. <c>CBDescriptor</c> objects in particular represent the descriptors of a <em>remote</em> peripheral’s characteristic (remote peripheral devices are represented by <c>CBPeripheral</c> objects). Descriptors provide further information about a characteristic’s value. For example, they may describe the value in human-readable form and describe how the value should be formatted for presentation purposes. Characteristic descriptors also indicate whether a characteristic’s value is configured on a server (a peripheral) to indicate or notify a client (a central) when the value of the characteristic changes.
            </summary>
            <remarks>
                <p>There are six predefined types of descriptors that—along with their corresponding value types—are detailed in <em>CBUUID Class Reference</em>.  “Predefined descriptors”  lists the predefined types of descriptors and the <c>CBUUID</c> constants that are used to represent them.</p>
                <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                    <caption class="tablecaption">
                        <strong class="caption_number">Table 1</strong>  Predefined descriptors</caption>
                    <tr>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Descriptor type</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Descriptor constant</p>
                        </th>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Characteristic extended properties</p>
                        </td>
                        <td>
                            <p>
                                <c>CBUUIDCharacteristicExtendedPropertiesString</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Characteristic user description</p>
                        </td>
                        <td>
                            <p>
                                <c>CBUUIDCharacteristicUserDescriptionString</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Client characteristic configuration</p>
                        </td>
                        <td>
                            <p>
                                <c>CBUUIDClientCharacteristicConfigurationString</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Server characteristic configuration</p>
                        </td>
                        <td>
                            <p>
                                <c>CBUUIDServerCharacteristicConfigurationString</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Characteristic format</p>
                        </td>
                        <td>
                            <p>
                                <c>CBUUIDCharacteristicFormatString</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Characteristic aggregate format</p>
                        </td>
                        <td>
                            <p>
                                <c>CBUUIDCharacteristicAggregateFormatString</c>
                            </p>
                        </td>
                    </tr>
                </table>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.UP_CBDescriptor_get_characteristic(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.UP_CBDescriptor_get_UUID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.UP_CBDescriptor_get_value(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor" /> class.
            <br></br>Equivalent to the native <c>[[CBDescriptor alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.ClassExists">
            <summary>
            Returns whether the native CBDescriptor class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.characteristic">
            <summary>
            The characteristic that this descriptor belongs to. (read-only)
            <br></br>Equivalent to the native <c>characteristic</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.UUID">
            <summary>
            The Bluetooth-specific UUID of the descriptor. (read-only)
            <br></br>Equivalent to the native <c>UUID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is a 128-bit UUID that identifies the descriptor.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBDescriptor.value">
            <summary>
            The value of the descriptor. (read-only)
            <br></br>Equivalent to the native <c>value</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value types for the various types of descriptors are detailed in <em>CBUUID Class Reference</em>.</p>
                <p>You can read the value of a descriptor by calling the <c>readValueForDescriptor:</c> method of the <c>CBPeripheral</c> class. You can write the value of a descriptor by calling the <c>writeValue:forDescriptor:</c> method of the <c>CBPeripheral</c> class. That said, you cannot use the <c>writeValue:forDescriptor:</c> method to write the value of a client configuration descriptor (<c>CBUUIDClientCharacteristicConfigurationString</c>); instead, you should use the <c>setNotifyValue:forCharacteristic:</c> method of the <c>CBPeripheral</c> class to configure client indications or notifications of a characteristic’s value on a server.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBError">
            <summary>
            The possible errors returned during Bluetooth low energy transactions.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.PeripheralDisconnected">
            <summary>
                <p>The peripheral disconnected.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorPeripheralDisconnected</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.Unknown">
            <summary>
                <p>An unknown error occurred.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.UUIDNotAllowed">
            <summary>
                <p>The specified UUID is not permitted.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorUUIDNotAllowed</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.AlreadyAdvertising">
            <summary>
                <p>The peripheral is already advertising.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorAlreadyAdvertising</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.OperationCancelled">
            <summary>
                <p>The operation is canceled.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorOperationCancelled</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.InvalidHandle">
            <summary>
                <p>The specified attribute handle is invalid.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorInvalidHandle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.OutOfSpace">
            <summary>
                <p>The device has run out of space to complete the intended operation.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorOutOfSpace</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.ConnectionTimeout">
            <summary>
                <p>The connection timed out.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorConnectionTimeout</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.InvalidParameters">
            <summary>
                <p>The specified parameters are invalid.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorInvalidParameters</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.ConnectionFailed">
            <summary>
                <p>The connection failed.</p>
                <p>Available in iOS 7.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorConnectionFailed</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBError.NotConnected">
            <summary>
                <p>The device is not currently connected.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorNotConnected</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic">
            <summary>
                <c>CBMutableCharacteristic</c> objects represent the characteristics of a <em>local</em> peripheral’s service (local peripheral devices are represented by <c>CBPeripheralManager</c> objects). This class adds write access to many of the properties in the <c>CBCharacteristic</c> class it inherits from.
            </summary>
            <remarks>
                <p>You use this class to create a characteristic and to set its properties and permissions as desired. After you create a characteristic and add it to a local service, you can publish it (and the service) to the peripheral’s local database using the <c>addService:</c> method of the  <c>CBPeripheralManager</c> class. After you publish a characteristic, the characteristic is cached and you can no longer make changes to it.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_get_descriptors(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_set_descriptors(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_get_permissions(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_set_permissions(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_get_properties(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_set_properties(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_get_subscribedCentrals(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_get_UUID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_set_UUID(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_get_value(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_set_value(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UP_CBMutableCharacteristic_alloc_initWithType_properties_value_permissions_(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic" /> class.
            <br></br>Equivalent to the native <c>[[CBMutableCharacteristic alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.ClassExists">
            <summary>
            Returns whether the native CBMutableCharacteristic class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.descriptors">
            <summary>
            A list of descriptors that describe the characteristic.
            <br></br>Equivalent to the native <c>descriptors</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is an array of <c>CBDescriptor</c> objects that represent a characteristic’s descriptors. Characteristic descriptors provide more information about a characteristic’s value. For example, they may describe the value in human-readable form and describe how the value should be formatted for presentation purposes. For more information about characteristic descriptors, see <em>CBDescriptor Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.permissions">
            <summary>
            The permissions of the characteristic value.
            <br></br>Equivalent to the native <c>permissions</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Characteristic permissions represent the read, write, and encryption permissions for a characteristic’s value. For a complete list and discussion of the characteristic permissions that may be set, see  “Characteristic Value Permissions.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.properties">
            <summary>
            The properties of the characteristic.
            <br></br>Equivalent to the native <c>properties</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The properties of a characteristic determine how the characteristic’s value and descriptors can be used and accessed. The characteristic properties <c>CBCharacteristicPropertyBroadcast</c> and <c>CBCharacteristicPropertyExtendedProperties</c> are not allowed for mutable characteristics. That is, you cannot set these properties when you initialize a <c>CBMutableCharacteristic</c> object using the <c>initWithType:properties:value:permissions:</c> method. For a list of the possible values representing the properties of a characteristic, see the <c>CBCharacteristicProperties</c> enumeration in <em>CBCharacteristic Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.subscribedCentrals">
            <summary>
            A list of centrals currently subscribed to the characteristic’s value. (read-only)
            <br></br>Equivalent to the native <c>subscribedCentrals</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is an array of <c>CBCentral</c> objects that are currently subscribed to the characteristic’s value. The array is empty if the characteristic is not configured to support notifications or indications. Even if the characteristic is configured to support notifications or indications, the array is empty if no centrals are currently subscribing to the characteristic’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>updateValue:forCharacteristic:onSubscribedCentrals:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.UUID">
            <summary>
            The Bluetooth-specific UUID of the characteristic.
            <br></br>Equivalent to the native <c>UUID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is a 128-bit UUID that identifies the characteristic.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.value">
            <summary>
            The value of the characteristic.
            <br></br>Equivalent to the native <c>value</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property contains the value of the characteristic. For example, a temperature measurement characteristic of a health thermometer service may have a value that indicates a temperature in Celsius.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBUUID,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicProperties,U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.CoreBluetooth.CBAttributePermissions)">
            <summary>
            Creates an instance of the native CBMutableCharacteristic and initializes the object. Returns a newly initialized mutable characteristic with specified permissions, properties, and value.
            <br></br>Equivalent to the native <c>[[CBMutableCharacteristic alloc] initWithType:properties:value:permissions:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>UUID</em>
                <p>A 128-bit UUID that identifies the characteristic.</p>
                <em>properties</em>
                <p>The properties of the characteristic.</p>
                <em>value</em>
                <p>The characteristic value to be cached. If <c>null</c>, the value is dynamic and will be requested on demand.</p>
                <em>permissions</em>
                <p>The permissions of the characteristic value.</p>
                <b>Return Value</b>
                <p>A newly initialized mutable characteristic.</p>
                <b>Discussion</b>
                <p>If you specify a value for the characteristic, the value is cached and its properties and permissions are set to <c>CBCharacteristicPropertyRead</c> and <c>CBAttributePermissionsReadable</c>, respectively. Therefore, if you need the value of a characteristic to be writeable, or if you expect the value to change during the lifetime of the published service to which the characteristic belongs, you must specify the value to be <c>null</c>. So doing ensures that the value is treated dynamically and requested by the peripheral manager whenever the peripheral manager receives a read or write request from a central. When the peripheral manager receives a read or write request from a central, it calls the <c>peripheralManager:didReceiveReadRequest:</c> or the <c>peripheralManager:didReceiveWriteRequests:</c> methods of its delegate object, respectively.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="UUID">
            </param>
            <param name="properties">
            </param>
            <param name="value">
            </param>
            <param name="permissions">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor">
            <summary>
                <c>CBMutableDescriptor</c> objects represent the descriptors of a <em>local</em> peripheral’s characteristic (local peripheral devices are represented by <c>CBPeripheralManager</c> objects).
            </summary>
            <remarks>
                <p>You use the <c>CBMutableDescriptor</c> class to create a local characteristic descriptor. After you create a descriptor and associate it with a local characteristic, you can publish it (along with the characteristic and local service to which it belongs) to the peripheral’s local database via the <c>addService:</c> method of the <c>CBPeripheralManager</c> class. After you publish a local descriptor, the descriptor is cached and you can no longer make changes to it.</p>
                <p>There are six predefined types of descriptors that—along with their corresponding value types—are detailed in <em>CBUUID Class Reference</em>. That said, only two of these are currently supported when creating local, mutable descriptors: the characteristic user description descriptor and the characteristic format descriptor, represented by the <c>CBUUID</c> constants <c>CBUUIDCharacteristicUserDescriptionString</c> and <c>CBUUIDCharacteristicFormatString</c>, respectively. The system automatically creates the characteristic extended properties descriptor and the client characteristic configuration descriptor, depending on the properties of the characteristic to which the descriptor belongs.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor.UP_CBMutableDescriptor_alloc_initWithType_value_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor" /> class.
            <br></br>Equivalent to the native <c>[[CBMutableDescriptor alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor.ClassExists">
            <summary>
            Returns whether the native CBMutableDescriptor class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableDescriptor.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBUUID,System.Object)">
            <summary>
            Creates an instance of the native CBMutableDescriptor and initializes the object. Returns a newly initialized mutable descriptor with a specified value.
            <br></br>Equivalent to the native <c>[[CBMutableDescriptor alloc] initWithType:value:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>UUID</em>
                <p>A 128-bit UUID that identifies the characteristic. You must use only one of the two currently supported descriptor types: <c>CBUUIDCharacteristicUserDescriptionString</c> or <c>CBUUIDCharacteristicFormatString</c>. For more details about these descriptor types, see <em>CBUUID Class Reference</em>.</p>
                <em>value</em>
                <p>The descriptor value to be cached. This value is required (that is, it must not be <c>null</c>) and cannot be updated dynamically after the descriptor has been published.</p>
                <b>Return Value</b>
                <p>A newly initialized mutable descriptor.</p>
                <b>Discussion</b>
                <p>The value type of <em>value</em> depends on the type of descriptor.</p>
                <ul class="ul">
                    <li class="li">
                        <p>The value type of a characteristic user description descriptor (<c>CBUUIDCharacteristicUserDescriptionString</c>) is a string (an instance of <c>String</c>) that can be used to provide a human-readable description of the characteristic’s value.</p>
                    </li>
                    <li class="li">
                        <p>The value type of a characteristic format descriptor (<c>CBUUIDCharacteristicFormatString</c>) is an <c>NSData</c> object that can be used to specify how the characteristic’s value should be formatted for presentation purposes.</p>
                    </li>
                </ul>
                <p>If you want to create a local characteristic format descriptor, the descriptor’s value must conform to the attribute value of the characteristic format descriptor as defined in the Bluetooth 4.0 specification, Volume 3, Part G, Section 3.3.3.5 (for more information, see  Bluetooth 4.0 Characteristic Presentation Format ).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="UUID">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBMutableService">
            <summary>
            The <c>CBMutableService</c> class adds write access to all of the properties in the <c>CBService</c> class it inherits from. You use this class to create a service or an included service on a <em>local</em> peripheral device (represented by a <c>CBPeripheralManager</c> object). After you create a service, you can add it to the peripheral’s local database using the <c>addService:</c> method of the <c>CBPeripheralManager</c> class. After you add a service to the peripheral’s local database, the service is cached and you can no longer make changes to it.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_get_characteristics(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_set_characteristics(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_get_includedServices(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_set_includedServices(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_get_isPrimary(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_set_isPrimary(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_get_UUID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_set_UUID(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UP_CBMutableService_alloc_initWithType_primary_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBMutableService" /> class.
            <br></br>Equivalent to the native <c>[[CBMutableService alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.ClassExists">
            <summary>
            Returns whether the native CBMutableService class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.characteristics">
            <summary>
            A list of characteristics of a service.
            <br></br>Equivalent to the native <c>characteristics</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>An array containing <c>CBCharacteristic</c> objects that represent a service’s characteristics. Characteristics provide further details about a peripheral’s service. For example, a heart rate service may contain one characteristic that describes the intended body location of the device’s heart rate sensor and another characteristic that transmits heart rate measurement data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.includedServices">
            <summary>
            A list of included services.
            <br></br>Equivalent to the native <c>includedServices</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A service of a peripheral may contain a reference to other services that are available on the peripheral. These other services are the included services of the service.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.isPrimary">
            <summary>
            A Boolean value indicating whether the type of service is primary or secondary.
            <br></br>Equivalent to the native <c>isPrimary</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A peripheral’s service is either primary or secondary. A primary service describes the primary function of a device and can be included by another service. A secondary service describes a service that is relevant only in the context of another service that has referenced it. For example, the primary service of a heart rate monitor may be to expose heart rate data from the monitor’s heart rate sensor, while a secondary service may be to expose the sensor’s battery data. If the value of this property is <c>true</c>, the type of service is primary. If the value of this property is <c>false</c>, the type of service is secondary.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.UUID">
            <summary>
            The Bluetooth-specific UUID of the service.
            <br></br>Equivalent to the native <c>UUID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is a 128-bit UUID that identifies the service.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBMutableService.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBUUID,System.Boolean)">
            <summary>
            Creates an instance of the native CBMutableService and initializes the object. Returns a newly initialized mutable service specified by UUID and service type.
            <br></br>Equivalent to the native <c>[[CBMutableService alloc] initWithType:primary:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>UUID</em>
                <p>A 128-bit UUID that identifies the service.</p>
                <em>isPrimary</em>
                <p>A Boolean value indicating whether the type of service is primary or secondary. If the value is <c>true</c>, the type of service is primary. If the value is <c>false</c>, the type of service is secondary.</p>
                <b>Return Value</b>
                <p>A newly initialized mutual service.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="UUID">
            </param>
            <param name="isPrimary">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral">
            <summary>
            The <c>CBPeripheral</c> class represents remote peripheral devices that your app—by means of a central manager (an instance of <c>CBCentralManager</c>)—has discovered advertising or is currently connected to. Peripherals are identified by universally unique identifiers (UUIDs), represented by <c>NSUUID</c> objects. Peripherals may contain one or more services or provide useful information about their connected signal strength.
            </summary>
            <remarks>
                <p>You use this class to discover, explore, and interact with the services available on a remote peripheral that supports Bluetooth low energy. A service encapsulates the way part of the device behaves. For example, one service of a heart rate monitor may be to expose heart rate data from the monitor’s heart rate sensor. Services themselves are made up of characteristics or included services (references to other services). Characteristics provide further details about a peripheral’s service. For example, the heart rate service just described may contain one characteristic that describes the intended body location of the device’s heart rate sensor and another characteristic that transmits heart rate measurement data. Finally, characteristics contain any number of descriptors that provide more information about the characteristic’s value, such as a human-readable description and a way to format the value.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverCharacteristics">
            <summary>
            Invoked when you discover the characteristics of a specified service.
            <br></br>Equivalent to implementing the native <c>peripheral:didDiscoverCharacteristicsForService:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverCharacteristicsEventArgs">
            <summary>
            Event arguments for DidDiscoverCharacteristics.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverCharacteristicsEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBService,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverCharacteristicsEventArgs.service">
            <summary>service</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverCharacteristicsEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverDescriptors">
            <summary>
            Invoked when you discover the descriptors of a specified characteristic.
            <br></br>Equivalent to implementing the native <c>peripheral:didDiscoverDescriptorsForCharacteristic:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverDescriptorsEventArgs">
            <summary>
            Event arguments for DidDiscoverDescriptors.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverDescriptorsEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverDescriptorsEventArgs.characteristic">
            <summary>characteristic</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverDescriptorsEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverIncludedServices">
            <summary>
            Invoked when you discover the included services of a specified service.
            <br></br>Equivalent to implementing the native <c>peripheral:didDiscoverIncludedServicesForService:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverIncludedServicesEventArgs">
            <summary>
            Event arguments for DidDiscoverIncludedServices.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverIncludedServicesEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBService,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverIncludedServicesEventArgs.service">
            <summary>service</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverIncludedServicesEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverServices">
            <summary>
            Invoked when you discover the peripheral’s available services.
            <br></br>Equivalent to implementing the native <c>peripheral:didDiscoverServices:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverServicesEventArgs">
            <summary>
            Event arguments for DidDiscoverServices.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverServicesEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidDiscoverServicesEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidModifyServices">
            <summary>
            Invoked when a peripheral’s services have changed.
            <br></br>Equivalent to implementing the native <c>peripheral:didModifyServices:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidModifyServicesEventArgs">
            <summary>
            Event arguments for DidModifyServices.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidModifyServicesEventArgs.#ctor(System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidModifyServicesEventArgs.invalidatedServices">
            <summary>invalidatedServices</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateNotificationState">
            <summary>
            Invoked when the peripheral receives a request to start or stop providing notifications for a specified characteristic’s value.
            <br></br>Equivalent to implementing the native <c>peripheral:didUpdateNotificationStateForCharacteristic:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateNotificationStateEventArgs">
            <summary>
            Event arguments for DidUpdateNotificationState.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateNotificationStateEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateNotificationStateEventArgs.characteristic">
            <summary>characteristic</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateNotificationStateEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForCharacteristic">
            <summary>
            Invoked when you retrieve a specified characteristic’s value, or when the peripheral device notifies your app that the characteristic’s value has changed.
            <br></br>Equivalent to implementing the native <c>peripheral:didUpdateValueForCharacteristic:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForCharacteristicEventArgs">
            <summary>
            Event arguments for DidUpdateValueForCharacteristic.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForCharacteristicEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForCharacteristicEventArgs.characteristic">
            <summary>characteristic</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForCharacteristicEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForDescriptor">
            <summary>
            Invoked when you retrieve a specified characteristic descriptor’s value.
            <br></br>Equivalent to implementing the native <c>peripheral:didUpdateValueForDescriptor:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForDescriptorEventArgs">
            <summary>
            Event arguments for DidUpdateValueForDescriptor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForDescriptorEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBDescriptor,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForDescriptorEventArgs.descriptor">
            <summary>descriptor</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateValueForDescriptorEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForCharacteristic">
            <summary>
            Invoked when you write data to a characteristic’s value.
            <br></br>Equivalent to implementing the native <c>peripheral:didWriteValueForCharacteristic:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForCharacteristicEventArgs">
            <summary>
            Event arguments for DidWriteValueForCharacteristic.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForCharacteristicEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForCharacteristicEventArgs.characteristic">
            <summary>characteristic</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForCharacteristicEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForDescriptor">
            <summary>
            Invoked when you write data to a characteristic descriptor’s value.
            <br></br>Equivalent to implementing the native <c>peripheral:didWriteValueForDescriptor:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForDescriptorEventArgs">
            <summary>
            Event arguments for DidWriteValueForDescriptor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForDescriptorEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBDescriptor,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForDescriptorEventArgs.descriptor">
            <summary>descriptor</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidWriteValueForDescriptorEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateName">
            <summary>
            Invoked when a peripheral’s name changes.
            <br></br>Equivalent to implementing the native <c>peripheralDidUpdateName:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateRSSI">
            <summary>
            Invoked when you retrieve the value of the peripheral’s current RSSI while it is connected to the central manager.
            <br></br>Equivalent to implementing the native <c>peripheralDidUpdateRSSI:error:</c> method of <c>CBPeripheralDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateRSSIEventArgs">
            <summary>
            Event arguments for DidUpdateRSSI.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateRSSIEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DidUpdateRSSIEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_identifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_isConnected(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_name(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_RSSI(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_services(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_state(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_get_UUID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_discoverCharacteristics_forService_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_discoverDescriptorsForCharacteristic_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_discoverIncludedServices_forService_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_discoverServices_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_readRSSI(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_readValueForCharacteristic_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_readValueForDescriptor_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_setNotifyValue_forCharacteristic_(System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_writeValue_forCharacteristic_type_(System.String,System.String,System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UP_CBPeripheral_writeValue_forDescriptor_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral" /> class.
            <br></br>Equivalent to the native <c>[[CBPeripheral alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.ClassExists">
            <summary>
            Returns whether the native CBPeripheral class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.Delegate">
            <summary>
            The delegate object specified to receive peripheral events.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For information about how to implement your peripheral delegate, see <em>CBPeripheralDelegate Protocol Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.identifier">
            <summary>
            The UUID associated with the peripheral. (read-only)
            <br></br>Equivalent to the native <c>identifier</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The first time a central manager discovers a peripheral, the system assigns the peripheral a UUID, represented by a new <c>NSUUID</c> object. Your app can store this UUID and later provide it to a central manager for use in retrieving this specific peripheral. Peripherals are identified by <c>NSUUID</c> UUIDs instead of by the <c>CBUUID</c> objects that identify a peripheral’s services, characteristics, and characteristic descriptors.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.isConnected">
            <summary>
            A Boolean value indicating whether the peripheral is currently connected to the central manager. (read-only) ( Deprecated in iOS 7.0.  Use the <c>state</c> property instead.)
            <br></br>Equivalent to the native <c>isConnected</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>true</c> if the peripheral is currently connected to the central manager as a result of your successfully calling the <c>connectPeripheral:options:</c> method of the <c>CBCentralManager</c> class. <c>false</c> if the peripheral is not currently connected to the central manager.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                    <li>Deprecated in iOS 7.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.name">
            <summary>
            The name of the peripheral. (read-only)
            <br></br>Equivalent to the native <c>name</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is a string containing the device name of the peripheral. You can access this property to retrieve a human-readable name of the peripheral. There may be two types of names associated with a peripheral: one that the device advertises and another that the device publishes in its database as its Bluetooth low energy Generic Access Profile (GAP) device name. Although this property may contain either type of name, the GAP device name takes priority. This means that if a peripheral has both types of names associated with it, this property returns its GAP device name.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>peripheralDidUpdateName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.RSSI">
            <summary>
            The RSSI, in decibels, of the peripheral. (read-only)
            <br></br>Equivalent to the native <c>RSSI</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Returns a number, in decibels, that indicates the RSSI of the peripheral while it is currently connected to the central manager. You can use a connected peripheral’s RSSI property to determine the peripheral’s proximity. The default value of this property is <c>null</c> and is set the first time you successfully call the <c>readRSSI</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.services">
            <summary>
            A list of services on the peripheral that have been discovered. (read-only)
            <br></br>Equivalent to the native <c>services</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Returns an array of services (represented by <c>CBService</c> objects) that were discovered on the peripheral through a successful call to the <c>discoverServices:</c> method. If you have yet to call the <c>discoverServices:</c> method to discover the services of the peripheral, or if there was an error in doing so, the value of this property is <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.state">
            <summary>
            The current connection state of the peripheral. (read-only)
            <br></br>Equivalent to the native <c>state</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property represents the current connection state of the peripheral. For a list of the possible values of this property, see  “Peripheral State.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.UUID">
            <summary>
            The UUID of the peripheral. (read-only) ( Deprecated in iOS 7.0.  Use the <c>identifier</c> property instead.)
            <br></br>Equivalent to the native <c>UUID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The first time a central connects to a peripheral, the system assigns the peripheral a UUID, represented by a new <c>CFUUIDRef</c> object. Your app can store this UUID and later provide it to a central manager for use in retrieving this specific peripheral. Peripherals are identified by standard <c>CFUUIDRef</c> UUIDs instead of by the <c>CBUUID</c> objects that identify a peripheral’s services, characteristics, and characteristic descriptors.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                    <li>Deprecated in iOS 7.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DiscoverCharacteristics(System.Object[],U3DXT.iOS.Native.CoreBluetooth.CBService)">
            <summary>
            Discovers the specified characteristics of a service.
            <br></br>Equivalent to the native <c>discoverCharacteristics:forService:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>characteristicUUIDs</em>
                <p>An array of <c>CBUUID</c> objects that you are interested in. Here, each <c>CBUUID</c> object represents a UUID that identifies the type of a characteristic you want to discover.</p>
                <em>service</em>
                <p>The service whose characteristics you want to discover.</p>
                <b>Discussion</b>
                <p>An array of <c>CBUUID</c> objects—representing characteristic UUIDs—can be provided in the <em>characteristicUUIDs</em> parameter. As a result, the peripheral returns only the characteristics of the service that your app is interested in (recommended). If the <em>characteristicUUIDs</em> parameter is <c>null</c>, all the characteristics of the service are returned; setting the parameter to <c>null</c> is considerably slower and is not recommended. When the peripheral discovers one or more characteristics of the specified service, it calls the <c><!--a target="_self" -->peripheral:didDiscoverCharacteristicsForService:error:<!--/a--></c> method of its delegate object. If the characteristics of a service are successfully discovered, you can access them through the service’s <c>characteristics</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="characteristicUUIDs">
            </param>
            <param name="service">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DiscoverDescriptors(U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic)">
            <summary>
            Discovers the descriptors of a characteristic.
            <br></br>Equivalent to the native <c>discoverDescriptorsForCharacteristic:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>characteristic</em>
                <p>The characteristic whose descriptors you want to discover.</p>
                <b>Discussion</b>
                <p>When the peripheral discovers one or more descriptors of the specified characteristic, it calls the <c><!--a target="_self" -->peripheral:didDiscoverDescriptorsForCharacteristic:error:<!--/a--></c> method of its delegate object. If the descriptors of a characteristic are successfully discovered, you can access them through the characteristic’s <c>descriptors</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="characteristic">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DiscoverIncludedServices(System.Object[],U3DXT.iOS.Native.CoreBluetooth.CBService)">
            <summary>
            Discovers the specified included services of a service.
            <br></br>Equivalent to the native <c>discoverIncludedServices:forService:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>includedServiceUUIDs</em>
                <p>An array of <c>CBUUID</c> objects that you are interested in. Here, each <c>CBUUID</c> object represents a UUID that identifies the type of included service you want to discover.</p>
                <em>service</em>
                <p>The service whose included services you want to discover.</p>
                <b>Discussion</b>
                <p>You can provide an array of <c>CBUUID</c> objects—representing included service UUIDs—in the <em>includedServiceUUIDs</em> parameter. When you do, the peripheral returns only the included services of the service that your app is interested in (recommended). If the <em>includedServicesUUIDs</em> parameter is <c>null</c>, all the included services of the service are returned; setting the parameter to <c>null</c> is considerably slower and is not recommended. When the peripheral discovers one or more included services of the specified service, it calls the <c><!--a target="_self" -->peripheral:didDiscoverIncludedServicesForService:error:<!--/a--></c> method of its delegate object. If the included services of a service are successfully discovered, you can access them through the service's <c>includedServices</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="includedServiceUUIDs">
            </param>
            <param name="service">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.DiscoverServices(System.Object[])">
            <summary>
            Discovers the specified services of the peripheral.
            <br></br>Equivalent to the native <c>discoverServices:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>serviceUUIDs</em>
                <p>An array of <c>CBUUID</c> objects that you are interested in. Here, each <c>CBUUID</c> object represents a UUID that identifies the type of service you want to discover.</p>
                <b>Discussion</b>
                <p>You can provide an array of <c>CBUUID</c> objects—representing service UUIDs—in the <em>serviceUUIDs</em> parameter. When you do, the peripheral returns only the services of the peripheral that your app is interested in (recommended). If the <em>servicesUUIDs</em> parameter is <c>null</c>, all the available services of the peripheral are returned; setting the parameter to <c>null</c> is considerably slower and is not recommended. When the peripheral discovers one or more services, it calls the <c><!--a target="_self" -->peripheral:didDiscoverServices:<!--/a--></c> method of its delegate object. If the services of the peripheral are successfully discovered, you can access them through the peripheral’s <c>services</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="serviceUUIDs">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.ReadRSSI">
            <summary>
            Retrieves the current RSSI value for the peripheral while it is connected to the central manager.
            <br></br>Equivalent to the native <c>readRSSI</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When you call this method to retrieve the RSSI of the peripheral while it is currently connected to the central manager, the peripheral calls the <c><!--a target="_self" -->peripheralDidUpdateRSSI:error:<!--/a--></c> method of its delegate object. If the RSSI value of the peripheral is successfully retrieved, you can access it through the peripheral’s <c>RSSI</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.ReadValue(U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic)">
            <summary>
            Retrieves the value of a specified characteristic.
            <br></br>Equivalent to the native <c>readValueForCharacteristic:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>characteristic</em>
                <p>The characteristic whose value you want to read.</p>
                <b>Discussion</b>
                <p>When you call this method to read the value of a characteristic, the peripheral calls the <c><!--a target="_self" -->peripheral:didUpdateValueForCharacteristic:error:<!--/a--></c> method of its delegate object. If the value of the characteristic is successfully retrieved, you can access it through the characteristic’s <c>value</c> property.</p>
                <p>Not all characteristics are guaranteed to have a readable value. You can determine whether a characteristic’s value is readable by accessing the relevant properties of the <c><!--a target="_self" -->CBCharacteristicProperties<!--/a--></c> enumeration, which are detailed in <em>CBCharacteristic Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="characteristic">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.ReadValue(U3DXT.iOS.Native.CoreBluetooth.CBDescriptor)">
            <summary>
            Retrieves the value of a specified characteristic descriptor.
            <br></br>Equivalent to the native <c>readValueForDescriptor:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>descriptor</em>
                <p>The characteristic descriptor whose value you want to read.</p>
                <b>Discussion</b>
                <p>When you call this method to read the value of a characteristic descriptor, the peripheral calls the <c><!--a target="_self" -->peripheral:didUpdateValueForDescriptor:error:<!--/a--></c> method of its delegate object. If the value of the characteristic descriptor is successfully retrieved, you can access it through the characteristic descriptor’s <c>value</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="descriptor">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.SetNotifyValue(System.Boolean,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic)">
            <summary>
            Sets notifications or indications for the value of a specified characteristic.
            <br></br>Equivalent to the native <c>setNotifyValue:forCharacteristic:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>enabled</em>
                <p>A Boolean value indicating whether you wish to receive notifications or indications whenever the characteristic’s value changes. <c>true</c> if you want to enable notifications or indications for the characteristic’s value. <c>false</c> if you do not want to receive notifications or indications whenever the characteristic’s value changes.</p>
                <em>characteristic</em>
                <p>The specified characteristic.</p>
                <b>Discussion</b>
                <p>When you enable notifications for characteristic’s value, the peripheral calls the <c><!--a target="_self" -->peripheral:didUpdateNotificationStateForCharacteristic:error:<!--/a--></c> method of its delegate object to notify your app when the characteristic’s value changes. Because it is the peripheral that chooses when to send an update, your app should be prepared to handle them as long as notifications or indications remain enabled. If the specified characteristic is configured to allow both notifications and indications, calling this method enables notifications only. You can disable notifications and indications for a characteristic’s value by calling this method with the <em>enabled</em> parameter set to <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>CBConnectPeripheralOptionNotifyOnNotificationKey</c>
                    </li>
                </ul>
            </remarks>
            <param name="enabled">
            </param>
            <param name="characteristic">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.WriteValue(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristicWriteType)">
            <summary>
            Writes the value of a characteristic.
            <br></br>Equivalent to the native <c>writeValue:forCharacteristic:type:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The value to be written.</p>
                <em>characteristic</em>
                <p>The characteristic whose value is to be written.</p>
                <em>type</em>
                <p>The type of write to be executed. For a list of the possible types of writes to a characteristic’s value, see  “Characteristic Write Types.” </p>
                <b>Discussion</b>
                <p>When you call this method to write the value of a characteristic, the peripheral calls the <c><!--a target="_self" -->peripheral:didWriteValueForCharacteristic:error:<!--/a--></c> method of its delegate object only if you specified the write type as <c>CBCharacteristicWriteWithResponse</c>. The response you receive through the <c><!--a target="_self" -->peripheral:didWriteValueForCharacteristic:error:<!--/a--></c> delegate method indicates whether the write was successful; if the write failed, it details the cause of the failure in an error. If you specify the write type as <c>CBCharacteristicWriteWithoutResponse</c> and the write does not succeed, you are not notified nor do you receive an error indicating the cause of the failure. The data passed into the <em>data</em> parameter is copied, and you can dispose of it after the method returns.</p>
                <p>Characteristics may allow only certain type of writes to be performed on their value. To determine which types of writes are permitted to a characteristic’s value, you access the relevant properties of the <c><!--a target="_self" -->CBCharacteristicProperties<!--/a--></c> enumeration, which are detailed in <em>CBCharacteristic Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="characteristic">
            </param>
            <param name="type">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheral.WriteValue(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.CoreBluetooth.CBDescriptor)">
            <summary>
            Writes the value of a characteristic descriptor.
            <br></br>Equivalent to the native <c>writeValue:forDescriptor:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The value to be written.</p>
                <em>descriptor</em>
                <p>The descriptor whose value is to be written.</p>
                <b>Discussion</b>
                <p>When you call this method to write the value of a characteristic descriptor, the peripheral calls the <c><!--a target="_self" -->peripheral:didWriteValueForDescriptor:error:<!--/a--></c> method of its delegate object. The data passed into the <em>data</em> parameter is copied, and you can dispose of it after the method returns.</p>
                <p>You cannot use this method to write the value of a client configuration descriptor (represented by the <c>CBUUIDClientCharacteristicConfigurationString</c> constant), which describes how notification or indications are configured for a characteristic’s value with respect to a client. If you want to manage notifications or indications for a characteristic’s value, you must use the <c>setNotifyValue:forCharacteristic:</c> method instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="descriptor">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate">
            <summary>
            The delegate of a <c>CBPeripheral</c> object must adopt the <c><!--a target="_self" -->CBPeripheralDelegate<!--/a--></c> protocol. The delegate uses this protocol’s methods to monitor the discovery, exploration, and interaction of a remote peripheral’s services and properties. There are no required methods in this protocol.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didDiscoverCharacteristicsForService_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didDiscoverDescriptorsForCharacteristic_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didDiscoverIncludedServicesForService_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didDiscoverServices__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didModifyServices__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didUpdateNotificationStateForCharacteristic_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didUpdateValueForCharacteristic_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didUpdateValueForDescriptor_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didWriteValueForCharacteristic_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheral_didWriteValueForDescriptor_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheralDidUpdateName__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.UP_CBPeripheralDelegate_set__peripheralDidUpdateRSSI_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidDiscoverCharacteristics(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBService,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you discover the characteristics of a specified service.
            <br></br>Equivalent to the native <c>peripheral:didDiscoverCharacteristicsForService:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>service</em>
                <p>The service that the characteristics belong to.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>discoverCharacteristics:forService:</c> method. If the characteristics of the specified service are successfully discovered, you can access them through the service's <c>characteristics</c> property. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="service">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidDiscoverDescriptors(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you discover the descriptors of a specified characteristic.
            <br></br>Equivalent to the native <c>peripheral:didDiscoverDescriptorsForCharacteristic:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>characteristic</em>
                <p>The characteristic that the characteristic descriptors belong to.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>discoverDescriptorsForCharacteristic:</c> method. If the characteristic descriptors of the specified characteristic are successfully discovered, you can access them through the characteristic’s <c>descriptors</c> property. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="characteristic">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidDiscoverIncludedServices(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBService,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you discover the included services of a specified service.
            <br></br>Equivalent to the native <c>peripheral:didDiscoverIncludedServicesForService:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>service</em>
                <p>The <c>CBService</c> object containing the included service.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when you app calls the <c>discoverIncludedServices:forService:</c> method. If the included services of the specified service are successfully discovered, you can access them through the service’s <c>includedServices</c> property. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="service">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidDiscoverServices(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you discover the peripheral’s available services.
            <br></br>Equivalent to the native <c>peripheral:didDiscoverServices:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral that the services belong to.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>discoverServices:</c> method. If the services of the peripheral are successfully discovered, you can access them through the peripheral’s <c>services</c> property. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidModifyServices(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,System.Object[])">
            <summary>
            (optional) Invoked when a peripheral’s services have changed.
            <br></br>Equivalent to the native <c>peripheral:didModifyServices:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>invalidatedServices</em>
                <p>A list of services that have been invalidated.</p>
                <b>Discussion</b>
                <p>This method is invoked whenever one or more services of a peripheral have changed. A peripheral’s services have changed if:</p>
                <ul class="ul">
                    <li class="li">
                        <p>A service is removed from the peripheral’s database</p>
                    </li>
                    <li class="li">
                        <p>A new service is added to the peripheral’s database</p>
                    </li>
                    <li class="li">
                        <p>A service that was previously removed from the peripheral’s database is readded to the database at a different location</p>
                    </li>
                </ul>
                <p>If you previously discovered any of the services that have changed, they are provided in the <em>invalidatedServices</em> parameter and can no longer be used. You can use the <c>discoverServices:</c> method to discover any new services that have been added to the peripheral’s database or to find out whether any of the invalidated services that you were using (and want to continue using) have been added back to a different location in the peripheral’s database.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="invalidatedServices">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidUpdateNotificationState(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when the peripheral receives a request to start or stop providing notifications for a specified characteristic’s value.
            <br></br>Equivalent to the native <c>peripheral:didUpdateNotificationStateForCharacteristic:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>characteristic</em>
                <p>The characteristic for which notifications of its value are to be configured.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>setNotifyValue:forCharacteristic:</c> method. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="characteristic">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidUpdateValueForCharacteristic(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you retrieve a specified characteristic’s value, or when the peripheral device notifies your app that the characteristic’s value has changed.
            <br></br>Equivalent to the native <c>peripheral:didUpdateValueForCharacteristic:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>characteristic</em>
                <p>The characteristic whose value has been retrieved.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>readValueForCharacteristic:</c> method, or when the peripheral notifies your app that the value of the characteristic for which notifications and indications are enabled (via a successful call to <c>setNotifyValue:forCharacteristic:</c>) has changed. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="characteristic">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidUpdateValueForDescriptor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBDescriptor,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you retrieve a specified characteristic descriptor’s value.
            <br></br>Equivalent to the native <c>peripheral:didUpdateValueForDescriptor:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>descriptor</em>
                <p>The characteristic descriptor whose value has been retrieved.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>readValueForDescriptor:</c> method. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="descriptor">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidWriteValueForCharacteristic(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you write data to a characteristic’s value.
            <br></br>Equivalent to the native <c>peripheral:didWriteValueForCharacteristic:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>characteristic</em>
                <p>The characteristic whose value has been written.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked only when your app calls the <c>writeValue:forCharacteristic:type:</c> method with the <c>CBCharacteristicWriteWithResponse</c> constant specified as the write type. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="characteristic">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidWriteValueForDescriptor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.CoreBluetooth.CBDescriptor,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you write data to a characteristic descriptor’s value.
            <br></br>Equivalent to the native <c>peripheral:didWriteValueForDescriptor:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>descriptor</em>
                <p>The characteristic descriptor whose value has been written.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>writeValue:forDescriptor:</c> method. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="descriptor">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidUpdateName(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral)">
            <summary>
            (optional) Invoked when a peripheral’s name changes.
            <br></br>Equivalent to the native <c>peripheralDidUpdateName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <b>Discussion</b>
                <p>The method is invoked whenever the peripheral device’s Generic Access Profile (GAP) device name has changed. Since a peripheral device can change its GAP device name, you can implement this method if your app needs to display the current name of the peripheral device.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate.DidUpdateRSSI(U3DXT.iOS.Native.CoreBluetooth.CBPeripheral,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you retrieve the value of the peripheral’s current RSSI while it is connected to the central manager.
            <br></br>Equivalent to the native <c>peripheralDidUpdateRSSI:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral providing this information.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>readRSSI</c> method. If successful, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didDiscoverCharacteristicsForService_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didDiscoverCharacteristicsForService_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didDiscoverDescriptorsForCharacteristic_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didDiscoverDescriptorsForCharacteristic_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didDiscoverIncludedServicesForService_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didDiscoverIncludedServicesForService_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didDiscoverServices__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didDiscoverServices__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didModifyServices__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didModifyServices__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didUpdateNotificationStateForCharacteristic_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didUpdateNotificationStateForCharacteristic_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didUpdateValueForCharacteristic_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didUpdateValueForCharacteristic_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didUpdateValueForDescriptor_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didUpdateValueForDescriptor_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didWriteValueForCharacteristic_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didWriteValueForCharacteristic_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheral_didWriteValueForDescriptor_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheral_didWriteValueForDescriptor_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheralDidUpdateName__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralDidUpdateName__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralDelegate._peripheralDidUpdateRSSI_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralDidUpdateRSSI_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager">
            <summary>
                <c>CBPeripheralManager</c> objects are used to manage published services within the local peripheral device’s Generic Attribute Profile (GATT) database and to advertise these services to central devices (represented by <c>CBCentral</c> objects). While a service is in the database, it is visible to, and can be accessed by, any connected central. That said, if your app has not specified the <c>bluetooth-peripheral</c> background mode, the contents of its services become disabled when it is in the background or in a suspended state; any remote central trying to access the service’s characteristic value or characteristic descriptors receives an error.
            </summary>
            <remarks>
                <p>Before you call <c>CBPeripheralManager</c> methods, the state of the peripheral manager object must be powered on, as indicated by the <c>CBPeripheralManagerStatePoweredOn</c>. This state indicates that the peripheral device (your iPhone or iPad, for instance) supports Bluetooth low energy and that its Bluetooth is on and available to use.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.OptionShowPowerAlertKey">
            <summary>
                <p>A Boolean value that specifies whether the system should display a warning dialog to the user if Bluetooth is powered off when the peripheral manager is instantiated.</p>
                <p>The value for this key is an <c>double</c>. If the key is not specified, the default value is <c>false</c>.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerOptionShowPowerAlertKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><p></p>This is a constant for "Peripheral Manager Initialization Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.OptionRestoreIdentifierKey">
            <summary>
                <p>A string (an instance of <c>String</c>) containing a unique identifier (UID) for the peripheral manager that is being instantiated.</p>
                <p>The system uses this UID to identify a specific peripheral manager. As a result, the UID must remain the same for subsequent executions of the app in order for the peripheral manager to be successfully restored.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerOptionRestoreIdentifierKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><p></p>This is a constant for "Peripheral Manager Initialization Options".
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidSubscribeTo">
            <summary>
            Invoked when a remote central device subscribes to a characteristic’s value.
            <br></br>Equivalent to implementing the native <c>peripheralManager:central:didSubscribeToCharacteristic:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidSubscribeToEventArgs">
            <summary>
            Event arguments for DidSubscribeTo.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidSubscribeToEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCentral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidSubscribeToEventArgs.central">
            <summary>central</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidSubscribeToEventArgs.characteristic">
            <summary>characteristic</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidUnsubscribe">
            <summary>
            Invoked when a remote central device unsubscribes from a characteristic’s value.
            <br></br>Equivalent to implementing the native <c>peripheralManager:central:didUnsubscribeFromCharacteristic:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidUnsubscribeEventArgs">
            <summary>
            Event arguments for DidUnsubscribe.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidUnsubscribeEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBCentral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidUnsubscribeEventArgs.central">
            <summary>central</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidUnsubscribeEventArgs.characteristic">
            <summary>characteristic</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidAdd">
            <summary>
            Invoked when you publish a service, and any of its associated characteristics and characteristic descriptors, to the local Generic Attribute Profile (GATT) database.
            <br></br>Equivalent to implementing the native <c>peripheralManager:didAddService:error:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidAddEventArgs">
            <summary>
            Event arguments for DidAdd.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidAddEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBService,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidAddEventArgs.service">
            <summary>service</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidAddEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveRead">
            <summary>
            Invoked when a local peripheral device receives an Attribute Protocol (ATT) read request for a characteristic that has a dynamic value.
            <br></br>Equivalent to implementing the native <c>peripheralManager:didReceiveReadRequest:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveReadEventArgs">
            <summary>
            Event arguments for DidReceiveRead.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveReadEventArgs.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBATTRequest)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveReadEventArgs.request">
            <summary>request</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveWriteRequests">
            <summary>
            Invoked when a local peripheral device receives an Attribute Protocol (ATT) write request for a characteristic that has a dynamic value.
            <br></br>Equivalent to implementing the native <c>peripheralManager:didReceiveWriteRequests:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveWriteRequestsEventArgs">
            <summary>
            Event arguments for DidReceiveWriteRequests.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveWriteRequestsEventArgs.#ctor(System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidReceiveWriteRequestsEventArgs.requests">
            <summary>requests</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.WillRestoreState">
            <summary>
            Invoked when the peripheral manager is about to be restored by the system.
            <br></br>Equivalent to implementing the native <c>peripheralManager:willRestoreState:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.WillRestoreStateEventArgs">
            <summary>
            Event arguments for WillRestoreState.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.WillRestoreStateEventArgs.#ctor(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.WillRestoreStateEventArgs.dict">
            <summary>dict</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidStartAdvertising">
            <summary>
            Invoked when you start advertising the local peripheral device’s data.
            <br></br>Equivalent to implementing the native <c>peripheralManagerDidStartAdvertising:error:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidStartAdvertisingEventArgs">
            <summary>
            Event arguments for DidStartAdvertising.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidStartAdvertisingEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidStartAdvertisingEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.DidUpdateState">
            <summary>
            Invoked when the peripheral manager's state is updated. (required)
            <br></br>Equivalent to implementing the native <c>peripheralManagerDidUpdateState:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.IsReadyToUpdateSubscribers">
            <summary>
            Invoked when a local peripheral device is again ready to send characteristic value updates. (required)
            <br></br>Equivalent to implementing the native <c>peripheralManagerIsReadyToUpdateSubscribers:</c> method of <c>CBPeripheralManagerDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_authorizationStatus">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_get_isAdvertising(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_get_state(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_addService_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_alloc_initWithDelegate_queue_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_alloc_initWithDelegate_queue_options_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_removeAllServices(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_removeService_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_respondToRequest_withResult_(System.String,System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_setDesiredConnectionLatency_forCentral_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_startAdvertising_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_stopAdvertising(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UP_CBPeripheralManager_updateValue_forCharacteristic_onSubscribedCentrals_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager" /> class.
            <br></br>Equivalent to the native <c>[[CBPeripheralManager alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.ClassExists">
            <summary>
            Returns whether the native CBPeripheralManager class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.AuthorizationStatus">
            <summary>
            Returns the app’s authorization status for sharing data while in the background state.
            <br></br>Equivalent to the native <c>authorizationStatus</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A value indicating whether the app is authorized to share data using Bluetooth services while in the background. For a list of the possible values, see  “Peripheral Manager Authorization Status.” </p>
                <b>Discussion</b>
                <p>The authorization status of a given app is managed by the system and determined by several factors. Apps must be explicitly authorized to share data using Bluetooth services while in the background state. The system automatically displays a request for user authorization when your app first attempts to use Bluetooth services to share data.</p>
                <p>Calling this method does not prompt the user for access. Instead, you use this method to detect restricted access and simply hide any affected UI features from the user.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.Delegate">
            <summary>
            The delegate object specified to receive peripheral events.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For information about how to implement your peripheral manager delegate, see <em>CBPeripheralManagerDelegate Protocol Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.isAdvertising">
            <summary>
            A Boolean value indicating whether the peripheral is currently advertising data. (read-only)
            <br></br>Equivalent to the native <c>isAdvertising</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>true</c> if the peripheral is currently advertising data as a result of you successfully calling the <c>startAdvertising:</c> method. <c>false</c> if the peripheral is not currently advertising data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.state">
            <summary>
            The current state of the peripheral manager. (read-only)
            <br></br>Equivalent to the native <c>state</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When a peripheral manager object is initially created, the default value of this property is <c>CBPeripheralManagerStateUnknown</c>. As the peripheral manager’s state changes, the peripheral manager updates the value of this property and calls the <c>peripheralManagerDidUpdateState:</c> method of its delegate object. For a list of the possible values representing the state of the peripheral manager, see  “Peripheral Manager State.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.AddService(U3DXT.iOS.Native.CoreBluetooth.CBMutableService)">
            <summary>
            Publishes a service and any of its associated characteristics and characteristic descriptors to the local GATT database.
            <br></br>Equivalent to the native <c>addService:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>service</em>
                <p>The service you want to publish.</p>
                <b>Discussion</b>
                <p>When you add a service to the database, the peripheral manager calls the <c>peripheralManager:didAddService:error:</c> method of its delegate object. If the service contains any included services, you must publish them first.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="service">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate,System.Object)">
            <summary>
            Creates an instance of the native CBPeripheralManager and initializes the object. Initializes the peripheral manager with a specified delegate and dispatch queue.
            <br></br>Equivalent to the native <c>[[CBPeripheralManager alloc] initWithDelegate:queue:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>delegate</em>
                <p>The delegate to receive the peripheral role events.</p>
                <em>queue</em>
                <p>The dispatch queue for dispatching the peripheral role events. If the value is <c>null</c>, the peripheral manager dispatches peripheral role events using the main queue.</p>
                <b>Return Value</b>
                <p>Returns a newly initialized peripheral manager.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDelegate">
            </param>
            <param name="queue">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.#ctor(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native CBPeripheralManager and initializes the object. Initializes the peripheral manager with specified delegate, dispatch queue, and initialization options.
            <br></br>Equivalent to the native <c>[[CBPeripheralManager alloc] initWithDelegate:queue:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>delegate</em>
                <p>The delegate to receive the peripheral role events.</p>
                <em>queue</em>
                <p>The dispatch queue for dispatching the peripheral role events. If the value is <c>null</c>, the peripheral manager dispatches peripheral role events using the main queue.</p>
                <em>options</em>
                <p>An optional dictionary containing initialization options for a peripheral manager. For available options, see  “Peripheral Manager Initialization Options.” </p>
                <b>Return Value</b>
                <p>Returns a newly initialized peripheral manager.</p>
                <b>Discussion</b>
                <p>This method is the designated initializer for the <c>CBPeripheralManager</c> class.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDelegate">
            </param>
            <param name="queue">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.RemoveAllServices">
            <summary>
            Removes all published services from the local GATT database.
            <br></br>Equivalent to the native <c>removeAllServices</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Because the GATT database is shared among apps on the local peripheral device, this method removes only the services that you have added using the <c>addService:</c> method. Any services that have been published by other apps on the local peripheral device are not removed from the GATT database.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.RemoveService(U3DXT.iOS.Native.CoreBluetooth.CBMutableService)">
            <summary>
            Removes a specified published service from the local GATT database.
            <br></br>Equivalent to the native <c>removeService:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>service</em>
                <p>The service you want to remove.</p>
                <b>Discussion</b>
                <p>Because the GATT database is shared among apps on the local peripheral device, more than one instance of a service may exist in the database. As a result, this method removes only the instance of the service that your app added to the database (using the <c>addService:</c> method). If the service is included by any other services, you must remove them first.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="service">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.RespondToRequest(U3DXT.iOS.Native.CoreBluetooth.CBATTRequest,U3DXT.iOS.Native.CoreBluetooth.CBATTError)">
            <summary>
            Responds to a read or write request from a connected central.
            <br></br>Equivalent to the native <c>respondToRequest:withResult:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>request</em>
                <p>The read or write request that was received from the connected central. For more information about read and write requests, see <em>CBATTRequest Class Reference</em>.</p>
                <em>result</em>
                <p>The result of attempting to fulfill the request. For a list of possible results, see <em>Core Bluetooth Constants Reference</em>.</p>
                <b>Discussion</b>
                <p>When the peripheral manager receives a request (represented as a <c>CBATTRequest</c> object) from a connected central to read or write a characteristic’s value, it calls the <c>peripheralManager:didReceiveReadRequest:</c> or <c>peripheralManager:didReceiveWriteRequests:</c> method of its delegate object. Each time one of these delegate methods is called, you call this method to respond to the corresponding read or write request.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="request">
            </param>
            <param name="result">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.SetDesiredConnectionLatency(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConnectionLatency,U3DXT.iOS.Native.CoreBluetooth.CBCentral)">
            <summary>
            Sets the desired connection latency for an existing connection to a central device.
            <br></br>Equivalent to the native <c>setDesiredConnectionLatency:forCentral:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>latency</em>
                <p>The desired connection latency. For a list of the possible connection latency values that you may set for the peripheral manager, see  “Peripheral Manager Connection Latency.” </p>
                <em>central</em>
                <p>The central that the peripheral manager is currently connected to.</p>
                <b>Discussion</b>
                <p>The latency of a peripheral-central connection controls how frequently messages can be exchanged between the peripheral and the central to which the peripheral is connected. By setting a desired connection latency, you manage the relationship between the frequency with which data is exchanged and the resulting battery performance of the peripheral device. When you call this method to set the connection latency, note that connection latency changes are not guaranteed. And so, the resultant latency may vary. If you do not explicitly set a latency, the connection latency is set to the latency that was chosen by the central device when the connection was first established. Typically, it is not necessary to change the connection latency.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="latency">
            </param>
            <param name="central">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.StartAdvertising(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Advertises peripheral manager data.
            <br></br>Equivalent to the native <c>startAdvertising:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>advertisementData</em>
                <p>An optional dictionary containing the data you want to advertise. The possible keys of an <em>advertisementData</em> dictionary are detailed in <em>CBCentralManagerDelegate Protocol Reference</em>. That said, only two of the keys are supported for peripheral manager objects: <c>CBAdvertisementDataLocalNameKey</c> and <c>CBAdvertisementDataServiceUUIDsKey</c>.</p>
                <b>Discussion</b>
                <p>When you start advertising peripheral data, the peripheral manager calls the <c>peripheralManagerDidStartAdvertising:error:</c> method of its delegate object.</p>
                <p>Data advertising is done on a “best effort” basis, because space is limited and there may be multiple apps advertising simultaneously. While your app is in the foreground, it can use up to 28 bytes of space in the initial advertisement data for any combination of the supported advertising data keys. If this space is used up, there are an additional 10 bytes of space in the scan response that can be used only for the local name (represented by the value of the <c>CBAdvertisementDataLocalNameKey</c> key). Note that these sizes do not include the 2 bytes of header information that are required for each new data type. Any service universally unique identifiers (UUIDs) contained in the value of the <c>CBAdvertisementDataServiceUUIDsKey</c> key that do not fit in the allotted space are added to a special “overflow” area; they can be discovered only by an iOS device that is explicitly scanning for them. While your app is in the background, the local name is not advertised and all service UUIDs are placed in the overflow area. The exact format of advertising and response data is defined in the Bluetooth 4.0 specification, Volume 3, Part C, Section 11.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>CBAdvertisementDataOverflowServiceUUIDsKey</c>
                    </li>
                </ul>
            </remarks>
            <param name="advertisementData">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.StopAdvertising">
            <summary>
            Stops advertising peripheral manager data.
            <br></br>Equivalent to the native <c>stopAdvertising</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Call this method when you no longer want to advertise peripheral manager data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager.UpdateValue(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.CoreBluetooth.CBMutableCharacteristic,System.Object[])">
            <summary>
            Sends an updated characteristic value to one or more subscribed centrals, via a notification or indication.
            <br></br>Equivalent to the native <c>updateValue:forCharacteristic:onSubscribedCentrals:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The characteristic value you want to send via a notification or indication.</p>
                <em>characteristic</em>
                <p>The characteristic whose value has changed.</p>
                <em>centrals</em>
                <p>A list of centrals (represented by <c>CBCentral</c> objects) that have subscribed to receive updates of the characteristic’s value. If <c>null</c>, all subscribed centrals are updated. Centrals that have not subscribed to a characteristic’s value are ignored.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the update is successfully sent to the subscribed central or centrals. <c>false</c> if the update is not successfully sent because the underlying transmit queue is full.</p>
                <b>Discussion</b>
                <p>You use this method to send updates of a characteristic’s value—through a notification or indication—to selected centrals that have subscribed to that characteristic’s value. If the method returns <c>false</c> because the underlying transmit queue is full, the peripheral manager calls the <c>peripheralManagerIsReadyToUpdateSubscribers:</c> method of its delegate object when more space in the transmit queue becomes available. After this delegate method is called, you may resend the update.</p>
                <p>If the length of the <em>value</em> parameter exceeds the length of the <c>maximumUpdateValueLength</c> property of a subscribed <c>CBCentral</c>, the <em>value</em> parameter is truncated accordingly.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>
                            <!--a target="_self" -->peripheralManager:central:didSubscribeToCharacteristic:<!--/a--></c>
                    </li>
                    <li>
                        <c>
                            <!--a target="_self" -->peripheralManager:central:didUnsubscribeFromCharacteristic:<!--/a--></c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="characteristic">
            </param>
            <param name="centrals">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerAuthorizationStatus">
            <summary>
            Values representing the current authorization state of the peripheral manager.
            </summary>
            <remarks>
                <br />
            	Feedback
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerAuthorizationStatus.Denied">
            <summary>
                <p>The user explicitly denied this app from sharing data using Bluetooth services while in the background state.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerAuthorizationStatusDenied</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerAuthorizationStatus.Authorized">
            <summary>
                <p>This app is authorized to share data using Bluetooth services while in the background state.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerAuthorizationStatusAuthorized</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerAuthorizationStatus.NotDetermined">
            <summary>
                <p>The user has not yet made a choice regarding whether this app can share data using Bluetooth services while in the background state.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerAuthorizationStatusNotDetermined</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerAuthorizationStatus.Restricted">
            <summary>
                <p>This app is not authorized to share data using Bluetooth services while in the background state. The user cannot change this app’s status, possibly due to active restrictions such as parental controls being in place.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerAuthorizationStatusRestricted</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConnectionLatency">
            <summary>
            Values representing the connection latency of the peripheral manager.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConnectionLatency.High">
            <summary>
                <p>Extending battery life has priority over rapid communication.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerConnectionLatencyHigh</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConnectionLatency.Low">
            <summary>
                <p>Rapid communication has priority over battery life.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerConnectionLatencyLow</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConnectionLatency.Medium">
            <summary>
                <p>A balance exits between communication frequency and battery life.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerConnectionLatencyMedium</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConstants">
            <summary>
            Constants belonging to CBPeripheralManagerConstants.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConstants.CBPeripheralManagerRestoredStateServicesKey">
            <summary>
                <p>An array (an instance of <c>object[]</c>) of <c>CBMutableService</c> objects that contains all of the services that were published to the local peripheral’s database at the time the app was terminated by the system.</p>
                <p>All the information about a service is restored, including any included services, characteristics, characteristic descriptors, and subscribed centrals.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerRestoredStateServicesKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Peripheral Manager State Restoration Options".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerConstants.CBPeripheralManagerRestoredStateAdvertisementDataKey">
            <summary>
                <p>A dictionary (an instance of <c>Dictionary</c>) containing the data that the peripheral manager was advertising at the time the app was terminated by the system.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerRestoredStateAdvertisementDataKey</c> constant.
            </summary>
            <remarks>
            Keys used to pass options to the <c>initWithDelegate:queue:options:</c> method.
            <p></p><br />
            	Feedback
            <p></p>This is a constant for "Peripheral Manager State Restoration Options".
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate">
            <summary>
            The delegate of a <c>CBPeripheralManager</c> object must adopt the <c>CBPeripheralManagerDelegate</c> protocol, a protocol consisting of numerous optional methods and one required method. The protocol’s optional methods are used by the delegate to verify publishing and advertising, and to monitor read, write, and subscription requests from remote central devices. The protocol’s required method, which indicates whether the peripheral manager is available, is called when the peripheral manager’s state is updated.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManager_central_didSubscribeToCharacteristic__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManager_central_didUnsubscribeFromCharacteristic__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManager_didAddService_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManager_didReceiveReadRequest__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManager_didReceiveWriteRequests__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManager_willRestoreState__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManagerDidStartAdvertising_error__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManagerDidUpdateState__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.UP_CBPeripheralManagerDelegate_set__peripheralManagerIsReadyToUpdateSubscribers__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.DidSubscribeTo(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager,U3DXT.iOS.Native.CoreBluetooth.CBCentral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic)">
            <summary>
            (optional) Invoked when a remote central device subscribes to a characteristic’s value.
            <br></br>Equivalent to the native <c>peripheralManager:central:didSubscribeToCharacteristic:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <em>central</em>
                <p>The remote central device that subscribed to the characteristic’s value.</p>
                <em>characteristic</em>
                <p>The characteristic whose value has been subscribed to.</p>
                <b>Discussion</b>
                <p>This method is invoked when a remote central device subscribes to the value of one of the local peripheral’s characteristics, by enabling notifications or indications on the characteristic’s value. You should use the invocation of this method as a cue to start sending the subscribed central updates as the characteristic’s value changes. To send updated characteristic values to subscribed centrals, use the <c>updateValue:forCharacteristic:onSubscribedCentrals:</c> method of the <c>CBPeripheralManager</c> class.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="central">
            </param>
            <param name="characteristic">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.DidUnsubscribe(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager,U3DXT.iOS.Native.CoreBluetooth.CBCentral,U3DXT.iOS.Native.CoreBluetooth.CBCharacteristic)">
            <summary>
            (optional) Invoked when a remote central device unsubscribes from a characteristic’s value.
            <br></br>Equivalent to the native <c>peripheralManager:central:didUnsubscribeFromCharacteristic:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <em>central</em>
                <p>The remote central device that subscribed to the characteristic’s value.</p>
                <em>characteristic</em>
                <p>The characteristic whose value has been unsubscribed from.</p>
                <b>Discussion</b>
                <p>This method is invoked when a remote central device unsubscribes from the value of one of the local peripheral’s characteristics, by disabling notifications or indications on the characteristic’s value. You should use the invocation of this method as a cue to stop sending the subscribed central updates as the characteristic’s value changes.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="central">
            </param>
            <param name="characteristic">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.DidAdd(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager,U3DXT.iOS.Native.CoreBluetooth.CBService,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you publish a service, and any of its associated characteristics and characteristic descriptors, to the local Generic Attribute Profile (GATT) database.
            <br></br>Equivalent to the native <c>peripheralManager:didAddService:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <em>service</em>
                <p>The service that was added to the local GATT database.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>addService:</c> method to publish a service to the local peripheral’s GATT database. If the service is successfully published to the local database, the <em>error</em> parameter is <c>null</c>. If unsuccessful, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="service">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.DidReceiveRead(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager,U3DXT.iOS.Native.CoreBluetooth.CBATTRequest)">
            <summary>
            (optional) Invoked when a local peripheral device receives an Attribute Protocol (ATT) read request for a characteristic that has a dynamic value.
            <br></br>Equivalent to the native <c>peripheralManager:didReceiveReadRequest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <em>request</em>
                <p>A <c>CBATTRequest</c> object that represents a request to read a characteristic’s value.</p>
                <b>Discussion</b>
                <p>Each time this method is invoked, you call the <c>respondToRequest:withResult:</c> method of the <c>CBPeripheralManager</c> class exactly once to respond to the read request.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="request">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.DidReceiveWriteRequests(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager,System.Object[])">
            <summary>
            (optional) Invoked when a local peripheral device receives an Attribute Protocol (ATT) write request for a characteristic that has a dynamic value.
            <br></br>Equivalent to the native <c>peripheralManager:didReceiveWriteRequests:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <em>requests</em>
                <p>A list of one or more <c>CBATTRequest</c> objects, each representing a request to write the value of a characteristic.</p>
                <b>Discussion</b>
                <p>In the same way that you respond to a read request, each time this method is invoked, you call the <c>respondToRequest:withResult:</c> method of the <c>CBPeripheralManager</c> class exactly once. If the <em>requests</em> parameter contains multiple requests, treat them as you would a single request—if any individual request cannot be fulfilled, you should not fulfill any of them. Instead, call the <c>respondToRequest:withResult:</c> method immediately, and provide a result that indicates the cause of the failure.</p>
                <p>When you respond to a write request, note that the first parameter of the <c>respondToRequest:withResult:</c> method expects a single <c>CBATTRequest</c> object, even though you received an array of them from the <c>peripheralManager:didReceiveWriteRequests:</c> method. To respond properly, pass in the first request of the <em>requests</em> array.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="requests">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            (optional) Invoked when the peripheral manager is about to be restored by the system.
            <br></br>Equivalent to the native <c>peripheralManager:willRestoreState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <em>dict</em>
                <p>A dictionary containing information about the peripheral manager that was preserved by the system at the time the app was terminated. For the available keys to this dictionary, see  “Peripheral Manager State Restoration Options.” </p>
                <b>Discussion</b>
                <p>For apps that opt in to the state preservation and restoration feature of Core Bluetooth, this is the first method invoked when your app is relaunched into the background to complete some Bluetooth-related task. Use this method to synchronize the state of your app with the state of the Bluetooth system.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.DidStartAdvertising(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Invoked when you start advertising the local peripheral device’s data.
            <br></br>Equivalent to the native <c>peripheralManagerDidStartAdvertising:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <em>error</em>
                <p>If an error occurred, the cause of the failure.</p>
                <b>Discussion</b>
                <p>This method is invoked when your app calls the <c>startAdvertising:</c> method to begin advertising the local peripheral device’s data. If successful, the <em>error</em> parameter is <c>null</c>. If there is a problem advertising the data, the <em>error</em> parameter returns the cause of the failure.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.DidUpdateState(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager)">
            <summary>
            (<b>required</b>) Invoked when the peripheral manager's state is updated. (required)
            <br></br>Equivalent to the native <c>peripheralManagerDidUpdateState:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager whose state has changed.</p>
                <b>Discussion</b>
                <p>You implement this required method to ensure that Bluetooth low energy is supported and available to use on the local peripheral device. Issue commands to the peripheral manager only when the state of the peripheral manager is powered on, as indicated by the <c>CBPeripheralManagerStatePoweredOn</c> constant. A state with a value lower than <c>CBPeripheralManagerStatePoweredOn</c> implies that advertising has stopped and that any connected centrals have been disconnected. If the state moves below <c>CBPeripheralManagerStatePoweredOff</c>, advertising has stopped and must be explicitly restarted. In addition, the local database is cleared and all services must be explicitly added again. For a complete list and discussion of the possible values representing the state of the peripheral manager, see the <c>CBPeripheralManagerState</c> enumeration in <em>CBPeripheralManager Class Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate.IsReadyToUpdateSubscribers(U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManager)">
            <summary>
            (optional) Invoked when a local peripheral device is again ready to send characteristic value updates. (required)
            <br></br>Equivalent to the native <c>peripheralManagerIsReadyToUpdateSubscribers:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>peripheral</em>
                <p>The peripheral manager providing this information.</p>
                <b>Discussion</b>
                <p>When a call to the <c>updateValue:forCharacteristic:onSubscribedCentrals:</c> method fails because the underlying queue used to transmit the updated characteristic value is full, the <c>peripheralManagerIsReadyToUpdateSubscribers:</c> method is invoked when more space in the transmit queue becomes available. You can then implement this delegate method to resend the value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="peripheral">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManager_central_didSubscribeToCharacteristic__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManager_central_didSubscribeToCharacteristic__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManager_central_didUnsubscribeFromCharacteristic__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManager_central_didUnsubscribeFromCharacteristic__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManager_didAddService_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManager_didAddService_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManager_didReceiveReadRequest__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManager_didReceiveReadRequest__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManager_didReceiveWriteRequests__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManager_didReceiveWriteRequests__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManager_willRestoreState__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManager_willRestoreState__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManagerDidStartAdvertising_error__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManagerDidStartAdvertising_error__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManagerDidUpdateState__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManagerDidUpdateState__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerDelegate._peripheralManagerIsReadyToUpdateSubscribers__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_peripheralManagerIsReadyToUpdateSubscribers__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerState">
            <summary>
            Values representing the current state of the peripheral manager.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerState.PoweredOff">
            <summary>
                <p>Bluetooth is currently powered off.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerStatePoweredOff</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerState.PoweredOn">
            <summary>
                <p>Bluetooth is currently powered on and is available to use.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerStatePoweredOn</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerState.Unauthorized">
            <summary>
                <p>The app is not authorized to use the Bluetooth low energy peripheral/server role.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerStateUnauthorized</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerState.Resetting">
            <summary>
                <p>The connection with the system service was momentarily lost; an update is imminent.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerStateResetting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerState.Unknown">
            <summary>
                <p>The current state of the peripheral manager is unknown; an update is imminent.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerStateUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralManagerState.Unsupported">
            <summary>
                <p>The platform doesn't support the Bluetooth low energy peripheral/server role.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralManagerStateUnsupported</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralState">
            <summary>
            Values representing the current connection state of the peripheral.
            </summary>
            <remarks>
                <br />
            	Feedback
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralState.Connecting">
            <summary>
                <p>The peripheral is currently in the process of connecting to the central manager.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralStateConnecting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralState.Connected">
            <summary>
                <p>The peripheral is currently connected to the central manager.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralStateConnected</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBPeripheralState.Disconnected">
            <summary>
                <p>The peripheral is currently not connected to the central manager.</p>
                <p>Available in iOS 7.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBPeripheralStateDisconnected</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBService">
            <summary>
                <c>CBService</c> and its subclass <c>CBMutableService</c> represent a peripheral’s service—a collection of data and associated behaviors for accomplishing a function or feature of a device (or portions of that device). <c>CBService</c> objects in particular represent services of a <em>remote</em> peripheral device (represented by a <c>CBPeripheral</c> object). Services are either primary or secondary and may contain a number of characteristics or included services (references to other services).
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.UP_CBService_get_characteristics(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.UP_CBService_get_includedServices(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.UP_CBService_get_isPrimary(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.UP_CBService_get_peripheral(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.UP_CBService_get_UUID(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBService" /> class.
            <br></br>Equivalent to the native <c>[[CBService alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBService.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBService.ClassExists">
            <summary>
            Returns whether the native CBService class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBService.characteristics">
            <summary>
            A list of characteristics that have been discovered in this service. (read-only)
            <br></br>Equivalent to the native <c>characteristics</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This array contains <c>CBCharacteristic</c> objects that represent a service’s characteristics. Characteristics provide further details about a peripheral’s service. For example, a heart rate service may contain one characteristic that describes the intended body location of the device’s heart rate sensor and another characteristic that transmits heart rate measurement data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBService.includedServices">
            <summary>
            A list of included services that have been discovered in this service. (read-only)
            <br></br>Equivalent to the native <c>includedServices</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This array contains <c>CBService</c> objects that represent the included services of a service. A service of a peripheral may contain a reference to other services that are available on the peripheral. These other services are the included services of the service and can be discovered using the <c>discoverIncludedServices:forService:</c> method of the <c>CBPeripheral</c> class.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBService.isPrimary">
            <summary>
            A Boolean value indicating whether the type of service is primary or secondary. (read-only)
            <br></br>Equivalent to the native <c>isPrimary</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A peripheral’s service is either primary or secondary. A primary service describes the primary function of a device and can be included by another service. A secondary service describes a service that is relevant only in the context of another service that has referenced it. For example, the primary service of a heart rate monitor may be to expose heart rate data from the monitor’s heart rate sensor, whereas a secondary service may be to expose the sensor’s battery data. If the value of this property is <c>true</c>, the type of service is primary. If the value of this property is <c>false</c>, the type of service is secondary.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBService.peripheral">
            <summary>
            The peripheral to which this service belongs. (read-only)
            <br></br>Equivalent to the native <c>peripheral</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBService.UUID">
            <summary>
            The Bluetooth-specific UUID of the service. (read-only)
            <br></br>Equivalent to the native <c>UUID</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is a 128-bit UUID that identifies the service.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CBUUID">
            <summary>
            Instances of the <c>CBUUID</c> class represent the 128-bit universally unique identifiers (UUIDs) of attributes used in Bluetooth low energy communication, such as a peripheral’s services, characteristics, and characteristic descriptors. This class provides a number of factory methods for dealing with long UUIDs when developing your app. For example, instead of passing around the string representation of a 128-bit Bluetooth low energy attribute in your code, you can create a <c>CBUUID</c> object that represents it, and pass that around instead.
            </summary>
            <remarks>
                <p>Though not all UUIDs that identify Bluetooth-specific attributes are predefined by the Bluetooth Special Interest Group (SIG), Bluetooth SIG has defined and published a number of commonly used UUIDs that have been shortened to 16-bits for convenience. The <c>CBUUID</c> class provides methods that automatically transform these predefined 16-bit UUIDs into their 128-bit equivalent UUIDs. When you create a <c>CBUUID</c> object from a predefined 16-bit UUID, Core Bluetooth prefills the rest of the 128-bit UUID with the Bluetooth base UUID, which is defined in the Bluetooth 4.0 specification, Volume 3, Part F, Section 3.2.1.</p>
                <p>In addition to providing methods for creating <c>CBUUID</c> objects, this class defines constants that represent the UUIDs of the Bluetooth-defined characteristic descriptors, which are defined in the Bluetooth 4.0 specification, Volume 3, Part G, Section 3.3.3.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.CharacteristicAggregateFormatString">
            <summary>
                <p>The string representation of the UUID for the aggregate descriptor.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDCharacteristicAggregateFormatString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the characteristic descriptors.
            <p></p><p></p>This is a constant for "Characteristic Descriptors".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.ServerCharacteristicConfigurationString">
            <summary>
                <p>The string representation of the UUID for the server configuration descriptor. The corresponding value for this descriptor is an <c>double</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDServerCharacteristicConfigurationString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the characteristic descriptors.
            <p></p><p></p>This is a constant for "Characteristic Descriptors".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.ClientCharacteristicConfigurationString">
            <summary>
                <p>The string representation of the UUID for the client configuration descriptor. The corresponding value for this descriptor is an <c>double</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDClientCharacteristicConfigurationString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the characteristic descriptors.
            <p></p><p></p>This is a constant for "Characteristic Descriptors".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.CharacteristicUserDescriptionString">
            <summary>
                <p>The string representation of the UUID for the user description descriptor. The corresponding value for this descriptor is an <c>String</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDCharacteristicUserDescriptionString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the characteristic descriptors.
            <p></p><p></p>This is a constant for "Characteristic Descriptors".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.CharacteristicExtendedPropertiesString">
            <summary>
                <p>The string representation of the UUID for the extended properties descriptor. The corresponding value for this descriptor is an <c>double</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDCharacteristicExtendedPropertiesString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the characteristic descriptors.
            <p></p><p></p>This is a constant for "Characteristic Descriptors".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.CharacteristicFormatString">
            <summary>
                <p>The string representation of the UUID for the presentation format descriptor. The corresponding value for this descriptor is an <c>NSData</c> object.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDCharacteristicFormatString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the characteristic descriptors.
            <p></p><p></p>This is a constant for "Characteristic Descriptors".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.GenericAccessProfileString">
            <summary>
                <p>The string representation of the GAP service UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDGenericAccessProfileString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the GAP and GATT service. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.
            <p></p>ues representing the UUIDs of the GAP and GATT service. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.)
            <p></p>This is a constant for "GAP and GATT Service UUIDs".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.GenericAttributeProfileString">
            <summary>
                <p>The string representation of the GATT service UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDGenericAttributeProfileString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the GAP and GATT service. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.
            <p></p>ues representing the UUIDs of the GAP and GATT service. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.)
            <p></p>This is a constant for "GAP and GATT Service UUIDs".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.ReconnectionAddressString">
            <summary>
                <p>The string representation of the GAP reconnection address UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDReconnectionAddressString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.
            <p></p>ues representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.)
            <p></p>This is a constant for "GAP Characteristics".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.PeripheralPreferredConnectionParametersString">
            <summary>
                <p>The string representation of the GAP preferred connection parameter UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDPeripheralPreferredConnectionParametersString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.
            <p></p>ues representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.)
            <p></p>This is a constant for "GAP Characteristics".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.AppearanceString">
            <summary>
                <p>The string representation of the GAP appearance UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDAppearanceString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.
            <p></p>ues representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.)
            <p></p>This is a constant for "GAP Characteristics".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.DeviceNameString">
            <summary>
                <p>The string representation of the GAP device name UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDDeviceNameString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.
            <p></p>ues representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.)
            <p></p>This is a constant for "GAP Characteristics".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.PeripheralPrivacyFlagString">
            <summary>
                <p>The string representation of the GAP privacy flag UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDPeripheralPrivacyFlagString</c> constant.
            </summary>
            <remarks>
            Values representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.
            <p></p>ues representing the UUIDs of the GAP characteristics. (<strong class="deprecated">Deprecated.</strong> There are no replacements for these constants.)
            <p></p>This is a constant for "GAP Characteristics".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CBUUID.ServiceChangedString">
            <summary>
                <p>The string representation of the GATT service changed UUID.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>Deprecated in iOS 7.0.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBUUIDServiceChangedString</c> constant.
            </summary>
            <remarks>
            Value representing the GAP service changed UUID. (<strong class="deprecated">Deprecated.</strong> There is no replacement for this constant.)
            <br />
            	Feedback
            <p></p>ue representing the GAP service changed UUID. (<strong class="deprecated">Deprecated.</strong> There is no replacement for this constant.)
            <br />
            	Feedback
            <p></p>This is a constant for "GATT Service Changed UUID".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UP_CBUUID_UUIDWithData_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UP_CBUUID_UUIDWithNSUUID_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UP_CBUUID_UUIDWithString_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UP_CBUUID_get_data(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UP_CBUUID_get_UUIDString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.CoreBluetooth.CBUUID" /> class.
            <br></br>Equivalent to the native <c>[[CBUUID alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBUUID.ClassExists">
            <summary>
            Returns whether the native CBUUID class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UUID(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates and returns a <c>CBUUID</c> object from a 16-bit or 128-bit UUID data container.
            <br></br>Equivalent to the native <c>UUIDWithData:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theData</em>
                <p>Data containing a 16-bit or 128-bit UUID.</p>
                <b>Return Value</b>
                <p>A new <c>CBUUID</c> object for the specified UUID data.</p>
                <b>Discussion</b>
                <p>This method is useful when the UUID of a Bluetooth attribute is formatted in raw bytes.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="theData">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UUID(U3DXT.iOS.Native.Foundation.NSUUID)">
            <summary>
            Creates and returns a <c>CBUUID</c> object from an <c>NSUUID</c> object.
            <br></br>Equivalent to the native <c>UUIDWithNSUUID:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theUUID</em>
                <p>A UUID represented by an <c>NSUUID</c> object.</p>
                <b>Return Value</b>
                <p>A new <c>CBUUID</c> object for the specified UUID.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.0 and later.</li>
                </ul>
            </remarks>
            <param name="theUUID">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UUID(System.String)">
            <summary>
            Creates and returns a <c>CBUUID</c> object from a 16-bit or 128-bit UUID string.
            <br></br>Equivalent to the native <c>UUIDWithString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theString</em>
                <p>A string containing a 16-bit or 128-bit UUID.</p>
                <b>Return Value</b>
                <p>A new <c>CBUUID</c> object for the specified UUID string.</p>
                <b>Discussion</b>
                <p>The expected format for 128-bit UUIDs is a string punctuated by hyphens, for example, 68753A44-4D6F-1226-9C60-0050E4C00067. For an example of how to use this method, see  “Services and Characteristics Are Identified by UUIDs”  in <em>Core Bluetooth Programming Guide</em> and  “Create Your Own UUIDs for Custom Services and Characteristics”  in <em>Core Bluetooth Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="theString">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBUUID.data">
            <summary>
            The data of the UUID. (read-only)
            <br></br>Equivalent to the native <c>data</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreBluetooth.CBUUID.UUIDString">
            <summary>
            The UUID represented as a string. (read-only)
            <br></br>Equivalent to the native <c>UUIDString</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 7.1 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreBluetooth.CoreBluetoothConstants">
            <summary>
            Constants belonging to CoreBluetoothConstants.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CoreBluetoothConstants.CBATTErrorDomain">
            <summary>
                <p>The domain for Core Bluetooth ATT errors. This value is used in the <c>NSError</c> class.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBATTErrorDomain</c> constant.
            </summary>
            <remarks>
            The domain for Core Bluetooth ATT errors.
            <p></p><p></p>This is a constant for "Core Bluetooth Attribute Protocol (ATT) Error Domain".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreBluetooth.CoreBluetoothConstants.CBErrorDomain">
            <summary>
                <p>The domain for Core Bluetooth errors. This value is used in the <c>NSError</c> class.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CBErrorDomain</c> constant.
            </summary>
            <remarks>
            The domain for Core Bluetooth errors.
            <p></p><p></p>This is a constant for "Core Bluetooth Error Domain".
            </remarks>
        </member>
    </members>
</doc>
