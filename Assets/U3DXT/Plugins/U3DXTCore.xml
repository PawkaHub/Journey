<?xml version="1.0"?>
<doc>
    <assembly>
        <name>U3DXTCore</name>
    </assembly>
    <members>
        <member name="T:U3DXT.Utils.Json">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.Json.Deserialize(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false</returns>
        </member>
        <member name="M:U3DXT.Utils.Json.Serialize(System.Object)">
            <summary>
            Converts a IDictionary / IList object or a simple type (string, int, etc.) into a JSON string
            </summary>
            <param name="obj">A Dictionary&lt;string, object&gt; / List&lt;object&gt;</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="T:U3DXT.Utils.MonoPInvokeCallbackAttribute">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.Utils.MonoPInvokeCallbackAttribute.#ctor(System.Type)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.Utils.Size">
            <summary>
            A struct representing a size in 2D.
            </summary>
        </member>
        <member name="F:U3DXT.Utils.Size.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:U3DXT.Utils.Size.Height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.Size.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Utils.Size" /> struct.
            </summary>
            <param name="width">
            Width.
            </param>
            <param name="height">
            Height.
            </param>
        </member>
        <member name="M:U3DXT.Utils.Size._Serialize">
            <summary>
            U3DXT internal method.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size._Deserialize(System.Object)">
            <summary>
            U3DXT internal method.
            </summary>
            <returns>
            </returns>
            <param name="json">
            </param>
        </member>
        <member name="M:U3DXT.Utils.Size.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.Utils.Size" />.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:U3DXT.Utils.Size" /> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <param name="other">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:U3DXT.Utils.Size" />.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.Utils.Size" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.op_Equality(U3DXT.Utils.Size,U3DXT.Utils.Size)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.Utils.Size" /> is equal to another specified <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.op_Inequality(U3DXT.Utils.Size,U3DXT.Utils.Size)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.Utils.Size" /> is not equal to another specified <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:U3DXT.Utils.UUID">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.UUID.Generate">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.Core.CoreXT">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsDevice">
            <summary>
            Indicates whether it is currently running on device.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPhone">
            <summary>
            Indicates whether it is currently running on iPhone.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPad">
            <summary>
            Indicates whether it is currently running on iPad.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPod">
            <summary>
            Indicates whether it is currently running on iPod.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPhoneOriPod">
            <summary>
            Indicates whether it is currently running on iPhone or iPod.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.VERSION">
            <summary>
            The version of the U3DXT Core.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT._Init">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT._CheckTrial">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT.Start">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT.Update">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT.RunOnMainThread(System.Action)">
            <summary>
            Runs an action on main thread.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="E:U3DXT.Core.CoreXT.ApplicationPaused">
            <summary>
            Occurs when application pauses. Same as MonoBehaviour.OnApplicationPause except as a C# event.
            </summary>
        </member>
        <member name="E:U3DXT.Core.CoreXT.ApplicationResumed">
            <summary>
            Occurs when application resumes. Same as MonoBehaviour.OnApplicationPause except as a C# event.
            </summary>
        </member>
        <member name="T:U3DXT.Core.U3DXTException">
            <summary>
            Exception class that U3DXT can thrown.
            </summary>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
            <param name="message">Message.</param>
            <param name="inner">Inner.</param>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute">
            <summary>
            Assembly core version compatibility attribute.
            </summary>
        </member>
        <member name="P:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute" /> class.
            </summary>
            <param name="version">Version.</param>
        </member>
        <member name="M:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute.GetSystemVersion">
            <summary>
            Gets the system version.
            </summary>
            <returns>The system version.</returns>
        </member>
        <member name="T:U3DXT.Core.U3DXTErrorEventArgs">
            <summary>
            Unity XT error event arguments.
            </summary>
        </member>
        <member name="F:U3DXT.Core.U3DXTErrorEventArgs.code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="F:U3DXT.Core.U3DXTErrorEventArgs.domain">
            <summary>
            The error domain.
            </summary>
        </member>
        <member name="F:U3DXT.Core.U3DXTErrorEventArgs.description">
            <summary>
            The localized description of the error.
            </summary>
        </member>
        <member name="M:U3DXT.Core.U3DXTErrorEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTErrorEventArgs" /> class.
            </summary>
            <param name="error">The NSError object.</param>
        </member>
        <member name="M:U3DXT.Core.U3DXTErrorEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTErrorEventArgs" /> class.
            </summary>
            <param name="code">Code.</param>
            <param name="domain">Domain.</param>
            <param name="description">Description.</param>
        </member>
        <member name="T:U3DXT.Utils.Encryption">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.Encryption.SimpleEncryptFromString(System.String,System.String)">
            <summary>
            Simple encryption from string.
            </summary>
            <returns>The encrypted string.</returns>
            <param name="str">String.</param>
            <param name="key">Key.</param>
        </member>
        <member name="M:U3DXT.Utils.Encryption.SimpleDecryptToString(System.String,System.String)">
            <summary>
            Simple encryption to string.
            </summary>
            <returns>The decrypted string.</returns>
            <param name="data">Encrypted string.</param>
            <param name="key">Key.</param>
        </member>
        <member name="T:U3DXT.iOS.Internals.NSObjectWrapper">
            <summary>
            A wrapper class for NSObject.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Internals.NSObjectWrapper._nsObject">
            <summary>
            The NSObject.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" /> class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper._InitWrapper(U3DXT.iOS.Native.Foundation.NSObject,System.String)">
            <summary>
            Initializes the wrapper.
            </summary>
            <param name="nsObj">The NSObject.</param>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" /> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Internals.NSObjectWrapper.ID">
            <summary>
            The wrapper's ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" />.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" />.</returns>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.GetWrapper(System.String)">
            <summary>
            Gets the wrapper.
            </summary>
            <returns>The wrapper.</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.CreateWrapper(System.Type,U3DXT.iOS.Native.Foundation.NSObject,System.String)">
            <summary>
            Creates the wrapper.
            </summary>
            <returns>The wrapper.</returns>
            <param name="type">Type.</param>
            <param name="nsObj">The NSObject.</param>
            <param name="id">Identifier.</param>
        </member>
        <member name="T:U3DXT.Utils.StringBytesExtension">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.StringBytesExtension.ToStraightBytes(System.String)">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.StringBytesExtension.ToStraightString(System.Byte[])">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="T:System.Action`5">
            <summary>
            Action.
            </summary>
        </member>
        <member name="T:System.Func`6">
            <summary>
            Func.
            </summary>
        </member>
        <member name="T:U3DXT.Utils.HttpUtil">
            <summary>
            Http util.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.HttpUtil.ParseQueryString(System.String,System.String@,System.Collections.Generic.Dictionary{System.Object,System.Object}@)">
            <summary>
            Parses the query string into a clean URL with parameters in a dictionary.
            </summary>
            <param name="url">URL.</param>
            <param name="cleanUrl">The clean-up URL.</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreFoundation.CFAllocator">
            <summary>
            A reference to a CFAllocator object.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The <c>CFAllocatorRef</c> type is a reference type used in many Core Foundation parameters and function results. It refers to a CFAllocator object, which allocates, reallocates, and deallocates memory for Core Foundation objects. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFAllocator.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFAllocator.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreFoundation.CFComparisonResult">
            <summary>
            Constants returned by comparison functions, indicating whether a value is equal to, less than, or greater than another value.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreFoundation.CFComparisonResult.LessThan">
            <summary>
                <p>Returned by a comparison function if the first value is less than the second value.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCFCompareLessThan</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreFoundation.CFComparisonResult.EqualTo">
            <summary>
                <p>Returned by a comparison function if the first value is equal to the second value.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCFCompareEqualTo</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreFoundation.CFComparisonResult.GreaterThan">
            <summary>
                <p>Returned by a comparison function if the first value is greater than the second value.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCFCompareGreaterThan</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreFoundation.CFType">
            <summary>
            An untyped "generic" reference to any Core Foundation object.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.Cast``1">
            <summary>
            Cast this instance to another CFType.
            </summary>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ConvertToString">
            <summary>
            Converts to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ToString">
            <summary>
            Converts to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ConvertToDouble">
            <summary>
            Converts to a double.
            </summary>
            <returns>The double.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ToDouble">
            <summary>
            Converts to a double.
            </summary>
            <returns>The double.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ConvertToInt">
            <summary>
            Converts to an integer.
            </summary>
            <returns>The int.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ToInt">
            <summary>
            Converts to an integer.
            </summary>
            <returns>The int.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ConvertToDateTime">
            <summary>summary
            Converts to a date time.
            </summary>
            <returns>The date time.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ToDateTime">
            <summary>summary
            Converts to a date time.
            </summary>
            <returns>The date time.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ConvertToObject">
            <summary>
            Converts to an object.
            </summary>
            <returns>The object.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ToObject">
            <summary>
            Converts to an object.
            </summary>
            <returns>The object.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ConvertToDictionary">
            <summary>
            Converts to a dictionary.
            </summary>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.ToDictionary">
            <summary>
            Converts to a dictionary.
            </summary>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.FromObject(System.Object)">
            <summary>
            Converts to an object.
            </summary>
            <returns>The object.</returns>
        </member>
        <member name="P:U3DXT.iOS.Native.CoreFoundation.CFType.referenced">
            <summary>
            The CFType object that is referenced from this instance.
            </summary>
            <value>The referenced.</value>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGBlendMode">
            <summary>
            Compositing operations for images.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The blend mode constants introduced in OS X v10.5 represent the Porter-Duff blend modes. The symbols in the equations for these blend modes are:</p>
                <ul class="ul">
                    <li class="li">
                        <p>R is the premultiplied result</p>
                    </li>
                    <li class="li">
                        <p>S is the source color, and includes alpha</p>
                    </li>
                    <li class="li">
                        <p>D is the destination color, and includes alpha</p>
                    </li>
                    <li class="li">
                        <p>Ra, Sa, and Da are the alpha components of R, S, and D</p>
                    </li>
                </ul>
                <p>You can find more information on blend modes, including examples of images produced using them, and many mathematical descriptions of the modes, in <em>PDF Reference, Fourth Edition</em>, Version 1.5, Adobe Systems, Inc. If you are a former QuickDraw developer, it may be helpful for you to think of blend modes as an alternative to transfer modes</p>
                <p>For examples of using blend modes see "Setting Blend Modes" and "Using Blend Modes With Images" in <em>Quartz 2D Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in OS X v10.4 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.DestinationOver">
            <summary>
                <p>
                    <c>R = S*(1 - Da) + D</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeDestinationOver</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.SourceAtop">
            <summary>
                <p>
                    <c>R = S*Da + D*(1 - Sa)</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeSourceAtop</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.DestinationOut">
            <summary>
                <p>
                    <c>R = D*(1 - Sa)</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeDestinationOut</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.SourceOut">
            <summary>
                <p>
                    <c>R = S*(1 - Da)</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeSourceOut</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.SoftLight">
            <summary>
                <p>Either darkens or lightens colors, depending on the source image sample color. If the source image sample color is lighter than 50% gray, the background is lightened, similar to dodging. If the source image sample color is darker than 50% gray, the background is darkened, similar to burning. If the source image sample color is equal to 50% gray, the background is not changed. Image samples that are equal to pure black or pure white produce darker or lighter areas, but do not result in pure black or white. The overall effect is similar to what you’d achieve by shining a diffuse spotlight on the source image. Use this to add highlights to a scene.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeSoftLight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Color">
            <summary>
                <p>Uses the luminance values of the background with the hue and saturation values of the source image. This mode preserves the gray levels in the image. You can use this mode to color monochrome images or to tint color images.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeColor</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.PlusDarker">
            <summary>
                <p>
                    <c>R = MAX(0, (1 - D) + (1 - S))</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModePlusDarker</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.PlusLighter">
            <summary>
                <p>
                    <c>R = MIN(1, S + D)</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModePlusLighter</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.XOR">
            <summary>
                <p>
                    <c>R = S*(1 - Da) + D*(1 - Sa)</c>. This XOR mode is only nominally related to the classical bitmap XOR operation, which is not supported by Quartz 2D.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeXOR</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Clear">
            <summary>
                <p>
                    <c>R = 0</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeClear</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Multiply">
            <summary>
                <p>Multiplies the source image samples with the background image samples. This results in colors that are at least as dark as either of the two contributing sample colors.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeMultiply</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.DestinationAtop">
            <summary>
                <p>
                    <c>R = S*(1 - Da) + D*Sa</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeDestinationAtop</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Screen">
            <summary>
                <p>Multiplies  the inverse of the source image samples with the inverse of the background image samples. This results in colors that are at least as light as either of the two contributing sample colors.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeScreen</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Saturation">
            <summary>
                <p>Uses the luminance and hue values of the background with the saturation of the source image. Areas of the background that have no saturation (that is, pure gray areas) don’t produce a change.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeSaturation</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.DestinationIn">
            <summary>
                <p>
                    <c>R = D*Sa</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeDestinationIn</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Exclusion">
            <summary>
                <p>Produces an effect similar to that produced by <c>kCGBlendModeDifference</c>, but with lower contrast. Source image sample values that are black don’t produce a change; white inverts the background color values.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeExclusion</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.ColorBurn">
            <summary>
                <p>Darkens the background image samples to reflect the source image samples. Source image sample values that specify white do not produce a change.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeColorBurn</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Hue">
            <summary>
                <p>Uses the luminance and saturation values of the background with the hue of the source image.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeHue</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.ColorDodge">
            <summary>
                <p>Brightens the background image samples to reflect the source image samples. Source image sample values that specify black do not produce a change.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeColorDodge</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Overlay">
            <summary>
                <p>Either multiplies or screens the source image samples with the background image samples, depending on the background color. The result is to overlay the existing image samples while preserving the highlights and shadows of the background. The background color mixes with the source image to reflect the lightness or darkness of the background.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeOverlay</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.SourceIn">
            <summary>
                <p>
                    <c>R = S*Da</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeSourceIn</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Darken">
            <summary>
                <p>Creates the composite image samples by choosing the darker samples (either from the source image or the background). The result is that the background image samples are replaced by any source image samples that are darker. Otherwise, the background image samples are left unchanged.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeDarken</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Luminosity">
            <summary>
                <p>Uses the hue and saturation of the background with the luminance of the source image. This mode creates an effect that is inverse to the effect created by <c>kCGBlendModeColor</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeLuminosity</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.HardLight">
            <summary>
                <p>Either multiplies or screens colors, depending on the source image sample color. If the source image sample color is lighter than 50% gray, the background is lightened, similar to screening. If the source image sample color is darker than 50% gray, the background is darkened, similar to multiplying. If the source image sample color is equal to 50% gray, the source image is not changed. Image samples that are equal to pure black or pure white result in pure black or white. The overall effect is similar to what you’d achieve by shining a harsh spotlight on the source image. Use this to add highlights to a scene.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeHardLight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Copy">
            <summary>
                <p>
                    <c>R = S</c>
                </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeCopy</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Lighten">
            <summary>
                <p>Creates the composite image samples by choosing the lighter samples (either from the source image or the background). The result is that the background image samples are replaced by any source image samples that are lighter. Otherwise, the background image samples are left unchanged.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeLighten</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Difference">
            <summary>
                <p>Subtracts either the source image sample color from the background image sample color, or the reverse, depending on which sample has the greater brightness value. Source image sample values that are black produce no change; white inverts the background color values.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeDifference</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGBlendMode.Normal">
            <summary>
                <p>Paints the source image samples over the background image samples.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGBlendModeNormal</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGColor">
            <summary>
            An opaque type that represents a color used in Quartz 2D drawing.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>CGColorRef</c>  is the fundamental data type used internally by Quartz to represent colors. CGColor objects, and the functions that operate on them, provide a fast and convenient way of managing and setting colors directly, especially colors that are reused (such as black for text).</p>
                <p>In OS X version 10.3 and later, <c>CGColorRef</c> is derived from <c>CFTypeRef</c> and inherits the properties that all Core Foundation types have in common. For more information, see  CFType Reference .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGColorSpace">
            <summary>
            An opaque type that encapsulates color space information.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGColorSpace.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGColorSpace.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGContext">
            <summary>
            An opaque type that represents a Quartz 2D drawing environment.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGContext.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGContext.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGImage">
            <summary>
            An opaque type that encapsulates bitmap image
            information.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_fromTexture2D(UnityEngine.Color32[],System.Int32,System.Int32,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_toTexture2D(System.String,System.IntPtr@,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.FromTexture2D(UnityEngine.Texture2D,System.Single)">
            <summary>
            Create a native CGImage object from a Texture2D.
            </summary>
            <returns>The newly created native CGImage object or null if error.</returns>
            <param name="texture">Texture.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.FromPixels32(UnityEngine.Color32[],System.Int32,System.Int32,System.Single)">
            <summary>
            Create a native CGImage object from a Color32 array.
            </summary>
            <returns>The newly created native CGImage object or null if error.</returns>
            <param name="data">Data.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.ToTexture2D(System.Single,System.Single)">
            <summary>
            Creates a Texture2D with the contents of the native CGImage.
            </summary>
            <returns>The texture.</returns>
            <param name="scale">Scale.</param>
            <param name="rotateAngle">Rotate angle in degrees. Valid values are multiples of 90.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.CopyToTexture2D(UnityEngine.Texture2D,System.Single,System.Single)">
            <summary>
            Copies the contents of this native UIImage to a Texture2D.
            </summary>
            <returns>
                <c>true</c>, if to image was copied, <c>false</c> otherwise.</returns>
            <param name="texture">The output texture</param>
            <param name="scale">Scale.</param>
            <param name="rotateAngle">Rotate angle in degrees. Valid values are multiples of 90.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_CGImageGetHeight(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_CGImageGetWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.GetHeight">
            <summary>
            Returns the height of a bitmap image.
            <br></br>Equivalent to the native <c>CGImageGetHeight</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image to examine. </p>
                <b>Return Value</b>
                <p>The height in pixels of the bitmap image (or image mask).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.GetWidth">
            <summary>
            Returns the width of a bitmap image.
            <br></br>Equivalent to the native <c>CGImageGetWidth</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image to examine. </p>
                <b>Return Value</b>
                <p>The width, in pixels, of the specified bitmap image (or image mask).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGLineCap">
            <summary>
            Styles for rendering the endpoint of a stroked line.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A line cap specifies the method used by <c>CGContextStrokePath</c> to draw the endpoint of the line. To change the line cap style in a graphics context, you use the function <c>CGContextSetLineCap</c>.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGLineCap.Square">
            <summary>
                <p>A line with a squared-off end. Quartz extends the line beyond the endpoint of the path for a distance equal to half the line width.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGLineCapSquare</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGLineCap.Butt">
            <summary>
                <p>A line with a squared-off end. Quartz draws the line to extend only to the exact endpoint of the path. This is the default.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGLineCapButt</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGLineCap.Round">
            <summary>
                <p>A line with a rounded end. Quartz draws the line to extend beyond the endpoint of the path. The line ends with a semicircular arc with a radius of 1/2 the line’s width, centered on the endpoint.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGLineCapRound</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGLineJoin">
            <summary>
            Junction types for stroked lines.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A line join specifies how <c>CGContextStrokePath</c> draws the junction between connected line segments. To set the line join style in a graphics context, you use the function <c>CGContextSetLineJoin</c>. </p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGLineJoin.Bevel">
            <summary>
                <p>A join with a squared-off end. Quartz draws the line to extend beyond the endpoint of the path, for a distance of 1/2 the line’s width.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGLineJoinBevel</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGLineJoin.Miter">
            <summary>
                <p>A join with a sharp (angled) corner. Quartz draws the outer sides of the lines beyond the endpoint of the path, until they meet. If the length of the miter divided by the line width is greater than the miter limit, a bevel join is used instead. This is the default. To set the miter limit, see <c>CGContextSetMiterLimit</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGLineJoinMiter</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGLineJoin.Round">
            <summary>
                <p>A join with a rounded end. Quartz draws the line to extend beyond the endpoint of the path. The line ends with a semicircular arc with a radius of 1/2 the line’s width, centered on the endpoint.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>kCGLineJoinRound</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGPath">
            <summary>
            An opaque type that represents an immutable graphics
            path.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGPath.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGPath.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGRectEdge">
            <summary>
            Coordinates that establish the edges of a rectangle.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGRectEdge.MinY">
            <summary>
                <p>The y-coordinate that establishes the minimum edge of a rectangle. In OS X, this is typically the bottom edge of the rectangle. If the coordinate system is flipped (or if you are using the default coordinate system in iOS), this constant refers to the top edge of the rectangle. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CGRectMinYEdge</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGRectEdge.MaxY">
            <summary>
                <p>The y-coordinate that establishes the maximum edge of a rectangle. In OS X, this is typically the top edge of the rectangle. If the coordinate system is flipped (or if you are using the default coordinate system in iOS), this constant refers to the bottom edge of the rectangle. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CGRectMaxYEdge</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGRectEdge.MinX">
            <summary>
                <p>The x-coordinate that establishes the left edge of a rectangle.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CGRectMinXEdge</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.CoreGraphics.CGRectEdge.MaxX">
            <summary>
                <p>The x-coordinate that establishes the right edge of a rectangle.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>CGRectMaxXEdge</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSBundle">
            <summary>
            An <c>NSBundle</c> object represents a location in the file system that groups code and resources that can be used in a program. <c>NSBundle</c> objects locate program resources, dynamically load and unload executable code, and assist in localization. You build a bundle in Xcode using one of these project types: Application, Framework, plug-ins.
            </summary>
            <remarks>
                <p>Although bundle structures vary depending on the target platform and the type of bundle you are building, the <c>NSBundle</c> class hides this underlying structure in most (but not all) cases. Many of the methods you use to load resources from a bundle automatically locate the appropriate starting directory and look for resources in known places. For information about application bundle structures (for OS X and iOS), see <em>Bundle Programming Guide</em>. For information about the structure of framework bundles, see <em><!--a target="_self" -->Framework Programming Guide<!--/a--></em>. For information about the structure of OS X plug-ins, see <em><!--a target="_self" -->Code Loading Programming Topics<!--/a--></em>.</p>
                <p>For additional information about how to load nib files and images in a Mac app, see <em><!--a target="_self" -->NSBundle Additions Reference<!--/a--></em>. For information about how to load nib files in an iOS application, see <em>NSBundle UIKit Additions Reference</em>. </p>
                <p>Unlike some other Foundation classes with corresponding Core Foundation names (such as <c>String</c> and CFString), <c>NSBundle</c> objects cannot be cast (“toll-free bridged”) to CFBundle references. If you need functionality provided in CFBundle, you can still create a CFBundle and use the <em>CFBundle Reference</em> API. See  <!--a target="_self" -->“Interchangeable Data Types”<!--/a-->  for more information on toll-free bridging.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSBundle.NSBundleDidLoadNotification">
            <summary>
            Constant name for the native <c>NSBundleDidLoadNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSBundle.DidLoad">
            <summary>
                <b>NSBundleDidLoadNotification</b>
                <c>NSBundle</c> posts <c>NSBundleDidLoadNotification</c> to notify observers which classes and categories have been dynamically loaded.  When a request is made to an <c>NSBundle</c> object for a class (<c>classNamed:</c> or <c>principalClass</c>), the bundle dynamically loads the executable code file that contains the class implementation and all other class definitions contained in the file. After the module is loaded, the bundle posts the <c>NSBundleDidLoadNotification</c>.<p>The notification object is the <c>NSBundle</c> instance that dynamically loads classes. The <em>userInfo</em> dictionary contains an <c>NSLoadedClasses</c> key.</p><p>In a typical use of this notification, an object might want to enumerate the <em>userInfo</em> array to check if each loaded class conformed to a certain protocol (say, an protocol for a plug-and-play tool set); if a class does conform, the object would create an instance of that class and add the instance to another <c>object[]</c> object.</p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSBundleDidLoadNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSBundle.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSBundle.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>NSBundle</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSBundle.AllInstances.DidLoad">
            <summary>
                <b>NSBundleDidLoadNotification</b>
                <c>NSBundle</c> posts <c>NSBundleDidLoadNotification</c> to notify observers which classes and categories have been dynamically loaded.  When a request is made to an <c>NSBundle</c> object for a class (<c>classNamed:</c> or <c>principalClass</c>), the bundle dynamically loads the executable code file that contains the class implementation and all other class definitions contained in the file. After the module is loaded, the bundle posts the <c>NSBundleDidLoadNotification</c>.<p>The notification object is the <c>NSBundle</c> instance that dynamically loads classes. The <em>userInfo</em> dictionary contains an <c>NSLoadedClasses</c> key.</p><p>In a typical use of this notification, an object might want to enumerate the <em>userInfo</em> array to check if each loaded class conformed to a certain protocol (say, an protocol for a plug-and-play tool set); if a class does conform, the object would create an instance of that class and add the instance to another <c>object[]</c> object.</p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSBundleDidLoadNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_allBundles">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_allFrameworks">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_bundleWithIdentifier_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_mainBundle">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_preferredLocalizationsFromArray_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_preferredLocalizationsFromArray_forPreferences_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLForResource_withExtension_subdirectory_inBundleWithURL_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_builtInPlugInsPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_builtInPlugInsURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_bundleIdentifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_bundlePath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_bundleURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_developmentLocalization(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_executableArchitectures(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_executablePath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_executableURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_infoDictionary(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_alloc_initWithPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_alloc_initWithURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_isLoaded(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_load(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_loadAndReturnError_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_loadNibNamed_owner_options_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_localizations(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_localizedInfoDictionary(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_localizedStringForKey_value_table_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_objectForInfoDictionaryKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_pathForAuxiliaryExecutable_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_pathForResource_ofType_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_pathForResource_ofType_inDirectory_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_pathForResource_ofType_inDirectory_forLocalization_(System.String,System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_pathsForResourcesOfType_inDirectory_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_pathsForResourcesOfType_inDirectory_forLocalization_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_preferredLocalizations(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_preflightAndReturnError_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_privateFrameworksPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_privateFrameworksURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_resourcePath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_resourceURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_sharedFrameworksPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_sharedFrameworksURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_sharedSupportPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_sharedSupportURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_unload(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLForAuxiliaryExecutable_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLForResource_withExtension_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLForResource_withExtension_subdirectory_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLForResource_withExtension_subdirectory_localization_(System.String,System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLsForResourcesWithExtension_subdirectory_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.UP_NSBundle_URLsForResourcesWithExtension_subdirectory_localization_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSBundle" /> class.
            <br></br>Equivalent to the native <c>[[NSBundle alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSBundle.ClassExists">
            <summary>
            Returns whether the native NSBundle class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.AllBundles">
            <summary>
            Returns an array of all the application’s non-framework bundles.
            <br></br>Equivalent to the native <c>allBundles</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of all the application’s non-framework bundles.</p>
                <b>Discussion</b>
                <p>The returned array includes the main bundle and all bundles that have been dynamically created but doesn’t contain any bundles that represent frameworks.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.AllFrameworks">
            <summary>
            Returns an array of all of the application’s bundles that represent frameworks.
            <br></br>Equivalent to the native <c>allFrameworks</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of all of the application’s bundles that represent frameworks. Only frameworks with one or more Objective-C classes in them are included.</p>
                <b>Discussion</b>
                <p>The returned array includes frameworks that are linked into an application when the application is built and bundles for frameworks that have been dynamically created.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Bundle(System.String)">
            <summary>
            Returns the previously created <c>NSBundle</c> instance that has the specified bundle identifier.
            <br></br>Equivalent to the native <c>bundleWithIdentifier:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>identifier</em>
                <p>The identifier for an existing <c>NSBundle</c> instance.</p>
                <b>Return Value</b>
                <p>The previously created <c>NSBundle</c> instance that has the bundle identifier <em>identifier</em>. Returns <c>null</c> if the requested bundle is not found.</p>
                <b>Discussion</b>
                <p>This method is typically used by frameworks and plug-ins to locate their own bundle at runtime. This method may be somewhat more efficient than trying to locate the bundle using the <c>bundleForClass:</c> method. However, if the initial lookup of an already loaded and cached bundle with the specified identifier fails, this method uses potentially time-consuming heuristics to attempt to locate the bundle.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="identifier">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.MainBundle">
            <summary>
            Returns the <c>NSBundle</c> object that corresponds to the directory where the current application executable is located.
            <br></br>Equivalent to the native <c>mainBundle</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The  <c>NSBundle</c> object that corresponds to the directory where the application executable is located, or <c><!--a  -->nil<!--/a--></c> if a bundle object could not be created.</p>
                <b>Discussion</b>
                <p>This method allocates and initializes a bundle object if one doesn’t already exist. The new object corresponds to the directory where the application executable is located. Be sure to check the return value to make sure you have a valid bundle.  This method may return a valid bundle object even for unbundled applications. </p>
                <p>In general, the main bundle corresponds to an application file package or application wrapper: a directory that bears the name of the application and is marked by a “<c>.app</c>” extension.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ bundleForClass:</c>
                    </li>
                    <li>
                        <c>+ bundleWithPath:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.PreferredLocalizations(System.Object[])">
            <summary>
            Returns one or more localizations from the specified list that a bundle object would use to locate resources for the current user.
            <br></br>Equivalent to the native <c>preferredLocalizationsFromArray:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>localizationsArray</em>
                <p>An array of <c>String</c> objects, each of which specifies the name of a localization that the bundle supports.  </p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects containing the preferred localizations. These strings are ordered in the array according to the current user's language preferences and are taken from the strings in the <em>localizationsArray</em> parameter. </p>
                <b>Discussion</b>
                <p>This method does not return all localizations in preference order but only those from which <c>NSBundle</c> would get localized content, typically either a single non-region-specific localization or a region-specific localization followed by a corresponding non-region-specific localization as a fallback.</p>
                <p>However, clients who want all localizations in preference order can make repeated calls, each time taking the top localizations out of the list of localizations passed in.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="localizationsArray">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.PreferredLocalizations(System.Object[],System.Object[])">
            <summary>
            Returns the localizations that a bundle object would prefer, given the specified bundle and user preference localizations.
            <br></br>Equivalent to the native <c>preferredLocalizationsFromArray:forPreferences:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>localizationsArray</em>
                <p>An array of <c>String</c> objects, each of which specifies the name of a localization that the bundle supports.</p>
                <em>preferencesArray</em>
                <p>An array of <c>String</c> objects containing the user's preferred localizations. If this parameter is <c>null</c>, the method uses the current user's localization preferences.</p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects containing the preferred localizations. These strings are ordered in the array according to the specified preferences and are taken from the strings in the <em>localizationsArray</em> parameter. If none of the user-preferred localizations are available in the bundle, this method returns one of the bundle localizations.</p>
                <b>Discussion</b>
                <p>This method does not return all localizations in preference order but only those from which <c>NSBundle</c> would get localized content, typically either a single non-region-specific localization or a region-specific localization followed by a corresponding non-region-specific localization as a fallback.</p>
                <p>However, clients who want all localizations in preference order can make repeated calls, each time taking the top localizations out of the list of localizations passed in.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="localizationsArray">
            </param>
            <param name="preferencesArray">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URL(System.String,System.String,System.String,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates and returns a file URL for the resource with the specified name and extension in the specified bundle.
            <br></br>Equivalent to the native <c>URLForResource:withExtension:subdirectory:inBundleWithURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the resource file.</p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches <em>name</em>.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory to search. </p>
                <em>bundleURL</em>
                <p>The file URL of the bundle to search.</p>
                <b>Return Value</b>
                <p>The file URL for the resource file or <c>null</c> if the file could not be located.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
            <param name="bundleURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URLs(System.String,System.String,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, within the specified bundle.
            <br></br>Equivalent to the native <c>URLsForResourcesWithExtension:subdirectory:inBundleWithURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>ext</em>
                <p>The file extension of the files to retrieve.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory to search. </p>
                <em>bundleURL</em>
                <p>The file URL of the bundle to search.</p>
                <b>Return Value</b>
                <p>The file URL for the resource file or <c>null</c> if the file could not be located.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
            <param name="bundleURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.BuiltInPlugInsPath">
            <summary>
            Returns the full pathname of the receiver's subdirectory containing plug-ins.
            <br></br>Equivalent to the native <c>builtInPlugInsPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full pathname of the receiving bundle’s subdirectory containing plug-ins.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a path for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.BuiltInPlugInsURL">
            <summary>
            Returns the file URL of the receiver's subdirectory containing plug-ins.
            <br></br>Equivalent to the native <c>builtInPlugInsURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The file URL of the receiving bundle’s subdirectory containing plug-ins.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a URL for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.BundleIdentifier">
            <summary>
            Returns the receiver’s bundle identifier.
            <br></br>Equivalent to the native <c>bundleIdentifier</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s bundle identifier, which is defined by the <c><!--a  -->CFBundleIdentifier<!--/a--></c> key in the bundle’s information property list.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– infoDictionary</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.BundlePath">
            <summary>
            Returns the full pathname of the receiver’s bundle directory.
            <br></br>Equivalent to the native <c>bundlePath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full pathname of the receiver’s bundle directory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.BundleURL">
            <summary>
            Returns the full URL of the receiver’s bundle directory.
            <br></br>Equivalent to the native <c>bundleURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full URL of the receiver’s bundle directory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.DevelopmentLocalization">
            <summary>
            Returns the localization used to create the bundle.
            <br></br>Equivalent to the native <c>developmentLocalization</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The localization used to create the bundle.</p>
                <b>Discussion</b>
                <p>The returned localization corresponds to the value in the <c><!--a  -->CFBundleDevelopmentRegion<!--/a--></c> key of the bundle’s property list (<c>Info.plist</c>).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.ExecutableArchitectures">
            <summary>
            Returns an array of numbers indicating the architecture types supported by the bundle’s executable.
            <br></br>Equivalent to the native <c>executableArchitectures</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>double</c> objects, each of which contains an integer value corresponding to a supported processor architecture. For a list of common architecture types, see the constants in  “Mach-O Architecture.”  If the bundle does not contain a Mach-O executable, this method returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>This method scans the bundle’s Mach-O executable and returns all of the architecture types it finds. Because they are taken directly from the executable, the returned values may not always correspond to one of the well-known CPU types defined in  “Mach-O Architecture.”  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.ExecutablePath">
            <summary>
            Returns the full pathname of the receiver's executable file.
            <br></br>Equivalent to the native <c>executablePath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full pathname of the receiving bundle’s executable file.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.ExecutableURL">
            <summary>
            Returns the file URL of the receiver's executable file.
            <br></br>Equivalent to the native <c>executableURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The file URL of the receiving bundle’s executable file.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.InfoDictionary">
            <summary>
            Returns a dictionary that contains information about the receiver.
            <br></br>Equivalent to the native <c>infoDictionary</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary, constructed from the bundle's <c>Info.plist</c> file, that contains information about the receiver. If the bundle does not contain an <c>Info.plist</c> file, a valid dictionary is returned but this dictionary contains only private keys that are used internally by the <c>NSBundle</c> class. The <c>NSBundle</c> class may add extra keys to this dictionary for its own use. </p>
                <b>Discussion</b>
                <p>Common keys for accessing the values of the dictionary are <c><!--a  -->CFBundleIdentifier<!--/a--></c>, <c><!--a  -->NSMainNibFile<!--/a--></c>, and <c><!--a  -->NSPrincipalClass<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– principalClass</c>
                    </li>
                    <li>
                        <c>dictionaryWithContentsOfFile:</c> (NSDictionary)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSBundle and initializes the object. Returns an <c>NSBundle</c> object initialized to correspond to the specified directory.
            <br></br>Equivalent to the native <c>[[NSBundle alloc] initWithPath:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fullPath</em>
                <p>The path to a directory. This must be a full pathname for a directory; if it contains any symbolic links, they must be resolvable.</p>
                <b>Return Value</b>
                <p>An <c>NSBundle</c> object initialized to correspond to <em>fullPath</em>. This method initializes and returns a new instance only if there is no existing bundle associated with <em>fullPath</em>, otherwise it deallocates <c>self</c> and returns the existing object. If <em>fullPath</em> doesn’t exist or the user doesn’t have access to it, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>It’s not necessary to allocate and initialize an instance for the main bundle; use the <c>mainBundle</c> class method to get this instance. You can also use the <c>bundleWithPath:</c> class method to obtain a bundle identified by its directory path.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ bundleForClass:</c>
                    </li>
                    <li>
                        <c>– initWithURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native NSBundle and initializes the object. Returns an <c>NSBundle</c> object initialized to correspond to the specified file URL.
            <br></br>Equivalent to the native <c>[[NSBundle alloc] initWithURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The file URL to a directory. This must be a full URL for a directory; if it contains any symbolic links, they must be resolvable.</p>
                <b>Return Value</b>
                <p>An <c>NSBundle</c> object initialized to correspond to <em>url</em>. This method initializes and returns a new instance only if there is no existing bundle associated with <em>url</em>, otherwise it deallocates <c>self</c> and returns the existing object. If <em>url</em> doesn’t exist or the user doesn’t have access to it, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>It’s not necessary to allocate and initialize an instance for the main bundle; use the <c>mainBundle</c> class method to get this instance. You can also use the <c>bundleWithURL:</c> class method to obtain a bundle identified by its file URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ bundleWithPath:</c>
                    </li>
                    <li>
                        <c>+ bundleWithIdentifier:</c>
                    </li>
                    <li>
                        <c>+ bundleForClass:</c>
                    </li>
                    <li>
                        <c>+ bundleWithURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.IsLoaded">
            <summary>
            Obtains information about the load status of a bundle.
            <br></br>Equivalent to the native <c>isLoaded</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the bundle’s code is currently loaded, otherwise <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– load</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Load">
            <summary>
            Dynamically loads the bundle’s executable code into a running program, if the code has not already been loaded.
            <br></br>Equivalent to the native <c>load</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the method successfully loads the bundle’s code or if the code has already been loaded, otherwise <c>false</c>. </p>
                <b>Discussion</b>
                <p>You can use this method to load the code associated with a dynamically loaded bundle, such as a plug-in or framework. Prior to OS X version 10.5, a bundle would attempt to load its code—if it had any—only once. Once loaded, you could not unload that code. In OS X version 10.5 and later, you can unload a bundle’s executable code using the <c>unload</c> method. </p>
                <p>You don’t need to load a bundle’s executable code to search the bundle’s resources.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadAndReturnError:</c>
                    </li>
                    <li>
                        <c>– isLoaded</c>
                    </li>
                    <li>
                        <c>– unload</c>
                    </li>
                    <li>
                        <c>– classNamed:</c>
                    </li>
                    <li>
                        <c>– principalClass</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.LoadAndReturnError(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Loads the bundle’s executable code and returns any errors.
            <br></br>Equivalent to the native <c>loadAndReturnError:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>error</em>
                <p>On input, a pointer to an error object variable. On output, this variable may contain an error object indicating why the bundle’s executable could not be loaded. If no error occurred, this parameter is left unmodified. You may specify <c>null</c> for this parameter if you are not interested in the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the bundle’s executable code was loaded successfully or was already loaded; otherwise, <c>false</c> if the code could not be loaded.</p>
                <b>Discussion</b>
                <p>If this method returns <c>false</c> and you pass a value for the <em>error</em> parameter, a suitable error object is returned in that parameter. Potential errors returned are in the Cocoa error domain and include the types that follow. For a full list of error types, see <c>FoundationErrors.h</c>. </p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>NSFileNoSuchFileError</c> - returned if the bundle’s executable file was not located.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>NSExecutableNotLoadableError</c> - returned if the bundle’s executable file exists but could not be loaded. This error is returned if the executable is not recognized as a loadable executable. It can also be returned if the executable is a PEF/CFM executable but the current process does not support that type of executable. </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>NSExecutableArchitectureMismatchError</c> - returned if the bundle executable does not include code that matches the processor architecture of the current processor. </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>NSExecutableRuntimeMismatchError</c> - returned if the bundle’s required Objective-C runtime information is not compatible with the runtime of the current process.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>NSExecutableLoadError</c> - returned if the bundle’s executable failed to load for some detectable reason prior to linking. This error might occur if the bundle depends on a framework or library that is missing or if the required framework or library is not compatible with the current architecture or runtime version.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>NSExecutableLinkError</c> - returned if the executable failed to load due to link errors but is otherwise alright.</p>
                    </li>
                </ul>
                <p>The error object may contain additional debugging information in its description that you can use to identify the cause of the error. (This debugging information should not be displayed to the user.) You can obtain the debugging information by invoking the error object’s <c>description</c> method in your code or by using the <c>print-object</c> command on the error object in gdb.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– load</c>
                    </li>
                    <li>
                        <c>– unload</c>
                    </li>
                </ul>
            </remarks>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.LoadNibNamed(System.String,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Unarchives the contents of a nib file located in the receiver's bundle.
            <br></br>Equivalent to the native <c>loadNibNamed:owner:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the nib file, which need not include the <c>.nib</c> extension.</p>
                <em>owner</em>
                <p>The object to assign as the nib’s File's Owner object.</p>
                <em>options</em>
                <p>A dictionary containing the options to use when opening the nib file. For a list of available keys for this dictionary, see  “Nib File Loading Options.”  </p>
                <b>Return Value</b>
                <p>An array containing the top-level objects in the nib file. The array does not contain references to the File’s Owner or any proxy objects; it contains only those objects that were instantiated when the nib file was unarchived. You should retain either the returned array or the objects it contains manually to prevent the nib file objects from being released prematurely. </p>
                <b>Discussion</b>
                <p>You can use this method to load user interfaces and make the objects available to your code. During the loading process, this method unarchives each object, initializes it, sets its properties to their configured values, and reestablishes any connections to other objects. (To establish outlet connections, this method uses the <c>setValue:forKey:</c> method, which may cause the object in the outlet to be retained automatically.) For detailed information about the nib-loading process, see <em>Resource Programming Guide</em>.</p>
                <p>If the nib file contains any proxy objects beyond just the File’s Owner proxy object, you can specify the runtime replacement objects for those proxies using the options dictionary. In that dictionary, add the <c>UINibExternalObjects</c> key and set its value to a dictionary containing the names of any proxy objects (the keys) and the real objects to use in their place. The proxy object’s name is the string you assign to it in the Identifier field of the Interface Builder inspector window.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="owner">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Localizations">
            <summary>
            Returns a list of all the localizations contained within the receiver’s bundle.
            <br></br>Equivalent to the native <c>localizations</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array, containing <c>String</c> objects, that specifies all the localizations contained within the receiver’s bundle.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.LocalizedInfoDictionary">
            <summary>
            Returns a dictionary with the keys from the bundle’s localized property list.
            <br></br>Equivalent to the native <c>localizedInfoDictionary</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary with the keys from the bundle’s localized property list (<c>InfoPlist.strings</c>).</p>
                <b>Discussion</b>
                <p>This method uses the preferred localization for the current user when determining which resources to return. If the preferred localization is not available, this method chooses the most appropriate localization found in the bundle.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.LocalizedString(System.String,System.String,System.String)">
            <summary>
            Returns a localized version of the string designated by the specified key and residing in the specified table.
            <br></br>Equivalent to the native <c>localizedStringForKey:value:table:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key for a string in the table identified by <em>tableName</em>.</p>
                <em>value</em>
                <p>The value to return if <em>key</em> is <c>null</c> or if a localized string for <em>key</em> can’t be found in the table.</p>
                <em>tableName</em>
                <p>The receiver’s string table to search. If <em>tableName</em> is <c><!--a  -->nil<!--/a--></c> or is an empty string, the method attempts to use the table in <c>Localizable.strings</c>.</p>
                <b>Return Value</b>
                <p>A localized version of the string designated by <em>key</em> in table <em>tableName</em>. If <em>value</em> is <c><!--a  -->nil<!--/a--></c> or an empty string, and a localized string is not found in the table, returns <em>key</em>. If <em>key</em> and <em>value</em> are both <c><!--a  -->nil<!--/a--></c>, returns the empty string.</p>
                <b>Discussion</b>
                <p>For more details about string localization and the specification of a <c>.strings</c> file, see “ “String Resources” .”</p>
                <p>Using the user default <c><!--a  -->NSShowNonLocalizedStrings<!--/a--></c>, you can alter the behavior of <c>localizedStringForKey:value:table:</c> to log a message when the method can’t find a localized string. If you set this default to <c>true</c> (in the global domain or in the application’s domain), then when the method can’t find a localized string in the table, it logs a message to the console and capitalizes <em>key</em> before returning it.</p>
                <p>The following example cycles through a static array of keys when a button is clicked, gets the value for each key from a strings table named <c>Buttons.strings</c>, and sets the button title with the returned value:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>- (void)changeTitle:(id)sender  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>{  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    static int keyIndex = 0;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSBundle *thisBundle = [NSBundle bundleForClass:[self class]];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSString *locString = [thisBundle  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        localizedStringForKey:assortedKeys[keyIndex++]  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        value:"No translation" table:"Buttons"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [sender setTitle:locString];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    if (keyIndex == MAXSTRINGS) keyIndex=0;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pathForResource:ofType:</c>
                    </li>
                    <li>
                        <c>– pathForResource:ofType:inDirectory:</c>
                    </li>
                    <li>
                        <c>– pathsForResourcesOfType:inDirectory:</c>
                    </li>
                    <li>
                        <c>+ pathForResource:ofType:inDirectory:</c>
                    </li>
                    <li>
                        <c>+ pathsForResourcesOfType:inDirectory:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
            <param name="value">
            </param>
            <param name="tableName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Object(System.String)">
            <summary>
            Returns the value associated with the specified key in the receiver's information property list.
            <br></br>Equivalent to the native <c>objectForInfoDictionaryKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>A key in the receiver's property list.</p>
                <b>Return Value</b>
                <p>The value associated with <em>key</em> in the receiver's property list (<c>Info.plist</c>). The localized value of a key is returned when one is available.</p>
                <b>Discussion</b>
                <p>Use of this method is preferred over other access methods because it returns the localized value of a key when one is available. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Path(System.String)">
            <summary>
            Returns the full pathname of the executable with the specified name in the receiver’s bundle.
            <br></br>Equivalent to the native <c>pathForAuxiliaryExecutable:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>executableName</em>
                <p>The name of an executable file.</p>
                <b>Return Value</b>
                <p>The full pathname of the executable <em>executableName</em> in the receiver’s bundle.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a path for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="executableName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Path(System.String,System.String)">
            <summary>
            Returns the full pathname for the resource identified by the specified name and file extension.
            <br></br>Equivalent to the native <c>pathForResource:ofType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the resource file. If <em>name</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, returns the first file encountered of the supplied type.</p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist and the file is the first file encountered that exactly matches <em>name</em>.</p>
                <b>Return Value</b>
                <p>The full pathname for the resource file or <c>null</c> if the file could not be located.</p>
                <b>Discussion</b>
                <p>The method first looks for a matching resource file in the non-localized resource directory of the specified bundle. (In OS X, this directory is typically called <c>Resources</c> but in iOS, it is the main bundle directory.) If a matching resource file is not found, it then looks in the top level of any available language-specific “<c>.lproj</c>” directories. (The search order for the language-specific directories corresponds to the user’s preferences.) It does not recurse through other subdirectories at any of these locations. For more details see <em>Internationalization Programming Topics</em>.</p>
                <p>The following code fragment gets the path to a plist within the bundle, and loads it into an <c>Dictionary</c>.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSBundle *thisBundle = [NSBundle bundleForClass:[self class]];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>if (commonDictionaryPath = [thisBundle pathForResource:"CommonDictionary" ofType:"plist"])  {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    theDictionary = [[NSDictionary alloc] initWithContentsOfFile:commonDictionaryPath];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– URLForResource:withExtension:</c>
                    </li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="ext">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Path(System.String,System.String,System.String)">
            <summary>
            Returns the full pathname for the resource identified by the specified name and file extension and located in the specified bundle subdirectory.
            <br></br>Equivalent to the native <c>pathForResource:ofType:inDirectory:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the resource file.</p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, all the files in <em>subpath</em> and its subdirectories are returned. If an extension is provided the subdirectories are not searched.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory. Can be <c>null</c>.</p>
                <b>Return Value</b>
                <p>An array of full pathnames for the <em>subpath</em> or <c>null</c> if no files are located.</p>
                <b>Discussion</b>
                <p>If <em>subpath</em> is <c>null</c>, this method searches the top-level nonlocalized resource directory and the top-level of any language-specific directories. (In OS X, the top-level nonlocalized resource directory is typically called <c>Resources</c> but in iOS, it is the main bundle directory.) For example, suppose you have a Mac app with a modern bundle and you specify <c>"Documentation"</c> for the <em>subpath</em> parameter. This method would first look in the <c>Contents/Resources/Documentation</c> directory of the bundle, followed by the <c>Documentation</c> subdirectories of each language-specific <c>.lproj</c> directory. </p>
                <p>Whether this method recurses through subdirectories is dependent on the <em>extension</em> parameter. If <c>null</c> or an empty string it will recurse, otherwise, it does not. (The search order for the language-specific directories corresponds to the user’s preferences.) For more details see <em>Internationalization Programming Topics</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– localizedStringForKey:value:table:</c>
                    </li>
                    <li>
                        <c>– pathForResource:ofType:</c>
                    </li>
                    <li>
                        <c>– pathsForResourcesOfType:inDirectory:</c>
                    </li>
                    <li>
                        <c>+ pathForResource:ofType:inDirectory:</c>
                    </li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Path(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the full pathname for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.
            <br></br>Equivalent to the native <c>pathForResource:ofType:inDirectory:forLocalization:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the resource file.</p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist and the file is the first file encountered that exactly matches <em>name</em>.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory to search. </p>
                <em>localizationName</em>
                <p>The name of the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the <c>.lproj</c> extension. </p>
                <b>Return Value</b>
                <p>The full pathname for the resource file or <c>null</c> if the file could not be located.</p>
                <b>Discussion</b>
                <p>This method is equivalent to <c>pathForResource:ofType:inDirectory:</c>, except that only nonlocalized resources and those in the language-specific <c>.lproj</c> directory specified by <em>localizationName</em> are searched.</p>
                <p>There should typically be little reason to use this method—see  “Getting the Current Language and Locale” . See also  preferredLocalizationsFromArray:forPreferences:  for how to determine what localizations are available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
            <param name="localizationName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Paths(System.String,System.String)">
            <summary>
            Returns an array containing the pathnames for all bundle resources having the specified filename extension and residing in the resource subdirectory.
            <br></br>Equivalent to the native <c>pathsForResourcesOfType:inDirectory:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>extension</em>
                <p>The file extension. If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist, all the files in <em>subpath</em> are returned.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory to search. </p>
                <b>Return Value</b>
                <p>An array containing the full pathnames for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. </p>
                <b>Discussion</b>
                <p>This method provides a means for dynamically discovering multiple bundle resources of the same type. If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, all bundle resources in the specified resource directory are returned. </p>
                <p>The argument <em>subpath</em> specifies the name of a specific subdirectory to search within the current bundle’s resource directory hierarchy. If <em>subpath</em> is <c>null</c>, this method searches the top-level nonlocalized resource directory and the top-level of any language-specific directories. (In OS X, the top-level nonlocalized resource directory is typically called <c>Resources</c> but in iOS, it is the main bundle directory.) For example, suppose you have a Mac app with a modern bundle and you specify <c>"Documentation"</c> for the <em>subpath</em> parameter. This method would first look in the <c>Contents/Resources/Documentation</c> directory of the bundle, followed by the <c>Documentation</c> subdirectories of each language-specific <c>.lproj</c> directory. (The search order for the language-specific directories corresponds to the user’s preferences.) This method does not recurse through any other subdirectories at any of these locations. For more details see <em>Internationalization Programming Topics</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– localizedStringForKey:value:table:</c>
                    </li>
                    <li>
                        <c>– pathForResource:ofType:</c>
                    </li>
                    <li>
                        <c>– pathForResource:ofType:inDirectory:</c>
                    </li>
                    <li>
                        <c>+ pathForResource:ofType:inDirectory:</c>
                    </li>
                    <li>
                        <c>+ pathsForResourcesOfType:inDirectory:</c>
                    </li>
                </ul>
            </remarks>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Paths(System.String,System.String,System.String)">
            <summary>
            Returns an array containing the file for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.
            <br></br>Equivalent to the native <c>pathsForResourcesOfType:inDirectory:forLocalization:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>extension</em>
                <p>The file extension of the files to retrieve.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory to search. </p>
                <em>localizationName</em>
                <p>The name of the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the <c>.lproj</c> extension. </p>
                <b>Return Value</b>
                <p>An array containing the full pathnames for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. </p>
                <b>Discussion</b>
                <p>This method is equivalent to <c>pathsForResourcesOfType:inDirectory:</c>, except that only nonlocalized resources and those in the language-specific <c>.lproj</c> directory specified by <em>localizationName</em> are searched.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
            <param name="localizationName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.PreferredLocalizations">
            <summary>
            Returns an array of strings indicating the actual localizations contained in the receiver’s bundle.
            <br></br>Equivalent to the native <c>preferredLocalizations</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which identifies the a localization in the receiver’s bundle. The languages are in the preferred order.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ preferredLocalizationsFromArray:</c>
                    </li>
                    <li>
                        <c>– localizations</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.PreflightAndReturnError(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns a Boolean value indicating whether the bundle’s executable code could be loaded successfully.
            <br></br>Equivalent to the native <c>preflightAndReturnError:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>error</em>
                <p>On input, a pointer to an error object variable. On output, this variable may contain an error object indicating why the bundle’s executable could not be loaded. If no error would occur, this parameter is left unmodified. You may specify <c>null</c> for this parameter if you are not interested in the error information.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the bundle’s executable code could be loaded successfully or is already loaded; otherwise, <c>false</c> if the code could not be loaded.</p>
                <b>Discussion</b>
                <p>This method does not actually load the bundle’s executable code. Instead, it performs several checks to see if the code could be loaded and with one exception returns the same errors that would occur during an actual load operation. The one exception is the <c>NSExecutableLinkError</c> error, which requires the actual loading of the code to verify link errors. </p>
                <p>For a list of possible load errors, see the discussion for the <c>loadAndReturnError:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadAndReturnError:</c>
                    </li>
                </ul>
            </remarks>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.PrivateFrameworksPath">
            <summary>
            Returns the full pathname of the receiver's subdirectory containing private frameworks.
            <br></br>Equivalent to the native <c>privateFrameworksPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full pathname of the receiver's subdirectory containing private frameworks.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a path for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.PrivateFrameworksURL">
            <summary>
            Returns the file URL of the receiver's subdirectory containing private frameworks.
            <br></br>Equivalent to the native <c>privateFrameworksURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The file URL of the receiver's subdirectory containing private frameworks.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a URL for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.ResourcePath">
            <summary>
            Returns the full pathname of the receiving bundle’s subdirectory containing resources.
            <br></br>Equivalent to the native <c>resourcePath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full pathname of the receiving bundle’s subdirectory containing resources.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– bundlePath</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.ResourceURL">
            <summary>
            Returns the file URL of the receiver's subdirectory containing resource files.
            <br></br>Equivalent to the native <c>resourceURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The file URL of the receiver's subdirectory containing resource files.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a path for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.SharedFrameworksPath">
            <summary>
            Returns the full pathname of the receiver's subdirectory containing shared frameworks.
            <br></br>Equivalent to the native <c>sharedFrameworksPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full pathname of the receiver's subdirectory containing shared frameworks.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a path for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.SharedFrameworksURL">
            <summary>
            Returns the file URL of the receiver's subdirectory containing shared frameworks.
            <br></br>Equivalent to the native <c>sharedFrameworksURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The file URL of the receiver's subdirectory containing shared frameworks.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a URL for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.SharedSupportPath">
            <summary>
            Returns the full pathname of the receiver's subdirectory containing shared support files.
            <br></br>Equivalent to the native <c>sharedSupportPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The full pathname of the receiver's subdirectory containing shared support files.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a path for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.SharedSupportURL">
            <summary>
            Returns the file URL of the receiver's subdirectory containing shared support files.
            <br></br>Equivalent to the native <c>sharedSupportURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The file URL of the receiver's subdirectory containing shared support files.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a path for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.Unload">
            <summary>
            Unloads the code associated with the receiver.
            <br></br>Equivalent to the native <c>unload</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the bundle was successfully unloaded or was not already loaded; otherwise, <c>false</c> if the bundle could not be unloaded.</p>
                <b>Discussion</b>
                <p>This method attempts to unload a bundle’s executable code using the underlying dynamic loader (typically <c>dyld</c>). You may use this method to unload plug-in and framework bundles when you no longer need the code they contain. You should use this method to unload bundles that were loaded using the methods of the <c>NSBundle</c> class only. Do not use this method to unload bundles that were originally loaded using the bundle-manipulation functions in Core Foundation.</p>
                <p>It is the responsibility of the caller to ensure that no in-memory objects or data structures refer to the code being unloaded. For example, if you have an object whose class is defined in a bundle, you must release that object prior to unloading the bundle. Similarly, your code should not attempt to access any symbols defined in an unloaded bundle.</p>
                <b>Special Considerations</b>
                <p>Prior to OS X version 10.5, code could not be unloaded once loaded, and this method would always return <c>false</c>. In OS X version 10.5 and later, you can unload a bundle’s executable code using this method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadAndReturnError:</c>
                    </li>
                    <li>
                        <c>– load</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URL(System.String)">
            <summary>
            Returns the file URL of the executable with the specified name in the receiver’s bundle.
            <br></br>Equivalent to the native <c>URLForAuxiliaryExecutable:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>executableName</em>
                <p>The name of an executable file.</p>
                <b>Return Value</b>
                <p>The file URL of the executable <em>executableName</em> in the receiver’s bundle.</p>
                <b>Discussion</b>
                <p>This method returns the appropriate path for modern application and framework bundles. This method may not return a URL for non-standard bundle formats or for some older bundle formats. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="executableName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URL(System.String,System.String)">
            <summary>
            Returns the file URL for the resource identified by the specified name and file extension.
            <br></br>Equivalent to the native <c>URLForResource:withExtension:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the resource file.</p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches <em>name</em>.</p>
                <b>Return Value</b>
                <p>The file URL for the resource file or <c>null</c> if the file could not be located.</p>
                <b>Discussion</b>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the returned pathname is the first one encountered where the file name exactly matches <em>name</em>. </p>
                <p>The method first looks for a matching resource file in the nonlocalized resource directory of the specified bundle. (In OS X, this directory is typically called <c>Resources</c> but in iOS, it is the main bundle directory.) If a matching resource file is not found, it then looks in the top level of any available language-specific “<c>.lproj</c>” directories. (The search order for the language-specific directories corresponds to the user’s preferences.) It does not recurse through other subdirectories at any of these locations. For more details see <em>Internationalization Programming Topics</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="ext">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URL(System.String,System.String,System.String)">
            <summary>
            Returns the file URL for the resource file identified by the specified name and extension and residing in a given bundle directory.
            <br></br>Equivalent to the native <c>URLForResource:withExtension:subdirectory:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of a resource file contained in the directory specified by <em>bundleURL</em>. </p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches <em>name</em>.</p>
                <em>subpath</em>
                <p>The path of a top-level bundle directory. This must be a valid path. For example, to specify the bundle directory for a Mac app, you might specify the path <c>/Applications/MyApp.app</c>.</p>
                <b>Return Value</b>
                <p>The file URL for the resource file or <c>null</c> if the file could not be located. This method also returns <c>null</c> if the bundle specified by the <c>bundlePath</c> parameter does not exist or is not a readable directory.</p>
                <b>Discussion</b>
                <p>The method first looks for a matching resource file in the non-localized resource directory of the specified bundle. (In OS X, this directory is typically called <c>Resources</c> but in iOS, it is the main bundle directory.) If a matching resource file is not found, it then looks in the top level of any available language-specific “<c>.lproj</c>” directories. (The search order for the language-specific directories corresponds to the user’s preferences.) It does not recurse through other subdirectories at any of these locations. For more details see <em>Internationalization Programming Topics</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pathForResource:ofType:inDirectory:</c>
                    </li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URL(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the file URL for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.
            <br></br>Equivalent to the native <c>URLForResource:withExtension:subdirectory:localization:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the resource file.</p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches <em>name</em>.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory to search. </p>
                <em>localizationName</em>
                <p>The name of the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the <c>.lproj</c> extension. </p>
                <b>Return Value</b>
                <p>The file URL for the resource file or <c>null</c> if the file could not be located.</p>
                <b>Discussion</b>
                <p>This method is equivalent to <c>URLsForResourcesWithExtension:subdirectory:</c>, except that only nonlocalized resources and those in the language-specific <c>.lproj</c> directory specified by <em>localizationName</em> are searched.</p>
                <p>There should typically be little reason to use this method—see  “Getting the Current Language and Locale” . See also  preferredLocalizationsFromArray:forPreferences:  for how to determine what localizations are available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
            <param name="localizationName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URLs(System.String,System.String)">
            <summary>
            Returns the file URL for the resource identified by the specified name and file extension and located in the specified bundle subdirectory.
            <br></br>Equivalent to the native <c>URLsForResourcesWithExtension:subdirectory:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>extension</em>
                <p>If <em>extension</em> is an empty string or <c><!--a  -->nil<!--/a--></c>, the extension is assumed not to exist and the file URL is the first file encountered that exactly matches <em>name</em>.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory. </p>
                <b>Return Value</b>
                <p>The file URL for the resource file or <c>null</c> if the file could not be located.</p>
                <b>Discussion</b>
                <p>If <em>subpath</em> is <c>null</c>, this method searches the top-level non-localized resource directory and the top-level of any language-specific directories. (In OS X, the top-level non-localized resource directory is typically called <c>Resources</c> but in iOS, it is the main bundle directory.) </p>
                <p>For example, suppose you have a Mac app with a modern bundle and you specify <c>"Documentation"</c> for the <em>subpath</em> parameter. This method would first look in the <c>Contents/Resources/Documentation</c> directory of the bundle, followed by the <c>Documentation</c> subdirectories of each language-specific <c>.lproj</c> directory. (The search order for the language-specific directories corresponds to the user’s preferences.) This method does not recurse through any other subdirectories at any of these locations. For more details see <em>Internationalization Programming Topics</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSBundle.URLs(System.String,System.String,System.String)">
            <summary>
            Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.
            <br></br>Equivalent to the native <c>URLsForResourcesWithExtension:subdirectory:localization:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>ext</em>
                <p>The file extension of the files to retrieve.</p>
                <em>subpath</em>
                <p>The name of the bundle subdirectory to search. </p>
                <em>localizationName</em>
                <p>The name of the localization. This parameter should correspond to the name of one of the bundle's language-specific resource directories without the <c>.lproj</c> extension. </p>
                <b>Return Value</b>
                <p>An array containing the file URLs for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. </p>
                <b>Discussion</b>
                <p>This method is equivalent to <c>URLsForResourcesWithExtension:subdirectory:</c>, except that only nonlocalized resources and those in the language-specific <c>.lproj</c> directory specified by <em>localizationName</em> are searched.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="ext">
            </param>
            <param name="subpath">
            </param>
            <param name="localizationName">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSCalendar">
            <summary>
            Calendars encapsulate information about systems of reckoning time in which the beginning, length, and divisions of a year are defined. They provide information about the calendar and support for calendrical computations such as determining the range of a given calendrical unit and adding units to a given absolute time.
            </summary>
            <remarks>
                <p>In a calendar, day, week, weekday, month, and year numbers are generally 1-based, but there may be calendar-specific exceptions. Ordinal numbers, where they occur, are 1-based. Some calendars represented by this API may have to map their basic unit concepts into year/month/week/day/… nomenclature. For example, a calendar composed of 4 quarters in a year instead of 12 months uses the month unit to represent quarters. The particular values of the unit are defined by each calendar, and are not necessarily consistent with values for that unit in another calendar.</p>
                <p>To do calendar arithmetic, you use <c>DateTime</c> objects in conjunction with a calendar. For example, to convert between a decomposed date in one calendar and another calendar, you must first convert the decomposed elements into a date using the first calendar, then decompose it using the second. <c>DateTime</c> provides the absolute scale and epoch (reference point) for dates and times, which can then be rendered into a particular calendar, for calendrical computations or user display.</p>
                <p>Two <c>NSCalendar</c> methods that return a date object, <c>dateFromComponents:</c>, <c>dateByAddingComponents:toDate:options:</c>, take as a parameter an <c>NSDateComponents</c> object that describes the calendrical components required for the computation. You can provide as many components as you need (or choose to). When there is incomplete information to compute an absolute time, default values similar to <c>0</c> and <c>1</c> are usually chosen by a calendar, but this is a calendar-specific choice. If you provide inconsistent information, calendar-specific disambiguation is performed (which may involve ignoring one or more of the parameters). Related methods (<c>components:fromDate:</c> and <c>components:fromDate:toDate:options:</c>) take a bit mask parameter that specifies which components to calculate when returning an <c>NSDateComponents</c> object. The bit mask is composed of <c>NSCalendarUnit</c> constants (see  “Constants” ).</p>
                <p>
                    <c>NSCalendar</c> is “toll-free bridged” with its Core Foundation counterpart, <c>CFCalendarRef</c>. See  “Toll-Free Bridging”  for more information on toll-free bridging.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_autoupdatingCurrentCalendar">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_currentCalendar">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_calendarIdentifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_components_fromDate_(System.String,System.UInt32,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_components_fromDate_toDate_options_(System.String,System.UInt32,System.Double,System.Double,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_dateByAddingComponents_toDate_options_(System.String,System.String,System.Double,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_dateFromComponents_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_firstWeekday(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_alloc_initWithCalendarIdentifier_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_locale(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_maximumRangeOfUnit_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_minimumDaysInFirstWeek(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_minimumRangeOfUnit_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_ordinalityOfUnit_inUnit_forDate_(System.String,System.UInt32,System.UInt32,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_rangeOfUnit_inUnit_forDate_(System.String,System.UInt32,System.UInt32,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_setFirstWeekday_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_setLocale_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_setMinimumDaysInFirstWeek_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_setTimeZone_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.UP_NSCalendar_timeZone(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSCalendar" /> class.
            <br></br>Equivalent to the native <c>[[NSCalendar alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSCalendar.ClassExists">
            <summary>
            Returns whether the native NSCalendar class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.AutoupdatingCurrentCalendar">
            <summary>
            Returns the current logical calendar for the current user.
            <br></br>Equivalent to the native <c>autoupdatingCurrentCalendar</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The current logical calendar for the current user.</p>
                <b>Discussion</b>
                <p>Settings you get from this calendar do change as the user’s settings change (contrast with <c>currentCalendar</c>).</p>
                <p>Note that if you cache values based on the calendar or related information those caches will of course not be automatically updated by the updating of the calendar object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ currentCalendar</c>
                    </li>
                    <li>
                        <c>– initWithCalendarIdentifier:</c>
                    </li>
                    <li>
                        <c>– calendarIdentifier</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.CurrentCalendar">
            <summary>
            Returns the logical calendar for the current user.
            <br></br>Equivalent to the native <c>currentCalendar</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The logical calendar for the current user.</p>
                <b>Discussion</b>
                <p>The returned calendar is formed from the settings for the current user’s chosen system locale overlaid with any custom settings the user has specified in System Preferences. Settings you get from this calendar do not change as System Preferences are changed, so that your operations are consistent  (contrast with <c>autoupdatingCurrentCalendar</c>).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ autoupdatingCurrentCalendar</c>
                    </li>
                    <li>
                        <c>– initWithCalendarIdentifier:</c>
                    </li>
                    <li>
                        <c>– calendarIdentifier</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.CalendarIdentifier">
            <summary>
            Returns the identifier for the receiver.
            <br></br>Equivalent to the native <c>calendarIdentifier</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The identifier for the receiver. For valid identifiers, see <c>NSLocale</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ autoupdatingCurrentCalendar</c>
                    </li>
                    <li>
                        <c>– initWithCalendarIdentifier:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.Components(System.UInt32,System.DateTime)">
            <summary>
            Returns a <c>NSDateComponents</c> object containing a given date decomposed into specified components.
            <br></br>Equivalent to the native <c>components:fromDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unitFlags</em>
                <p>The components into which to decompose <em>date</em>—a bitwise <c>OR</c> of <c>NSCalendarUnit</c> constants.</p>
                <em>date</em>
                <p>The date for which to perform the calculation.</p>
                <b>Return Value</b>
                <p>An <c>NSDateComponents</c> object containing <em>date</em> decomposed into the components specified by <em>unitFlags</em>. Returns <c>null</c> if <em>date</em> falls outside of the defined range of the receiver or if the computation cannot be performed</p>
                <b>Discussion</b>
                <p>The Weekday ordinality, when requested, refers to the next larger (than Week) of the requested units. Some computations can take a relatively long time.</p>
                <p>The following example shows how to use this method to determine the current year, month, and day, using an existing calendar (<c>gregorian</c>):</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>unsigned unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit |  NSDayCalendarUnit;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDate *date = [NSDate date];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDateComponents *comps = [gregorian components:unitFlags fromDate:date];  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– dateFromComponents:</c>
                    </li>
                    <li>
                        <c>– components:fromDate:toDate:options:</c>
                    </li>
                    <li>
                        <c>– dateByAddingComponents:toDate:options:</c>
                    </li>
                </ul>
            </remarks>
            <param name="unitFlags">
            </param>
            <param name="date">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.Components(System.UInt32,System.DateTime,System.DateTime,System.UInt32)">
            <summary>
            Returns, as an <c>NSDateComponents</c> object using specified components, the difference between two supplied dates.
            <br></br>Equivalent to the native <c>components:fromDate:toDate:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unitFlags</em>
                <p>Specifies the components for the returned <c>NSDateComponents</c> object—a bitwise <c>OR</c> of <c>NSCalendarUnit</c> constants.</p>
                <em>startingDate</em>
                <p>The start date for the calculation.</p>
                <em>resultDate</em>
                <p>The end date for the calculation.</p>
                <em>opts</em>
                <p>Options for the calculation.</p>
                <p>If you specify a “wrap” option (<c>NSWrapCalendarComponents</c>), the specified components are incremented and wrap around to zero/one on overflow, but do not cause higher units to be incremented. When the wrap option is false, overflow in a unit carries into the higher units, as in typical addition.</p>
                <b>Return Value</b>
                <p>An <c>NSDateComponents</c> object whose components are specified by <em>unitFlags</em> and calculated from the difference between the <em>resultDate</em> and <em>startDate</em> using the options specified by <em>opts</em>. Returns <c>null</c> if either date falls outside the defined range of the receiver or if the computation cannot be performed.</p>
                <b>Discussion</b>
                <p>The result is lossy if there is not a small enough unit requested to hold the full precision of the difference. Some operations can be ambiguous, and the behavior of the computation is calendar-specific, but generally larger components will be computed before smaller components; for example, in the Gregorian calendar a result might be 1 month and 5 days instead of, for example, 0 months and 35 days. The resulting component values may be negative if <em>resultDate</em> is before <em>startDate</em>.</p>
                <p>The following example shows how to get the approximate number of months and days between two dates using an existing calendar (<c>gregorian</c>):</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSDate *startDate = ...;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDate *endDate = ...;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>unsigned int unitFlags = NSMonthCalendarUnit | NSDayCalendarUnit;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDateComponents *comps = [gregorian components:unitFlags fromDate:startDate  toDate:endDate  options:0];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>int months = [comps month];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>int days = [comps day];  </pre>
                        </td>
                    </tr>
                </table>
                <p>Note that some computations can take a relatively long time.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– dateByAddingComponents:toDate:options:</c>
                    </li>
                    <li>
                        <c>– dateFromComponents:</c>
                    </li>
                </ul>
            </remarks>
            <param name="unitFlags">
            </param>
            <param name="startingDate">
            </param>
            <param name="resultDate">
            </param>
            <param name="opts">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.DateByAddingComponents(U3DXT.iOS.Native.Foundation.NSDateComponents,System.DateTime,System.UInt32)">
            <summary>
            Returns a new <c>DateTime</c> object representing the absolute time calculated by adding given components to a given date.
            <br></br>Equivalent to the native <c>dateByAddingComponents:toDate:options:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>comps</em>
                <p>The components to add to <em>date</em>.</p>
                <em>date</em>
                <p>The date to which <em>comps</em> are added.</p>
                <em>opts</em>
                <p>Options for the calculation. See <c>“NSDateComponents wrapping behavior”</c> for possible values. Pass <c>0</c> to specify no options.</p>
                <p>If you specify no options (you pass <c>0</c>), overflow in a unit carries into the higher units (as in typical addition).</p>
                <b>Return Value</b>
                <p>A new <c>DateTime</c> object representing the absolute time calculated by adding to <em>date</em> the calendrical components specified by <em>comps</em> using the options specified by <em>opts</em>. Returns <c>null</c> if <em>date</em> falls outside the defined range of the receiver or if the computation cannot be performed.</p>
                <b>Discussion</b>
                <p>Some operations can be ambiguous, and the behavior of the computation is calendar-specific, but generally components are added in the order specified.</p>
                <p>The following example shows how to add 2 months and 3 days to the current date and time using an existing calendar (<c>gregorian</c>):</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSDate *currentDate = [NSDate date];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDateComponents *comps = [[NSDateComponents alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setMonth:2];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setDay:3];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDate *date = [gregorian dateByAddingComponents:comps toDate:currentDate  options:0];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps release];  </pre>
                        </td>
                    </tr>
                </table>
                <p>Note that some computations can take a relatively long time.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– dateFromComponents:</c>
                    </li>
                    <li>
                        <c>– components:fromDate:toDate:options:</c>
                    </li>
                </ul>
            </remarks>
            <param name="comps">
            </param>
            <param name="date">
            </param>
            <param name="opts">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.Date(U3DXT.iOS.Native.Foundation.NSDateComponents)">
            <summary>
            Returns a new <c>DateTime</c> object representing the absolute time calculated from given components.
            <br></br>Equivalent to the native <c>dateFromComponents:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>comps</em>
                <p>The components from which to calculate the returned date.</p>
                <b>Return Value</b>
                <p>A new <c>DateTime</c> object representing the absolute time calculated from <em>comps</em>. Returns <c>null</c> if the receiver cannot convert the components given in <em>comps</em> into an absolute time. The method also returns <c>null</c> and for out-of-range values.</p>
                <b>Discussion</b>
                <p>When there are insufficient components provided to completely specify an absolute time, a calendar uses default values of its choice. When there is inconsistent information, a calendar may ignore some of the components parameters or the method may return <c>null</c>. Unnecessary components are ignored (for example, Day takes precedence over Weekday and Weekday ordinals).</p>
                <p>The following example shows how to use this method to create a date object to represent 14:10:00 on 6 January 1965, for a given calendar (<c>gregorian</c>).</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSDateComponents *comps = [[NSDateComponents alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setYear:1965];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setMonth:1];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setDay:6];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setHour:14];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setMinute:10];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setSecond:0];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDate *date = [gregorian dateFromComponents:comps];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps release];  </pre>
                        </td>
                    </tr>
                </table>
                <p>Note that some computations can take a relatively long time to perform.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– components:fromDate:</c>
                    </li>
                    <li>
                        <c>– dateFromComponents:</c>
                    </li>
                </ul>
            </remarks>
            <param name="comps">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.FirstWeekday">
            <summary>
            Returns the index of the first weekday of the receiver.
            <br></br>Equivalent to the native <c>firstWeekday</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The index of the first weekday of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setFirstWeekday:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSCalendar and initializes the object. Initializes a newly-allocated <c>NSCalendar</c> object for the calendar specified by a given identifier.
            <br></br>Equivalent to the native <c>[[NSCalendar alloc] initWithCalendarIdentifier:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The identifier for the new calendar. For valid identifiers, see <c>NSLocale</c>.</p>
                <b>Return Value</b>
                <p>The initialized calendar, or <c>null</c> if the identifier is unknown (if, for example, it is either an unrecognized string or the calendar is not supported by the current version of the operating system).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ autoupdatingCurrentCalendar</c>
                    </li>
                    <li>
                        <c>– calendarIdentifier</c>
                    </li>
                </ul>
            </remarks>
            <param name="ident">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.Locale">
            <summary>
            Returns the locale for the receiver.
            <br></br>Equivalent to the native <c>locale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The locale for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setLocale:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.MaximumRangeOfUnit(U3DXT.iOS.Native.Foundation.NSCalendarUnit)">
            <summary>
            The maximum range limits of the values that a given unit can take on in the receive
            <br></br>Equivalent to the native <c>maximumRangeOfUnit:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unit</em>
                <p>The unit for which the maximum range is returned.</p>
                <b>Return Value</b>
                <p>The maximum range limits of the values that the unit specified by <em>unit</em> can take on in the receiver.</p>
                <b>Discussion</b>
                <p>As an example, in the Gregorian calendar the maximum range of values for the Day unit is 1-31.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minimumRangeOfUnit:</c>
                    </li>
                </ul>
            </remarks>
            <param name="unit">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.MinimumDaysInFirstWeek">
            <summary>
            Returns the minimum number of days in the first week of the receiver.
            <br></br>Equivalent to the native <c>minimumDaysInFirstWeek</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The minimum number of days in the first week of the receiver </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinimumDaysInFirstWeek:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.MinimumRangeOfUnit(U3DXT.iOS.Native.Foundation.NSCalendarUnit)">
            <summary>
            Returns the minimum range limits of the values that a given unit can take on in the receiver.
            <br></br>Equivalent to the native <c>minimumRangeOfUnit:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>unit</em>
                <p>The unit for which the maximum range is returned.</p>
                <b>Return Value</b>
                <p>The minimum range limits of the values that the unit specified by <em>unit</em> can take on in the receiver.</p>
                <b>Discussion</b>
                <p>As an example, in the Gregorian calendar the minimum range of values for the Day unit is 1-28.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– maximumRangeOfUnit:</c>
                    </li>
                </ul>
            </remarks>
            <param name="unit">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.OrdinalityOfUnit(U3DXT.iOS.Native.Foundation.NSCalendarUnit,U3DXT.iOS.Native.Foundation.NSCalendarUnit,System.DateTime)">
            <summary>
            Returns, for a given absolute time, the ordinal number of a smaller calendar unit (such as a day) within a specified larger calendar unit (such as a week).
            <br></br>Equivalent to the native <c>ordinalityOfUnit:inUnit:forDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>smaller</em>
                <p>The smaller calendar unit </p>
                <em>larger</em>
                <p>The larger calendar unit </p>
                <em>date</em>
                <p>The absolute time for which the calculation is performed</p>
                <b>Return Value</b>
                <p>The ordinal number of <em>smaller</em> within <em>larger</em> at the time specified by <em>date</em>. Returns <c>NSNotFound</c> if <em>larger</em> is not logically bigger than <em>smaller</em> in the calendar, or the given combination of units does not make sense (or is a computation which is undefined).</p>
                <b>Discussion</b>
                <p>The ordinality is in most cases not the same as the decomposed value of the unit. Typically return values are <c>1</c> and greater. For example, the time <c>00:45</c> is in the first hour of the day, and for units Hour and Day respectively, the result would be <c>1</c>. An exception is the week-in-month calculation, which returns <c>0</c> for days before the first week in the month containing the date.</p>
                <p>Note that some computations can take a relatively long time.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– rangeOfUnit:inUnit:forDate:</c>
                    </li>
                    <li>
                        <c>– rangeOfUnit:startDate:interval:forDate:</c>
                    </li>
                </ul>
            </remarks>
            <param name="smaller">
            </param>
            <param name="larger">
            </param>
            <param name="date">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.RangeOfUnit(U3DXT.iOS.Native.Foundation.NSCalendarUnit,U3DXT.iOS.Native.Foundation.NSCalendarUnit,System.DateTime)">
            <summary>
            Returns the range of absolute time values that a smaller calendar unit (such as a day) can take on in a larger calendar unit (such as a month) that includes a specified absolute time.
            <br></br>Equivalent to the native <c>rangeOfUnit:inUnit:forDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>smaller</em>
                <p>The smaller calendar unit.</p>
                <em>larger</em>
                <p>The larger calendar unit.</p>
                <em>date</em>
                <p>The absolute time for which the calculation is performed.</p>
                <b>Return Value</b>
                <p>The range of absolute time values <em>smaller</em> can take on in <em>larger</em> at the time specified by <em>date</em>. Returns <c>{NSNotFound, NSNotFound</c>} if <em>larger</em> is not logically bigger than <em>smaller</em> in the calendar, or the given combination of units does not make sense (or is a computation which is undefined).</p>
                <b>Discussion</b>
                <p>You can use this method to calculate, for example, the range the Day unit can take on in the Month in which <em>date</em> lies.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– rangeOfUnit:startDate:interval:forDate:</c>
                    </li>
                    <li>
                        <c>– ordinalityOfUnit:inUnit:forDate:</c>
                    </li>
                </ul>
            </remarks>
            <param name="smaller">
            </param>
            <param name="larger">
            </param>
            <param name="date">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.SetFirstWeekday(System.UInt32)">
            <summary>
            Sets the index of the first weekday for the receiver.
            <br></br>Equivalent to the native <c>setFirstWeekday:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>weekday</em>
                <p>The first weekday for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– firstWeekday</c>
                    </li>
                </ul>
            </remarks>
            <param name="weekday">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.SetLocale(U3DXT.iOS.Native.Foundation.NSLocale)">
            <summary>
            Sets the locale for the receiver.
            <br></br>Equivalent to the native <c>setLocale:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>locale</em>
                <p>The locale for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– locale</c>
                    </li>
                </ul>
            </remarks>
            <param name="locale">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.SetMinimumDaysInFirstWeek(System.UInt32)">
            <summary>
            Sets the minimum number of days in the first week of the receiver.
            <br></br>Equivalent to the native <c>setMinimumDaysInFirstWeek:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>mdw</em>
                <p>The minimum number of days in the first week of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minimumDaysInFirstWeek</c>
                    </li>
                </ul>
            </remarks>
            <param name="mdw">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.SetTimeZone(U3DXT.iOS.Native.Foundation.NSTimeZone)">
            <summary>
            Sets the time zone for the receiver.
            <br></br>Equivalent to the native <c>setTimeZone:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>tz</em>
                <p>The time zone for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– timeZone</c>
                    </li>
                </ul>
            </remarks>
            <param name="tz">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCalendar.TimeZone">
            <summary>
            Returns the time zone for the receiver.
            <br></br>Equivalent to the native <c>timeZone</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The time zone for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setTimeZone:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSCalendarUnit">
            <summary>
            Specify calendrical units such as day and month.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Calendar units may be used as a bit mask to specify a combination of units. Values in this <c>enum</c> are equal to the corresponding constants in the <c>CFCalendarUnit</c><c>enum</c>.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Year">
            <summary>
                <p>Specifies the year unit.</p>
                <p>The corresponding value is an <c>int</c>. Equal to <c>kCFCalendarUnitYear</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSYearCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Day">
            <summary>
                <p>Specifies the day unit. </p>
                <p>The corresponding value is an <c>int</c>. Equal to <c>kCFCalendarUnitDay</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDayCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Minute">
            <summary>
                <p>Specifies the minute unit.</p>
                <p>The corresponding value is an <c>int</c>. Equal to <c>kCFCalendarUnitMinute</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSMinuteCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.WeekOfYear">
            <summary>
                <p>Specifies the original week of the year calendar unit.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWeekOfYearCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Quarter">
            <summary>
                <p>Specifies the quarter of the calendar as an <c>kCFCalendarUnitSecond</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSQuarterCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.WeekdayOrdinal">
            <summary>
                <p>Specifies the ordinal weekday unit. </p>
                <p>The corresponding value is an <c>kCFCalendarUnitSecond</c>. Equal to <c>kCFCalendarUnitWeekdayOrdinal</c>. The weekday ordinal unit describes ordinal position within the month unit of the corresponding weekday unit. For example, in the Gregorian calendar a weekday ordinal unit of 2 for a weekday unit 3 indicates "the second Tuesday in the month".</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWeekdayOrdinalCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.TimeZone">
            <summary>
                <p>Specifies the time zone of the calendar as an <c>NSTimeZone</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTimeZoneCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.WeekOfMonth">
            <summary>
                <p>Specifies the original week of a month calendar unit.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWeekOfMonthCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Era">
            <summary>
                <p>Specifies the era unit.</p>
                <p>The corresponding value is an <c>int</c>. Equal to <c>kCFCalendarUnitEra</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSEraCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Second">
            <summary>
                <p>Specifies the second unit.</p>
                <p>The corresponding value is a <c>double</c>. Equal to <c>kCFCalendarUnitSecond</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSSecondCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Month">
            <summary>
                <p>Specifies the month unit. </p>
                <p>The corresponding value is an <c>int</c>. Equal to <c>kCFCalendarUnitMonth</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSMonthCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Week">
            <summary>
                <p>Specifies the week unit.</p>
                <p>The corresponding value is an <c>kCFCalendarUnitSecond</c>. Equal to <c>kCFCalendarUnitWeek</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWeekCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Weekday">
            <summary>
                <p>Specifies the weekday unit.</p>
                <p>The corresponding value is an <c>kCFCalendarUnitSecond</c>. Equal to <c>kCFCalendarUnitWeekday</c>. The weekday units are the numbers 1 through N (where for the Gregorian calendar N=7 and 1 is Sunday).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWeekdayCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Hour">
            <summary>
                <p>Specifies the hour unit.</p>
                <p>The corresponding value is an <c>int</c>. Equal to <c>kCFCalendarUnitHour</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSHourCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.Calendar">
            <summary>
                <p>Specifies the calendar of the calendar.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSCalendarCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCalendarUnit.YearForWeekOfYear">
            <summary>
                <p>Specifies the year when the calendar is being interpreted as a week-based calendar. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSYearForWeekOfYearCalendarUnit</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSComparisonPredicate">
            <summary>
                <c>NSComparisonPredicate</c> is a subclass of <c>NSPredicate</c> that you use to compare expressions.
            </summary>
            <remarks>
                <p>You use comparison predicates to compare the results of two expressions. You create a comparison predicate with an operator, a left expression, and a right expression. You represent the expressions using instances of the <c>NSExpression</c> class. When you evaluate the predicate, it returns as a <c>bool</c> value the result of invoking the operator with the results of evaluating the expressions. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_comparisonPredicateModifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_alloc_initWithLeftExpression_rightExpression_modifier_type_options_(System.String,System.String,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_leftExpression(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_options(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_predicateOperatorType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_rightExpression(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_predicateWithFormat_argumentArray_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_predicateWithBlock_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.UP_NSComparisonPredicate_predicateWithValue_(System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSComparisonPredicate" /> class.
            <br></br>Equivalent to the native <c>[[NSComparisonPredicate alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.ClassExists">
            <summary>
            Returns whether the native NSComparisonPredicate class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.Predicate(System.String,System.Object[])">
            <summary>
            Creates and returns a new predicate by substituting the values in a given array into a format string and parsing the result.
            <br></br>Equivalent to the native <c>predicateWithFormat:argumentArray:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicateFormat</em>
                <p>The format string for the new predicate.</p>
                <em>arguments</em>
                <p>The arguments to substitute into <em>predicateFormat</em>. Values are substituted into <em>predicateFormat</em> in the order they appear in the array.</p>
                <b>Return Value</b>
                <p>A new predicate by substituting the values in <em>arguments</em> into <em>predicateFormat</em>, and parsing the result.</p>
                <b>Discussion</b>
                <p>For details of the format of the format string and of limitations on variable substitution, see  Predicate Format String Syntax .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="predicateFormat">
            </param>
            <param name="arguments">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.Predicate(System.Func{System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Boolean})">
            <summary>
            Creates and returns a predicate that evaluates using a specified block object and bindings dictionary.
            <br></br>Equivalent to the native <c>predicateWithBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>block</em>
                <p>The block is applied to the object to be evaluated.</p>
                <p>The block takes two arguments:</p>
                <p>
                </p>	evaluatedObject<p>The object to be evaluated.</p>bindings<p>The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.</p><p>The block returns <c>true</c> if the <em>evaluatedObject</em> evaluates to true, otherwise <c>false</c>.</p><b>Return Value</b><p>A new predicate by that evaluates objects using <em>block</em>.</p><b>Special Considerations</b><p>In OS X v10.6, Core Data supports this method in the in-memory and atomic stores, but not in the SQLite-based store.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.Predicate(System.Boolean)">
            <summary>
            Creates and returns a predicate that always evaluates to a given value.
            <br></br>Equivalent to the native <c>predicateWithValue:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The value to which the new predicate should evaluate.</p>
                <b>Return Value</b>
                <p>A predicate that always evaluates to <em>value</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.ComparisonPredicateModifier">
            <summary>
            Returns the comparison predicate modifier for the receiver.
            <br></br>Equivalent to the native <c>comparisonPredicateModifier</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The comparison predicate modifier for the receiver.</p>
                <b>Discussion</b>
                <p>The default value is <c>NSDirectPredicateModifier</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.#ctor(U3DXT.iOS.Native.Foundation.NSExpression,U3DXT.iOS.Native.Foundation.NSExpression,U3DXT.iOS.Native.Foundation.NSComparisonPredicateModifier,U3DXT.iOS.Native.Foundation.NSPredicateOperatorType,U3DXT.iOS.Native.Foundation.NSComparisonPredicateOptions)">
            <summary>
            Creates an instance of the native NSComparisonPredicate and initializes the object. Initializes a predicate to a given type formed by combining given left and right expressions using a given modifier and options.
            <br></br>Equivalent to the native <c>[[NSComparisonPredicate alloc] initWithLeftExpression:rightExpression:modifier:type:options:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>lhs</em>
                <p>The left hand expression.</p>
                <em>rhs</em>
                <p>The right hand expression.</p>
                <em>modifier</em>
                <p>The modifier to apply.</p>
                <em>type</em>
                <p>The predicate operator type.</p>
                <em>options</em>
                <p>The options to apply (see  “NSComparisonPredicate Options” ). For no options, pass <c>0</c>.</p>
                <b>Return Value</b>
                <p>The receiver, initialized to a predicate of type <em>type</em> formed by combining the left and right expressions using the <em>modifier</em> and <em>options</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <param name="modifier">
            </param>
            <param name="type">
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.LeftExpression">
            <summary>
            Returns the left expression for the receiver.
            <br></br>Equivalent to the native <c>leftExpression</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The left expression for the receiver, or <c>null</c> if there is none.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.Options">
            <summary>
            Returns the options that are set for the receiver.
            <br></br>Equivalent to the native <c>options</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The options that are set for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.PredicateOperatorType">
            <summary>
            Returns the predicate type for the receiver.
            <br></br>Equivalent to the native <c>predicateOperatorType</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The predicate type for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSComparisonPredicate.RightExpression">
            <summary>
            Returns the right expression for the receiver.
            <br></br>Equivalent to the native <c>rightExpression</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The right expression for the receiver, or <c>null</c> if there is none.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSComparisonPredicateModifier">
            <summary>
            These constants describe the possible types of modifier for <c>NSComparisonPredicate</c>.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonPredicateModifier.Direct">
            <summary>
                <p>A predicate to compare directly the left and right hand sides.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDirectPredicateModifier</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonPredicateModifier.All">
            <summary>
                <p>A predicate to compare all entries in the destination of a to-many relationship.</p>
                <p>The left hand side must be a collection. The corresponding predicate compares each value in the left hand side with the right hand side, and returns <c>false</c> when it finds the first mismatch-or <c>true</c> if all match.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAllPredicateModifier</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonPredicateModifier.Any">
            <summary>
                <p>A predicate to match with any entry in the destination of a to-many relationship.</p>
                <p>The left hand side must be a collection. The corresponding predicate compares each value in the left hand side against the right hand side and returns <c>true</c> when it finds the first match—or <c>false</c> if no match is found</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAnyPredicateModifier</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSComparisonPredicateOptions">
            <summary>
            These constants describe the possible types of string comparison for <c>NSComparisonPredicate</c>. These options are supported for <c>LIKE</c> as well as all of the equality/comparison operators.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonPredicateOptions.DiacriticInsensitivePredicateOption">
            <summary>
                <p>A diacritic-insensitive predicate.</p>
                <p>You represent this option in a predicate format string using a <c>[d]</c> following a string operation (for example, <c>"naïve" like[d] "naive"</c>).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDiacriticInsensitivePredicateOption</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonPredicateOptions.CaseInsensitivePredicateOption">
            <summary>
                <p>A case-insensitive predicate.</p>
                <p>You represent this option in a predicate format string using a <c>[c]</c> following a string operation (for example, <c>"NeXT" like[c] "next"</c>).</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSCaseInsensitivePredicateOption</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonPredicateOptions.NormalizedPredicateOption">
            <summary>
                <p>Indicates that the strings to be compared have been preprocessed.</p>
                <p>This option supersedes <c>NSCaseInsensitivePredicateOption</c> and <c>NSDiacriticInsensitivePredicateOption</c>, and is intended as a performance optimization option.</p>
                <p>You represent this option in a predicate format string using a <c>[n]</c> following a string operation (for example, <c>"WXYZlan" matches[n] ".lan"</c>).</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNormalizedPredicateOption</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSComparisonResult">
            <summary>
            These constants are used to indicate how items in a request are ordered.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>These constants are used to indicate how items in a request are ordered, from the first one given in a method invocation or function call to the last (that is, left to right in code).</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonResult.Ascending">
            <summary>
                <p>The left operand is smaller than the right operand.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSOrderedAscending</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonResult.Same">
            <summary>
                <p>The two operands are equal.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSOrderedSame</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSComparisonResult.Descending">
            <summary>
                <p>The left operand is greater than the right operand.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSOrderedDescending</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSCompoundPredicate">
            <summary>
                <c>NSCompoundPredicate</c> is a subclass of <c>NSPredicate</c> used to represent logical “gate” operations (AND/OR/NOT) and comparison operations.
            </summary>
            <remarks>
                <p>Comparison operations are based on two expressions, as represented by instances of the <c>NSExpression</c> class. Expressions are created for constant values, key paths, and so on.</p>
                <p>In OS X v10.5 and later and in iOS, you can use <c>NSCompoundPredicate</c> to create an AND or OR compound predicate (but not a NOT compound predicate) using an array with 0, 1, or more elements:</p>
                <ul class="ul">
                    <li class="li">
                        <p>An AND predicate with no subpredicates evaluates to TRUE.</p>
                    </li>
                    <li class="li">
                        <p>An OR predicate with no subpredicates evaluates to FALSE.</p>
                    </li>
                    <li class="li">
                        <p>A compound predicate with one or more subpredicates evaluates to the truth of its subpredicates.</p>
                    </li>
                </ul>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_andPredicateWithSubpredicates_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_notPredicateWithSubpredicate_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_orPredicateWithSubpredicates_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_compoundPredicateType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_alloc_initWithType_subpredicates_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_subpredicates(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_predicateWithFormat_argumentArray_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_predicateWithBlock_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.UP_NSCompoundPredicate_predicateWithValue_(System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSCompoundPredicate" /> class.
            <br></br>Equivalent to the native <c>[[NSCompoundPredicate alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.ClassExists">
            <summary>
            Returns whether the native NSCompoundPredicate class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.AndPredicate(System.Object[])">
            <summary>
            Returns a new predicate formed by AND-ing the predicates in a given array.
            <br></br>Equivalent to the native <c>andPredicateWithSubpredicates:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>subpredicates</em>
                <p>An array of <c>NSPredicate</c> objects.</p>
                <b>Return Value</b>
                <p>A new predicate formed by AND-ing the predicates specified by <em>subpredicates</em>.</p>
                <b>Discussion</b>
                <p>An AND predicate with no subpredicates evaluates to TRUE.</p>
                <b>Special Considerations</b>
                <p>For applications linked on OS X v10.5 or later, the <em>subpredicates</em> array is copied. For applications linked on OS X v10.4, the <em>subpredicates</em> array is retained (for binary compatibility).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="subpredicates">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.NotPredicate(U3DXT.iOS.Native.Foundation.NSPredicate)">
            <summary>
            Returns a new predicate formed by NOT-ing a given predicate.
            <br></br>Equivalent to the native <c>notPredicateWithSubpredicate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicate</em>
                <p>A predicate.</p>
                <b>Return Value</b>
                <p>A new predicate formed by NOT-ing the predicate specified by <em>predicate</em>.</p>
                <b>Special Considerations</b>
                <p>For applications linked on OS X v10.5 or later, the <em>subpredicates</em> array is copied. For applications linked on OS X v10.4, the <em>subpredicates</em> array is retained (for binary compatibility).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="predicate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.OrPredicate(System.Object[])">
            <summary>
            Returns a new predicate formed by OR-ing the predicates in a given array.
            <br></br>Equivalent to the native <c>orPredicateWithSubpredicates:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>subpredicates</em>
                <p>An array of <c>NSPredicate</c> objects.</p>
                <b>Return Value</b>
                <p>A new predicate formed by OR-ing the predicates specified by <em>subpredicates</em>.</p>
                <b>Discussion</b>
                <p>An OR predicate with no subpredicates evaluates to FALSE.</p>
                <b>Special Considerations</b>
                <p>For applications linked on OS X v10.5 or later, the <em>subpredicates</em> array is copied. For applications linked on OS X v10.4, the <em>subpredicates</em> array is retained (for binary compatibility).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="subpredicates">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.Predicate(System.String,System.Object[])">
            <summary>
            Creates and returns a new predicate by substituting the values in a given array into a format string and parsing the result.
            <br></br>Equivalent to the native <c>predicateWithFormat:argumentArray:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicateFormat</em>
                <p>The format string for the new predicate.</p>
                <em>arguments</em>
                <p>The arguments to substitute into <em>predicateFormat</em>. Values are substituted into <em>predicateFormat</em> in the order they appear in the array.</p>
                <b>Return Value</b>
                <p>A new predicate by substituting the values in <em>arguments</em> into <em>predicateFormat</em>, and parsing the result.</p>
                <b>Discussion</b>
                <p>For details of the format of the format string and of limitations on variable substitution, see  Predicate Format String Syntax .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="predicateFormat">
            </param>
            <param name="arguments">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.Predicate(System.Func{System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Boolean})">
            <summary>
            Creates and returns a predicate that evaluates using a specified block object and bindings dictionary.
            <br></br>Equivalent to the native <c>predicateWithBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>block</em>
                <p>The block is applied to the object to be evaluated.</p>
                <p>The block takes two arguments:</p>
                <p>
                </p>	evaluatedObject<p>The object to be evaluated.</p>bindings<p>The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.</p><p>The block returns <c>true</c> if the <em>evaluatedObject</em> evaluates to true, otherwise <c>false</c>.</p><b>Return Value</b><p>A new predicate by that evaluates objects using <em>block</em>.</p><b>Special Considerations</b><p>In OS X v10.6, Core Data supports this method in the in-memory and atomic stores, but not in the SQLite-based store.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.Predicate(System.Boolean)">
            <summary>
            Creates and returns a predicate that always evaluates to a given value.
            <br></br>Equivalent to the native <c>predicateWithValue:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The value to which the new predicate should evaluate.</p>
                <b>Return Value</b>
                <p>A predicate that always evaluates to <em>value</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.CompoundPredicateType">
            <summary>
            Returns the predicate type for the receiver.
            <br></br>Equivalent to the native <c>compoundPredicateType</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The predicate type for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.#ctor(U3DXT.iOS.Native.Foundation.NSCompoundPredicateType,System.Object[])">
            <summary>
            Creates an instance of the native NSCompoundPredicate and initializes the object. Returns the receiver initialized to a given type using predicates from a given array.
            <br></br>Equivalent to the native <c>[[NSCompoundPredicate alloc] initWithType:subpredicates:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>type</em>
                <p>The type of the new predicate.</p>
                <em>subpredicates</em>
                <p>An array of <c>NSPredicate</c> objects.</p>
                <b>Return Value</b>
                <p>The receiver initialized with its type set to <!--a  -->type<!--/a--> and subpredicates array to <em>subpredicates</em>.</p>
                <b>Special Considerations</b>
                <p>For applications linked on OS X v10.5 or later, the <em>subpredicates</em> array is copied. For applications linked on OS X v10.4, the <em>subpredicates</em> array is retained (for binary compatibility).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="type">
            </param>
            <param name="subpredicates">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSCompoundPredicate.Subpredicates">
            <summary>
            Returns the array of the receiver’s subpredicates.
            <br></br>Equivalent to the native <c>subpredicates</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The array of the receiver’s subpredicates. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSCompoundPredicateType">
            <summary>
            These constants describe the possible types of <c>NSCompoundPredicate</c>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCompoundPredicateType.Not">
            <summary>
                <p>A logical NOT predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNotPredicateType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCompoundPredicateType.And">
            <summary>
                <p>A logical AND predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAndPredicateType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSCompoundPredicateType.Or">
            <summary>
                <p>A logical OR predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSOrPredicateType</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSData">
            <summary>
                <c>NSData</c> and its mutable subclass <c>NSMutableData</c> provide data objects, object-oriented wrappers for byte buffers. Data objects let simple allocated buffers (that is, data with no embedded pointers) take on the behavior of Foundation objects.
            </summary>
            <remarks>
                <p>
                    <c>NSData</c> creates static data objects, and <c>NSMutableData</c> creates dynamic data objects. <c>NSData</c> and <c>NSMutableData</c> are typically used for data storage and are also useful in Distributed Objects applications, where data contained in data objects can be copied or moved between applications.</p>
                <p>The size of the data is subject to a theoretical limit of about 8 ExaBytes (in practice, the limit should not be a factor).</p>
                <p>
                    <c>NSData</c> is “toll-free bridged” with its Core Foundation counterpart, <c>CFDataRef</c>. See  “Toll-Free Bridging”  for more information on toll-free bridging.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_fromByteArray(System.Byte[],System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_toByteArray(System.String,System.Byte[],System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.FromByteArray(System.Byte[])">
            <summary>
            Creates and initializes a native NSData from a byte array.
            </summary>
            <returns>The newly created native NSData.</returns>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.ToByteArray">
            <summary>
            Creates a byte array with the contents of the native NSData.
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_description(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfFile_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfFile_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfURL_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_isEqualToData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_length(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_rangeOfData_options_range_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_subdataWithRange_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToFile_atomically_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToFile_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToURL_atomically_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToURL_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSData" /> class.
            <br></br>Equivalent to the native <c>[[NSData alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSData.ClassExists">
            <summary>
            Returns whether the native NSData class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.Description">
            <summary>
            Returns an <c>String</c> object that contains a hexadecimal representation of the receiver’s contents.
            <br></br>Equivalent to the native <c>description</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>String</c> object that contains a hexadecimal representation of the receiver’s contents in <c>NSData</c> property list format.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– bytes</c>
                    </li>
                    <li>
                        <c>– getBytes:</c>
                    </li>
                    <li>
                        <c>– getBytes:length:</c>
                    </li>
                    <li>
                        <c>– getBytes:range:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized by reading into it the data from the file specified by a given path.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfFile:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The absolute path of the file from which to read data.</p>
                <b>Return Value</b>
                <p>A data object initialized by reading into it the data from the file specified by <em>path</em>. The returned object might be different than the original receiver.</p>
                <b>Discussion</b>
                <p>This method is equivalent to <c>initWithContentsOfFile:options:error:</c> with no options.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfFile:</c>
                    </li>
                    <li>
                        <c>– initWithContentsOfMappedFile:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(System.String,U3DXT.iOS.Native.Foundation.NSDataReadingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized by reading into it the data from the file specified by a given path.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfFile:options:error:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The absolute path of the file from which to read data.</p>
                <em>mask</em>
                <p>A mask that specifies options for reading the data. Constant components are described in <c>“NSDataReadingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If an error occurs, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>A data object initialized by reading into it the data from the file specified by <em>path</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfFile:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="readOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Initializes a newly allocated data object initialized with the data from the location specified by <em>aURL</em>.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The URL from which to read data</p>
                <b>Return Value</b>
                <p>An <c>NSData</c> object initialized with the data from the location specified by <em>aURL</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSDataReadingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized with the data from the location specified by a given URL.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfURL:options:error:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The URL from which to read data.</p>
                <em>mask</em>
                <p>A mask that specifies options for reading the data. Constant components are described in <c>“NSDataReadingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If there is an error reading in the data, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>A data object initialized with the data from the location specified by <em>aURL</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfURL:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="readOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized with the contents of another data object.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithData:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>A data object.</p>
                <b>Return Value</b>
                <p>A data object initialized with the contents <em>data</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithData:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.IsEqualToData(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Compares the receiving data object to <em>otherData</em>.
            <br></br>Equivalent to the native <c>isEqualToData:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>otherData</em>
                <p>The data object with which to compare the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the contents of <em>otherData</em> are equal to the contents of the receiver, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>Two data objects are equal if they hold the same number of bytes, and if the bytes at the same position in the objects are the same.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="other">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.Length">
            <summary>
            Returns the number of bytes contained in the receiver.
            <br></br>Equivalent to the native <c>length</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of bytes contained in the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.RangeOfData(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.Foundation.NSDataSearchOptions,U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Finds and returns the range of the first occurrence of the given data, within the given range, subject to given options.
            <br></br>Equivalent to the native <c>rangeOfData:options:range:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>dataToFind</em>
                <p>The data for which to search. This value must not be <c>null</c>.</p>
                <p>
                    <strong>Important:</strong> Raises an <c>NSInvalidArgumentException</c> if <em>dataToFind</em> is <c>null</c>.</p>
                <p>
                </p>
                <em>mask</em>
                <p>A mask specifying search options. The  “NSDataSearchOptions”  options may be specified singly or by combining them with the C bitwise <c>OR</c> operator.</p>
                <em>searchRange</em>
                <p>The range within the receiver in which to search for <em>dataToFind</em>. If this range is not within the receiver’s range of bytes, an <c>NSRangeException</c> raised.</p>
                <b>Return Value</b>
                <p>An <c>NSRange</c> structure giving the location and length of <em>dataToFind</em> within <em>searchRange</em>, modulo the options in <em>mask</em>. The range returned is relative to the start of the searched data, not the passed-in search range. Returns <c>{NSNotFound, 0}</c> if <em>dataToFind</em> is not found or is empty <c>("")</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="dataToFind">
            </param>
            <param name="mask">
            </param>
            <param name="searchRange">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.Subdata(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Returns a data object containing a copy of the receiver’s bytes that fall within the limits specified by a given range.
            <br></br>Equivalent to the native <c>subdataWithRange:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The range in the receiver from which to copy bytes. The range must not exceed the bounds of the receiver.</p>
                <b>Return Value</b>
                <p>A data object containing a copy of the receiver’s bytes that fall within the limits specified by <em>range</em>.</p>
                <b>Discussion</b>
                <p>If <em>range</em> isn’t within the receiver’s range of bytes, an <c>NSRangeException</c> is raised.</p>
                <p>A sample using this method can be found in  “Working With Binary Data” .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToFile(System.String,System.Boolean)">
            <summary>
            Writes the bytes in the receiver to the file specified by a given path.
            <br></br>Equivalent to the native <c>writeToFile:atomically:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The location to which to write the receiver's bytes. If <em>path</em> contains a tilde (~) character, you must expand it with <c>stringByExpandingTildeInPath</c> before invoking this method. </p>
                <em>atomically</em>
                <p>If <c>true</c>, the data is written to a backup file, and then—assuming no errors occur—the backup file is renamed to the name specified by <em>path</em>; otherwise, the data is written directly to <em>path</em>. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToURL:atomically:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="useAuxiliaryFile">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToFile(System.String,U3DXT.iOS.Native.Foundation.NSDataWritingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Writes the bytes in the receiver to the file specified by a given path.
            <br></br>Equivalent to the native <c>writeToFile:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The location to which to write the receiver's bytes.</p>
                <em>mask</em>
                <p>A mask that specifies options for writing the data. Constant components are described in <c>“NSDataWritingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If there is an error writing out the data, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToURL:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="writeOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToURL(U3DXT.iOS.Native.Foundation.NSURL,System.Boolean)">
            <summary>
            Writes the bytes in the receiver to the location specified by <em>aURL</em>.
            <br></br>Equivalent to the native <c>writeToURL:atomically:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The location to which to write the receiver's bytes. Only <c>file://</c> URLs are supported.</p>
                <em>atomically</em>
                <p>If <c>true</c>, the data is written to a backup location, and then—assuming no errors occur—the backup location is renamed to the name specified by <em>aURL</em>; otherwise, the data is written directly to <em>aURL</em>. <em>atomically</em> is ignored if <em>aURL</em> is not of a type the supports atomic writes.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>Since at present only <c>file://</c> URLs are supported, there is no difference between this method and  writeToFile:atomically: , except for the type of the first argument.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToFile:atomically:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="atomically">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSDataWritingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Writes the bytes in the receiver to the location specified by a given URL.
            <br></br>Equivalent to the native <c>writeToURL:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The location to which to write the receiver's bytes.</p>
                <em>mask</em>
                <p>A mask that specifies options for writing the data. Constant components are described in <c>“NSDataWritingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If there is an error writing out the data, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>Since at present only <c>file://</c> URLs are supported, there is no difference between this method and <c>writeToFile:options:error:</c>, except for the type of the first argument.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToFile:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="writeOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDataReadingOptions">
            <summary>
            Options for methods used to read <c>NSData</c> objects.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataReadingOptions.MappedIfSafe">
            <summary>
                <p>A hint indicating the file should be mapped into virtual memory, if possible and safe.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataReadingMappedIfSafe</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataReadingOptions.Uncached">
            <summary>
                <p>A hint indicating the file should not be stored in the file-system caches.</p>
                <p>For data being read once and discarded, this option can improve performance.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataReadingUncached</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataReadingOptions.MappedAlways">
            <summary>
                <p>Hint to map the file in if possible.</p>
                <p>This takes precedence over <c>NSDataReadingMappedIfSafe</c> if both are given.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataReadingMappedAlways</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDataSearchOptions">
            <summary>
            Options for method used to search <c>NSData</c> objects. These options are used with the <c>rangeOfData:options:range:</c> method.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataSearchOptions.Backwards">
            <summary>
                <p>Search from the end of <c>NSData</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataSearchBackwards</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataSearchOptions.Anchored">
            <summary>
                <p>Search is limited to start (or end, if <c>NSDataSearchBackwards</c>) of <c>NSData</c> object.</p>
                <p>This option performs searching only on bytes at the beginning or end of the range. No match at the beginning or end means nothing is found, even if a matching sequence of bytes occurs elsewhere in the data object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataSearchAnchored</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDataWritingOptions">
            <summary>
            Options for methods used to write <c>NSData</c> objects.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionMask">
            <summary>
                <p>A mask to use when determining the file protection options assigned to the data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionMask</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.WithoutOverwriting">
            <summary>
                <p>Hint to return prevent overwriting an existing file. Cannot be combined with <c>NSDataWritingAtomic</c>.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingWithoutOverwriting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionCompleteUnlessOpen">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file cannot be opened for reading or writing when the device is locked, although new files can be created with this class. If one of these files is open when the device is locked, reading and writing are still allowed. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionCompleteUnlessOpen</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionComplete">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file is stored in an encrypted format and may be read from or written to only while the device is unlocked. At all other times, attempts to read and write the file result in failure. </p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionComplete</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.Atomic">
            <summary>
                <p>A hint to write data to an auxiliary file first and then exchange the files. This option is equivalent to using a write method taking the parameter <c>atomically:YES</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingAtomic</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionNone">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file is not stored in an encrypted format and may be accessed at boot time and while the device is unlocked. </p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionCompleteUntilFirstUserAuthentication">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file can be read or written to while the device is locked, but while it is booting up, they have protection equivalent to <c>NSDataWritingFileProtectionComplete</c>. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDateComponents">
            <summary>
                <c>NSDateComponents</c> encapsulates the components of a date in an extendable, object-oriented manner. It is used to specify a date by providing the temporal components that make up a date and time: hour, minutes, seconds, day, month, year, and so on. It can also be used to specify a duration of time, for example, 5 hours and 16 minutes. An <c>NSDateComponents</c> object is not required to define all the component fields. When a new instance of <c>NSDateComponents</c> is created the date components are set to <c>NSUndefinedDateComponent</c>.
            </summary>
            <remarks>
                <p>
                    <strong>Important:</strong>
            An <c>NSDateComponents</c> object is meaningless in itself; you need to know what calendar it is interpreted against, and you need to know whether the values are absolute values of the units, or quantities of the units.</p>
                <p>
                </p>
                <p>An instance of <c>NSDateComponents</c> is not responsible for answering questions about a date beyond the information with which it was initialized. For example, if you initialize one with May 6, 2004, its weekday is <c>NSUndefinedDateComponent</c>, not Thursday. To get the correct day of the week, you must create a suitable instance of <c>NSCalendar</c>, create an <c>DateTime</c> object using <c>dateFromComponents:</c> and then use <c>components:fromDate:</c> to retrieve the weekday—as illustrated in the following example.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSDateComponents *comps = [[NSDateComponents alloc] init];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setDay:6];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setMonth:5];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps setYear:2004];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSCalendar *gregorian = [[NSCalendar alloc]  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    initWithCalendarIdentifier:NSGregorianCalendar];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDate *date = [gregorian dateFromComponents:comps];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[comps release];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSDateComponents *weekdayComponents =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [gregorian components:NSWeekdayCalendarUnit fromDate:date];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>int weekday = [weekdayComponents weekday];  </pre>
                        </td>
                    </tr>
                </table>
                <p>For more details, see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_calendar(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_date(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_day(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_era(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_hour(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_isLeapMonth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_minute(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_month(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_quarter(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_second(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setCalendar_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setDay_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setEra_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setHour_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setLeapMonth_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setMinute_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setMonth_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setQuarter_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setSecond_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setTimeZone_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setWeek_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setWeekday_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setWeekdayOrdinal_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setWeekOfMonth_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setWeekOfYear_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setYear_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_setYearForWeekOfYear_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_timeZone(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_week(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_weekday(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_weekdayOrdinal(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_weekOfMonth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_weekOfYear(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_year(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.UP_NSDateComponents_yearForWeekOfYear(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSDateComponents" /> class.
            <br></br>Equivalent to the native <c>[[NSDateComponents alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSDateComponents.ClassExists">
            <summary>
            Returns whether the native NSDateComponents class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Calendar">
            <summary>
            Returns the calendar of the receiver.
            <br></br>Equivalent to the native <c>calendar</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The calendar.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setCalendar:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Date">
            <summary>
            Returns the date of the receiver.
            <br></br>Equivalent to the native <c>date</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The date.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Day">
            <summary>
            Returns the number of day units for the receiver.
            <br></br>Equivalent to the native <c>day</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of day units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDay:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Era">
            <summary>
            Returns the number of era units for the receiver.
            <br></br>Equivalent to the native <c>era</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of era units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setEra:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Hour">
            <summary>
            Returns the number of hour units for the receiver.
            <br></br>Equivalent to the native <c>hour</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of hour units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setHour:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.IsLeapMonth">
            <summary>
            Returns whether the month is a leap month.
            <br></br>Equivalent to the native <c>isLeapMonth</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the month is a leap month, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setLeapMonth:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Minute">
            <summary>
            Returns the number of minute units for the receiver.
            <br></br>Equivalent to the native <c>minute</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of minute units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinute:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Month">
            <summary>
            Returns the number of month units for the receiver.
            <br></br>Equivalent to the native <c>month</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of month units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMonth:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Quarter">
            <summary>
            Returns the number of quarters in the calendar.
            <br></br>Equivalent to the native <c>quarter</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of quarters units for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Second">
            <summary>
            Returns the number of second units for the receiver.
            <br></br>Equivalent to the native <c>second</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of second units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setSecond:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetCalendar(U3DXT.iOS.Native.Foundation.NSCalendar)">
            <summary>
            Sets the receiver’s calendar.
            <br></br>Equivalent to the native <c>setCalendar:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>cal</em>
                <p>The calendar.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– calendar</c>
                    </li>
                </ul>
            </remarks>
            <param name="cal">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetDay(System.Int32)">
            <summary>
            Sets the number of day units for the receiver.
            <br></br>Equivalent to the native <c>setDay:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of day units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– day</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetEra(System.Int32)">
            <summary>
            Sets the number of era units for the receiver.
            <br></br>Equivalent to the native <c>setEra:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of era units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– era</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetHour(System.Int32)">
            <summary>
            Sets the number of hour units for the receiver.
            <br></br>Equivalent to the native <c>setHour:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of hour units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– hour</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetLeapMonth(System.Boolean)">
            <summary>
            Sets the month as a leap month.
            <br></br>Equivalent to the native <c>setLeapMonth:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>lm</em>
                <p>
                    <c>true</c> if the month is a leap month, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isLeapMonth</c>
                    </li>
                </ul>
            </remarks>
            <param name="lm">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetMinute(System.Int32)">
            <summary>
            Sets the number of minute units for the receiver.
            <br></br>Equivalent to the native <c>setMinute:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of minute units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minute</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetMonth(System.Int32)">
            <summary>
            Sets the number of month units for the receiver.
            <br></br>Equivalent to the native <c>setMonth:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of month units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– month</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetQuarter(System.Int32)">
            <summary>
            Sets the number of quarters in the calendar.
            <br></br>Equivalent to the native <c>setQuarter:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of quarters units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetSecond(System.Int32)">
            <summary>
            Sets the number of second units for the receiver.
            <br></br>Equivalent to the native <c>setSecond:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of second units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– second</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetTimeZone(U3DXT.iOS.Native.Foundation.NSTimeZone)">
            <summary>
            Sets the receiver’s time zone.
            <br></br>Equivalent to the native <c>setTimeZone:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>tz</em>
                <p>The time zone.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– timeZone</c>
                    </li>
                </ul>
            </remarks>
            <param name="tz">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetWeek(System.Int32)">
            <summary>
            Sets the number of week units for the receiver.
            <br></br>Equivalent to the native <c>setWeek:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of week units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– week</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetWeekday(System.Int32)">
            <summary>
            Sets the number of weekday units for the receiver.
            <br></br>Equivalent to the native <c>setWeekday:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of weekday units for the receiver.</p>
                <b>Discussion</b>
                <p>Weekday units are the numbers 1 through <em>n</em>, where <em>n</em> is the number of days in the week. For example, in the Gregorian calendar, <em>n</em> is 7 and Sunday is represented by 1.</p>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– weekday</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetWeekdayOrdinal(System.Int32)">
            <summary>
            Sets the ordinal number of weekday units for the receiver.
            <br></br>Equivalent to the native <c>setWeekdayOrdinal:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The ordinal number of weekday units for the receiver.</p>
                <b>Discussion</b>
                <p>Weekday ordinal units represent the position of the weekday within the next larger calendar unit, such as the month. For example, <em>2</em> is the weekday ordinal unit for the <em>second</em> Friday of the month.</p>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– weekdayOrdinal</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetWeekOfMonth(System.Int32)">
            <summary>
            Sets the week of the month.
            <br></br>Equivalent to the native <c>setWeekOfMonth:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>week</em>
                <p>The week number of the month.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– weekOfMonth</c>
                    </li>
                </ul>
            </remarks>
            <param name="w">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetWeekOfYear(System.Int32)">
            <summary>
            Sets the week of the year.
            <br></br>Equivalent to the native <c>setWeekOfYear:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>week</em>
                <p>The week number of the year.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– weekOfYear</c>
                    </li>
                </ul>
            </remarks>
            <param name="w">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetYear(System.Int32)">
            <summary>
            Sets the number of year units for the receiver.
            <br></br>Equivalent to the native <c>setYear:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>v</em>
                <p>The number of year units for the receiver.</p>
                <b>Discussion</b>
                <p>This value will be interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– year</c>
                    </li>
                </ul>
            </remarks>
            <param name="v">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.SetYearForWeekOfYear(System.Int32)">
            <summary>
            Sets the year for the week of the year.
            <br></br>Equivalent to the native <c>setYearForWeekOfYear:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>year</em>
                <p>The year when the calendar is being interpreted as a week-based calendar.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– yearForWeekOfYear</c>
                    </li>
                    <li>
                        <c>firstWeekday</c> (NSCalendar Class Reference)</li>
                    <li>
                        <c>minimumDaysInFirstWeek</c> (NSCalendar Class Reference)</li>
                </ul>
            </remarks>
            <param name="y">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.TimeZone">
            <summary>
            Returns the receiver’s time zone.
            <br></br>Equivalent to the native <c>timeZone</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The time zone.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setTimeZone:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Week">
            <summary>
            Returns the number of week units for the receiver.
            <br></br>Equivalent to the native <c>week</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of week units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setWeek:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Weekday">
            <summary>
            Returns the number of weekday units for the receiver.
            <br></br>Equivalent to the native <c>weekday</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of weekday units for the receiver.</p>
                <b>Discussion</b>
                <p>Weekday units are the numbers 1 through <em>n</em>, where <em>n</em> is the number of days in the week. For example, in the Gregorian calendar, <em>n</em> is 7 and Sunday is represented by 1.</p>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setWeekday:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.WeekdayOrdinal">
            <summary>
            Returns the ordinal number of weekday units for the receiver.
            <br></br>Equivalent to the native <c>weekdayOrdinal</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The ordinal number of weekday units for the receiver.</p>
                <b>Discussion</b>
                <p>Weekday ordinal units represent the position of the weekday within the next larger calendar unit, such as the month. For example, <em>2</em> is the weekday ordinal unit for the <em>second</em> Friday of the month.</p>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setWeekdayOrdinal:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.WeekOfMonth">
            <summary>
            Returns the week of the month.
            <br></br>Equivalent to the native <c>weekOfMonth</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The week number of the month.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setWeekOfMonth:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.WeekOfYear">
            <summary>
            Returns the week of the year.
            <br></br>Equivalent to the native <c>weekOfYear</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The week number of the year.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.Year">
            <summary>
            Returns the number of year units for the receiver.
            <br></br>Equivalent to the native <c>year</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of year units for the receiver.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setYear:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSDateComponents.YearForWeekOfYear">
            <summary>
            Returns the year for the week of the year.
            <br></br>Equivalent to the native <c>yearForWeekOfYear</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The year number for the week of the year.</p>
                <b>Discussion</b>
                <p>This value is interpreted in the context of the calendar with which it is used—see  “Calendars, Date Components, and Calendar Units”  in <em>Date and Time Programming Guide</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSEnumerationOptions">
            <summary>
            Options for Block enumeration operations.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSEnumerationOptions.Concurrent">
            <summary>
                <p>Specifies that the Block enumeration should be concurrent.</p>
                <p>The order of invocation is nondeterministic and undefined; this flag is a hint and may be ignored by the implementation under some circumstances; the code of the Block must be safe against concurrent invocation.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSEnumerationConcurrent</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSEnumerationOptions.Reverse">
            <summary>
                <p>Specifies that the enumeration should be performed in reverse.</p>
                <p>This option is available for <c>object[]</c> and <c>NSIndexSet</c> classes; its behavior is undefined for <c>Dictionary</c> and <c>object[]</c> classes, or when combined with the <c>NSEnumerationConcurrent</c> flag.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSEnumerationReverse</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSEnumerator">
            <summary>
                <c>NSEnumerator</c> is an abstract class, instances of whose subclasses enumerate collections of other objects, such as arrays and dictionaries.
            </summary>
            <remarks>
                <p>All creation methods are defined in the collection classes—such as <c>object[]</c>, <c>object[]</c>, and <c>Dictionary</c>—which provide special <c>NSEnumerator</c> objects with which to enumerate their contents. For example, <c>object[]</c> has two methods that return an <c>NSEnumerator</c> object: <c>objectEnumerator</c> and <c>reverseObjectEnumerator</c>. <c>Dictionary</c> also has two methods that return an <c>NSEnumerator</c> object: <c>keyEnumerator</c> and <c>objectEnumerator</c>. These methods let you enumerate the contents of a dictionary by key or by value, respectively.</p>
                <p>You send <c>nextObject</c> repeatedly to a newly created <c>NSEnumerator</c> object to have it return the next object in the original collection. When the collection is exhausted, <c>null</c> is returned. You cannot “reset” an enumerator after it has exhausted its collection. To enumerate a collection again, you need a new enumerator.</p>
                <p>The enumerator subclasses used by <c>object[]</c>, <c>Dictionary</c>, and <c>object[]</c> retain the collection during enumeration. When the enumeration is exhausted, the collection is released.</p>
                <p>
                    <strong>Note:</strong> It is not safe to modify a mutable collection while enumerating through it. Some enumerators may currently allow enumeration of a collection that is modified, but this behavior is not guaranteed to be supported in the future.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.UP_NSEnumerator_allObjects(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.UP_NSEnumerator_nextObject(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSEnumerator" /> class.
            <br></br>Equivalent to the native <c>[[NSEnumerator alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSEnumerator.ClassExists">
            <summary>
            Returns whether the native NSEnumerator class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.AllObjects">
            <summary>
            Returns an array of objects the receiver has yet to enumerate.
            <br></br>Equivalent to the native <c>allObjects</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of objects the receiver has yet to enumerate. </p>
                <b>Discussion</b>
                <p>Put another way, the array returned by this method does not contain objects that have already been enumerated with previous <c>nextObject</c> messages.</p>
                <p>Invoking this method exhausts the enumerator’s collection so that subsequent invocations of <c>nextObject</c> return <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSEnumerator.NextObject">
            <summary>
            Returns the next object from the collection being enumerated.
            <br></br>Equivalent to the native <c>nextObject</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The next object from the collection being enumerated, or <c>null</c> when all objects have been enumerated.</p>
                <b>Discussion</b>
                <p>The following code illustrates how this method works using an array:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *anArray = // ... ;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSEnumerator *enumerator = [anArray objectEnumerator];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>id object;  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>while ((object = [enumerator nextObject])) {  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    // do something with object...  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSError">
            <summary>
            An <c>NSError</c> object encapsulates richer and more extensible error information than is possible using only an error code or error string. The core attributes of an <c>NSError</c> object are an error domain (represented by a string), a domain-specific error code and a user info dictionary containing application specific information.
            </summary>
            <remarks>
                <p>Several well-known domains are defined corresponding to Mach, POSIX, and <c><!--a target="_self" -->OSStatus<!--/a--></c> errors. Foundation error codes are found in the Cocoa error domain and documented in the <em>Foundation Constants Reference</em>. In addition, <c>NSError</c> allows you to attach an arbitrary user info dictionary to an error object, and provides the means to return a human-readable description for the error.</p>
                <p>
                    <c>NSError</c> is not an abstract class, and can be used directly. Applications may choose to create subclasses of <c>NSError</c> to provide better localized error strings by overriding <c>localizedDescription</c>.</p>
                <p>In general, a method should signal an error condition by—for example—returning <c>false</c> or <c>null</c> rather than by the simple presence of an error object. The method can then optionally return an <c>NSError</c> object by reference, in order to further describe the error.</p>
                <p>NSError is toll-free bridged with its Core Foundation counterpart, <c>CFErrorRef</c>. See  “Toll-Free Bridging”  for more information.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_code(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_domain(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_helpAnchor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_localizedDescription(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSError" /> class.
            <br></br>Equivalent to the native <c>[[NSError alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSError.ClassExists">
            <summary>
            Returns whether the native NSError class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.Code">
            <summary>
            Returns the receiver’s error code.
            <br></br>Equivalent to the native <c>code</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s error code.</p>
                <b>Discussion</b>
                <p>Note that errors are domain specific.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– localizedDescription</c>
                    </li>
                    <li>
                        <c>– domain</c>
                    </li>
                    <li>
                        <c>– userInfo</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.Domain">
            <summary>
            Returns the receiver’s error domain.
            <br></br>Equivalent to the native <c>domain</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing the receiver’s error domain.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– code</c>
                    </li>
                    <li>
                        <c>– localizedDescription</c>
                    </li>
                    <li>
                        <c>– userInfo</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.HelpAnchor">
            <summary>
            A string to display in response to an alert panel help anchor button being pressed.
            <br></br>Equivalent to the native <c>helpAnchor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An NSString that the alert panel will include a help anchor button with that value.</p>
                <b>Discussion</b>
                <p>If this method returns a non-<c>null</c> value for an error being presented by <c><!--a target="_self" -->alertWithError:<!--/a--></c>, the alert panel will include a help anchor button that can display this string.</p>
                <p>The best way to get a value to return for this method is to specify it as the value of <c>NSHelpAnchorErrorKey</c> in the <c>NSError</c> object’s <c>userInfo</c> dictionary; or the method can be overridden.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.LocalizedDescription">
            <summary>
            Returns a string containing the localized description of the error.
            <br></br>Equivalent to the native <c>localizedDescription</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing the localized description of the error.</p>
                <p>By default this method returns the object in the user info dictionary for the key <c>NSLocalizedDescriptionKey</c>. If the user info dictionary doesn’t contain a value for <c>NSLocalizedDescriptionKey</c>, a default string is constructed from the domain and code.</p>
                <b>Discussion</b>
                <p>This method can be overridden by subclasses to present customized error strings.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– code</c>
                    </li>
                    <li>
                        <c>– domain</c>
                    </li>
                    <li>
                        <c>– userInfo</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSExpression">
            <summary>
                <c>NSExpression</c> is used to represent expressions in a predicate.
            </summary>
            <remarks>
                <p>Comparison operations in an <c>NSPredicate</c> are based on two expressions, as represented by instances of the <c>NSExpression</c> class. Expressions are created for constant values, key paths, and so on.</p>
                <p>Generally, anywhere in the <c>NSExpression</c> class hierarchy where there is composite API and subtypes that may only reasonably respond to a subset of that API, invoking a method that does not make sense for that subtype will cause an exception to be thrown.</p>
                <b>Expression Types</b>
                <p>In OS X v10.5, <c>NSExpression</c> introduces several new expression types: <c>NSSubqueryExpressionType</c>, <c>NSAggregateExpressionType</c>, <c>NSUnionSetExpressionType</c>, <c>NSIntersectSetExpressionType</c>, and <c>NSMinusSetExpressionType</c>.</p>
                <b>Aggregate Expressions</b>
                <p>The aggregate expression allows you to create predicates containing expressions that evaluate to collections that contain further expressions. The collection may be an <c>object[]</c>, <c>object[]</c>, or <c>Dictionary</c> object.</p>
                <p>For example, consider the BETWEEN operator (<c>NSBetweenPredicateOperatorType</c>); its right hand side is a collection containing two elements. Using just the OS X v10.4 API, these elements must be constants, as there is no way to populate them using variable expressions. On OS X v10.4, it is not possible to create a predicate template to the effect of <c>date between {$YESTERDAY, $TOMORROW}</c>; instead you must create a new predicate each time.</p>
                <p>Aggregate expressions are not supported by Core Data.</p>
                <b>Subquery Expressions</b>
                <p>The <c>NSSubqueryExpressionType</c> creates a sub-expression, evaluation of which returns a subset of a collection of objects. It allows you to create sophisticated queries across relationships, such as a search for multiple correlated values on the destination object of a relationship.</p>
                <b>Set Expressions</b>
                <p>The set expressions (<c>NSUnionSetExpressionType</c>, <c>NSIntersectSetExpressionType</c>, and <c>NSMinusSetExpressionType</c>) combine results in a manner similar to the <c>object[]</c> methods.</p>
                <p>Both sides of these expressions must evaluate to a collection; the left-hand side must evaluate to an <c>object[]</c> object, the right-hand side can be any other collection type.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>(expression UNION expression)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>(expression INTERSECT expression)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>(expression MINUS expression)  </pre>
                        </td>
                    </tr>
                </table>
                <p>Set expressions are not supported by Core Data. </p>
                <b>Function Expressions</b>
                <p>On OS X v10.4, <c>NSExpression</c> only supports a predefined set of functions: <c>sum</c>, <c>count</c>, <c>min</c>, <c>max</c>, and <c>average</c>. These predefined functions were accessed in the predicate syntax using custom keywords (for example, <c>MAX(1, 5, 10)</c>).</p>
                <p>On OS X v10.5 and later, function expressions also support arbitrary method invocations. To use this extended functionality, you can now use the syntax <c>FUNCTION(receiver, selectorName, arguments, ...),</c> for example:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>FUNCTION("/Developer/Tools/otest", "lastPathComponent") =&gt; "otest"  </pre>
                        </td>
                    </tr>
                </table>
                <p>All methods must take 0 or more <c>id</c> arguments and return an <c>id</c> value, although you can use the <c>CAST</c> expression to convert datatypes with lossy string representations (for example, <c>CAST(####, "NSDate")</c>). The <c>CAST</c> expression is extended in OS X v10.5 to provide support for casting to classes for use in creating receivers for function expressions.</p>
                <p>Note that although Core Data supports evaluation of the predefined functions, it does not support the evaluation of custom predicate functions in the persistent stores (during a fetch).</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForAggregate_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForBlock_arguments_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForConstantValue_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForEvaluatedObject">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForFunction_arguments_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForIntersectSet_with_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForKeyPath_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForMinusSet_with_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForSubquery_usingIteratorVariable_predicate_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForUnionSet_with_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionForVariable_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionWithFormat_argumentArray_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_arguments(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_collection(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_constantValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_expressionValueWithObject_context_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_function(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_alloc_initWithExpressionType_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_keyPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_leftExpression(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_operand(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_predicate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_rightExpression(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.UP_NSExpression_variable(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSExpression" /> class.
            <br></br>Equivalent to the native <c>[[NSExpression alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSExpression.ClassExists">
            <summary>
            Returns whether the native NSExpression class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Expression(System.Object[])">
            <summary>
            Returns a new aggregate expression for a given collection.
            <br></br>Equivalent to the native <c>expressionForAggregate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>collection</em>
                <p>A collection object (an instance of <c>object[]</c>, <c>object[]</c>, or <c>Dictionary</c>) that contains further expressions.</p>
                <b>Return Value</b>
                <p>A new expression that contains the expressions in <em>collection</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="subexpressions">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Expression(System.Func{System.Object,System.Object[],System.Collections.Generic.Dictionary{System.Object,System.Object},System.Object},System.Object[])">
            <summary>
            Creates an NSExpression object that will use the Block for evaluating objects.
            <br></br>Equivalent to the native <c>expressionForBlock:arguments:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>block</em>
                <p>The Block is applied to the object to be evaluated.</p>
                <p>The Block takes three arguments and returns a value:</p>
                <p>
                </p>	evaluatedObject<p>The object to be evaluated.</p>expressions<p>An array of predicate expressions that evaluates to a collection.</p>context<p>A dictionary that the expression can use to store temporary state for one predicate evaluation.</p><p>Note that <em>context</em> is mutable, and that it can only be accessed during the evaluation of the expression. You must not attempt to retain it for use elsewhere. ]</p><p>The Block returns the <em>evaluatedObject</em>. </p><em>arguments</em><p>An array containing <c>NSExpression</c> objects that will be used as parameters during the invocation of selector.</p><p>For a selector taking no parameters, the array should be empty. For a selector taking one or more parameters, the array should contain one <c>NSExpression</c> object which will evaluate to an instance of the appropriate type for each parameter.</p><p>If there is a mismatch between the number of parameters expected and the number you provide during evaluation, an exception may be raised or missing parameters may simply be replaced by <c>null</c> (which occurs depends on how many parameters are provided, and whether you have over- or underflow).</p><p>See <c>expressionForFunction:arguments:</c> for a complete list of arguments.</p><b>Return Value</b><p>An expression that filters a collection using the specified Block.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul><b>See Also</b><ul><li><c>– expressionBlock</c></li></ul></remarks>
            <param name="block"> A callback delegate.</param>
            <param name="arguments">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Expression(System.Object)">
            <summary>
            Returns a new expression that represents a given constant value.
            <br></br>Equivalent to the native <c>expressionForConstantValue:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>obj</em>
                <p>The constant value the new expression is to represent.</p>
                <b>Return Value</b>
                <p>A new expression that represents the constant value, <em>obj</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="obj">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Expression">
            <summary>
            Returns a new expression that represents the object being evaluated.
            <br></br>Equivalent to the native <c>expressionForEvaluatedObject</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new expression that represents the object being evaluated.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionForFunction(System.String,System.Object[])">
            <summary>
            Returns a new expression that will invoke one of the predefined functions.
            <br></br>Equivalent to the native <c>expressionForFunction:arguments:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>name</em>
                <p>The name of the function to invoke.</p>
                <em>parameters</em>
                <p>An array containing <c>NSExpression</c> objects that will be used as parameters during the invocation of selector.</p>
                <p>For a selector taking no parameters, the array should be empty. For a selector taking one or more parameters, the array should contain one <c>NSExpression</c> object which will evaluate to an instance of the appropriate type for each parameter.</p>
                <p>If there is a mismatch between the number of parameters expected and the number you provide during evaluation, an exception may be raised or missing parameters may simply be replaced by <c>null</c> (which occurs depends on how many parameters are provided, and whether you have over- or underflow).</p>
                <b>Return Value</b>
                <p>A new expression that invokes the function <em>name</em> using the parameters in <em>parameters</em>.</p>
                <b>Discussion</b>
                <p>The <em>name</em> parameter can be one of the following predefined functions.</p>
                <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                    <tr>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Function</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Parameter</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Returns</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Availability</p>
                        </th>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>average:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the average of values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.4 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>sum:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the sum of values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.4 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>count:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the number of elements in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.4 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>min:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the minimum of the values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.4 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>max:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the maximum of the values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.4 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>median:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the median of the values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>mode:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object (the mode of the values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>stddev:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the standard deviation of the values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>add:to:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the sum of the values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>from:subtract:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the result of subtracting the second value in the array from the first value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>multiply:by:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the result of multiplying the values in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>divide:by:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the result of dividing the first value in the array by the second value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>modulus:by:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the remainder of dividing the first value in the array by the second value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>sqrt:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the square root of the value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>log:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the log of the value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>ln:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the natural log of the value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>raise:toPower:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the result of raising the first value in the array to the power of the second value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>exp:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the base-e exponential of the value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>ceiling:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the smallest integral value not less than the value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>abs:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the absolute value of the value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>trunc:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the integral value nearest to but no greater than the value in the array)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>random</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>null</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (a random integer value)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>random:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (a random integer value between <c>0</c> and the value in the array (exclusive))</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>now</c>
                            </p>
                        </td>
                        <td>
                            <p>
                                <c>null</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>[NSDate]</c> object (the current date and time)</p>
                        </td>
                        <td>
                            <p>OS X v10.5 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>floor:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>uppercase:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a string</p>
                        </td>
                        <td>
                            <p>An <c>String</c> object</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>lowercase:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a string</p>
                        </td>
                        <td>
                            <p>An <c>String</c> object</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>bitwiseAnd:with:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the number is treated as an <c>int</c>)</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>bitwiseOr:with:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the number is treated as an <c>int</c>)</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>bitwiseXor:with:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the number is treated as an <c>int</c>)</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>leftshift:by:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the number is treated as an <c>int</c>)</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>rightshift:by:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing two <c>NSExpression</c> objects representing numbers</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the number is treated as an <c>int</c>)</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>onesComplement:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing one <c>NSExpression</c> object representing a number</p>
                        </td>
                        <td>
                            <p>An <c>double</c> object (the number is treated as an <c>int</c>)</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>noindex:</c>
                            </p>
                        </td>
                        <td>
                            <p>An <c>object[]</c> object containing an <c>NSExpression</c> object</p>
                        </td>
                        <td>
                            <p>The result of evaluating the parameter as though the <c>noindex:</c> function expression didn't exist.</p>
                        </td>
                        <td>
                            <p>iOS 3.0 and later</p>
                        </td>
                    </tr>
                </table>
                <p>This method raises an exception immediately if the selector is invalid; it raises an exception at runtime if the parameters are incorrect.</p>
                <p>The <em>parameters</em> argument is a collection containing an expression which evaluates to a collection, as illustrated in the following examples:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSNumber *number1 = [NSNumber numberWithInteger:20];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSNumber *number2 = [NSNumber numberWithInteger:40];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *numberArray = [NSArray arrayWithObjects: number1, number2, nil];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSExpression *arrayExpression = [NSExpression expressionForConstantValue: numberArray];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSArray *argumentArray = [NSArray arrayWithObject: arrayExpression];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSExpression* expression =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [NSExpression expressionForFunction:"sum:" arguments:argumentArray];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>id result = [expression expressionValueWithObject: nil context: nil];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>BOOL ok = [result isEqual: [NSNumber numberWithInt: 60]]; // ok == YES  </pre>
                        </td>
                    </tr>
                </table>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>[NSExpression expressionForFunction:"random" arguments:nil];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[NSExpression expressionForFunction:"max:"  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    arguments: [NSArray arrayWithObject:  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        [NSExpression expressionForConstantValue:  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>            [NSArray arrayWithObjects:  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>                [NSNumber numberWithInt: 5], [NSNumber numberWithInt: 10], nil]]]];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>[NSExpression expressionForFunction:"subtract:from:"  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    arguments: [NSArray arrayWithObjects:  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        [NSExpression expressionForConstantValue: [NSNumber numberWithInt: 5]],  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        [NSExpression expressionForConstantValue: [NSNumber numberWithInt: 10]], nil]];  </pre>
                        </td>
                    </tr>
                </table>
                <b>Special Considerations</b>
                <p>This method throws an exception immediately if the selector is unknown; it throws at runtime if the parameters are incorrect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ expressionForFunction:selectorName:arguments:</c>
                    </li>
                </ul>
            </remarks>
            <param name="name">
            </param>
            <param name="parameters">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionForIntersectSet(U3DXT.iOS.Native.Foundation.NSExpression,U3DXT.iOS.Native.Foundation.NSExpression)">
            <summary>
            Returns a new <c>NSExpression</c> object that represent the intersection of a given set and collection.
            <br></br>Equivalent to the native <c>expressionForIntersectSet:with:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>left</em>
                <p>An expression that evaluates to an <c>object[]</c> object.</p>
                <em>right</em>
                <p>An expression that evaluates to a collection object (an instance of <c>object[]</c>, <c>object[]</c>, or <c>Dictionary</c>).</p>
                <b>Return Value</b>
                <p>A new <c>NSExpression</c> object that represents the intersection of <em>left</em> and <em>right</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="left">
            </param>
            <param name="right">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionForKeyPath(System.String)">
            <summary>
            Returns a new expression that invokes <c>valueForKeyPath:</c> with a given key path.
            <br></br>Equivalent to the native <c>expressionForKeyPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>keyPath</em>
                <p>The key path that the new expression should evaluate.</p>
                <b>Return Value</b>
                <p>A new expression that invokes <c>valueForKeyPath:</c> with <em>keyPath</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="keyPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionForMinusSet(U3DXT.iOS.Native.Foundation.NSExpression,U3DXT.iOS.Native.Foundation.NSExpression)">
            <summary>
            Returns a new <c>NSExpression</c> object that represent the subtraction of a given collection from a given set.
            <br></br>Equivalent to the native <c>expressionForMinusSet:with:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>left</em>
                <p>An expression that evaluates to an <c>object[]</c> object.</p>
                <em>right</em>
                <p>An expression that evaluates to a collection object (an instance of <c>object[]</c>, <c>object[]</c>, or <c>Dictionary</c>).</p>
                <b>Return Value</b>
                <p>A new <c>NSExpression</c> object that represents the subtraction of <em>right</em> from <em>left</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="left">
            </param>
            <param name="right">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Expression(U3DXT.iOS.Native.Foundation.NSExpression,System.String,System.Object)">
            <summary>
            Returns an expression that filters a collection by storing elements in the collection in a given variable and keeping the elements for which qualifier returns true.
            <br></br>Equivalent to the native <c>expressionForSubquery:usingIteratorVariable:predicate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>expression</em>
                <p>A predicate expression that evaluates to a collection.</p>
                <em>variable</em>
                <p>Used as a local variable, and will shadow any instances of variable in the bindings dictionary. The variable is removed or the old value replaced once evaluation completes.</p>
                <em>predicate</em>
                <p>The predicate used to determine whether the element belongs in the result collection.</p>
                <b>Return Value</b>
                <p>An expression that filters a collection by storing elements in the collection in the variable variable and keeping the elements for which qualifier returns true</p>
                <b>Discussion</b>
                <p>This method creates a sub-expression, evaluation of which returns a subset of a collection of objects. It allows you to create sophisticated queries across relationships, such as a search for multiple correlated values on the destination object of a relationship.</p>
                <p>For example, suppose you have an Apartment entity that has a to-many relationship to a Resident entity, and that you want to create a query for all apartments inhabited by a resident whose first name is "Jane" and whose last name is "Doe". Using only API available for OS X v 10.4, you could try the predicate:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>resident.firstname == "Jane" &amp;&amp; resident.lastname == "Doe"  </pre>
                        </td>
                    </tr>
                </table>
                <p>but this will always return false since <c>resident.firstname</c> and <c>resident.lastname</c> both return collections. You could also try:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>resident.firstname CONTAINS "Jane" &amp;&amp; resident.lastname CONTAINS "Doe"  </pre>
                        </td>
                    </tr>
                </table>
                <p>but this is also flawed—it returns true if there are two residents, one of whom is John Doe and one of whom is Jane Smith. The only way to find the desired apartments is to do two passes: one through residents to find "Jane Doe", and one through apartments to find the ones where our Jane Does reside.</p>
                <p>Subquery expressions provide a way to encapsulate this type of qualification into a single query.</p>
                <p>The string format for a subquery expression is:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>SUBQUERY(collection_expression, variable_expression, predicate);  </pre>
                        </td>
                    </tr>
                </table>
                <p>where <c>expression</c> is a predicate expression that evaluates to a collection, <c>variableExpression</c> is an expression which will be used to contain each individual element of <c>collection</c>, and <c>predicate</c> is the predicate used to determine whether the element belongs in the result collection.</p>
                <p>Using subqueries, the apartment query could be reformulated as </p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>(SUBQUERY(residents, $x, $x.firstname == "Jane" &amp;&amp; $x.lastname == "Doe").@count != 0)  </pre>
                        </td>
                    </tr>
                </table>
                <p>or </p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>(SUBQUERY(residents, $x, $x.firstname == "Jane" &amp;&amp; $x.lastname == "Doe")[size] != 0)  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="expression">
            </param>
            <param name="variable">
            </param>
            <param name="predicate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionForUnionSet(U3DXT.iOS.Native.Foundation.NSExpression,U3DXT.iOS.Native.Foundation.NSExpression)">
            <summary>
            Returns a new <c>NSExpression</c> object that represent the union of a given set and collection.
            <br></br>Equivalent to the native <c>expressionForUnionSet:with:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>left</em>
                <p>An expression that evaluates to an <c>object[]</c> object.</p>
                <em>right</em>
                <p>An expression that evaluates to a collection object (an instance of <c>object[]</c>, <c>object[]</c>, or <c>Dictionary</c>).</p>
                <b>Return Value</b>
                <p>An new <c>NSExpression</c> object that represents the union of <em>left</em> and <em>right</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="left">
            </param>
            <param name="right">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionForVariable(System.String)">
            <summary>
            Returns a new expression that extracts a value from the variable bindings dictionary for a given key.
            <br></br>Equivalent to the native <c>expressionForVariable:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The key for the variable to extract from the variable bindings dictionary.</p>
                <b>Return Value</b>
                <p>A new expression that extracts from the variable bindings dictionary the value for the key <em>string</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionWithFormat(System.String,System.Object[])">
            <summary>
            Initializes the receiver with the specified expression format and array of arguments.
            <br></br>Equivalent to the native <c>expressionWithFormat:argumentArray:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>expressionFormat</em>
                <p>The expression format.</p>
                <em>arguments</em>
                <p>An array of arguments to be used with the <em>expressionFormat</em> string.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSExpression</c> object with the specified arguments.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ expressionWithFormat:</c>
                    </li>
                    <li>
                        <c>+ expressionWithFormat:arguments:</c>
                    </li>
                    <li>
                        <c>– initWithExpressionType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="expressionFormat">
            </param>
            <param name="arguments">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Arguments">
            <summary>
            Returns the arguments for the receiver.
            <br></br>Equivalent to the native <c>arguments</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The arguments for the receiver—that is, the array of expressions that will be passed as parameters during invocation of the selector on the operand of a function expression.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Collection">
            <summary>
            Returns the collection of expressions in an aggregate expression, or the collection element of a subquery expression.
            <br></br>Equivalent to the native <c>collection</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Returns the collection of expressions in an aggregate expression, or the collection element of a subquery expression.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ConstantValue">
            <summary>
            Returns the constant value of the receiver.
            <br></br>Equivalent to the native <c>constantValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The constant value of the receiver.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionType">
            <summary>
            Returns the expression type for the receiver.
            <br></br>Equivalent to the native <c>expressionType</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The expression type for the receiver.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.ExpressionValue(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Evaluates an expression using a given object and context.
            <br></br>Equivalent to the native <c>expressionValueWithObject:context:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>object</em>
                <p>The object against which the receiver is evaluated.</p>
                <em>context</em>
                <p>A dictionary that the expression can use to store temporary state for one predicate evaluation. Can be <c>null</c>.</p>
                <p>Note that <em>context</em> is mutable, and that it can only be accessed during the evaluation of the expression. You must not attempt to retain it for use elsewhere. ]</p>
                <b>Return Value</b>
                <p>The evaluated object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Function">
            <summary>
            Returns the function for the receiver.
            <br></br>Equivalent to the native <c>function</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The function for the receiver.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.#ctor(U3DXT.iOS.Native.Foundation.NSExpressionType)">
            <summary>
            Creates an instance of the native NSExpression and initializes the object. Initializes the receiver with the specified expression type.
            <br></br>Equivalent to the native <c>[[NSExpression alloc] initWithExpressionType:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>type</em>
                <p>The type of the new expression, as defined by <c>NSExpressionType</c>. </p>
                <b>Return Value</b>
                <p>An initialized <c>NSExpression</c> object of the type <em>type</em>.</p>
                <b>Special Considerations</b>
                <p>This method is the designated initializer for <c>NSExpression</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ expressionWithFormat:</c>
                    </li>
                    <li>
                        <c>+ expressionWithFormat:argumentArray:</c>
                    </li>
                    <li>
                        <c>+ expressionWithFormat:arguments:</c>
                    </li>
                </ul>
            </remarks>
            <param name="type">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.KeyPath">
            <summary>
            Returns the key path for the receiver.
            <br></br>Equivalent to the native <c>keyPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The key path for the receiver.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.LeftExpression">
            <summary>
            Returns the left expression of an aggregate expression.
            <br></br>Equivalent to the native <c>leftExpression</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The left expression of a set expression.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Operand">
            <summary>
            Returns the operand for the receiver.
            <br></br>Equivalent to the native <c>operand</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The operand for the receiver—that is, the object on which the selector will be invoked.</p>
                <b>Discussion</b>
                <p>The object is the result of evaluating a key path or one of the defined functions. This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Predicate">
            <summary>
            Return the predicate of a subquery expression.
            <br></br>Equivalent to the native <c>predicate</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The predicate of a subquery expression.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.RightExpression">
            <summary>
            Returns the right expression of an aggregate expression.
            <br></br>Equivalent to the native <c>rightExpression</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The right expression of a set expression.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSExpression.Variable">
            <summary>
            Returns the variable for the receiver.
            <br></br>Equivalent to the native <c>variable</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The variable for the receiver.</p>
                <b>Discussion</b>
                <p>This method raises an exception if it is not applicable to the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSExpressionType">
            <summary>
            Defines the possible types of <c>NSExpression</c>.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.ConstantValue">
            <summary>
                <p>An expression that always returns the same value.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSConstantValueExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.EvaluatedObject">
            <summary>
                <p>An expression that always returns the parameter object itself.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSEvaluatedObjectExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.Variable">
            <summary>
                <p>An expression that always returns whatever value is associated with the key specified by ‘variable’ in the bindings dictionary.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSVariableExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.KeyPath">
            <summary>
                <p>An expression that returns something that can be used as a key path.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSKeyPathExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.Function">
            <summary>
                <p>An expression that returns the result of evaluating a function.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSFunctionExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.Aggregate">
            <summary>
                <p>An expression that defines an aggregate of <c>NSExpression</c> objects.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSAggregateExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.Subquery">
            <summary>
                <p>An expression that filters a collection using a subpredicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSSubqueryExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.UnionSet">
            <summary>
                <p>An expression that creates a union of the results of two nested expressions.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUnionSetExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.IntersectSet">
            <summary>
                <p>An expression that creates an intersection of the results of two nested expressions.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSIntersectSetExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.MinusSet">
            <summary>
                <p>An expression that combines two nested expression results by set subtraction.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSMinusSetExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSExpressionType.Block">
            <summary>
                <p>An expression that uses a Block.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSBlockExpressionType</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSFormatter">
            <summary>
                <c>NSFormatter</c> is an abstract class that declares an interface for objects that create, interpret, and validate the textual representation of cell contents. The Foundation framework provides two concrete subclasses of <c>NSFormatter</c> to generate these objects: <c>NSNumberFormatter</c> and <c>NSDateFormatter</c>.
            </summary>
            <remarks>
                <b>Subclassing Notes</b>
                <p class="spaceabove">
                    <c>NSFormatter</c> is intended for subclassing. A custom formatter can restrict the input and enhance the display of data in novel ways. For example, you could have a custom formatter that ensures that serial numbers entered by a user conform to predefined formats. Before you decide to create a custom formatter, make sure that you cannot configure the public subclasses <c>NSDateFormatter</c> and <c>NSNumberFormatter</c> to satisfy your requirements.</p>
                <p class="spaceabove">	For instructions on how to create your own custom formatter, see  Creating a Custom Formatter .</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFormatter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFormatter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFormatter.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSFormatter" /> class.
            <br></br>Equivalent to the native <c>[[NSFormatter alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSFormatter.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSFormatter.ClassExists">
            <summary>
            Returns whether the native NSFormatter class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse">
            <summary>
            An NSHTTPURLResponse object represents a response to an HTTP URL load request. It’s a subclass of  NSURLResponse  that provides methods for accessing information specific to HTTP protocol responses.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.UP_NSHTTPURLResponse_localizedStringForStatusCode_(System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.UP_NSHTTPURLResponse_allHeaderFields(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.UP_NSHTTPURLResponse_statusCode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse" /> class.
            <br></br>Equivalent to the native <c>[[NSHTTPURLResponse alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.ClassExists">
            <summary>
            Returns whether the native NSHTTPURLResponse class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.LocalizedString(System.Int32)">
            <summary>
            Returns a localized string corresponding to a specified HTTP status code.
            <br></br>Equivalent to the native <c>localizedStringForStatusCode:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>statusCode</em>
                <p>The HTTP status code.</p>
                <b>Return Value</b>
                <p>A localized string suitable for displaying to users that describes the specified status code.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– statusCode</c>
                    </li>
                </ul>
            </remarks>
            <param name="statusCode">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.AllHeaderFields">
            <summary>
            Returns all the HTTP header fields of the receiver.
            <br></br>Equivalent to the native <c>allHeaderFields</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary containing all the HTTP header fields of the receiver. By examining this dictionary clients can see the “raw” header information returned by the HTTP server.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.StatusCode">
            <summary>
            Returns the receiver’s HTTP status code.
            <br></br>Equivalent to the native <c>statusCode</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s HTTP status code.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ localizedStringForStatusCode:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.String,System.Int32,System.String)">
            <summary>
            Creates an instance of the native NSHTTPURLResponse and initializes the object. Inherits from <c>NSURLResponse</c>. Returns an initialized <c>NSURLResponse</c> object with the URL, MIME type, length, and text encoding set to given values.
            <br></br>Equivalent to the native <c>[[NSHTTPURLResponse alloc] initWithURL:MIMEType:expectedContentLength:textEncodingName:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>The URL for the new object.</p>
                <em>MIMEType</em>
                <p>The MIME type.</p>
                <em>length</em>
                <p>The expected content length.This value should be <c>–1</c> if the expected length is undetermined</p>
                <em>name</em>
                <p>The text encoding name. This value may be <c>null</c>.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object with the URL set to <em>URL</em>, the MIME type set to <em>MIMEType</em>, length set to <em>length</em>, and text encoding name set to <em>name</em>. </p>
                <b>Discussion</b>
                <p>This is the designated initializer for <c>NSURLResponse</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:statusCode:HTTPVersion:headerFields:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="MIMEType">
            </param>
            <param name="length">
            </param>
            <param name="name">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.Foundation.NSURLResponse" />
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.Int32,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native NSHTTPURLResponse and initializes the object. Inherits from <c>NSURLResponse</c>. Returns an initialized response with the specified values.
            <br></br>Equivalent to the native <c>[[NSHTTPURLResponse alloc] initWithURL:statusCode:HTTPVersion:headerFields:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The URL for the new object.</p>
                <em>statusCode</em>
                <p>The HTTP status code to return.</p>
                <em>HTTPVersion</em>
                <p>The version of the HTTP response as represented by the server.  This is typically represented as "HTTP/1.1"</p>
                <em>headerFields</em>
                <p>A dictionary representing the header keys and values of the server response.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object or <c>NULL</c> if an error occurred during initialization. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS v5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:MIMEType:expectedContentLength:textEncodingName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="statusCode">
            </param>
            <param name="HTTPVersion">
            </param>
            <param name="headerFields">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.Foundation.NSURLResponse" />
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSIndexSet">
            <summary>
            The <c>NSIndexSet</c> class represents an immutable collection of unique unsigned integers, known as <strong>indexes</strong> because of the way they are used. This collection is referred to as an <strong>index set</strong>.
            </summary>
            <remarks>
                <p>You use index sets in your code to store indexes into some other data structure. For example, given an <c>object[]</c> object, you could use an index set to identify a subset of objects in that array.</p>
                <p>You should not use index sets to store an arbitrary collection of integer values because index sets store indexes as sorted ranges. This makes them more efficient than storing a collection of individual integers. It also means that each index value can only appear once in the index set.</p>
                <p>The designated initializers of the NSIndexSet class are: <c>initWithIndexesInRange:</c> and <c>initWithIndexSet:</c>.</p>
                <p>You must not subclass the <c>NSIndexSet</c> class.</p>
                <p>The mutable subclass of <c>NSIndexSet</c> is <c>NSMutableIndexSet</c>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexSet">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_containsIndex_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_containsIndexes_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_containsIndexesInRange_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_count(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_countOfIndexesInRange_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_enumerateIndexesInRange_options_usingBlock_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_enumerateIndexesUsingBlock_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_enumerateIndexesWithOptions_usingBlock_(System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_enumerateRangesInRange_options_usingBlock_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_enumerateRangesUsingBlock_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_enumerateRangesWithOptions_usingBlock_(System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_firstIndex(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexesInRange_options_passingTest_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexesPassingTest_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexesWithOptions_passingTest_(System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexGreaterThanIndex_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexGreaterThanOrEqualToIndex_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexInRange_options_passingTest_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexLessThanIndex_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexLessThanOrEqualToIndex_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexPassingTest_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_indexWithOptions_passingTest_(System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_alloc_initWithIndex_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_alloc_initWithIndexesInRange_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_alloc_initWithIndexSet_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_intersectsIndexesInRange_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_isEqualToIndexSet_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.UP_NSIndexSet_lastIndex(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSIndexSet" /> class.
            <br></br>Equivalent to the native <c>[[NSIndexSet alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSIndexSet.ClassExists">
            <summary>
            Returns whether the native NSIndexSet class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexSet">
            <summary>
            Creates an empty index set.
            <br></br>Equivalent to the native <c>indexSet</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>NSIndexSet</c> object with no members.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– init</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.ContainsIndex(System.UInt32)">
            <summary>
            Indicates whether the index set contains a specific index.
            <br></br>Equivalent to the native <c>containsIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>index</em>
                <p>Index being inquired about.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> when the index set contains <em>index</em>, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– containsIndexes:</c>
                    </li>
                    <li>
                        <c>– containsIndexesInRange:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.ContainsIndexes(U3DXT.iOS.Native.Foundation.NSIndexSet)">
            <summary>
            Indicates whether the receiving index set contains a superset of the indexes in another index set.
            <br></br>Equivalent to the native <c>containsIndexes:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexSet</em>
                <p>Index set being inquired about.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> when the receiving index set contains a superset of the indexes in <em>indexSet</em>, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– containsIndex:</c>
                    </li>
                    <li>
                        <c>– containsIndexesInRange:</c>
                    </li>
                </ul>
            </remarks>
            <param name="indexSet">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.ContainsIndexesInRange(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Indicates whether the index set contains the indexes represented by an index range.
            <br></br>Equivalent to the native <c>containsIndexesInRange:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexRange</em>
                <p>The index range being inquired about.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> when the index set contains the indexes in <em>indexRange</em>, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– containsIndex:</c>
                    </li>
                    <li>
                        <c>– containsIndexes:</c>
                    </li>
                    <li>
                        <c>– intersectsIndexesInRange:</c>
                    </li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.Count">
            <summary>
            Returns the number of indexes in the index set.
            <br></br>Equivalent to the native <c>count</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Number of indexes in the index set.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– countOfIndexesInRange:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.CountOfIndexesInRange(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Returns the number of indexes in the index set that are members of a given range.
            <br></br>Equivalent to the native <c>countOfIndexesInRange:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexRange</em>
                <p>Index range being inquired about.</p>
                <b>Return Value</b>
                <p>Number of indexes in the index set that are members of <em>indexRange</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– count</c>
                    </li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.EnumerateIndexesInRange(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Action{System.UInt32,System.Boolean})">
            <summary>
            Executes a given Block using the indexes in the specified range, using the specified enumeration options.
            <br></br>Equivalent to the native <c>enumerateIndexesInRange:options:usingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The range to enumerate.</p>
                <em>opts</em>
                <p>A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See <c>NSEnumerationOptions</c> for the supported values.</p>
                <em>block</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="range">
            </param>
            <param name="opts">
            </param>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.EnumerateIndexesUsingBlock(System.Action{System.UInt32,System.Boolean})">
            <summary>
            Executes a given Block using each object in the index set.
            <br></br>Equivalent to the native <c>enumerateIndexesUsingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>block</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.EnumerateIndexes(U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Action{System.UInt32,System.Boolean})">
            <summary>
            Executes a given Block over the index set’s indexes, using the specified enumeration options.
            <br></br>Equivalent to the native <c>enumerateIndexesWithOptions:usingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>opts</em>
                <p>A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See <c>NSEnumerationOptions</c> for the supported values.</p>
                <em>block</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="opts">
            </param>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.EnumerateRangesInRange(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Action{U3DXT.iOS.Native.Foundation.NSRange,System.Boolean})">
            <summary>
            Enumerates over the ranges in the range of objects using the block
            <br></br>Equivalent to the native <c>enumerateRangesInRange:options:usingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The range of items to enumerate. If the range intersects a range of the receiver's indexes, then that intersection will be passed to the block.</p>
                <em>opts</em>
                <p>A bitmask that specifies the <c>NSEnumerationOptions</c> for the enumeration.</p>
                <em>block</em>
                <p>The block to apply to elements in the index set.</p>
                <p>The block takes two arguments:</p>
                <p>
                </p>	range<p>The range of elements.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to <c>true</c> within the Block.</p><b>Discussion</b><p>By default, the enumeration starts with the first object and continues serially through the indexed set range to the last object in the range. You can specify <c>NSEnumerationConcurrent</c> and/or <c>NSEnumerationReverse</c> as enumeration options to modify this behavior.</p><p><strong>Important:</strong> If the Block parameter is <c>null</c> this method will raise an exception.</p><p></p><b>Availability</b><ul><li>Available in iOS 5.0 and later.</li></ul></remarks>
            <param name="range">
            </param>
            <param name="opts">
            </param>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.EnumerateRangesUsingBlock(System.Action{U3DXT.iOS.Native.Foundation.NSRange,System.Boolean})">
            <summary>
            Executes a given block using each object in the index set, in the specified ranges.
            <br></br>Equivalent to the native <c>enumerateRangesUsingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>block</em>
                <p>The block to apply to elements in the index set.</p>
                <p>The block takes two arguments:</p>
                <p>
                </p>	range<p>The range of objects of the elements in the index set.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to <c>true</c> within the Block.</p><b>Discussion</b><p>If the Block parameter is <c>null</c> this method will raise an exception.</p><b>Availability</b><ul><li>Available in iOS 5.0 and later.</li></ul></remarks>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.EnumerateRanges(U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Action{U3DXT.iOS.Native.Foundation.NSRange,System.Boolean})">
            <summary>
            Executes a given block using each object in the index set, in the specified ranges.
            <br></br>Equivalent to the native <c>enumerateRangesWithOptions:usingBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>opts</em>
                <p>A bitmask that specifies the <c>NSEnumerationOptions</c> for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order).</p>
                <em>block</em>
                <p>The block to apply to elements in the index set.</p>
                <p>The block takes two arguments:</p>
                <p>
                </p>	range<p>The range of objects of the elements in the index set.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to <c>true</c> within the Block.</p><b>Discussion</b><p>By default, the enumeration starts with the first object and continues serially through the indexed set range to the last object in the range. You can specify <c>NSEnumerationConcurrent</c> and/or <c>NSEnumerationReverse</c> as enumeration options to modify this behavior.</p><p><strong>Important:</strong> If the Block parameter is <c>null</c> this method will raise an exception.</p><p></p><b>Availability</b><ul><li>Available in iOS 5.0 and later.</li></ul></remarks>
            <param name="opts">
            </param>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.FirstIndex">
            <summary>
            Returns either the first index in the index set or the not-found indicator.
            <br></br>Equivalent to the native <c>firstIndex</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>First index in the index set or <c>NSNotFound</c> when the index set is empty.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– lastIndex</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexesInRange(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Func{System.UInt32,System.Boolean,System.Boolean})">
            <summary>
            Returns an <c>NSIndexSet</c> containing the receiving index set’s objects in the specified range that pass the Block test.
            <br></br>Equivalent to the native <c>indexesInRange:options:passingTest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The range of indexes to test.</p>
                <em>opts</em>
                <p>A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See <c>NSEnumerationOptions</c> for the supported values.</p>
                <em>predicate</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><p>The Block returns a Boolean value that indicates whether <em>obj</em> passed the test.</p><b>Return Value</b><p>An <c>NSIndexSet</c> containing the indexes of the receiving index set that passed the predicate Block test.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="range">
            </param>
            <param name="opts">
            </param>
            <param name="predicate"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexesPassingTest(System.Func{System.UInt32,System.Boolean,System.Boolean})">
            <summary>
            Returns an <c>NSIndexSet</c> containing the receiving index set’s objects that pass the Block test.
            <br></br>Equivalent to the native <c>indexesPassingTest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicate</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><p>The Block returns a Boolean value that indicates whether <em>obj</em> passed the test.</p><b>Return Value</b><p>An <c>NSIndexSet</c> containing the indexes of the receiving index set that passed the predicate Block test.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="predicate"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.Indexes(U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Func{System.UInt32,System.Boolean,System.Boolean})">
            <summary>
            Returns an <c>NSIndexSet</c> containing the receiving index set’s objects that pass the Block test using the specified enumeration options.
            <br></br>Equivalent to the native <c>indexesWithOptions:passingTest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>opts</em>
                <p>A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See <c>NSEnumerationOptions</c> for the supported values.</p>
                <em>predicate</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><p>The Block returns a Boolean value that indicates whether <em>obj</em> passed the test.</p><b>Return Value</b><p>An <c>NSIndexSet</c> containing the indexes of the receiving index set that passed the predicate Block test.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="opts">
            </param>
            <param name="predicate"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexGreaterThanIndex(System.UInt32)">
            <summary>
            Returns either the closest index in the index set that is greater than a specific index or the not-found indicator.
            <br></br>Equivalent to the native <c>indexGreaterThanIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>index</em>
                <p>Index being inquired about.</p>
                <b>Return Value</b>
                <p>Closest index in the index set greater than <em>index</em>; <c>NSNotFound</c> when the index set contains no qualifying index.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– indexLessThanIndex:</c>
                    </li>
                    <li>
                        <c>– indexGreaterThanOrEqualToIndex:</c>
                    </li>
                    <li>
                        <c>– indexLessThanOrEqualToIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexGreaterThanOrEqualToIndex(System.UInt32)">
            <summary>
            Returns either the closest index in the index set that is greater than or equal to a specific index or the not-found indicator.
            <br></br>Equivalent to the native <c>indexGreaterThanOrEqualToIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>index</em>
                <p>Index being inquired about.</p>
                <b>Return Value</b>
                <p>Closest index in the index set greater than or equal to <em>index</em>; <c>NSNotFound</c> when the index set contains no qualifying index.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– indexGreaterThanIndex:</c>
                    </li>
                    <li>
                        <c>– indexLessThanIndex:</c>
                    </li>
                    <li>
                        <c>– indexLessThanOrEqualToIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexInRange(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Func{System.UInt32,System.Boolean,System.Boolean})">
            <summary>
            Returns the index of the first object in the specified range that passes the predicate Block test.
            <br></br>Equivalent to the native <c>indexInRange:options:passingTest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The range of indexes to test.</p>
                <em>opts</em>
                <p>A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See <c>NSEnumerationOptions</c> for the supported values.</p>
                <em>predicate</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><p>The Block returns a Boolean value that indicates whether <em>obj</em> passed the test.</p><b>Return Value</b><p>The index of the first object that passes the predicate test.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="range">
            </param>
            <param name="opts">
            </param>
            <param name="predicate"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexLessThanIndex(System.UInt32)">
            <summary>
            Returns either the closest index in the index set that is less than a specific index or the not-found indicator.
            <br></br>Equivalent to the native <c>indexLessThanIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>index</em>
                <p>Index being inquired about.</p>
                <b>Return Value</b>
                <p>Closest index in the index set less than <em>index</em>; <c>NSNotFound</c> when the index set contains no qualifying index.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– indexGreaterThanIndex:</c>
                    </li>
                    <li>
                        <c>– indexGreaterThanOrEqualToIndex:</c>
                    </li>
                    <li>
                        <c>– indexLessThanOrEqualToIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexLessThanOrEqualToIndex(System.UInt32)">
            <summary>
            Returns either the closest index in the index set that is less than or equal to a specific index or the not-found indicator.
            <br></br>Equivalent to the native <c>indexLessThanOrEqualToIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>index</em>
                <p>Index being inquired about.</p>
                <b>Return Value</b>
                <p>Closest index in the index set less than or equal to <em>index</em>; <c>NSNotFound</c> when the index set contains no qualifying index.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– indexGreaterThanIndex:</c>
                    </li>
                    <li>
                        <c>– indexLessThanIndex:</c>
                    </li>
                    <li>
                        <c>– indexGreaterThanOrEqualToIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IndexPassingTest(System.Func{System.UInt32,System.Boolean,System.Boolean})">
            <summary>
            Returns the index of the first object that passes the predicate Block test.
            <br></br>Equivalent to the native <c>indexPassingTest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicate</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><p>The Block returns a Boolean value that indicates whether <em>obj</em> passed the test.</p><b>Return Value</b><p>The index of the first object that passes the predicate test.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="predicate"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.Index(U3DXT.iOS.Native.Foundation.NSEnumerationOptions,System.Func{System.UInt32,System.Boolean,System.Boolean})">
            <summary>
            Returns the index of the first object that passes the predicate Block test using the specified enumeration options.
            <br></br>Equivalent to the native <c>indexWithOptions:passingTest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>opts</em>
                <p>A bitmask that specifies the options for the enumeration (whether it should be performed concurrently and whether it should be performed in reverse order). See <c>NSEnumerationOptions</c> for the supported values.</p>
                <em>predicate</em>
                <p>The Block to apply to elements in the set.</p>
                <p>The Block takes two arguments:</p>
                <p>
                </p>	idx<p>The index of the object.</p>stop<p>A reference to a Boolean value. The block can set the value to <c>true</c> to stop further processing of the set. The <c>stop</c> argument is an out-only argument. You should only ever set this Boolean to YES within the Block.</p><p>The Block returns a Boolean value that indicates whether <em>obj</em> passed the test.</p><b>Return Value</b><p>The index of the first object that passes the predicate test.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="opts">
            </param>
            <param name="predicate"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.#ctor(System.UInt32)">
            <summary>
            Creates an instance of the native NSIndexSet and initializes the object. Initializes an allocated <c>NSIndexSet</c> object with an index.
            <br></br>Equivalent to the native <c>[[NSIndexSet alloc] initWithIndex:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>index</em>
                <p>An index.</p>
                <b>Return Value</b>
                <p>Initialized <c>NSIndexSet</c> object with <em>index</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ indexSetWithIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.#ctor(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Creates an instance of the native NSIndexSet and initializes the object. Initializes an allocated <c>NSIndexSet</c> object with an index range.
            <br></br>Equivalent to the native <c>[[NSIndexSet alloc] initWithIndexesInRange:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexRange</em>
                <p>An index range. Must include only indexes representable as unsigned integers.</p>
                <b>Return Value</b>
                <p>Initialized <c>NSIndexSet</c> object with <em>indexRange</em>.</p>
                <b>Discussion</b>
                <p>This method raises an <c>NSRangeException</c> when <em>indexRange</em> would add an index that exceeds the maximum allowed value for unsigned integers.</p>
                <p>This method is a designated initializer for <c>NSIndexSet</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ indexSetWithIndexesInRange:</c>
                    </li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.#ctor(U3DXT.iOS.Native.Foundation.NSIndexSet)">
            <summary>
            Creates an instance of the native NSIndexSet and initializes the object. Initializes an allocated <c>NSIndexSet</c> object with an index set.
            <br></br>Equivalent to the native <c>[[NSIndexSet alloc] initWithIndexSet:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexSet</em>
                <p>An index set.</p>
                <b>Return Value</b>
                <p>Initialized <c>NSIndexSet</c> object with <em>indexSet</em>.</p>
                <b>Discussion</b>
                <p>This method is a designated initializer for <c>NSIndexSet</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="indexSet">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IntersectsIndexesInRange(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Indicates whether the index set contains any of the indexes in a range.
            <br></br>Equivalent to the native <c>intersectsIndexesInRange:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexRange</em>
                <p>Index range being inquired about.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> when the index set contains one or more of the indexes in <em>indexRange</em>, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– containsIndexesInRange:</c>
                    </li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.IsEqualToIndexSet(U3DXT.iOS.Native.Foundation.NSIndexSet)">
            <summary>
            Indicates whether the indexes in the receiving index set are the same indexes contained in another index set.
            <br></br>Equivalent to the native <c>isEqualToIndexSet:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>indexSet</em>
                <p>Index set being inquired about.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> when the indexes in the receiving index set are the same indexes <em>indexSet</em> contains, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="indexSet">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSIndexSet.LastIndex">
            <summary>
            Returns either the last index in the index set or the not-found indicator.
            <br></br>Equivalent to the native <c>lastIndex</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Last index in the index set or <c>NSNotFound</c> when the index set is empty.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– firstIndex</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSLocale">
            <summary>
            Locales encapsulate information about linguistic, cultural, and technological conventions and standards. Examples of information encapsulated by a locale include the symbol used for the decimal separator in numbers and the way dates are formatted.
            </summary>
            <remarks>
                <p>Locales are typically used to provide, format, and interpret information about and according to the user’s customs and preferences. They are frequently used in conjunction with formatters (see <em>Data Formatting Guide</em>). Although you can use many locales, you usually use the one associated with the current user.</p>
                <p>
                    <c>NSLocale</c> is “toll-free bridged” with its Core Foundation counterpart, <c>CFLocale</c>. This means that the Core Foundation type is interchangeable in function or method calls with the bridged Foundation object. Therefore, in a method where you see an <c>NSLocale *</c> parameter, you can pass a <c>CFLocaleRef</c>, and in a function where you see a <c>CFLocaleRef</c> parameter, you can pass an <c>NSLocale</c> instance (you cast one type to the other to suppress compiler warnings). See  “Toll-Free Bridging”  for more information on toll-free bridging.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSIslamicCalendar">
            <summary>
                <p>Identifier for the Islamic calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSIslamicCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSChineseCalendar">
            <summary>
                <p>Identifier for the Chinese calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSChineseCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSJapaneseCalendar">
            <summary>
                <p>Identifier for the Japanese calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSJapaneseCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSPersianCalendar">
            <summary>
                <p>Identifier for the Persian calendar</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPersianCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSIndianCalendar">
            <summary>
                <p>Identifier for the Indian calendar</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSIndianCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSRepublicOfChinaCalendar">
            <summary>
                <p>Identifier for the Republic of China (Taiwan) calendar.</p>
                <p>A Chinese calendar can be created, and you can do calendrical calculations with it, but you should not use it for formatting as the necessary underlying functionality is not working correctly yet.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSRepublicOfChinaCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSBuddhistCalendar">
            <summary>
                <p>Identifier for the Buddhist calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSBuddhistCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSISO8601Calendar">
            <summary>
                <p>Identifier for the ISO8601. The ISO8601 calendar is not yet implemented.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSISO8601Calendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSHebrewCalendar">
            <summary>
                <p>Identifier for the Hebrew calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSHebrewCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSIslamicCivilCalendar">
            <summary>
                <p>Identifier for the Islamic civil calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSIslamicCivilCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSGregorianCalendar">
            <summary>
                <p>Identifier for the Gregorian calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSGregorianCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CurrencyCode">
            <summary>
                <p>The key for the currency code associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCurrencyCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CollatorIdentifier">
            <summary>
                <p>The key for the collation identifier for the locale.</p>
                <p>The corresponding value is an <c>String</c> object. If unknown, <c>null</c>  is returned.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCollatorIdentifier</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.AlternateQuotationBeginDelimiterKey">
            <summary>
                <p>The key for the alternating begin quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate. Thus, <c>NSLocaleQuotationBeginDelimiterKey</c>, then <c>NSLocaleAlternateQuotationBeginDelimiterKey</c>, etc.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleAlternateQuotationBeginDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.ExemplarCharacterSet">
            <summary>
                <p>The key for the exemplar character set for the locale.</p>
                <p>The corresponding value is an <c>NSCharacterSet</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleExemplarCharacterSet</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.ScriptCode">
            <summary>
                <p>The key for the locale script code.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleScriptCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.LanguageCode">
            <summary>
                <p>The key for the locale language code.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"es"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.Identifier">
            <summary>
                <p>The key for the locale identifier.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"es_ES_PREEURO"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleIdentifier</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.MeasurementSystem">
            <summary>
                <p>The key for the measurement system associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object containing a description of the measurement system used by the locale, for example “Metric” or “U.S.”.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleMeasurementSystem</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CollationIdentifier">
            <summary>
                <p>The key for the collation associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCollationIdentifier</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.AlternateQuotationEndDelimiterKey">
            <summary>
                <p>The key for the alternate end quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate. Thus, <c>NSLocaleQuotationEndDelimiterKey</c>, then <c>NSLocaleAlternateQuotationEndDelimiterKey</c>, etc.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleAlternateQuotationEndDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.UsesMetricSystem">
            <summary>
                <p>The key for the flag that indicates whether the locale uses the metric system.</p>
                <p>The corresponding value is a Boolean <c>double</c> object. If the value is <c>false</c>, you can typically assume American measurement units (for example, the statute mile).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleUsesMetricSystem</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CountryCode">
            <summary>
                <p>The key for the locale country code.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"ES"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCountryCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.QuotationBeginDelimiterKey">
            <summary>
                <p>The key for the begin quotation symbol associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleQuotationBeginDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.Calendar">
            <summary>
                <p>The key for the calendar associated with the locale.</p>
                <p>The corresponding value is an <c>NSCalendar</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCalendar</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.VariantCode">
            <summary>
                <p>The key for the locale variant code.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"PREEURO"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleVariantCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CurrencySymbol">
            <summary>
                <p>The key for the currency symbol associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCurrencySymbol</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.DecimalSeparator">
            <summary>
                <p>The key for the decimal separator associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleDecimalSeparator</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.QuotationEndDelimiterKey">
            <summary>
                <p>The key for the end quotation symbol associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleQuotationEndDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.GroupingSeparator">
            <summary>
                <p>The key for the numeric grouping separator associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleGroupingSeparator</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ToCultureInfo">
            <summary>
            Converts to the culture info.
            </summary>
            <returns>The culture info.</returns>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSCurrentLocaleDidChangeNotification">
            <summary>
            Constant name for the native <c>NSCurrentLocaleDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSLocale.CurrentLocaleDidChange">
            <summary>
                <b>NSCurrentLocaleDidChangeNotification</b> Notification that indicates that the user’s locale changed. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSCurrentLocaleDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSLocale.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSLocale.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>NSLocale</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSLocale.AllInstances.CurrentLocaleDidChange">
            <summary>
                <b>NSCurrentLocaleDidChangeNotification</b> Notification that indicates that the user’s locale changed. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSCurrentLocaleDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_autoupdatingCurrentLocale">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_availableLocaleIdentifiers">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_canonicalLanguageIdentifierFromString_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_canonicalLocaleIdentifierFromString_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_characterDirectionForLanguage_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_commonISOCurrencyCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_componentsFromLocaleIdentifier_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_currentLocale">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_ISOCountryCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_ISOCurrencyCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_ISOLanguageCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_lineDirectionForLanguage_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_localeIdentifierFromComponents_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_localeIdentifierFromWindowsLocaleCode_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_preferredLanguages">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_systemLocale">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_windowsLocaleCodeFromLocaleIdentifier_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_displayNameForKey_value_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_alloc_initWithLocaleIdentifier_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_localeIdentifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_objectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSLocale" /> class.
            <br></br>Equivalent to the native <c>[[NSLocale alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSLocale.ClassExists">
            <summary>
            Returns whether the native NSLocale class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.AutoupdatingCurrentLocale">
            <summary>
            Returns the current logical locale for the current user.
            <br></br>Equivalent to the native <c>autoupdatingCurrentLocale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The current logical locale for the current user. The locale is formed from the settings for the current user’s chosen system locale overlaid with any custom settings the user has specified in System Preferences.</p>
                <p>The object always reflects the current state of the current user’s locale settings.</p>
                <b>Discussion</b>
                <p>Settings you get from this locale do change as the user’s settings change (contrast with <c>currentLocale</c>).</p>
                <p>Note that if you cache values based on the locale or related information, those caches will of course not be automatically updated by the updating of the locale object. You can recompute caches upon receipt of the notification (<c>NSCurrentLocaleDidChangeNotification</c>) that gets sent out for locale changes (see <em>Notification Programming Topics</em> to learn how to register for and receive notifications).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ systemLocale</c>
                    </li>
                    <li>
                        <c>+ currentLocale</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.AvailableLocaleIdentifiers">
            <summary>
            Returns an array of <c>String</c> objects, each of which identifies a locale available on the system.
            <br></br>Equivalent to the native <c>availableLocaleIdentifiers</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which identifies a locale available on the system.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CanonicalLanguageIdentifier(System.String)">
            <summary>
            Returns a canonical language identifier by mapping an arbitrary locale identification string to the canonical identifier.
            <br></br>Equivalent to the native <c>canonicalLanguageIdentifierFromString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string representation of an arbitrary locale identifier.</p>
                <b>Return Value</b>
                <p>A string that represents the canonical language identifier for the specified arbitrary locale identifier.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CanonicalLocaleIdentifier(System.String)">
            <summary>
            Returns the canonical identifier for a given locale identification string.
            <br></br>Equivalent to the native <c>canonicalLocaleIdentifierFromString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A locale identification string.</p>
                <b>Return Value</b>
                <p>The canonical identifier for an the locale identified by <em>string</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ componentsFromLocaleIdentifier:</c>
                    </li>
                    <li>
                        <c>+ localeIdentifierFromComponents:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CharacterDirection(System.String)">
            <summary>
            Returns the character direction for the specified ISO language code.
            <br></br>Equivalent to the native <c>characterDirectionForLanguage:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>isoLangCode</em>
                <p>The ISO language code.</p>
                <b>Return Value</b>
                <p>Returns the character direction for the language. See  “NSLocaleLanguageDirection”  for possible values. If the appropriate direction can’t be determined <c>NSLocaleLanguageDirectionUnknown</c> is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ lineDirectionForLanguage:</c>
                    </li>
                </ul>
            </remarks>
            <param name="isoLangCode">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CommonISOCurrencyCodes">
            <summary>
            Returns an array of common ISO currency codes
            <br></br>Equivalent to the native <c>commonISOCurrencyCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents common ISO currency codes.</p>
                <b>Discussion</b>
                <p>Common codes may include, for example, AED, AUD, BZD, DKK, EUR, GBP, JPY, KES, MXN, OMR, STD, USD, XCD, and ZWD.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ComponentsFromLocaleIdentifier(System.String)">
            <summary>
            Returns a dictionary that is the result of parsing a locale ID.
            <br></br>Equivalent to the native <c>componentsFromLocaleIdentifier:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A locale ID, consisting of language, script, country, variant, and keyword/value pairs, for example, <c>"en_US@calendar=japanese"</c>.</p>
                <b>Return Value</b>
                <p>A dictionary that is the result of parsing <em>string</em> as a locale ID. The keys are the constant NSString constants corresponding to the locale ID components, and the values correspond to constants where available. For the complete set of dictionary keys, see  “Constants.”  </p>
                <b>Discussion</b>
                <p>For example: the locale ID <c>"en_US@calendar=japanese"</c> yields a dictionary with three entries: <c>NSLocaleLanguageCode=en</c>, <c>NSLocaleCountryCode=US</c>, and <c>NSLocaleCalendar=NSJapaneseCalendar</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ localeIdentifierFromComponents:</c>
                    </li>
                    <li>
                        <c>+ canonicalLocaleIdentifierFromString:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CurrentLocale">
            <summary>
            Returns the logical locale for the current user.
            <br></br>Equivalent to the native <c>currentLocale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The logical locale for the current user. The locale is formed from the settings for the current user’s chosen system locale overlaid with any custom settings the user has specified in System Preferences.</p>
                <b>Discussion</b>
                <p>Settings you get from this locale do not change as a user’s Preferences are changed so that your operations are consistent. Typically you perform some operations on the returned object and then allow it to be disposed of. Moreover, since the returned object may be cached, you do not need to hold on to it indefinitely. Contrast with <c>autoupdatingCurrentLocale</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ systemLocale</c>
                    </li>
                    <li>
                        <c>+ autoupdatingCurrentLocale</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ISOCountryCodes">
            <summary>
            Returns an array of <c>String</c> objects that represents all known legal country codes.
            <br></br>Equivalent to the native <c>ISOCountryCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents all known legal country codes.</p>
                <b>Discussion</b>
                <p>Note that many of country codes do not have any supporting locale data in OS X.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ISOCurrencyCodes">
            <summary>
            Returns an array of <c>String</c> objects that represents all known legal ISO currency codes.
            <br></br>Equivalent to the native <c>ISOCurrencyCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents all known legal ISO currency codes.</p>
                <b>Discussion</b>
                <p>Note that some of the currency codes may not have any supporting locale data in OS X.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ISOLanguageCodes">
            <summary>
            Returns an array of <c>String</c> objects that represents all known legal ISO language codes.
            <br></br>Equivalent to the native <c>ISOLanguageCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents all known legal ISO language codes.</p>
                <b>Discussion</b>
                <p>Note that many of the language codes do not have any supporting locale data in OS X.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LineDirection(System.String)">
            <summary>
            Returns the line direction for the specified ISO language code.
            <br></br>Equivalent to the native <c>lineDirectionForLanguage:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>isoLangCode</em>
                <p>The ISO language code.</p>
                <b>Return Value</b>
                <p>Returns the line direction for the language. See  “NSLocaleLanguageDirection”  for possible values. If the appropriate direction can’t be determined <c>NSLocaleLanguageDirectionUnknown</c> is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ characterDirectionForLanguage:</c>
                    </li>
                </ul>
            </remarks>
            <param name="isoLangCode">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LocaleIdentifierFromComponents(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Returns a locale identifier from the components specified in a given dictionary.
            <br></br>Equivalent to the native <c>localeIdentifierFromComponents:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>dict</em>
                <p>A dictionary containing components that specify a locale. For valid dictionary keys, see  “Constants.” </p>
                <b>Return Value</b>
                <p>A locale identifier created from the components specified in <em>dict</em>.</p>
                <b>Discussion</b>
                <p>This reverses the actions of <c>componentsFromLocaleIdentifier:</c>, so for example the dictionary <c>{NSLocaleLanguageCode="en", NSLocaleCountryCode="US", NSLocaleCalendar=NSJapaneseCalendar}</c> becomes <c>"en_US@calendar=japanese"</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ componentsFromLocaleIdentifier:</c>
                    </li>
                    <li>
                        <c>+ canonicalLocaleIdentifierFromString:</c>
                    </li>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                </ul>
            </remarks>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LocaleIdentifierFromWindowsLocaleCode(System.UInt32)">
            <summary>
            Returns a locale identifier from a Windows locale code.
            <br></br>Equivalent to the native <c>localeIdentifierFromWindowsLocaleCode:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>lcid</em>
                <p>The Windows locale code.</p>
                <b>Return Value</b>
                <p>The locale identifier.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ windowsLocaleCodeFromLocaleIdentifier:</c>
                    </li>
                </ul>
            </remarks>
            <param name="lcid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.PreferredLanguages">
            <summary>
            Returns the user's language preference order as an array of strings.
            <br></br>Equivalent to the native <c>preferredLanguages</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The user's language preference order as an array of <c>String</c> objects, each of which is a canonicalized IETF BCP 47 language identifier.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.SystemLocale">
            <summary>
            Returns the “root”, canonical locale, that contains fixed “backstop” settings that provide values for otherwise undefined keys.
            <br></br>Equivalent to the native <c>systemLocale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The “root”, canonical locale, that contains fixed “backstop” settings that provide values for otherwise undefined keys.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ autoupdatingCurrentLocale</c>
                    </li>
                    <li>
                        <c>+ currentLocale</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.WindowsLocaleCodeFromLocaleIdentifier(System.String)">
            <summary>
            Returns a Window locale code from the locale identifier.
            <br></br>Equivalent to the native <c>windowsLocaleCodeFromLocaleIdentifier:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>localeIdentifier</em>
                <p>The locale identifier.</p>
                <b>Return Value</b>
                <p>The Windows locale code.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ localeIdentifierFromWindowsLocaleCode:</c>
                    </li>
                </ul>
            </remarks>
            <param name="localeIdentifier">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.DisplayName(System.Object,System.Object)">
            <summary>
            Returns the display name for the given value.
            <br></br>Equivalent to the native <c>displayNameForKey:value:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>Specifies which of the locale property keys <em>value</em> is (see  “Constants” ),</p>
                <em>value</em>
                <p>A value for <em>key</em>.</p>
                <b>Return Value</b>
                <p>The display name for <em>value</em>.</p>
                <b>Discussion</b>
                <p>Not all locale property keys have values with display name values.</p>
                <p>You can use the <c>NSLocaleIdentifier</c> key to get the name of a locale in the language of another locale, as illustrated in the following examples. The first uses the fr_FR locale.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSLocale *frLocale = [[NSLocale alloc] initWithLocaleIdentifier:"fr_FR"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSString *displayNameString = [frLocale displayNameForKey:NSLocaleIdentifier value:"fr_FR"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString fr_FR: %", displayNameString);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString = [frLocale displayNameForKey:NSLocaleIdentifier value:"en_US"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString en_US: %", displayNameString);  </pre>
                        </td>
                    </tr>
                </table>
                <p>returns</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString fr_FR: français (France)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString en_US: anglais (États-Unis)  </pre>
                        </td>
                    </tr>
                </table>
                <p>The following example uses the en_GB locale.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSLocale *gbLocale = [[NSLocale alloc] initWithLocaleIdentifier:"en_GB"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString = [gbLocale displayNameForKey:NSLocaleIdentifier value:"fr_FR"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString fr_FR: %", displayNameString);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString = [gbLocale displayNameForKey:NSLocaleIdentifier value:"en_US"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString en_US: %", displayNameString);  </pre>
                        </td>
                    </tr>
                </table>
                <p>returns</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString fr_FR: French (France)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString en_US: English (United States)  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– localeIdentifier</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSLocale and initializes the object. Initializes the receiver using a given locale identifier.
            <br></br>Equivalent to the native <c>[[NSLocale alloc] initWithLocaleIdentifier:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The identifier for the new locale.</p>
                <b>Return Value</b>
                <p>The initialized locale.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LocaleIdentifier">
            <summary>
            Returns the identifier for the receiver.
            <br></br>Equivalent to the native <c>localeIdentifier</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The identifier for the receiver. This may not be the same string that the locale was created with, since <c>NSLocale</c> may canonicalize it.</p>
                <b>Discussion</b>
                <p>Equivalent to sending <c>objectForKey:</c> with key <c>NSLocaleIdentifier</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– displayNameForKey:value:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.Object(System.Object)">
            <summary>
            Returns the object corresponding to the specified key.
            <br></br>Equivalent to the native <c>objectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key for which to return the corresponding value. For valid values of <em>key</em>, see  “Constants.” </p>
                <b>Return Value</b>
                <p>The object corresponding to <em>key</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– displayNameForKey:value:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection">
            <summary>
            These constants describe the text direction for a language. Used by the methods <c>lineDirectionForLanguage:</c> and <c>characterDirectionForLanguage:</c>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.RightToLeft">
            <summary>
                <p>The language direction is from right to left.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionRightToLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.LeftToRight">
            <summary>
                <p>The language direction is from left to right.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionLeftToRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.Unknown">
            <summary>
                <p>The direction of the language is unknown.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.TopToBottom">
            <summary>
                <p>The language direction is from top to bottom.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionTopToBottom</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.BottomToTop">
            <summary>
                <p>The language direction is from bottom to top.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionBottomToTop</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNotification">
            <summary>
            NSNotification objects encapsulate information so that it can be broadcast to other objects by an NSNotificationCenter object. An NSNotification object (referred to as a notification) contains a name, an object, and an optional dictionary. The name is a tag identifying the notification. The object is any object that the poster of the notification wants to send to observers of that notification (typically, it is the object that posted the notification). The dictionary stores other related objects, if any. NSNotification objects are immutable objects.
            </summary>
            <remarks>
                <p>You can create a notification object with the class methods <c>notificationWithName:object:</c> or <c>notificationWithName:object:userInfo:</c>. However, you don’t usually create your own notifications directly. The NSNotificationCenter methods <c>postNotificationName:object:</c> and <c>postNotificationName:object:userInfo:</c> allow you to conveniently post a notification without creating it first.</p>
                <b>NSCopying Protocol</b>
                <p>The NSNotification class adopts the NSCopying protocol, making it possible to treat notifications as context-independent values that can be copied and reused. You can store a notification for later use or use the distributed objects system to send a notification to another process. The NSCopying protocol essentially allows clients to deal with notifications as first class values that can be copied by collections. You can put notifications in an array and send the <c>copy</c> message to that array, which recursively copies every item.</p>
                <b>Creating Subclasses</b>
                <p>You can subclass NSNotification to contain information in addition to the notification name, object, and dictionary. This extra data must be agreed upon between notifiers and observers.</p>
                <p>NSNotification is a class cluster with no instance variables. As such, you must subclass NSNotification and override the primitive methods <c>name</c>, <c>object</c>, and <c>userInfo</c>. You can choose any designated initializer you like, but be sure that your initializer does not call NSNotification’s implementation of <c>init</c> (via <c>[super init]</c>). NSNotification is not meant to be instantiated directly, and its <c>init</c> method raises an exception.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.UP_NSNotification_notificationWithName_object_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.UP_NSNotification_notificationWithName_object_userInfo_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.UP_NSNotification_name(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.UP_NSNotification_object(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.UP_NSNotification_userInfo(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSNotification" /> class.
            <br></br>Equivalent to the native <c>[[NSNotification alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSNotification.ClassExists">
            <summary>
            Returns whether the native NSNotification class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.Notification(System.String,System.Object)">
            <summary>
            Returns a new notification object with a specified name and object.
            <br></br>Equivalent to the native <c>notificationWithName:object:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aName</em>
                <p>The name for the new notification. May not be <c><!--a  -->nil<!--/a--></c>.</p>
                <em>anObject</em>
                <p>The object for the new notification.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– postNotificationName:object:</c> (NSNotificationCenter)</li>
                </ul>
            </remarks>
            <param name="aName">
            </param>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.Notification(System.String,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Returns a notification object with a specified name, object, and user information.
            <br></br>Equivalent to the native <c>notificationWithName:object:userInfo:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aName</em>
                <p>The name for the new notification. May not be <c><!--a  -->nil<!--/a--></c>.</p>
                <em>anObject</em>
                <p>The object for the new notification.</p>
                <em>userInfo</em>
                <p>The user information dictionary for the new notification. May be <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ notificationWithName:object:</c>
                    </li>
                    <li>
                        <c>– postNotificationName:object:userInfo:</c> (NSNotificationCenter)</li>
                </ul>
            </remarks>
            <param name="aName">
            </param>
            <param name="anObject">
            </param>
            <param name="aUserInfo">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.Name">
            <summary>
            Returns the name of the notification.
            <br></br>Equivalent to the native <c>name</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The name of the notification. Typically you use this method to find out what kind of notification you are dealing with when you receive a notification.</p>
                <b>Special Considerations</b>
                <p>Notification names can be any string. To avoid name collisions, you might want to use a prefix that’s specific to your application.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.Object">
            <summary>
            Returns the object associated with the notification.
            <br></br>Equivalent to the native <c>object</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The object associated with the notification. This is often the object that posted this notification. It may be <c><!--a  -->nil<!--/a--></c>.</p>
                <p>Typically you use this method to find out what object a notification applies to when you receive a notification.</p>
                <b>Discussion</b>
                <p>For example, suppose you’ve registered an object to receive the message <c>handlePortDeath:</c> when the “PortInvalid” notification is posted to the notification center and that <c>handlePortDeath:</c> needs to access the object monitoring the port that is now invalid. <c>handlePortDeath:</c> can retrieve that object as shown here:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>- (void)handlePortDeath:(NSNotification *)notification  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>{  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    ...  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [self reclaimResourcesForPort:[notification object]];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    ...  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotification.UserInfo">
            <summary>
            Returns the user information dictionary associated with the receiver.
            <br></br>Equivalent to the native <c>userInfo</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Returns the user information dictionary associated with the receiver. May be <c>null</c>.</p>
                <p>The user information dictionary stores any additional objects that objects receiving the notification might use.</p>
                <b>Discussion</b>
                <p>For example, in the Application Kit, NSControl objects post the <c><!--a target="_self" -->NSControlTextDidChangeNotification<!--/a--></c> whenever the field editor (an NSText object) changes text inside the NSControl. This notification provides the NSControl object as the notification's associated object. In order to provide access to the field editor, the NSControl object posting the notification adds the field editor to the notification's user information dictionary. Objects receiving the notification can access the field editor and the NSControl object posting the notification as follows:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>- (void)controlTextDidBeginEditing:(NSNotification *)notification  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>{  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSText *fieldEditor = [[notification userInfo]  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        objectForKey:"NSFieldEditor"];               // the field editor  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    NSControl *postingObject = [notification object]; // the object that posted the notification  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    ...  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>}  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNotificationCenter">
            <summary>
            An <c>NSNotificationCenter</c> object (or simply, <strong>notification center</strong>) provides a mechanism for broadcasting information within a program. An <c>NSNotificationCenter</c> object is essentially a notification dispatch table.
            </summary>
            <remarks>
                <p>Objects register with a notification center to receive notifications (<c>NSNotification</c> objects) using the <c>addObserver:selector:name:object:</c> or <c>addObserverForName:object:queue:usingBlock:</c> methods. Each invocation of this method specifies a set of notifications. Therefore, objects may register as observers of different notification sets by calling these methods several times.</p>
                <p>Each running Cocoa program has a default notification center. You typically don’t create your own. An <c>NSNotificationCenter</c> object can deliver notifications only within a single program. If you want to post a notification to other processes or receive notifications from other processes, use an instance of <c><!--a target="_self" -->NSDistributedNotificationCenter<!--/a--></c>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.UP_NSNotificationCenter_addObserverForName_object_queue_usingBlock_(System.String,System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.UP_NSNotificationCenter_removeObserver_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.AddObserver(System.String,U3DXT.iOS.Native.Foundation.NSObject,System.Action{U3DXT.iOS.Native.Foundation.NSNotification})">
            <summary>
            Adds an observer for notifications specified by the notification name and source object.
            </summary>
            <param name="notificationName">Notification name.</param>
            <param name="sender">Source object sending the notification.</param>
            <param name="observer">Observer or delegate to be called when the notification is dispatched.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.AddObserver(System.String,U3DXT.iOS.Native.Foundation.NSObject,System.EventHandler{U3DXT.iOS.Native.Foundation.NSNotificationEventArgs})">
            <summary>
            Adds an event delegate for notifications specified by the notification name and source object.
            </summary>
            <param name="notificationName">Notification name.</param>
            <param name="sender">Source object sending the notification.</param>
            <param name="eventDelegate">Event delegate to be called when the notification is dispatched.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.RemoveObserver(System.String,U3DXT.iOS.Native.Foundation.NSObject,System.Action{U3DXT.iOS.Native.Foundation.NSNotification})">
            <summary>
            Removes an observer from notifications specified by the notification name and source object.
            </summary>
            <param name="notificationName">Notification name.</param>
            <param name="sender">Source object sending the notification.</param>
            <param name="observer">Observer or delegate to be called when the notification is dispatched.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.RemoveObserver(System.String,U3DXT.iOS.Native.Foundation.NSObject,System.EventHandler{U3DXT.iOS.Native.Foundation.NSNotificationEventArgs})">
            <summary>
            Removes an event delegate from notifications specified by the notification name and source object.
            </summary>
            <param name="notificationName">Notification name.</param>
            <param name="sender">Source object sending the notification.</param>
            <param name="eventDelegate">Event delegate to be called when the notification is dispatched.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.UP_NSNotificationCenter_defaultCenter">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.UP_NSNotificationCenter_postNotification_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.UP_NSNotificationCenter_postNotificationName_object_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.UP_NSNotificationCenter_postNotificationName_object_userInfo_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSNotificationCenter" /> class.
            <br></br>Equivalent to the native <c>[[NSNotificationCenter alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSNotificationCenter.ClassExists">
            <summary>
            Returns whether the native NSNotificationCenter class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.DefaultCenter">
            <summary>
            Returns the process’s default notification center.
            <br></br>Equivalent to the native <c>defaultCenter</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The current process’s default notification center, which is used for system notifications.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.PostNotification(U3DXT.iOS.Native.Foundation.NSNotification)">
            <summary>
            Posts a given notification to the receiver.
            <br></br>Equivalent to the native <c>postNotification:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>notification</em>
                <p>The notification to post. This value must not be <c>null</c>.</p>
                <b>Discussion</b>
                <p>You can create a notification with the <c>NSNotification</c> class method <c>notificationWithName:object:</c> or <c>notificationWithName:object:userInfo:</c>. An exception is raised if <em>notification</em> is <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– postNotificationName:object:</c>
                    </li>
                    <li>
                        <c>– postNotificationName:object:userInfo:</c>
                    </li>
                </ul>
            </remarks>
            <param name="notification">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.PostNotificationName(System.String,System.Object)">
            <summary>
            Creates a notification with a given name and sender and posts it to the receiver.
            <br></br>Equivalent to the native <c>postNotificationName:object:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>notificationName</em>
                <p>The name of the notification.</p>
                <em>notificationSender</em>
                <p>The object posting the notification.</p>
                <b>Discussion</b>
                <p>This method invokes <c>postNotificationName:object:userInfo:</c> with a <em>userInfo</em> argument of <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– postNotification:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aName">
            </param>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationCenter.PostNotificationName(System.String,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates a notification with a given name, sender, and information and posts it to the receiver.
            <br></br>Equivalent to the native <c>postNotificationName:object:userInfo:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>notificationName</em>
                <p>The name of the notification.</p>
                <em>notificationSender</em>
                <p>The object posting the notification.</p>
                <em>userInfo</em>
                <p>Information about the the notification. May be <c>null</c>.</p>
                <b>Discussion</b>
                <p>This method is the preferred method for posting notifications.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– postNotificationName:object:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aName">
            </param>
            <param name="anObject">
            </param>
            <param name="aUserInfo">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNotificationEventArgs">
            <summary>
            Notification event arguments.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNotificationEventArgs.notification">
            <summary>
            The notification.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSNotificationEventArgs.name">
            <summary>
            The name of the notification.
            </summary>
            <value>The name of the notification.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSNotificationEventArgs.userInfo">
            <summary>
            The user info of the notification.
            </summary>
            <value>The user info of the notification.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNotificationEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSNotification)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.Foundation.NSNotificationEventArgs" /> class.
            </summary>
            <param name="notification">Notification.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNull">
            <summary>
            The <c>NSNull</c> class defines a singleton object used to represent null values in collection objects (which don’t allow <c>null</c> values).
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.UP_NSNull_null">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSNull" /> class.
            <br></br>Equivalent to the native <c>[[NSNull alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSNull.ClassExists">
            <summary>
            Returns whether the native NSNull class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.Null">
            <summary>
            Returns the singleton instance of <c>NSNull</c>.
            <br></br>Equivalent to the native <c>null</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The singleton instance of <c>NSNull</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNumberFormatter">
            <summary>
            Instances of <c>NSNumberFormatter</c> format the textual representation of cells that contain <c>double</c> objects and convert textual representations of numeric values into <c>double</c> objects. The representation encompasses integers, floats, and doubles; floats and doubles can be formatted to a specified decimal position. <c>NSNumberFormatter</c> objects can also impose ranges on the numeric values cells can accept.
            </summary>
            <remarks>
                <p>
                    <strong>Note:</strong>
                    <c>NSNumberFormatter</c> is not thread safe, so you must not mutate a given number formatter simultaneously from multiple threads.</p>
                <p>
                </p>
                <p>Many new methods were added to <c>NSNumberFormatter</c> for OS X v10.4 with the intent of making the class interface more like that of <c>CFNumberFormatter</c>, the Core Foundation service on which the class is based. The behavior of an <c>NSNumberFormatter</c> object can conform either to the range of behaviors existing prior to OS X v10.4 or to the range of behavior since that release. (Methods added for and since OS X v10.4 are indicated by a method’s availability statement.) You can determine the current formatter behavior with the <c>formatterBehavior</c> method and you can set the formatter behavior with the <c>setFormatterBehavior:</c> method.</p>
                <p>
                    <strong>iOS Note:</strong> iOS supports only the modern 10.4+ behavior. 10.0-style methods and format strings are not available on iOS.</p>
                <p>
                </p>
                <p>
                    <strong>Important:</strong>
            The pre-OS X v10.4 methods of <c>NSNumberFormatter</c> are not compatible with the methods added for OS X v10.4. An <c>NSNumberFormatter</c> object should not invoke methods in these different behavior groups indiscriminately. Use the old-style methods if you have configured the number-formatter behavior to be <c>NSNumberFormatterBehavior10_0</c>. Use the new methods instead of the older-style ones if you have configured the number-formatter behavior to be <c>NSNumberFormatterBehavior10_4</c>.</p>
                <p>
                </p>
                <p>Nomenclature note: <c>NSNumberFormatter</c> provides several methods (such as <c>setMaximumFractionDigits:</c>) that allow you to manage the number of <strong>fraction digits</strong> allowed as input by an instance: “fraction digits” are the numbers after the decimal separator (in English locales typically referred to as the “decimal point”).</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_defaultFormatterBehavior">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_localizedStringFromNumber_numberStyle_(System.Double,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setDefaultFormatterBehavior_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_allowsFloats(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_alwaysShowsDecimalSeparator(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_currencyCode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_currencyDecimalSeparator(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_currencyGroupingSeparator(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_currencySymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_decimalSeparator(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_exponentSymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_formatterBehavior(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_formatWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_generatesDecimalNumbers(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_groupingSeparator(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_groupingSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_internationalCurrencySymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_isLenient(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_isPartialStringValidationEnabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_locale(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_maximum(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_maximumFractionDigits(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_maximumIntegerDigits(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_maximumSignificantDigits(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_minimum(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_minimumFractionDigits(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_minimumIntegerDigits(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_minimumSignificantDigits(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_minusSign(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_multiplier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_negativeFormat(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_negativeInfinitySymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_negativePrefix(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_negativeSuffix(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_nilSymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_notANumberSymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_numberFromString_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_numberStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_paddingCharacter(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_paddingPosition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_percentSymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_perMillSymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_plusSign(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_positiveFormat(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_positiveInfinitySymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_positivePrefix(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_positiveSuffix(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_roundingIncrement(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_roundingMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_secondaryGroupingSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setAllowsFloats_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setAlwaysShowsDecimalSeparator_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setCurrencyCode_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setCurrencyDecimalSeparator_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setCurrencyGroupingSeparator_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setCurrencySymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setDecimalSeparator_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setExponentSymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setFormatterBehavior_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setFormatWidth_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setGeneratesDecimalNumbers_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setGroupingSeparator_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setGroupingSize_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setInternationalCurrencySymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setLenient_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setLocale_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMaximum_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMaximumFractionDigits_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMaximumIntegerDigits_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMaximumSignificantDigits_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMinimum_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMinimumFractionDigits_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMinimumIntegerDigits_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMinimumSignificantDigits_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMinusSign_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setMultiplier_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setNegativeFormat_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setNegativeInfinitySymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setNegativePrefix_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setNegativeSuffix_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setNilSymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setNotANumberSymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setNumberStyle_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPaddingCharacter_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPaddingPosition_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPartialStringValidationEnabled_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPercentSymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPerMillSymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPlusSign_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPositiveFormat_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPositiveInfinitySymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPositivePrefix_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setPositiveSuffix_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setRoundingIncrement_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setRoundingMode_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setSecondaryGroupingSize_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setUsesGroupingSeparator_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setUsesSignificantDigits_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_setZeroSymbol_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_stringFromNumber_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_usesGroupingSeparator(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_usesSignificantDigits(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UP_NSNumberFormatter_zeroSymbol(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSNumberFormatter" /> class.
            <br></br>Equivalent to the native <c>[[NSNumberFormatter alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSNumberFormatter.ClassExists">
            <summary>
            Returns whether the native NSNumberFormatter class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Default">
            <summary>
            Returns an <c>NSNumberFormatterBehavior</c> constant that indicates default formatter behavior for new instances of <c>NSNumberFormatter</c>.
            <br></br>Equivalent to the native <c>defaultFormatterBehavior</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>NSNumberFormatterBehavior</c> constant that indicates default formatter behavior for new instances of <c>NSNumberFormatter</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ setDefaultFormatterBehavior:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.LocalizedString(System.Double,U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle)">
            <summary>
            Returns a localized number string with the specified style.
            <br></br>Equivalent to the native <c>localizedStringFromNumber:numberStyle:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>num</em>
                <p>The number to localize</p>
                <em>localizationStyle</em>
                <p>The localization style to use. See  “NSNumberFormatterStyle”  for the supported values.</p>
                <b>Return Value</b>
                <p>An appropriately formatted <c>String</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="num">
            </param>
            <param name="nstyle">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetDefault(U3DXT.iOS.Native.Foundation.NSNumberFormatterBehavior)">
            <summary>
            Sets the default formatter behavior for new instances of <c>NSNumberFormatter</c> .
            <br></br>Equivalent to the native <c>setDefaultFormatterBehavior:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>behavior</em>
                <p>An <c>NSNumberFormatterBehavior</c> constant that indicates the revision of the class providing the default behavior. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ defaultFormatterBehavior</c>
                    </li>
                </ul>
            </remarks>
            <param name="behavior">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.AllowsFloats">
            <summary>
            Returns a Boolean value that indicates whether the receiver allows floating-point values as input.
            <br></br>Equivalent to the native <c>allowsFloats</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver allows as input floating-point values (that is, values that include the period character [<c>.</c>]), otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>When this method returns <c>false</c>, only integer values can be provided as input. The default is <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setAllowsFloats:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.AlwaysShowsDecimalSeparator">
            <summary>
            Returns a Boolean value that indicates whether the receiver always shows a decimal separator, even if the number is an integer.
            <br></br>Equivalent to the native <c>alwaysShowsDecimalSeparator</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver always shows a decimal separator, even if the number is an integer, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setAlwaysShowsDecimalSeparator:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.CurrencyCode">
            <summary>
            Returns the receiver’s currency code as a string.
            <br></br>Equivalent to the native <c>currencyCode</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s currency code as a string.</p>
                <b>Discussion</b>
                <p>A currency code is a three-letter code that is, in most cases, composed of a country’s two-character Internet country code plus an extra character to denote the currency unit. For example, the currency code for the Australian dollar is “AUD”. Currency codes are based on the ISO 4217 standard.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setCurrencyCode:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.CurrencyDecimalSeparator">
            <summary>
            Returns the receiver’s currency decimal separator as a string.
            <br></br>Equivalent to the native <c>currencyDecimalSeparator</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s currency decimal separator as a string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setCurrencyDecimalSeparator:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.CurrencyGroupingSeparator">
            <summary>
            Returns the currency grouping separator for the receiver.
            <br></br>Equivalent to the native <c>currencyGroupingSeparator</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The currency grouping separator for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setCurrencyGroupingSeparator:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.CurrencySymbol">
            <summary>
            Returns the receiver’s local currency symbol.
            <br></br>Equivalent to the native <c>currencySymbol</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A country typically has a local currency symbol and an international currency symbol. The local symbol is used within the country, while the international currency symbol is used in international contexts to specify that country’s currency unambiguously. The local currency symbol is often represented by a Unicode code point.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– internationalCurrencySymbol</c>
                    </li>
                    <li>
                        <c>– setCurrencySymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.DecimalSeparator">
            <summary>
            Returns a string containing the character the receiver uses to represent decimal separators.
            <br></br>Equivalent to the native <c>decimalSeparator</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing the character the receiver uses to represent decimal separators.</p>
                <b>Discussion</b>
                <p>The return value doesn’t indicate whether decimal separators are enabled.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDecimalSeparator:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.ExponentSymbol">
            <summary>
            Returns the string the receiver uses as an exponent symbol.
            <br></br>Equivalent to the native <c>exponentSymbol</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver uses as an exponent symbol.</p>
                <b>Discussion</b>
                <p>The exponent symbol is the “E” or “e” in the scientific notation of numbers, as in 1.0e+56.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setExponentSymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.FormatterBehavior">
            <summary>
            Returns an <c>NSNumberFormatterBehavior</c> constant that indicates the formatter behavior of the receiver.
            <br></br>Equivalent to the native <c>formatterBehavior</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>NSNumberFormatterBehavior</c> constant that indicates the formatter behavior of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setFormatterBehavior:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.FormatWidth">
            <summary>
            Returns the format width of the receiver.
            <br></br>Equivalent to the native <c>formatWidth</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The format width is the number of characters of a formatted number within a string that is either left justified or right justified based on the value returned from <c>paddingPosition</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setFormatWidth:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.GeneratesDecimalNumbers">
            <summary>
            Returns a Boolean value that indicates whether the receiver creates instances of <c>decimal</c> when it converts strings to number objects.
            <br></br>Equivalent to the native <c>generatesDecimalNumbers</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver creates instances of <c>decimal</c> when it converts strings to number objects, <c>false</c> if it creates instance of <c>double</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setGeneratesDecimalNumbers:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.GroupingSeparator">
            <summary>
            Returns a string containing the receiver’s grouping separator.
            <br></br>Equivalent to the native <c>groupingSeparator</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing the receiver’s grouping separator.</p>
                <b>Discussion</b>
                <p>For example, the grouping separator used in the United States is the comma (“10,000”) whereas in France it is the space (“10 000”).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setGroupingSeparator:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.GroupingSize">
            <summary>
            Returns the receiver’s primary grouping size.
            <br></br>Equivalent to the native <c>groupingSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s primary grouping size.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setGroupingSize:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.InternationalCurrencySymbol">
            <summary>
            Returns the international currency symbol used by the receiver.
            <br></br>Equivalent to the native <c>internationalCurrencySymbol</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A country typically has a local currency symbol and an international currency symbol. The local symbol is used within the country, while the international currency symbol is used in international contexts to specify that country’s currency unambiguously. The international currency symbol is often represented by a Unicode code point.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currencySymbol</c>
                    </li>
                    <li>
                        <c>– setInternationalCurrencySymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.IsLenient">
            <summary>
            Returns a Boolean value that indicates whether the receiver uses heuristics to guess at the number which is intended by a string.
            <br></br>Equivalent to the native <c>isLenient</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver uses heuristics to guess at the number which is intended by the string; otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setLenient:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.IsPartialStringValidationEnabled">
            <summary>
            Returns a Boolean value that indicates whether partial string validation is enabled.
            <br></br>Equivalent to the native <c>isPartialStringValidationEnabled</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if partial string validation is enabled, otherwise <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPartialStringValidationEnabled:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Locale">
            <summary>
            Returns the locale of the receiver.
            <br></br>Equivalent to the native <c>locale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The locale of the receiver.</p>
                <b>Discussion</b>
                <p>A number formatter’s locale specifies default localization attributes, such as ISO country and language codes, currency code, calendar, system of measurement, and decimal separator.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setLocale:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Maximum">
            <summary>
            Returns the highest number allowed as input by the receiver.
            <br></br>Equivalent to the native <c>maximum</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The highest number allowed as input by the receiver or <c>null</c>, meaning no limit.</p>
                <b>Discussion</b>
                <p>For versions prior to OS X v10.4 (and number-formatter behavior set to <c>NSNumberFormatterBehavior10_0</c>) this method returns an <c>decimal</c> object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMaximum:</c>
                    </li>
                    <li>
                        <c>+ setDefaultFormatterBehavior:</c>
                    </li>
                    <li>
                        <c>– formatterBehavior</c>
                    </li>
                    <li>
                        <c>– setFormatterBehavior:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.MaximumFractionDigits">
            <summary>
            Returns the maximum number of digits after the decimal separator allowed as input by the receiver.
            <br></br>Equivalent to the native <c>maximumFractionDigits</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The maximum number of digits after the decimal separator allowed as input by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMaximumFractionDigits:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.MaximumIntegerDigits">
            <summary>
            Returns the maximum number of integer digits allowed as input by the receiver.
            <br></br>Equivalent to the native <c>maximumIntegerDigits</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The maximum number of integer digits allowed as input by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMaximumIntegerDigits:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.MaximumSignificantDigits">
            <summary>
            Returns the maximum number of significant digits for the receiver.
            <br></br>Equivalent to the native <c>maximumSignificantDigits</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The maximum number of significant digits for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMaximumSignificantDigits:</c>
                    </li>
                    <li>
                        <c>– minimumSignificantDigits</c>
                    </li>
                    <li>
                        <c>– usesSignificantDigits</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Minimum">
            <summary>
            Returns the lowest number allowed as input by the receiver.
            <br></br>Equivalent to the native <c>minimum</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The lowest number allowed as input by the receiver or <c>null</c>, meaning no limit.</p>
                <b>Discussion</b>
                <p>For versions prior to OS X v10.4 (and number-formatter behavior set to <c>NSNumberFormatterBehavior10_0</c>) this method returns an <c>decimal</c> object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinimum:</c>
                    </li>
                    <li>
                        <c>+ setDefaultFormatterBehavior:</c>
                    </li>
                    <li>
                        <c>– formatterBehavior</c>
                    </li>
                    <li>
                        <c>– setFormatterBehavior:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.MinimumFractionDigits">
            <summary>
            Returns the minimum number of digits after the decimal separator allowed as input by the receiver.
            <br></br>Equivalent to the native <c>minimumFractionDigits</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The minimum number of digits after the decimal separator allowed as input by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinimumFractionDigits:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.MinimumIntegerDigits">
            <summary>
            Returns the minimum number of integer digits allowed as input by the receiver.
            <br></br>Equivalent to the native <c>minimumIntegerDigits</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The minimum number of integer digits allowed as input by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinimumIntegerDigits:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.MinimumSignificantDigits">
            <summary>
            Returns the minimum number of significant digits for the receiver.
            <br></br>Equivalent to the native <c>minimumSignificantDigits</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The minimum number of significant digits for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinimumSignificantDigits:</c>
                    </li>
                    <li>
                        <c>– maximumSignificantDigits</c>
                    </li>
                    <li>
                        <c>– usesSignificantDigits</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.MinusSign">
            <summary>
            Returns the string the receiver uses to represent the minus sign.
            <br></br>Equivalent to the native <c>minusSign</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string that represents the receiver’s minus sign.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMinusSign:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Multiplier">
            <summary>
            Returns the multiplier used by the receiver as an <c>double</c> object.
            <br></br>Equivalent to the native <c>multiplier</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A multiplier is a factor used in conversions between numbers and strings (that is, numbers as stored and numbers as displayed). When the input value is a string, the multiplier is used to divide, and when the input value is a number, the multiplier is used to multiply. These operations allow the formatted values to be different from the values that a program manipulates internally.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setMultiplier:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Negative">
            <summary>
            Returns the format used by the receiver to display negative numbers.
            <br></br>Equivalent to the native <c>negativeFormat</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setNegativeFormat:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.NegativeInfinitySymbol">
            <summary>
            Returns the symbol the receiver uses to represent negative infinity.
            <br></br>Equivalent to the native <c>negativeInfinitySymbol</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The symbol the receiver uses to represent negative infinity.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setNegativeInfinitySymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.NegativePrefix">
            <summary>
            Returns the string the receiver inserts as a prefix to negative values.
            <br></br>Equivalent to the native <c>negativePrefix</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver inserts as a prefix to negative values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– negativeSuffix</c>
                    </li>
                    <li>
                        <c>– setNegativePrefix:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.NegativeSuffix">
            <summary>
            Returns the string the receiver adds as a suffix to negative values.
            <br></br>Equivalent to the native <c>negativeSuffix</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver adds as a suffix to negative values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– negativePrefix</c>
                    </li>
                    <li>
                        <c>– setNegativeSuffix:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.NilSymbol">
            <summary>
            Returns the string the receiver uses to represent a <c>null</c> value.
            <br></br>Equivalent to the native <c>nilSymbol</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver uses to represent a <c>null</c> value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setNilSymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.NotANumberSymbol">
            <summary>
            Returns the symbol the receiver uses to represent NaN (“not a number”) when it converts values.
            <br></br>Equivalent to the native <c>notANumberSymbol</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The symbol the receiver uses to represent NaN (“not a number”) when it converts values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setNotANumberSymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Number(System.String)">
            <summary>
            Returns an <c>double</c> object created by parsing a given string.
            <br></br>Equivalent to the native <c>numberFromString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>An <c>String</c> object that is parsed to generate the returned number object. </p>
                <b>Return Value</b>
                <p>An <c>double</c> object created by parsing <em>string</em> using the receiver’s format.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– stringFromNumber:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.NumberStyle">
            <summary>
            Returns the number-formatter style of the receiver.
            <br></br>Equivalent to the native <c>numberStyle</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>NSNumberFormatterStyle</c> constant that indicates the number-formatter style of the receiver.</p>
                <b>Discussion</b>
                <p>Styles are essentially predetermined sets of values for certain properties. Examples of number-formatter styles are those used for decimal values, percentage values, and currency.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setNumberStyle:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PaddingCharacter">
            <summary>
            Returns a string containing the padding character for the receiver.
            <br></br>Equivalent to the native <c>paddingCharacter</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPaddingCharacter:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PaddingPosition">
            <summary>
            Returns the padding position of the receiver.
            <br></br>Equivalent to the native <c>paddingPosition</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The returned constant indicates whether the padding is before or after the number’s prefix or suffix.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPaddingPosition:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PercentSymbol">
            <summary>
            Returns the string that the receiver uses to represent the percent symbol.
            <br></br>Equivalent to the native <c>percentSymbol</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPercentSymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PerMillSymbol">
            <summary>
            Returns the string that the receiver uses for the per-thousands symbol.
            <br></br>Equivalent to the native <c>perMillSymbol</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string that the receiver uses for the per-thousands symbol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPerMillSymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PlusSign">
            <summary>
            Returns the string the receiver uses for the plus sign.
            <br></br>Equivalent to the native <c>plusSign</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver uses for the plus sign.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPlusSign:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Positive">
            <summary>
            Returns  the format used by the receiver to display positive numbers.
            <br></br>Equivalent to the native <c>positiveFormat</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPositiveFormat:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PositiveInfinitySymbol">
            <summary>
            Returns the string the receiver uses for the positive infinity symbol.
            <br></br>Equivalent to the native <c>positiveInfinitySymbol</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver uses for the positive infinity symbol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPositiveInfinitySymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PositivePrefix">
            <summary>
            Returns the string the receiver uses as the prefix for positive values.
            <br></br>Equivalent to the native <c>positivePrefix</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver uses as the prefix for positive values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPositivePrefix:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.PositiveSuffix">
            <summary>
            Returns the string the receiver uses as the suffix for positive values.
            <br></br>Equivalent to the native <c>positiveSuffix</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver uses as the suffix for positive values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setPositiveSuffix:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.RoundingIncrement">
            <summary>
            Returns the rounding increment used by the receiver.
            <br></br>Equivalent to the native <c>roundingIncrement</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The rounding increment used by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setRoundingIncrement:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.RoundingMode">
            <summary>
            Returns the rounding mode used by the receiver.
            <br></br>Equivalent to the native <c>roundingMode</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The rounding mode used by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setRoundingMode:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SecondaryGroupingSize">
            <summary>
            Returns the size of secondary groupings for the receiver.
            <br></br>Equivalent to the native <c>secondaryGroupingSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The size of secondary groupings for the receiver.</p>
                <b>Discussion</b>
                <p>Some locales allow the specification of another grouping size for larger numbers. For example, some locales may represent a number such as 61, 242, 378.46 (as in the United States) as 6,12,42,378.46. In this case, the secondary grouping size (covering the groups of digits furthest from the decimal point) is 2.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setSecondaryGroupingSize:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetAllowsFloats(System.Boolean)">
            <summary>
            Sets whether the receiver allows as input floating-point values (that is, values that include the period character [<c>.</c>]).
            <br></br>Equivalent to the native <c>setAllowsFloats:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>
                    <c>true</c> if the receiver allows floating-point values, <c>false</c> otherwise.</p>
                <b>Discussion</b>
                <p>By default, floating point values are allowed as input.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– allowsFloats</c>
                    </li>
                </ul>
            </remarks>
            <param name="flag">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetAlwaysShowsDecimalSeparator(System.Boolean)">
            <summary>
            Controls whether the receiver always shows the decimal separator, even for integer numbers.
            <br></br>Equivalent to the native <c>setAlwaysShowsDecimalSeparator:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>
                    <c>true</c> if the receiver should always show the decimal separator, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– alwaysShowsDecimalSeparator</c>
                    </li>
                </ul>
            </remarks>
            <param name="b">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetCurrencyCode(System.String)">
            <summary>
            Sets the receiver’s currency code.
            <br></br>Equivalent to the native <c>setCurrencyCode:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string specifying the receiver's new currency code.</p>
                <b>Discussion</b>
                <p>A currency code is a three-letter code that is, in most cases, composed of a country’s two-character Internet country code plus an extra character to denote the currency unit. For example, the currency code for the Australian dollar is “AUD”. Currency codes are based on the ISO 4217 standard.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currencyCode</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetCurrencyDecimalSeparator(System.String)">
            <summary>
            Sets the string used by the receiver as a decimal separator.
            <br></br>Equivalent to the native <c>setCurrencyDecimalSeparator:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The string to use as the currency decimal separator.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currencyDecimalSeparator</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetCurrencyGroupingSeparator(System.String)">
            <summary>
            Sets the currency grouping separator for the receiver.
            <br></br>Equivalent to the native <c>setCurrencyGroupingSeparator:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The currency grouping separator for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currencyGroupingSeparator</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetCurrencySymbol(System.String)">
            <summary>
            Sets the string used by the receiver as a local currency symbol.
            <br></br>Equivalent to the native <c>setCurrencySymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a local currency symbol.</p>
                <b>Discussion</b>
                <p>The local symbol is used within the country, while the international currency symbol is used in international contexts to specify that country’s currency unambiguously. The local currency symbol is often represented by a Unicode code point.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– currencySymbol</c>
                    </li>
                    <li>
                        <c>– setInternationalCurrencySymbol:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetDecimalSeparator(System.String)">
            <summary>
            Sets the character the receiver uses as a decimal separator.
            <br></br>Equivalent to the native <c>setDecimalSeparator:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>newSeparator</em>
                <p>The string that specifies the decimal-separator character to use. If <em>newSeparator</em> contains multiple characters, only the first one is used. </p>
                <b>Discussion</b>
                <p>If you don’t have decimal separators enabled through another means (such as <c>setFormat:</c>), using this method enables them.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– decimalSeparator</c>
                    </li>
                    <li>
                        <c>– formatterBehavior</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetExponentSymbol(System.String)">
            <summary>
            Sets the string used by the receiver to represent the exponent symbol.
            <br></br>Equivalent to the native <c>setExponentSymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents an exponent symbol.</p>
                <b>Discussion</b>
                <p>The exponent symbol is the “E” or “e” in the scientific notation of numbers, as in 1.0e+56.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– exponentSymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Set(U3DXT.iOS.Native.Foundation.NSNumberFormatterBehavior)">
            <summary>
            Sets the formatter behavior of the receiver.
            <br></br>Equivalent to the native <c>setFormatterBehavior:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>behavior</em>
                <p>An <c>NSNumberFormatterBehavior</c> constant that indicates the revision of the <c>NSNumberFormatter</c> class providing the current behavior.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– formatterBehavior</c>
                    </li>
                </ul>
            </remarks>
            <param name="behavior">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.Set(System.UInt32)">
            <summary>
            Sets the format width used by the receiver.
            <br></br>Equivalent to the native <c>setFormatWidth:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>An integer that specifies the format width.</p>
                <b>Discussion</b>
                <p>The format width is the number of characters of a formatted number within a string that is either left justified or right justified based on the value returned from <c>paddingPosition</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– formatWidth</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetGeneratesDecimalNumbers(System.Boolean)">
            <summary>
            Controls whether the receiver creates instances of <c>decimal</c> when it converts strings to number objects.
            <br></br>Equivalent to the native <c>setGeneratesDecimalNumbers:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>
                    <c>true</c> if the receiver should generate <c>decimal</c> instances, <c>false</c> if it should generate <c>double</c> instances.</p>
                <b>Discussion</b>
                <p>The default is <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– generatesDecimalNumbers</c>
                    </li>
                </ul>
            </remarks>
            <param name="b">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetGroupingSeparator(System.String)">
            <summary>
            Specifies the string used by the receiver for a grouping separator.
            <br></br>Equivalent to the native <c>setGroupingSeparator:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that specifies the grouping separator to use.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– groupingSeparator</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetGroupingSize(System.UInt32)">
            <summary>
            Sets the grouping size of the receiver.
            <br></br>Equivalent to the native <c>setGroupingSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>numDigits</em>
                <p>An integer that specifies the grouping size.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– groupingSize</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetInternationalCurrencySymbol(System.String)">
            <summary>
            Sets the string used by the receiver for the international currency symbol.
            <br></br>Equivalent to the native <c>setInternationalCurrencySymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents an international currency symbol.</p>
                <b>Discussion</b>
                <p>The local symbol is used within the country, while the international currency symbol is used in international contexts to specify that country’s currency unambiguously. The local currency symbol is often represented by a Unicode code point.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– internationalCurrencySymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetLenient(System.Boolean)">
            <summary>
            Sets whether the receiver will use heuristics to guess at the number which is intended by a string.
            <br></br>Equivalent to the native <c>setLenient:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>b</em>
                <p>
                    <c>true</c> if the receiver will use heuristics to guess at the number which is intended by the string; otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>If the formatter is set to be lenient, as with any guessing it may get the result number wrong (that is, a number other than that which was intended).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isLenient</c>
                    </li>
                </ul>
            </remarks>
            <param name="b">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetLocale(U3DXT.iOS.Native.Foundation.NSLocale)">
            <summary>
            Sets the locale of the receiver.
            <br></br>Equivalent to the native <c>setLocale:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theLocale</em>
                <p>An <c>NSLocale</c> object representing the new locale of the receiver.</p>
                <b>Discussion</b>
                <p>The locale determines the default values for many formatter attributes, such as ISO country and language codes, currency code, calendar, system of measurement, and decimal separator.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– locale</c>
                    </li>
                </ul>
            </remarks>
            <param name="locale">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMaximum(System.Double)">
            <summary>
            Sets the highest number the receiver allows as input.
            <br></br>Equivalent to the native <c>setMaximum:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aMaximum</em>
                <p>A number object that specifies a maximum input value.</p>
                <b>Discussion</b>
                <p>If <em>aMaximum</em> is <c>null</c>, checking for the maximum value is disabled. For versions prior to OS X v10.4 (and number-formatter behavior set to <c>NSNumberFormatterBehavior10_0</c>) this method requires an <c>decimal</c> argument.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– maximum</c>
                    </li>
                    <li>
                        <c>+ setDefaultFormatterBehavior:</c>
                    </li>
                    <li>
                        <c>– formatterBehavior</c>
                    </li>
                    <li>
                        <c>– setFormatterBehavior:</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMaximumFractionDigits(System.UInt32)">
            <summary>
            Sets the maximum number of digits after the decimal separator allowed as input by the receiver.
            <br></br>Equivalent to the native <c>setMaximumFractionDigits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>The maximum number of digits after the decimal separator allowed as input.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– maximumFractionDigits</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMaximumIntegerDigits(System.UInt32)">
            <summary>
            Sets the maximum number of integer digits allowed as input by the receiver.
            <br></br>Equivalent to the native <c>setMaximumIntegerDigits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>The maximum number of integer digits allowed as input.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minimumIntegerDigits</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMaximumSignificantDigits(System.UInt32)">
            <summary>
            Sets the maximum number of significant digits for the receiver.
            <br></br>Equivalent to the native <c>setMaximumSignificantDigits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>The maximum number of significant digits for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– maximumSignificantDigits</c>
                    </li>
                    <li>
                        <c>– setMinimumSignificantDigits:</c>
                    </li>
                    <li>
                        <c>– usesSignificantDigits</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMinimum(System.Double)">
            <summary>
            Sets the lowest number the receiver allows as input.
            <br></br>Equivalent to the native <c>setMinimum:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aMinimum</em>
                <p>A number object that specifies a minimum input value.</p>
                <b>Discussion</b>
                <p>If <em>aMinimum</em> is <c>null</c>, checking for the minimum value is disabled. For versions prior to OS X v10.4 (and number-formatter behavior set to <c>NSNumberFormatterBehavior10_0</c>) this method requires an <c>decimal</c> argument. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minimum</c>
                    </li>
                    <li>
                        <c>+ setDefaultFormatterBehavior:</c>
                    </li>
                    <li>
                        <c>– formatterBehavior</c>
                    </li>
                    <li>
                        <c>– setFormatterBehavior:</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMinimumFractionDigits(System.UInt32)">
            <summary>
            Sets the minimum number of digits after the decimal separator allowed as input by the receiver.
            <br></br>Equivalent to the native <c>setMinimumFractionDigits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>The minimum number of digits after the decimal separator allowed as input.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minimumFractionDigits</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMinimumIntegerDigits(System.UInt32)">
            <summary>
            Sets the minimum number of integer digits allowed as input by the receiver.
            <br></br>Equivalent to the native <c>setMinimumIntegerDigits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>The minimum number of integer digits allowed as input.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minimumIntegerDigits</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMinimumSignificantDigits(System.UInt32)">
            <summary>
            Sets the minimum number of significant digits for the receiver.
            <br></br>Equivalent to the native <c>setMinimumSignificantDigits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>The minimum number of significant digits for the receiver. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minimumSignificantDigits</c>
                    </li>
                    <li>
                        <c>– setMaximumSignificantDigits:</c>
                    </li>
                    <li>
                        <c>– usesSignificantDigits</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMinusSign(System.String)">
            <summary>
            Sets the string used by the receiver for the minus sign.
            <br></br>Equivalent to the native <c>setMinusSign:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a minus sign.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– minusSign</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetMultiplier(System.Double)">
            <summary>
            Sets the multiplier of the receiver.
            <br></br>Equivalent to the native <c>setMultiplier:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>A number object that represents a multiplier.</p>
                <b>Discussion</b>
                <p>A multiplier is a factor used in conversions between numbers and strings (that is, numbers as stored and numbers as displayed). When the input value is a string, the multiplier is used to divide, and when the input value is a number, the multiplier is used to multiply. These operations allow the formatted values to be different from the values that a program manipulates internally.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– multiplier</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetNegative(System.String)">
            <summary>
            Sets the format the receiver uses to display negative values.
            <br></br>Equivalent to the native <c>setNegativeFormat:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aFormat</em>
                <p>A string that specifies the format for negative values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– negativeFormat</c>
                    </li>
                </ul>
            </remarks>
            <param name="format">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetNegativeInfinitySymbol(System.String)">
            <summary>
            Sets the string used by the receiver for the negative infinity symbol.
            <br></br>Equivalent to the native <c>setNegativeInfinitySymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a negative infinity symbol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– negativeInfinitySymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetNegativePrefix(System.String)">
            <summary>
            Sets the string the receiver uses as a prefix for negative values.
            <br></br>Equivalent to the native <c>setNegativePrefix:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string to use as the prefix for negative values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– negativePrefix</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetNegativeSuffix(System.String)">
            <summary>
            Sets the string the receiver uses as a suffix for negative values.
            <br></br>Equivalent to the native <c>setNegativeSuffix:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string to use as the suffix for negative values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– negativeSuffix</c>
                    </li>
                    <li>
                        <c>– negativePrefix</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetNilSymbol(System.String)">
            <summary>
            Sets the string the receiver uses to represent <c>null</c> values.
            <br></br>Equivalent to the native <c>setNilSymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a <c>null</c> value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– nilSymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetNotANumberSymbol(System.String)">
            <summary>
            Sets the string the receiver uses to represent NaN (“not a number”).
            <br></br>Equivalent to the native <c>setNotANumberSymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a NaN symbol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– notANumberSymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetNumberStyle(U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle)">
            <summary>
            Sets the number style used by the receiver.
            <br></br>Equivalent to the native <c>setNumberStyle:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>style</em>
                <p>An <c>NSNumberFormatterStyle</c> constant that specifies a formatter style. </p>
                <b>Discussion</b>
                <p>Styles are essentially predetermined sets of values for certain properties. Examples of number-formatter styles are those used for decimal values, percentage values, and currency.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– numberStyle</c>
                    </li>
                </ul>
            </remarks>
            <param name="style">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPaddingCharacter(System.String)">
            <summary>
            Sets the string that the receiver uses to pad numbers in the formatted string representation.
            <br></br>Equivalent to the native <c>setPaddingCharacter:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string containing a padding character (or characters).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– paddingCharacter</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPaddingPosition(U3DXT.iOS.Native.Foundation.NSNumberFormatterPadPosition)">
            <summary>
            Sets the padding position used by the receiver.
            <br></br>Equivalent to the native <c>setPaddingPosition:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>position</em>
                <p>An <c>NSNumberFormatterPadPosition</c> constant that indicates a padding position (before or after prefix or suffix).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– paddingPosition</c>
                    </li>
                </ul>
            </remarks>
            <param name="position">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPartialStringValidationEnabled(System.Boolean)">
            <summary>
            Sets whether partial string validation is enabled for the receiver.
            <br></br>Equivalent to the native <c>setPartialStringValidationEnabled:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>enabled</em>
                <p>
                    <c>true</c> if partial string validation is enabled, otherwise <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isPartialStringValidationEnabled</c>
                    </li>
                </ul>
            </remarks>
            <param name="b">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPercentSymbol(System.String)">
            <summary>
            Sets the string used by the receiver to represent the percent symbol.
            <br></br>Equivalent to the native <c>setPercentSymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a percent symbol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– percentSymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPerMillSymbol(System.String)">
            <summary>
            Sets the string used by the receiver to represent the per-mill (per-thousand) symbol.
            <br></br>Equivalent to the native <c>setPerMillSymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a per-mill symbol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– perMillSymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPlusSign(System.String)">
            <summary>
            Sets the string used by the receiver to represent the plus sign.
            <br></br>Equivalent to the native <c>setPlusSign:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a plus sign.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– plusSign</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPositive(System.String)">
            <summary>
            Sets the format the receiver uses to display positive values.
            <br></br>Equivalent to the native <c>setPositiveFormat:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aFormat</em>
                <p>A string that specifies the format for positive values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– positiveFormat</c>
                    </li>
                </ul>
            </remarks>
            <param name="format">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPositiveInfinitySymbol(System.String)">
            <summary>
            Sets the string used by the receiver for the positive infinity symbol.
            <br></br>Equivalent to the native <c>setPositiveInfinitySymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string that represents a positive infinity symbol.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– positiveInfinitySymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPositivePrefix(System.String)">
            <summary>
            Sets the string the receiver uses as the prefix for positive values.
            <br></br>Equivalent to the native <c>setPositivePrefix:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string to use as the prefix for positive values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– positivePrefix</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetPositiveSuffix(System.String)">
            <summary>
            Sets the string the receiver uses as the suffix for positive values.
            <br></br>Equivalent to the native <c>setPositiveSuffix:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string to use as the suffix for positive values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– positiveSuffix</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetRoundingIncrement(System.Double)">
            <summary>
            Sets the rounding increment used by the receiver.
            <br></br>Equivalent to the native <c>setRoundingIncrement:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>A number object specifying a rounding increment.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– roundingIncrement</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetRoundingMode(U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode)">
            <summary>
            Sets the rounding mode used by the receiver.
            <br></br>Equivalent to the native <c>setRoundingMode:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>mode</em>
                <p>An <c>NSNumberFormatterRoundingMode</c> constant that indicates a rounding mode.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– roundingMode</c>
                    </li>
                </ul>
            </remarks>
            <param name="mode">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetSecondaryGroupingSize(System.UInt32)">
            <summary>
            Sets the secondary grouping size of the receiver.
            <br></br>Equivalent to the native <c>setSecondaryGroupingSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>An integer that specifies the size of secondary groupings.</p>
                <b>Discussion</b>
                <p>Some locales allow the specification of another grouping size for larger numbers. For example, some locales may represent a number such as 61, 242, 378.46 (as in the United States) as 6,12,42,378.46. In this case, the secondary grouping size (covering the groups of digits furthest from the decimal point) is 2.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– secondaryGroupingSize</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetUsesGroupingSeparator(System.Boolean)">
            <summary>
            Controls whether the receiver displays the grouping separator.
            <br></br>Equivalent to the native <c>setUsesGroupingSeparator:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>
                    <c>true</c> if the receiver should display the grouping separator, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– usesGroupingSeparator</c>
                    </li>
                </ul>
            </remarks>
            <param name="b">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetUsesSignificantDigits(System.Boolean)">
            <summary>
            Sets whether the receiver uses significant digits.
            <br></br>Equivalent to the native <c>setUsesSignificantDigits:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>b</em>
                <p>
                    <c>true</c> if the receiver uses significant digits, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– usesSignificantDigits</c>
                    </li>
                    <li>
                        <c>– setMaximumSignificantDigits:</c>
                    </li>
                    <li>
                        <c>– setMinimumSignificantDigits:</c>
                    </li>
                </ul>
            </remarks>
            <param name="b">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.SetZeroSymbol(System.String)">
            <summary>
            Sets the string the receiver uses as the symbol to show the value zero.
            <br></br>Equivalent to the native <c>setZeroSymbol:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The string the receiver uses as the symbol to show the value zero.</p>
                <b>Discussion</b>
                <p>By default this is <c>0</c>; you might want to set it to, for example, “<c> - </c>”, similar to the way that a spreadsheet might  when a column is defined as accounting.</p>
                <b>Special Considerations</b>
                <p>On OS X v10.4, this method works correctly for 10_0-style number formatters but does not work correctly for 10_4-style number formatters. You can work around the problem by subclassing and overriding the methods that convert between strings and numbers to look for the zero cases first and provide different behavior, invoking <c>super</c> when not zero.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– zeroSymbol</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.String(System.Double)">
            <summary>
            Returns a string containing the formatted value of the provided number object.
            <br></br>Equivalent to the native <c>stringFromNumber:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>number</em>
                <p>An <c>double</c> object that is parsed to create the returned string object.</p>
                <b>Return Value</b>
                <p>A string containing the formatted value of <em>number</em> using the receiver’s current settings.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– numberFromString:</c>
                    </li>
                </ul>
            </remarks>
            <param name="number">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UsesGroupingSeparator">
            <summary>
            Returns a Boolean value that indicates whether the receiver uses the grouping separator.
            <br></br>Equivalent to the native <c>usesGroupingSeparator</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver uses the grouping separator, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setUsesGroupingSeparator:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.UsesSignificantDigits">
            <summary>
            Returns a Boolean value that indicates whether the receiver uses significant digits.
            <br></br>Equivalent to the native <c>usesSignificantDigits</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver uses significant digits, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setUsesSignificantDigits:</c>
                    </li>
                    <li>
                        <c>– maximumSignificantDigits</c>
                    </li>
                    <li>
                        <c>– minimumSignificantDigits</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNumberFormatter.ZeroSymbol">
            <summary>
            Returns the string the receiver uses as the symbol to show the value zero.
            <br></br>Equivalent to the native <c>zeroSymbol</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The string the receiver uses as the symbol to show the value zero.</p>
                <b>Discussion</b>
                <p>For a discussion of how this is used, see <c>setZeroSymbol:</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setZeroSymbol:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNumberFormatterBehavior">
            <summary>
            These constants specify the behavior of a number formatter. These constants are returned by the <c>defaultFormatterBehavior</c> class method and the <c>formatterBehavior</c> instance methods; you set them with the <c>setDefaultFormatterBehavior:</c> class method and the <c>setFormatterBehavior:</c> instance method.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterBehavior.Behavior10_4">
            <summary>
                <p>The number-formatter behavior since OS X v10.4.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterBehavior10_4</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterBehavior.BehaviorDefault">
            <summary>
                <p>The number-formatter behavior set as the default for new instances. You can set the default formatter behavior with the class method <c>setDefaultFormatterBehavior:</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterBehaviorDefault</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNumberFormatterPadPosition">
            <summary>
            These constants are used to specify how numbers should be padded. These constants are used by the <c>paddingPosition</c> and <c>setPaddingPosition:</c> methods.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterPadPosition.BeforePrefix">
            <summary>
                <p>Specifies that the padding should occur before the prefix.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterPadBeforePrefix</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterPadPosition.AfterSuffix">
            <summary>
                <p>Specifies that the padding should occur after the suffix.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterPadAfterSuffix</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterPadPosition.BeforeSuffix">
            <summary>
                <p>Specifies that the padding should occur before the suffix.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterPadBeforeSuffix</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterPadPosition.AfterPrefix">
            <summary>
                <p>Specifies that the padding should occur after the prefix.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterPadAfterPrefix</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode">
            <summary>
            These constants are used to specify how numbers should be rounded. These constants are used by the <c>roundingMode</c>and <c>setRoundingMode:</c> methods.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode.HalfDown">
            <summary>
                <p>Round down when a 5 follows putative last digit.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterRoundHalfDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode.HalfUp">
            <summary>
                <p>Round up when a 5 follows putative last digit.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterRoundHalfUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode.Ceiling">
            <summary>
                <p>Round up to next larger number with the proper number of digits after the decimal separator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterRoundCeiling</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode.Floor">
            <summary>
                <p>Round down to next smaller number with the proper number of digits after the decimal separator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterRoundFloor</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode.Down">
            <summary>
                <p>Round down to next smaller number with the proper number of digits after the decimal separator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterRoundDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode.Up">
            <summary>
                <p>Round up to next larger number with the proper number of digits after the decimal separator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterRoundUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterRoundingMode.HalfEven">
            <summary>
                <p>Round the last digit, when followed by a 5, toward an even digit (.25 -&gt; .2, .35 -&gt; .4)</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterRoundHalfEven</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle">
            <summary>
            These constants specify predefined number format styles. These constants are used by the <c>numberStyle</c> and <c>setNumberStyle:</c> methods.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle.Percent">
            <summary>
                <p>Specifies a percent style format.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterPercentStyle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle.Scientific">
            <summary>
                <p>Specifies a scientific style format.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterScientificStyle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle.Currency">
            <summary>
                <p>Specifies a currency style format.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterCurrencyStyle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle.SpellOut">
            <summary>
                <p>Specifies a spell-out format; for example, “23” becomes “twenty-three”.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterSpellOutStyle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle.Decimal">
            <summary>
                <p>Specifies a decimal style format.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterDecimalStyle</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSNumberFormatterStyle.No">
            <summary>
                <p>Specifies no style.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNumberFormatterNoStyle</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSObject">
            <summary>
            The base class for all iOS classes.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.UP_NSObject_instancesRespondToSelector(System.String,System.String)">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSObject" /> class.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSObject.IsNil">
            <summary>
            Returns whether this instance is nil, which means not holding an native object.
            </summary>
            <value>
                <c>true</c> if this instance is nil; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.RespondsToSelector(System.String)">
            <summary>
            Returns whether the native object can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>respondsToSelector:</c> method.
            </summary>
            <returns>
                <c>true</c> if the native object can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">
            The literal name of the selector.
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSObject.ClassExists">
            <summary>
            Returns whether the native NSObject class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.SetValueForKey(System.Object,System.String)">
            <summary>
            Sets the value for the property specified by key.
            <br></br>Equivalent to the native <c>setValue:forKey:</c> method.
            </summary>
            <param name="value">
            Value.
            </param>
            <param name="key">
            Key.
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.ValueForKey(System.String)">
            <summary>
            Gets the value for the property specified by key.
            <br></br>Equivalent to the native <c>valueForKey:</c> method.
            </summary>
            <returns>
            The value for the property specified by key.
            </returns>
            <param name="key">
            Key.
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSOperationQueue">
            <summary>
            The <c>NSOperationQueue</c> class regulates the execution of a set of <c>NSOperation</c> objects. After being added to a queue, an operation remains in that queue until it is explicitly canceled or finishes executing its task. Operations within the queue (but not yet executing) are themselves organized according to priority levels and inter-operation object dependencies and are executed accordingly. An application may create multiple operation queues and submit operations to any of them.
            </summary>
            <remarks>
                <p>Inter-operation dependencies provide an absolute execution order for operations, even if those operations are located in different operation queues. An operation object is not considered ready to execute until all of its dependent operations have finished executing. For operations that are ready to execute, the operation queue always executes the one with the highest priority relative to the other ready operations. For details on how to set priority levels and dependencies, see <em>NSOperation Class Reference</em>.</p>
                <p>You cannot directly remove an operation from a queue after it has been added. An operation remains in its queue until it reports that it is finished with its task. Finishing its task does not necessarily mean that the operation performed that task to completion. An operation can also be canceled. Canceling an operation object leaves the object in the queue but notifies the object that it should abort its task as quickly as possible. For currently executing operations, this means that the operation object’s work code must check the cancellation state, stop what it is doing, and mark itself as finished. For operations that are queued but not yet executing, the queue must still call the operation object’s <c>start</c> method so that it can processes the cancellation event and mark itself as finished.</p>
                <p>
                    <strong>Note:</strong> In OS X v10.6 and later, canceling an operation causes the operation to ignore any dependencies it may have. This behavior makes it possible for the queue to execute the operation’s <c>start</c> method as soon as possible. The <c>start</c> method, in turn, moves the operation to the finished state so that it can be removed from the queue. In OS X v10.5, a canceled operation does not ignore its dependencies, meaning that those dependencies must complete normally before the canceled operation can run and be removed from the queue. </p>
                <p>
                </p>
                <p>Operation queues usually provide the threads used to run their operations. In OS X v10.6 and later, operation queues use the <c>libdispatch</c> library (also known as Grand Central Dispatch) to initiate the execution of their operations. As a result, operations are always executed on a separate thread, regardless of whether they are designated as concurrent or non-concurrent operations. In OS X v10.5, however, operations are executed on separate threads only if their <c>isConcurrent</c> method returns <c>false</c>. If that method returns <c>true</c>, the operation object is expected to create its own thread (or start some asynchronous operation); the queue does not provide a thread for it.</p>
                <p>
                    <strong>Note:</strong> In iOS 4 and later, operation queues use Grand Central Dispatch to execute operations. Prior to iOS 4, they create separate threads for non-concurrent operations and launch concurrent operations from the current thread. For a discussion of the difference between concurrent and non-concurrent operations and how they are executed, see <em>NSOperation Class Reference</em>. </p>
                <p>
                </p>
                <p>For more information about using operation queues, see <em>Concurrency Programming Guide</em>. </p>
                <b>KVO-Compliant Properties</b>
                <p>The <c>NSOperationQueue</c> class is key-value coding (KVC) and key-value observing (KVO) compliant. You can observe these properties as desired to control other parts of your application. The properties you can observe include the following: </p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>operations</c> - read-only property </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>operationCount</c> - read-only property </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>maxConcurrentOperationCount</c> - readable and writable property </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>suspended</c> - readable and writable property </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>name</c> - readable and writable property </p>
                    </li>
                </ul>
                <p>Although you can attach observers to these properties, you should not use Cocoa bindings to bind them to elements of your application’s user interface. Code associated with your user interface typically must execute only in your application’s main thread. However, KVO notifications associated with an operation queue may occur in any thread. </p>
                <p>For more information about key-value observing and how to attach observers to an object, see <em>Key-Value Observing Programming Guide</em>.</p>
                <b>Multicore Considerations</b>
                <p>It is safe to use a single <c>NSOperationQueue</c> object from multiple threads without creating additional locks to synchronize access to that object.</p>
                <b>Additional Operation Queue Behaviors</b>
                <p>An operation queue executes its queued operation objects based on their priority and readiness. If all of the queued operation objects have the same priority and are ready to execute when they are put in the queue—that is, their <c>isReady</c> method returns <c>true</c>—they are executed in the order in which they were submitted to the queue. For a queue whose maximum number of concurrent operations is set to 1, this equates to a serial queue. However, you should never rely on the serial execution of operation objects. Changes in the readiness of an operation can change the resulting execution order.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.UP_NSOperationQueue_addOperationWithBlock_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.AddOperation(System.Action)">
            <summary>
            Wraps the specified block in an operation object and adds it to the receiver.
            <br></br>Equivalent to the native <c>addOperationWithBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>block</em>
                <p>The block to execute from the operation object. The block should take no parameters and have no return value.</p>
                <b>Discussion</b>
                <p>This method adds a single block to the receiver by first wrapping it in an operation object. You should not attempt to get a reference to the newly created operation object or divine its type information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cancel</c> (NSOperation)</li>
                    <li>
                        <c>isExecuting</c> (NSOperation)</li>
                </ul>
            </remarks>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.UP_NSOperationQueue_mainQueue">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSOperationQueue" /> class.
            <br></br>Equivalent to the native <c>[[NSOperationQueue alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSOperationQueue.ClassExists">
            <summary>
            Returns whether the native NSOperationQueue class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSOperationQueue.MainQueue">
            <summary>
            Returns the operation queue associated with the main thread.
            <br></br>Equivalent to the native <c>mainQueue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The default operation queue bound to the main thread.</p>
                <b>Discussion</b>
                <p>The returned queue executes operations on the main thread. The main thread’s run loop controls the execution times of these operations. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSPredicate">
            <summary>
            The <c>NSPredicate</c> class is used to define logical conditions used to constrain a search either for a fetch or for in-memory filtering.
            </summary>
            <remarks>
                <p>You use predicates to represent logical conditions, used for describing objects in persistent stores and in-memory filtering of objects. Although it is common to create predicates directly from instances of <c>NSComparisonPredicate</c>,  <c>NSCompoundPredicate</c>, and <c>NSExpression</c>, you often create predicates from a format string which is parsed by the class methods on <c>NSPredicate</c>. Examples of predicate format strings include:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Simple comparisons, such as <c>grade == "7"</c> or <c>firstName like "Shaffiq"</c></p>
                    </li>
                    <li class="li">
                        <p>Case and diacritic insensitive lookups, such as <c>name contains[cd] "itroen"</c></p>
                    </li>
                    <li class="li">
                        <p>Logical operations, such as <c>(firstName like "Mark") OR (lastName like "Adderley")</c></p>
                    </li>
                    <li class="li">
                        <p>In OS X v10.5 and later, you can create between predicates such as <c>date between {$YESTERDAY, $TOMORROW}</c>.</p>
                    </li>
                </ul>
                <p>You can create predicates for relationships, such as:</p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>group.name like "work*"</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>ALL children.age &gt; 12</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>ANY children.age &gt; 12</c>
                        </p>
                    </li>
                </ul>
                <p>You can create predicates for operations, such as <c>@sum.items.price &lt; 1000</c>. For a complete syntax reference, refer to the <em>Predicate Programming Guide</em>.</p>
                <p>You can also create predicates that include variables, so that the predicate can be pre-defined before substituting concrete values at runtime. In OS X v10.4, for predicates that use variables, evaluation is a two step process (see <c>predicateWithSubstitutionVariables:</c> and <c>evaluateWithObject:</c>). In OS X v10.5 and later, you can use <c>evaluateWithObject:substitutionVariables:</c>, which combines these steps.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.UP_NSPredicate_predicateWithBlock_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.UP_NSPredicate_predicateWithFormat_argumentArray_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.UP_NSPredicate_predicateWithValue_(System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.UP_NSPredicate_evaluateWithObject_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.UP_NSPredicate_evaluateWithObject_substitutionVariables_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.UP_NSPredicate_predicateFormat(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.UP_NSPredicate_predicateWithSubstitutionVariables_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSPredicate" /> class.
            <br></br>Equivalent to the native <c>[[NSPredicate alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSPredicate.ClassExists">
            <summary>
            Returns whether the native NSPredicate class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.Predicate(System.Func{System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Boolean})">
            <summary>
            Creates and returns a predicate that evaluates using a specified block object and bindings dictionary.
            <br></br>Equivalent to the native <c>predicateWithBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>block</em>
                <p>The block is applied to the object to be evaluated.</p>
                <p>The block takes two arguments:</p>
                <p>
                </p>	evaluatedObject<p>The object to be evaluated.</p>bindings<p>The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.</p><p>The block returns <c>true</c> if the <em>evaluatedObject</em> evaluates to true, otherwise <c>false</c>.</p><b>Return Value</b><p>A new predicate by that evaluates objects using <em>block</em>.</p><b>Special Considerations</b><p>In OS X v10.6, Core Data supports this method in the in-memory and atomic stores, but not in the SQLite-based store.</p><b>Availability</b><ul><li>Available in iOS 4.0 and later.</li></ul></remarks>
            <param name="block"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.Predicate(System.String,System.Object[])">
            <summary>
            Creates and returns a new predicate by substituting the values in a given array into a format string and parsing the result.
            <br></br>Equivalent to the native <c>predicateWithFormat:argumentArray:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>predicateFormat</em>
                <p>The format string for the new predicate.</p>
                <em>arguments</em>
                <p>The arguments to substitute into <em>predicateFormat</em>. Values are substituted into <em>predicateFormat</em> in the order they appear in the array.</p>
                <b>Return Value</b>
                <p>A new predicate by substituting the values in <em>arguments</em> into <em>predicateFormat</em>, and parsing the result.</p>
                <b>Discussion</b>
                <p>For details of the format of the format string and of limitations on variable substitution, see  Predicate Format String Syntax .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="predicateFormat">
            </param>
            <param name="arguments">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.Predicate(System.Boolean)">
            <summary>
            Creates and returns a predicate that always evaluates to a given value.
            <br></br>Equivalent to the native <c>predicateWithValue:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The value to which the new predicate should evaluate.</p>
                <b>Return Value</b>
                <p>A predicate that always evaluates to <em>value</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.Evaluate(System.Object)">
            <summary>
            Returns a Boolean value that indicates whether a given object matches the conditions specified by the receiver.
            <br></br>Equivalent to the native <c>evaluateWithObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>object</em>
                <p>The object against which to evaluate the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>object</em> matches the conditions specified by the receiver, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.Evaluate(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Returns a Boolean value that indicates whether a given object matches the conditions specified by the receiver after substituting in the values in a given variables dictionary.
            <br></br>Equivalent to the native <c>evaluateWithObject:substitutionVariables:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>object</em>
                <p>The object against which to evaluate the receiver.</p>
                <em>variables</em>
                <p>The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>object</em> matches the conditions specified by the receiver after substituting in the values in <em>variables</em> for any replacement tokens, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method returns the same result as the two step process of first invoking <c>predicateWithSubstitutionVariables:</c> on the receiver and then invoking <c>evaluateWithObject:</c> on the returned predicate. This method is optimized for situations which require repeatedly evaluating a predicate with substitution variables with different variable substitutions.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
            <param name="bindings">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.Predicate">
            <summary>
            Returns the receiver’s format string.
            <br></br>Equivalent to the native <c>predicateFormat</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s format string.</p>
                <b>Special Considerations</b>
                <p>The string returned by this method is not guaranteed to be the same as a string used to create the predicate using <c>predicateWithFormat:</c> etc. You cannot use this method to create a persistent representation of a predicate that you could use to recreate the original predicate. If you need a persistent representation of a predicate, create an  archive  (<c>NSPredicate</c> adopts the <c>NSCoding</c> protocol).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSPredicate.Predicate(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Returns a copy of the receiver with the receiver’s variables substituted by values specified in a given substitution variables dictionary.
            <br></br>Equivalent to the native <c>predicateWithSubstitutionVariables:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>variables</em>
                <p>The substitution variables dictionary. The dictionary must contain key-value pairs for all variables in the receiver.</p>
                <b>Return Value</b>
                <p>A copy of the receiver with the receiver’s variables substituted by values specified in <em>variables</em>.</p>
                <b>Discussion</b>
                <p>The receiver itself is not modified by this method, so you can reuse it for any number of substitutions.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="variables">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType">
            <summary>
            Defines the type of comparison for <c>NSComparisonPredicate</c>.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.Contains">
            <summary>
                <p>A predicate to determine if the left hand side contains the right hand side.</p>
                <p>Returns <c>true</c> if <c>[lhs contains rhs]</c>; the left hand side must be an <c>NSExpression</c> object that evaluates to a collection</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSContainsPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.GreaterThan">
            <summary>
                <p>A greater-than predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSGreaterThanPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.Matches">
            <summary>
                <p>A full regular expression matching predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSMatchesPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.CustomSelector">
            <summary>
                <p>A predicate that uses a custom selector that takes a single argument and returns a <c>bool</c> value.</p>
                <p>The selector is invoked on the left hand side with the right hand side as the argument.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSCustomSelectorPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.In">
            <summary>
                <p>A predicate to determine if the left hand side is in the right hand side.</p>
                <p>For strings, returns <c>true</c> if the left hand side is a substring of the right hand side . For collections, returns <c>true</c> if the left hand side is in the right hand side .</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSInPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.GreaterThanOrEqualTo">
            <summary>
                <p>A greater-than-or-equal-to predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSGreaterThanOrEqualToPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.LessThan">
            <summary>
                <p>A less-than predicate. </p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLessThanPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.Like">
            <summary>
                <p>A simple subset of the MATCHES predicate, similar in behavior to SQL <c>LIKE</c>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLikePredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.EndsWith">
            <summary>
                <p>An ends-with predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSEndsWithPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.Between">
            <summary>
                <p>A predicate to determine if the right hand side lies at or between bounds specified by the left hand side.</p>
                <p>Returns <c>true</c> if <c>[lhs between rhs]</c>; the right hand side must be an array in which the first element sets the lower bound and the second element the upper, inclusive. Comparison is performed using compare: or the class-appropriate equivalent.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSBetweenPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.BeginsWith">
            <summary>
                <p>A begins-with predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSBeginsWithPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.EqualTo">
            <summary>
                <p>An equal-to predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSEqualToPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.LessThanOrEqualTo">
            <summary>
                <p>A less-than-or-equal-to predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLessThanOrEqualToPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSPredicateOperatorType.NotEqualTo">
            <summary>
                <p>A not-equal-to predicate.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNotEqualToPredicateOperatorType</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSRange">
            <summary>
            A structure used to describe a portion of a series—such as characters in a string or objects in an <c>object[]</c> object.
            </summary>
            <remarks>
                <b>Fields</b>
                <p>
                </p>
                <c>location</c>
                <p>The start index (<c>0</c> is the first, as in C arrays).</p>
                <c>length</c>
                <p>The number of items in the range (can be <c>0</c>).</p>
                <b>Discussion</b>
                <p>Foundation functions that operate on ranges include the following:</p>
                <ul class="simple">
                    <li>
                        <p>
                            <c>NSEqualRanges</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSIntersectionRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSLocationInRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSMakeRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSMaxRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSRangeFromString</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSStringFromRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSUnionRange</c>
                        </p>
                    </li>
                </ul>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>Declared In</b>
                <c class="HeaderFile">NSRange.h</c>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSRange.location">
            <summary> The location.</summary>;</member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSRange.length">
            <summary> The length.</summary>;</member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> struct.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange._Serialize">
            <summary>
            U3DXT internal method.</summary>
            <returns>
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange._Deserialize(System.Object)">
            <summary>
            U3DXT internal method.</summary>
            <returns>
            </returns>
            <param name="json">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <param name="other">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.op_Equality(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> is equal to another specified <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.op_Inequality(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> is not equal to another specified <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSStringEncoding">
            <summary>
            The following constants are provided by <c>String</c> as possible string encodings.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>These values represent the various character encodings supported by the <c>String</c> classes. This is an incomplete list. Additional encodings are defined in <em>String Programming Guide for Core Foundation</em> (see <c>CFStringEncodingExt.h</c>); these encodings can be used with <c>String</c> by first passing the Core Foundation encoding to the <c>CFStringConvertEncodingToNSStringEncoding</c> function.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.NEXTSTEP">
            <summary>
                <p>8-bit ASCII encoding with NEXTSTEP extensions.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNEXTSTEPStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.ShiftJIS">
            <summary>
                <p>8-bit Shift-JIS encoding for Japanese text.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSShiftJISStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.UTF32LittleEndian">
            <summary>
                <p>
                    <c>NSUTF32StringEncoding</c> encoding with explicit endianness specified.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUTF32LittleEndianStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.Proprietary">
            <summary>
            Installation-specific encoding. (<strong class="deprecated">Deprecated.</strong> This encoding has been deprecated—there is no replacement.)<p>Proprietary encodings have not been used since OS X v10.0. You should specify a standard encoding instead.</p><p>Available in iOS 5.0 and later.</p><p></p><br></br>Equivalent to the native <c>NSProprietaryStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.WindowsCP1252">
            <summary>
                <p>Microsoft Windows codepage 1252; equivalent to WinLatin1.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWindowsCP1252StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.WindowsCP1250">
            <summary>
                <p>Microsoft Windows codepage 1250; equivalent to WinLatin2.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWindowsCP1250StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.MacOSRoman">
            <summary>
                <p>Classic Macintosh Roman encoding.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSMacOSRomanStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.ISOLatin2">
            <summary>
                <p>8-bit ISO Latin 2 encoding.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSISOLatin2StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.WindowsCP1253">
            <summary>
                <p>Microsoft Windows codepage 1253, encoding Greek characters.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWindowsCP1253StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.NonLossyASCII">
            <summary>
                <p>7-bit verbose ASCII to represent all Unicode characters.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSNonLossyASCIIStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.ISOLatin1">
            <summary>
                <p>8-bit ISO Latin 1 encoding.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSISOLatin1StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.Symbol">
            <summary>
                <p>8-bit Adobe Symbol encoding vector.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSSymbolStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.UTF16LittleEndian">
            <summary>
                <p>
                    <c>NSUTF16StringEncoding</c> encoding with explicit endianness specified.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUTF16LittleEndianStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.UTF16">
            <summary>
                <p>An alias for <c>NSUnicodeStringEncoding</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUTF16StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.UTF16BigEndian">
            <summary>
                <p>
                    <c>NSUTF16StringEncoding</c> encoding with explicit endianness specified.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUTF16BigEndianStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.Unicode">
            <summary>
                <p>The canonical Unicode encoding for string objects.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUnicodeStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.UTF8">
            <summary>
                <p>An 8-bit representation of Unicode characters, suitable for transmission or storage by ASCII-based systems.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUTF8StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.WindowsCP1251">
            <summary>
                <p>Microsoft Windows codepage 1251, encoding Cyrillic characters; equivalent to AdobeStandardCyrillic font encoding.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWindowsCP1251StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.JapaneseEUC">
            <summary>
                <p>8-bit EUC encoding for Japanese text.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSJapaneseEUCStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.ISO2022JP">
            <summary>
                <p>ISO 2022 Japanese encoding for email.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSISO2022JPStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.WindowsCP1254">
            <summary>
                <p>Microsoft Windows codepage 1254, encoding Turkish characters.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSWindowsCP1254StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.ASCII">
            <summary>
                <p>Strict 7-bit ASCII encoding within 8-bit chars; ASCII values 0…127 only.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSASCIIStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.UTF32">
            <summary>
                <p>32-bit UTF encoding.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUTF32StringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSStringEncoding.UTF32BigEndian">
            <summary>
                <p>
                    <c>NSUTF32StringEncoding</c> encoding with explicit endianness specified.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSUTF32BigEndianStringEncoding</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSTimeZone">
            <summary>
                <c>NSTimeZone</c> is an abstract class that defines the behavior of time zone objects. Time zone objects represent geopolitical regions. Consequently, these objects have names for these regions. Time zone objects also represent a temporal offset, either plus or minus, from Greenwich Mean Time (GMT) and an abbreviation (such as PST for Pacific Standard Time).
            </summary>
            <remarks>
                <p>
                    <c>NSTimeZone</c> provides several class methods to get time zone objects: <c>timeZoneWithName:</c>, <c>timeZoneWithName:data:</c>, <c>timeZoneWithAbbreviation:</c>, and <c>timeZoneForSecondsFromGMT:</c>. The class also permits you to set the default time zone <em>within your application</em> (<c>setDefaultTimeZone:</c>). You can access this default time zone at any time with the <c>defaultTimeZone</c> class method, and with the <c>localTimeZone</c> class method, you can get a relative time zone object that decodes itself to become the default time zone for any locale in which it finds itself.</p>
                <p>Note that, strictly, time zone database entries such as “America/Los_Angeles” are IDs not names. An example of a time zone name is “Pacific Daylight Time”. Although many <c>NSTimeZone</c> method names include the word “name”, they refer to IDs.</p>
                <p>Cocoa does not provide any API to change the time zone of the computer, or of other applications.</p>
                <p>
                    <c>NSTimeZone</c> is “toll-free bridged” with its Core Foundation counterpart, <c>CFTimeZoneRef</c>. See  “Toll-Free Bridging”  for more information on toll-free bridging.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSTimeZone.NSSystemTimeZoneDidChangeNotification">
            <summary>
            Constant name for the native <c>NSSystemTimeZoneDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSTimeZone.SystemTimeZoneDidChange">
            <summary>
                <b>NSSystemTimeZoneDidChangeNotification</b> Sent when the time zone changed. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSSystemTimeZoneDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSTimeZone.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSTimeZone.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>NSTimeZone</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.Foundation.NSTimeZone.AllInstances.SystemTimeZoneDidChange">
            <summary>
                <b>NSSystemTimeZoneDidChangeNotification</b> Sent when the time zone changed. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>NSSystemTimeZoneDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_abbreviationDictionary">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_defaultTimeZone">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_knownTimeZoneNames">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_localTimeZone">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_resetSystemTimeZone">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_setAbbreviationDictionary_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_setDefaultTimeZone_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_systemTimeZone">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_timeZoneDataVersion">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_timeZoneForSecondsFromGMT_(System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_timeZoneWithAbbreviation_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_abbreviation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_abbreviationForDate_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_data(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_daylightSavingTimeOffset(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_daylightSavingTimeOffsetForDate_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_description(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_alloc_initWithName_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_alloc_initWithName_data_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_isDaylightSavingTime(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_isDaylightSavingTimeForDate_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_isEqualToTimeZone_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_localizedName_locale_(System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_name(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_nextDaylightSavingTimeTransition(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_nextDaylightSavingTimeTransitionAfterDate_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_secondsFromGMT(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.UP_NSTimeZone_secondsFromGMTForDate_(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSTimeZone" /> class.
            <br></br>Equivalent to the native <c>[[NSTimeZone alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSTimeZone.ClassExists">
            <summary>
            Returns whether the native NSTimeZone class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.AbbreviationDictionary">
            <summary>
            Returns a dictionary holding the mappings of time zone abbreviations to time zone names.
            <br></br>Equivalent to the native <c>abbreviationDictionary</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary holding the mappings of time zone abbreviations to time zone names.</p>
                <b>Discussion</b>
                <p>Note that more than one time zone may have the same abbreviation—for example, US/Pacific and Canada/Pacific both use the abbreviation “PST.” In these cases, <c>abbreviationDictionary</c> chooses a single name to map the abbreviation to.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.DefaultTimeZone">
            <summary>
            Returns the default time zone for the current application.
            <br></br>Equivalent to the native <c>defaultTimeZone</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The default time zone for the current application. If no default time zone has been set, this method invokes <c>systemTimeZone</c> and returns the system time zone.</p>
                <b>Discussion</b>
                <p>The default time zone is the one that the application is running with, which you can change (so you can make the application run as if it were in a different time zone).</p>
                <p>If you get the default time zone and hold onto the returned object, it does not change if a subsequent invocation of <c>setDefaultTimeZone:</c> changes the default time zone—you still have the specific time zone you originally got. Contrast this behavior with the object returned by <c>localTimeZone</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ localTimeZone</c>
                    </li>
                    <li>
                        <c>+ setDefaultTimeZone:</c>
                    </li>
                    <li>
                        <c>+ systemTimeZone</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.KnownTimeZoneNames">
            <summary>
            Returns an array of strings listing the IDs of all the time zones known to the system.
            <br></br>Equivalent to the native <c>knownTimeZoneNames</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of strings listing the IDs of all the time zones known to the system.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.LocalTimeZone">
            <summary>
            Returns an object that forwards all messages to the default time zone for the current application.
            <br></br>Equivalent to the native <c>localTimeZone</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An object that forwards all messages to the default time zone for the current application.</p>
                <b>Discussion</b>
                <p>The local time zone represents the current state of the default time zone at all times. If you get the <em>default</em> time zone (using <c>defaultTimeZone</c>) and hold onto the returned object, it does not change if a subsequent invocation of <c>setDefaultTimeZone:</c> changes the default time zone—you still have the specific time zone you originally got. The <em>local</em> time zone adds a level of indirection, it acts as if it were the current default time zone whenever you invoke a method on it.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ defaultTimeZone</c>
                    </li>
                    <li>
                        <c>+ setDefaultTimeZone:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.ResetSystemTimeZone">
            <summary>
            Resets the system time zone object cached by the application, if any.
            <br></br>Equivalent to the native <c>resetSystemTimeZone</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the application has cached the system time zone, this method clears that cached object. If you subsequently invoke  <c>systemTimeZone</c>, <c>NSTimeZone</c> will attempt to redetermine the system time zone and a new object will be created and cached (see <c>systemTimeZone</c>).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ systemTimeZone</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.SetAbbreviationDictionary(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Sets the abbreviation dictionary to the specified dictionary.
            <br></br>Equivalent to the native <c>setAbbreviationDictionary:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>dict</em>
                <p>A dictionary containing key-value pairs for looking up time zone names given their abbreviations. The keys should be <c>String</c> objects containing the abbreviations; the values should be <c>String</c> objects containing their corresponding geopolitical region names.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.SetDefaultTimeZone(U3DXT.iOS.Native.Foundation.NSTimeZone)">
            <summary>
            Sets the default time zone for the current application to a given time zone.
            <br></br>Equivalent to the native <c>setDefaultTimeZone:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aTimeZone</em>
                <p>The new default time zone for the current application.</p>
                <b>Discussion</b>
                <p>There can be only one default time zone, so by setting a new default time zone, you lose the previous one. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ defaultTimeZone</c>
                    </li>
                    <li>
                        <c>+ localTimeZone</c>
                    </li>
                </ul>
            </remarks>
            <param name="aTimeZone">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.SystemTimeZone">
            <summary>
            Returns the time zone currently used by the system.
            <br></br>Equivalent to the native <c>systemTimeZone</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The time zone currently used by the system. If the current time zone cannot be determined, returns the GMT time zone.</p>
                <b>Special Considerations</b>
                <p>If you get the system time zone, it is cached by the application and does not change if the user subsequently changes the system time zone. The next time you invoke <c>systemTimeZone</c>, you get back the same time zone you originally got. You have to invoke <c>resetSystemTimeZone</c> to clear the cached object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ resetSystemTimeZone</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.TimeZoneDataVersion">
            <summary>
            Returns the time zone data version.
            <br></br>Equivalent to the native <c>timeZoneDataVersion</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing the time zone data version.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.TimeZone(System.Int32)">
            <summary>
            Returns a time zone object offset from Greenwich Mean Time by a given number of seconds.
            <br></br>Equivalent to the native <c>timeZoneForSecondsFromGMT:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>seconds</em>
                <p>The number of seconds by which the new time zone is offset from GMT.</p>
                <b>Return Value</b>
                <p>A time zone object offset from Greenwich Mean Time by <em>seconds</em>.</p>
                <b>Discussion</b>
                <p>The name of the new time zone is GMT +/– the offset, in hours and minutes. Time zones created with this method never have daylight savings, and the offset is constant no matter the date.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ timeZoneWithAbbreviation:</c>
                    </li>
                    <li>
                        <c>+ timeZoneWithName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="seconds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.TimeZone(System.String)">
            <summary>
            Returns the time zone object identified by a given abbreviation.
            <br></br>Equivalent to the native <c>timeZoneWithAbbreviation:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>abbreviation</em>
                <p>An abbreviation for a time zone.</p>
                <b>Return Value</b>
                <p>The time zone object identified by <em>abbreviation</em> determined by resolving the abbreviation to a name using the abbreviation dictionary and then returning the time zone for that name. Returns <c>null</c> if there is no match for <em>abbreviation</em>.</p>
                <b>Discussion</b>
                <p>In general, you are discouraged from using abbreviations except for unique instances such as “UTC” or “GMT”. Time Zone abbreviations are not standardized and so a given abbreviation may have multiple meanings—for example, “EST” refers to Eastern Time in both the United States and Australia</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ abbreviationDictionary</c>
                    </li>
                    <li>
                        <c>+ timeZoneForSecondsFromGMT:</c>
                    </li>
                    <li>
                        <c>+ timeZoneWithName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="abbreviation">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.Abbreviation">
            <summary>
            Returns the abbreviation for the receiver.
            <br></br>Equivalent to the native <c>abbreviation</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The abbreviation for the receiver, such as “EDT” (Eastern Daylight Time).</p>
                <b>Discussion</b>
                <p>Invokes <c>abbreviationForDate:</c> with the current date as the argument.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.Abbreviation(System.DateTime)">
            <summary>
            Returns the abbreviation for the receiver at a given date.
            <br></br>Equivalent to the native <c>abbreviationForDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aDate</em>
                <p>The date for which to get the abbreviation for the receiver.</p>
                <b>Return Value</b>
                <p>The abbreviation for the receiver at <em>aDate</em>.</p>
                <b>Discussion</b>
                <p>Note that the abbreviation may be different at different dates. For example, during daylight savings time the US/Eastern time zone has an abbreviation of “EDT.” At other times, its abbreviation is “EST.”</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.Data">
            <summary>
            Returns the data that stores the information used by the receiver.
            <br></br>Equivalent to the native <c>data</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The data that stores the information used by the receiver.</p>
                <b>Discussion</b>
                <p>This data should be treated as an opaque object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.DaylightSavingTimeOffset">
            <summary>
            Returns the current daylight saving time offset of the receiver.
            <br></br>Equivalent to the native <c>daylightSavingTimeOffset</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The daylight current saving time offset of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isDaylightSavingTime</c>
                    </li>
                    <li>
                        <c>– isDaylightSavingTimeForDate:</c>
                    </li>
                    <li>
                        <c>– daylightSavingTimeOffsetForDate:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.DaylightSavingTimeOffset(System.DateTime)">
            <summary>
            Returns the daylight saving time offset for a given date.
            <br></br>Equivalent to the native <c>daylightSavingTimeOffsetForDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aDate</em>
                <p>A date.</p>
                <b>Return Value</b>
                <p>The daylight saving time offset for <em>aDate</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isDaylightSavingTime</c>
                    </li>
                    <li>
                        <c>– daylightSavingTimeOffset</c>
                    </li>
                    <li>
                        <c>– isDaylightSavingTimeForDate:</c>
                    </li>
                    <li>
                        <c>– nextDaylightSavingTimeTransitionAfterDate:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aDate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.Description">
            <summary>
            Returns the description of the receiver.
            <br></br>Equivalent to the native <c>description</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The description of the receiver, including the name, abbreviation, offset from GMT, and whether or not daylight savings time is currently in effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSTimeZone and initializes the object. Returns a time zone initialized with a given ID.
            <br></br>Equivalent to the native <c>[[NSTimeZone alloc] initWithName:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>tzName</em>
                <p>The ID for the time zone. Must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>A time zone object initialized with the ID <em>tzName</em>.</p>
                <b>Discussion</b>
                <p>If <em>tzName</em> is a known ID, this method calls <c>initWithName:data:</c> with the appropriate data object.</p>
                <p>In OS X v10.4 and earlier providing <c>null</c> for the parameter would have caused a crash. In OS X v10.5 and later, this now raises an invalid argument exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="tzName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.#ctor(System.String,U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates an instance of the native NSTimeZone and initializes the object. Initializes a time zone with a given ID and time zone data.
            <br></br>Equivalent to the native <c>[[NSTimeZone alloc] initWithName:data:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>tzName</em>
                <p>The ID for the time zone. Must not be <c>null</c>.</p>
                <em>data</em>
                <p>The data from the time-zone files located at <c>/usr/share/zoneinfo</c>. </p>
                <b>Discussion</b>
                <p>You should not call this method directly—use <c>initWithName:</c> to get a time zone object.</p>
                <p>In OS X v10.4 and earlier providing <c>null</c> for the <em>tzName</em> parameter would have caused a crash. In OS X v10.5 and later, this now raises an invalid argument exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="tzName">
            </param>
            <param name="aData">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.IsDaylightSavingTime">
            <summary>
            Returns a Boolean value that indicates whether the receiver is currently using daylight saving time.
            <br></br>Equivalent to the native <c>isDaylightSavingTime</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver is currently using daylight savings time, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method invokes <c>isDaylightSavingTimeForDate:</c> with the current date as the argument.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isDaylightSavingTimeForDate:</c>
                    </li>
                    <li>
                        <c>– daylightSavingTimeOffset</c>
                    </li>
                    <li>
                        <c>– daylightSavingTimeOffsetForDate:</c>
                    </li>
                    <li>
                        <c>– nextDaylightSavingTimeTransition</c>
                    </li>
                    <li>
                        <c>– nextDaylightSavingTimeTransitionAfterDate:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Returns a Boolean value that indicates whether the receiver uses daylight savings time at a given date.
            <br></br>Equivalent to the native <c>isDaylightSavingTimeForDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aDate</em>
                <p>The date against which to test the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver uses daylight savings time at <em>aDate</em>, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isDaylightSavingTime</c>
                    </li>
                    <li>
                        <c>– daylightSavingTimeOffset</c>
                    </li>
                    <li>
                        <c>– daylightSavingTimeOffsetForDate:</c>
                    </li>
                    <li>
                        <c>– nextDaylightSavingTimeTransitionAfterDate:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aDate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.IsEqualToTimeZone(U3DXT.iOS.Native.Foundation.NSTimeZone)">
            <summary>
            Returns a Boolean value that indicates whether the receiver has the same name and data as another given time zone.
            <br></br>Equivalent to the native <c>isEqualToTimeZone:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aTimeZone</em>
                <p>The time zone to compare with the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>aTimeZone</em> and the receiver have the same name and data, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="aTimeZone">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.LocalizedName(U3DXT.iOS.Native.Foundation.NSTimeZoneNameStyle,U3DXT.iOS.Native.Foundation.NSLocale)">
            <summary>
            Returns the name of the receiver localized for a given locale.
            <br></br>Equivalent to the native <c>localizedName:locale:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>style</em>
                <p>The format style for the returned string.</p>
                <em>locale</em>
                <p>The locale for which to format the name.</p>
                <b>Return Value</b>
                <p>The name of the receiver localized for <em>locale</em> using <em>style</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="style">
            </param>
            <param name="locale">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.Name">
            <summary>
            Returns the geopolitical region ID that identifies the receiver.
            <br></br>Equivalent to the native <c>name</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The geopolitical region ID that identifies the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.NextDaylightSavingTimeTransition">
            <summary>
            Returns the date of the next daylight saving time transition for the receiver.
            <br></br>Equivalent to the native <c>nextDaylightSavingTimeTransition</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The date of the next (after the current instant) daylight saving time transition for the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isDaylightSavingTime</c>
                    </li>
                    <li>
                        <c>– isDaylightSavingTimeForDate:</c>
                    </li>
                    <li>
                        <c>– nextDaylightSavingTimeTransitionAfterDate:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.NextDaylightSavingTimeTransitionAfterDate(System.DateTime)">
            <summary>
            Returns the next daylight saving time transition after a given date.
            <br></br>Equivalent to the native <c>nextDaylightSavingTimeTransitionAfterDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aDate</em>
                <p>A date.</p>
                <b>Return Value</b>
                <p>The next daylight saving time transition after <em>aDate</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– isDaylightSavingTime</c>
                    </li>
                    <li>
                        <c>– isDaylightSavingTimeForDate:</c>
                    </li>
                    <li>
                        <c>– nextDaylightSavingTimeTransition</c>
                    </li>
                </ul>
            </remarks>
            <param name="aDate">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.SecondsFromGMT">
            <summary>
            Returns the current difference in seconds between the receiver and Greenwich Mean Time.
            <br></br>Equivalent to the native <c>secondsFromGMT</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The current difference in seconds between the receiver and Greenwich Mean Time.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSTimeZone.SecondsFromGMT(System.DateTime)">
            <summary>
            Returns the difference in seconds between the receiver and Greenwich Mean Time at a given date.
            <br></br>Equivalent to the native <c>secondsFromGMTForDate:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aDate</em>
                <p>The date against which to test the receiver.</p>
                <b>Return Value</b>
                <p>The difference in seconds between the receiver and Greenwich Mean Time at <em>aDate</em>.</p>
                <b>Discussion</b>
                <p>The difference may be different from the current difference if the time zone changes its offset from GMT at different points in the year—for example, the U.S. time zones change with daylight savings time.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="aDate">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSTimeZoneNameStyle">
            <summary>
            Specify styles for presenting time zone names.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSTimeZoneNameStyle.ShortDaylightSaving">
            <summary>
                <p>Specifies a short daylight saving name style.  For example, “CDT” for Central Time.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTimeZoneNameStyleShortDaylightSaving</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSTimeZoneNameStyle.DaylightSaving">
            <summary>
                <p>Specifies a daylight saving name style. For example, “Central Daylight Time” for Central Time.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTimeZoneNameStyleDaylightSaving</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSTimeZoneNameStyle.ShortStandard">
            <summary>
                <p>Specifies a short name style. For example, “CST” for Central Time.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTimeZoneNameStyleShortStandard</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSTimeZoneNameStyle.Standard">
            <summary>
                <p>Specifies a standard name style. For example, “Central Standard Time” for Central Time.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTimeZoneNameStyleStandard</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURL">
            <summary>
            An <c>NSURL</c> object lets you manipulate URLs and the resources they reference. The URLs employed by the <c>NSURL</c> class are described in RFCs 1808, 1738, and 2732. The litmus test for conformance to RFC 1808 is as recommended in RFC 1808—specifically, whether the first two characters of <c>resourceSpecifier</c> are slashes (<c>//</c>).
            </summary>
            <remarks>
                <p>You can use an <c>NSURL</c> object to refer to a file, which is the preferred way to do so. AppKit objects that can read data from or write data to a file generally have methods that accept an <c>NSURL</c> object instead of a pathname as the file reference. In OS X, the <c><!--a target="_self" -->NSWorkspace<!--/a--></c> class provides <c><!--a target="_self" -->openURL:<!--/a--></c> to open a location specified by a URL. Similarly, in iOS, UIApplication provides <c>openURL:</c>. To get the contents of a URL, NSString provides <c>stringWithContentsOfURL:</c> and NSData provides <c>dataWithContentsOfURL:</c>.</p>
                <p>An <c>NSURL</c> object is composed of two parts—a potentially <c>null</c> base URL and a string that is resolved relative to the base URL. An <c>NSURL</c> object whose string is fully resolved without a base is considered absolute; all others are considered relative.</p>
                <p>The classes <c>NSURLConnection</c> and <c><!--a target="_self" -->NSURLDownload<!--/a--></c> define methods useful for loading URL resources in the background. See <em>URL Loading System Programming Guide</em> for more information</p>
                <p>See also <em><!--a target="_self" -->NSURL Additions Reference<!--/a--></em> in the AppKit framework, which describes methods supporting pasteboards.</p>
                <p>The <c>NSURL</c> class is <em>toll-free bridged</em> with its Core Foundation counterpart, <c>CFURLRef</c>. For more information on toll-free bridging, see  “Toll-Free Bridging” .</p>
                <b>Bookmarks, Security Scope, and Start/Stop Semantics</b>
                <p>Starting in OS X v10.6, the <c>NSURL</c> class provides a facility for creating and using bookmark objects. A <strong>bookmark</strong> provides a persistent reference to a file-system resource. When you resolve a bookmark, you obtain a URL to the resource’s current location. A bookmark’s association with a file-system resource (typically a file or folder) usually continues to work if the user moves or renames the resource, or if the user relaunches your app or restarts the system.</p>
                <p>In an OS X app that adopts App Sandbox, to gain persistent access to a file-system resource you must use a <strong>security-scoped bookmark</strong>. Such a bookmark preserves, across app launches, a user’s intent to give your app access to a resource. For details on how this works, including information on the entitlements you need in your Xcode project, read  <!--a target="_self" -->“Security-Scoped Bookmarks and Persistent Resource Access”<!--/a-->  in <em><!--a target="_self" -->App Sandbox Design Guide<!--/a--></em>.</p>
                <p>When you resolve a security-scoped bookmark, you get a security-scoped URL. The file system resource that the URL points to is not available for use inside your app’s sandbox until you call the <c>startAccessingSecurityScopedResource</c> method (or its Core Foundation equivalent, the <c><!--a target="_self" -->CFURLStartAccessingSecurityScopedResource<!--/a--></c> function) on the URL.</p>
                <p>When you no longer need access to a resource that you obtained using security scope (typically, after you close the resource) you must call the <c>stopAccessingSecurityScopedResource</c> method (or its Core Foundation equivalent, the <c><!--a target="_self" -->CFURLStopAccessingSecurityScopedResource<!--/a--></c> function) on the resource’s URL.</p>
                <p>
                    <strong>Warning:</strong> You must balance every call to the <c>startAccessingSecurityScopedResource</c> method with a corresponding call to the <c>stopAccessingSecurityScopedResource</c> method. If you fail to relinquish your access when you no longer need a file-system resource, your app leaks kernel resources. If sufficient kernel resources are leaked, your app loses its ability to add file-system locations to its sandbox, such as via Powerbox or security-scoped bookmarks, until relaunched.</p>
                <p>
                </p>
                <p>The methods for using security-scoped bookmarks are described in this document in  “Working with Bookmark Data.”  For a general introduction to using bookmarks in OS X, read  “Locating Files Using Bookmarks”  in <em>File System Programming Guide</em>.</p>
                <p>
                </p>
                <b>Security-Scoped URLs and String Paths</b>
                <p>In an OS X app, when you copy a security-scoped URL (as obtained from a security-scoped bookmark), the copy has the security scope of the original. You gain access to the file-system resource (that the URL points to) just as you would with the original URL: by calling the <c>startAccessingSecurityScopedResource</c> method (or its Core Foundation equivalent).</p>
                <p>If you need a security-scoped URL’s path as a string value (as provided by the <c>path</c> method), such as to provide to an API that requires a string value, obtain the path from the URL as needed. Note, however, that a string-based path obtained from a security-scoped URL <em>does not</em> have security scope and you cannot use that string to obtain access a security-scoped resource.</p>
                <b>Handling Object Creation Failure</b>
                <p>The NSURL class fails to create a new NSURL object if the path being passed is not well-formed; the path must comply with RFC 2396. Examples of cases that will not succeed are strings containing space characters and high-bit characters. Should creating an NSURL object fail, the creation methods return <c>null</c>, which you must be prepared to handle. If you are creating NSURL objects using file system paths, you should use <c>fileURLWithPath:</c> or <c>initFileURLWithPath:</c>, which handle the subtle differences between URL paths and file system paths. If you wish to be tolerant of malformed path strings, you’ll need to use functions provided by the Core Foundation framework to clean up the strings.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_bookmarkDataWithContentsOfURL_error_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_fileURLWithPathComponents_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_resourceValuesForKeys_fromBookmarkData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_writeBookmarkData_toURL_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_absoluteString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_absoluteURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_baseURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(System.String,System.UInt32,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_checkResourceIsReachableAndReturnError_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_filePathURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_fileReferenceURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_fragment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_host(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initFileURLWithPath_isDirectory_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initWithScheme_host_path_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initWithString_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initWithString_relativeToURL_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_isEqual_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_isFileReferenceURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_isFileURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_lastPathComponent(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_parameterString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_password(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_path(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_pathComponents(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_pathExtension(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_port(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_query(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_relativePath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_relativeString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_resourceSpecifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_resourceValuesForKeys_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_scheme(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_setResourceValue_forKey_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_setResourceValues_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_standardizedURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByAppendingPathComponent_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByAppendingPathComponent_isDirectory_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByAppendingPathExtension_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByDeletingLastPathComponent(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByDeletingPathExtension(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByResolvingSymlinksInPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByStandardizingPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_user(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSURL" /> class.
            <br></br>Equivalent to the native <c>[[NSURL alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSURL.ClassExists">
            <summary>
            Returns whether the native NSURL class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.BookmarkData(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Initializes and returns bookmark data derived from an alias file pointed to by a specified URL.
            <br></br>Equivalent to the native <c>bookmarkDataWithContentsOfURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bookmarkFileURL</em>
                <p>The URL that points to the alias file.</p>
                <em>error</em>
                <p>The error that occurred in the case that the bookmark data cannot be derived.</p>
                <b>Return Value</b>
                <p>The bookmark data for the alias file.</p>
                <b>Discussion</b>
                <p>If <em>bookmarkFileURL</em> points to an alias file created prior to OS X v10.6 that contains Alias Manager information but no bookmark data, this method synthesizes bookmark data for the file.</p>
                <p>This method returns <c>null</c> if bookmark data cannot be created.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
            <param name="bookmarkFileURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.FileURL(System.Object[])">
            <summary>
            Initializes and returns a newly created NSURL object as a file URL with specified path components.
            <br></br>Equivalent to the native <c>fileURLWithPathComponents:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>components</em>
                <p>An array of path components.</p>
                <p>Passing <c>null</c> for this parameter produces an exception.</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>components</em>.</p>
                <b>Discussion</b>
                <p>The path components are separated by a forward slash in the returned URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="components">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ResourceValues(System.Object[],U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Returns the resource values for properties identified by a specified array of keys contained in specified bookmark data.
            <br></br>Equivalent to the native <c>resourceValuesForKeys:fromBookmarkData:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>keys</em>
                <p>An array of names of URL resource properties.</p>
                <em>bookmarkData</em>
                <p>The bookmark data the resource values are derived from.</p>
                <b>Return Value</b>
                <p>A dictionary of the requested resource values contained in <em>bookmarkData</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="keys">
            </param>
            <param name="bookmarkData">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.WriteBookmarkData(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an alias file on disk at a specified location with specified bookmark data.
            <br></br>Equivalent to the native <c>writeBookmarkData:toURL:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bookmarkData</em>
                <p>The bookmark data containing information for the alias file.</p>
                <em>bookmarkFileURL</em>
                <p>The desired location of the alias file.</p>
                <em>options</em>
                <p>Options taken into account when creating the alias file.</p>
                <em>error</em>
                <p>The error that occurred in the case that the alias file cannot be created.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the alias file is successfully created; otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method will produce an error if <em>bookmarkData</em> was not created with the <c>NSURLBookmarkCreationSuitableForBookmarkFile</c> option.</p>
                <p>If <em>bookmarkFileURL</em> points to a directory, the alias file will be created in that directory with its name derived from the information in <em>bookmarkData</em>. If <em>bookmarkFileURL</em> points to a file, the alias file will be created with the location and name indicated by <em>bookmarkFileURL</em>, and its extension will be changed to <c>.alias</c> if it is not already.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
            <param name="bookmarkData">
            </param>
            <param name="bookmarkFileURL">
            </param>
            <param name="options">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.AbsoluteString">
            <summary>
            Returns the string for the receiver as if it were an absolute URL.
            <br></br>Equivalent to the native <c>absoluteString</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An absolute string for the URL. Creating by resolving the receiver's string against its base according to the algorithm given in RFC 1808.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.AbsoluteURL">
            <summary>
            Returns an absolute URL that refers to the same resource as the receiver.
            <br></br>Equivalent to the native <c>absoluteURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An absolute URL that refers to the same resource as the receiver. If the receiver is already absolute, returns <c>self</c>. Resolution is performed per RFC 1808.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.BaseURL">
            <summary>
            Returns the base URL of the receiver.
            <br></br>Equivalent to the native <c>baseURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The base URL of the receiver. If the receiver is an absolute URL, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.BookmarkData(U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions,System.Object[],U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns a bookmark for the URL, created with specified options and resource values.
            <br></br>Equivalent to the native <c>bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>options</em>
                <p>Options taken into account when creating the bookmark for the URL.</p>
                <p>To create a security-scoped bookmark to support App Sandbox, include (by way of bitwise <c>OR</c> operators with any other options in this parameter) the <c>NSURLBookmarkCreationWithSecurityScope</c> option.</p>
                <p>When you later resolve the bookmark, you can use the resulting security-scoped URL to obtain read/write access to the file-system resource pointed to by the URL.</p>
                <p>If you instead want to create a security-scoped bookmark that, when resolved, enables you to obtain read-only access to a file-system resource, bitwise <c>OR</c> this parameter’s value with both the <c>NSURLBookmarkCreationWithSecurityScope</c> option and the <c>NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess</c> option.</p>
                <em>keys</em>
                <p>An array of names of URL resource properties.</p>
                <em>relativeURL</em>
                <p>The URL that the bookmark data will be relative to.</p>
                <p>If you are creating a security-scoped bookmark to support App Sandbox, use this parameter as follows:</p>
                <ul class="termdef">
                    <li class="termdef">
                        <p>To create an app-scoped bookmark, use a value of <c>null</c>. </p>
                    </li>
                    <li class="termdef">
                        <p>To create a document-scoped bookmark, use the <em>absolute</em> path (despite this parameter’s name) to the document file that is to own the new security-scoped bookmark.</p>
                    </li>
                </ul>
                <em>error</em>
                <p>The error that occurred in the case that the bookmark data cannot be created.</p>
                <b>Return Value</b>
                <p>A bookmark for the URL.</p>
                <b>Discussion</b>
                <p>To use this method to create a security-scoped bookmark to support App Sandbox, you must first have enabled the appropriate entitlements for your app, as described in  “Enabling Security-Scoped Bookmark and URL Access”  in <em>Entitlement Key Reference</em>. In addition, be sure to understand the behavior of the <em>options</em> and <em>relativeURL</em> parameters.</p>
                <p>For an app-scoped bookmark, no sandboxed app other than the one that created the bookmark can obtain access to the file-system resource that the URL (obtained from the bookmark) points to. Specifically, a bookmark created with security scope fails to resolve if the caller does not have the same code signing identity as the caller that created the bookmark.</p>
                <p>For a document-scoped bookmark, any sandboxed app that has access to the bookmark data itself, and has access to the document that owns the bookmark, can obtain access to the resource.</p>
                <p>
                    <strong>Version note:</strong> Security-scoped bookmarks are not available in versions of OS X prior to OS X v10.7.3.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="options">
            </param>
            <param name="keys">
            </param>
            <param name="relativeURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.CheckResourceIsReachableAndReturnError(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns whether the resource pointed to by a file URL can be reached.
            <br></br>Equivalent to the native <c>checkResourceIsReachableAndReturnError:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>error</em>
                <p>The error that occurred in the case that the resource cannot be reached.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the resource is reachable; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.FilePathURL">
            <summary>
            Returns a new file path URL that points to the same resource as the original URL.
            <br></br>Equivalent to the native <c>filePathURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The new file path URL.</p>
                <b>Discussion</b>
                <p>If the original URL is a file reference URL, this method converts it to a file path URL. If the original URL is a file path URL, the returned URL is identical. If the original URL is not a file URL, this method returns <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.FileReferenceURL">
            <summary>
            Returns a new file reference URL that points to the same resource as the original URL.
            <br></br>Equivalent to the native <c>fileReferenceURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The new file reference URL.</p>
                <b>Discussion</b>
                <p>If the original URL is a file path URL, this method converts it to a file reference URL. If the original URL is a file reference URL, the returned URL is identical. If the original URL is not a file URL, this method returns <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Fragment">
            <summary>
            Returns the fragment of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>fragment</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The fragment of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Host">
            <summary>
            Returns the host of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>host</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The host of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes a newly created NSURL referencing the local file or directory at <em>path</em>.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initFileURLWithPath:isDirectory:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path that the NSURL object will represent. <em>path</em> should be a valid system path. If <em>path</em> begins with a tilde, it must first be expanded with <c>stringByExpandingTildeInPath</c>. If <c>path</c> is a relative path, it is treated as being relative to the current working directory.</p>
                <p>Passing <c>null</c> for this parameter produces an exception.</p>
                <em>isDir</em>
                <p>A Boolean value that specifies whether <em>path</em> is treated as a directory path when resolving against relative path components. Pass <c>true</c> if the <em>path</em> indicates a directory, <c>false</c> otherwise</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>path</em>.</p>
                <b>Discussion</b>
                <p>Invoking this method is equivalent to invoking <c>initWithScheme:host:path:</c> with scheme <c>NSURLFileScheme</c>, a <c>null</c> host, and <em>path</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>fileURLWithPath:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="isDir">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes a newly created NSURL with a specified scheme, host, and path.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initWithScheme:host:path:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>scheme</em>
                <p>The scheme for the NSURL object.</p>
                <em>host</em>
                <p>The host for the NSURL object. May be the empty string.</p>
                <em>path</em>
                <p>The path for the NSURL object. If <em>path</em> begins with a tilde, it must first be expanded with <c>stringByExpandingTildeInPath</c>.</p>
                <b>Return Value</b>
                <p>The newly initialized NSURL object.</p>
                <b>Discussion</b>
                <p>This method automatically escapes <c>path</c> with the <c>stringByAddingPercentEscapesUsingEncoding:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="scheme">
            </param>
            <param name="host">
            </param>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes an NSURL object with a provided string.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initWithString:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URLString</em>
                <p>The string with which to initialize the NSURL object. This string must conform to URL format as described in RFC 2396. This method parses <em>URLString</em> according to RFCs 1738 and 1808.</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>URLString</em>. If the string was malformed, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>This method expects <em>URLString</em> to contain any necessary percent escape codes, which are ‘:’, ‘/’, ‘%’, ‘#’, ‘;’, and ‘@’. Note that ‘%’ escapes are translated via UTF-8.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>URLWithString:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URLString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes an NSURL object with a base URL and a relative string.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initWithString:relativeToURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URLString</em>
                <p>The string with which to initialize the NSURL object. Must conform to RFC 2396. <em>URLString</em> is interpreted relative to <em>baseURL</em>.</p>
                <em>baseURL</em>
                <p>The base URL for the NSURL object.</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>URLString</em> and <em>baseURL</em>. If <em>URLString</em> was malformed, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>This method expects <em>URLString</em> to contain any necessary percent escape codes.</p>
                <p>
                    <c>initWithString:relativeToURL:</c> is the designated initializer for NSURL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– baseURL</c>
                    </li>
                    <li>
                        <c>– relativeString</c>
                    </li>
                    <li>
                        <c>URLWithString:relativeToURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URLString">
            </param>
            <param name="baseURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.IsEqual(System.Object)">
            <summary>
            Returns a Boolean value that indicates whether the receiver and a given object are equal.
            <br></br>Equivalent to the native <c>isEqual:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>anObject</em>
                <p>The object to be compared to the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver and <em>anObject</em> are equal, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method defines what it means for instances to be equal. Two NSURLs are considered equal if and only if they return identical values for both <c>baseURL</c> and <c>relativeString</c>.</p>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.IsFileReferenceURL">
            <summary>
            Returns whether the URL is a file reference URL.
            <br></br>Equivalent to the native <c>isFileReferenceURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the URL is a file reference URL; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.IsFileURL">
            <summary>
            Returns whether the receiver uses the file scheme.
            <br></br>Equivalent to the native <c>isFileURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Returns <c>true</c> if the receiver uses the file scheme, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.LastPathComponent">
            <summary>
            Returns the last path component of a file URL.
            <br></br>Equivalent to the native <c>lastPathComponent</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The last path component of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ParameterString">
            <summary>
            Returns the parameter string of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>parameterString</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The parameter string of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Password">
            <summary>
            Returns the password of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>password</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The password of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Path">
            <summary>
            Returns the path of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>path</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The path of the URL, unescaped with the <c>stringByReplacingPercentEscapesUsingEncoding:</c> method. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <p>If this URL object contains a file URL (as determined with <c>isFileURL</c>), the return value of this method is suitable for input into methods of NSFileManager or NSPathUtilities. If the path has a trailing slash it is stripped.</p>
                <p>Per RFC 3986, the leading slash after the authority (host name and port) portion is treated as part of the path.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.PathComponents">
            <summary>
            Returns the individual path components of a file URL in an array.
            <br></br>Equivalent to the native <c>pathComponents</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array containing the individual path components of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.PathExtension">
            <summary>
            Returns the path extension of a file URL.
            <br></br>Equivalent to the native <c>pathExtension</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The path extension of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Port">
            <summary>
            Returns the port number of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>port</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The port number of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Query">
            <summary>
            Returns the query of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>query</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The query of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.RelativePath">
            <summary>
            Returns the path of a URL conforming to RFC 1808, without resolving against the receiver’s base URL.
            <br></br>Equivalent to the native <c>relativePath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The relative path of the URL without resolving against the base URL. If the receiver is an absolute URL, this method returns the same value as <c>path</c>. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.RelativeString">
            <summary>
            Returns a string representation of the relative portion of the URL.
            <br></br>Equivalent to the native <c>relativeString</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string representation of the relative portion of the URL. If the receiver is an absolute URL this method returns the same value as <c>absoluteString</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ResourceSpecifier">
            <summary>
            Returns the resource specifier of the URL.
            <br></br>Equivalent to the native <c>resourceSpecifier</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The resource specifier of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ResourceValues(System.Object[],U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns the resource values for the properties identified by specified array of keys.
            <br></br>Equivalent to the native <c>resourceValuesForKeys:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>keys</em>
                <p>An array of names of URL resource properties.</p>
                <em>error</em>
                <p>The error that occurred in the case that one or more resource values cannot be retrieved.</p>
                <b>Return Value</b>
                <p>A dictionary of resource values indexed by key.</p>
                <b>Discussion</b>
                <p>If an error occurs, this method returns <c>null</c>. </p>
                <p>A key is left out of the returned dictionary if its corresponding resource value is not defined for the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="keys">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Scheme">
            <summary>
            Returns the scheme of the URL.
            <br></br>Equivalent to the native <c>scheme</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The scheme of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.SetResourceValue(System.Object,System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Sets the resource property of the URL specified by a given key to a given value.
            <br></br>Equivalent to the native <c>setResourceValue:forKey:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The value for the resource property defined by <em>key</em>.</p>
                <em>key</em>
                <p>The name of one of the URL’s resource properties.</p>
                <em>error</em>
                <p>The error that occurred in the case that the resource value cannot be set.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the resource property named <em>key</em> is successfully set to <em>value</em>; otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>The resource is modified synchronously.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="key">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.SetResourceValues(System.Collections.Generic.Dictionary{System.Object,System.Object},U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Sets resource properties of the URL specified by a given set of keys to a given set of values.
            <br></br>Equivalent to the native <c>setResourceValues:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>keyedValues</em>
                <p>A dictionary of resource values to be set.</p>
                <em>error</em>
                <p>The error that occurred in the case that one or more resource values cannot be set.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if all resource values in <em>keyedValues</em> are successfully set; otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>If an error occurs during the execution of this method, <em>error</em> will contain an array of the resource values that were not successfully set in its <c>userInfo</c> dictionary.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="keyedValues">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.StandardizedURL">
            <summary>
            Returns a new NSURL object with any instances of <c>".."</c> or <c>"."</c> removed from its path.
            <br></br>Equivalent to the native <c>standardizedURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new <c>NSURL</c> object initialized with a version of the receiver’s URL that has had any instances of <c>".."</c> or <c>"."</c> removed from its path.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByAppendingPathComponent(System.String)">
            <summary>
            Returns a new URL made by appending a path component to the original URL.
            <br></br>Equivalent to the native <c>URLByAppendingPathComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pathComponent</em>
                <p>The path component to add to the URL.</p>
                <b>Return Value</b>
                <p>A new URL with <c>pathComponent</c> appended.</p>
                <b>Discussion</b>
                <p>If the original URL does not end with a forward slash and <c>pathComponent</c> does not begin with a forward slash, a forward slash is inserted between the two parts of the returned URL, unless the original URL is the empty string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="pathComponent">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByAppendingPathComponent(System.String,System.Boolean)">
            <summary>
            Returns a new URL made by appending a path component to the original URL, along with a trailing slash if the component is designated a directory.
            <br></br>Equivalent to the native <c>URLByAppendingPathComponent:isDirectory:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pathComponent</em>
                <p>The path component to add to the URL.</p>
                <em>isDirectory</em>
                <p>If <c>TRUE</c>, a trailing slash is appended after <em>pathComponent</em>.</p>
                <b>Return Value</b>
                <p>A new URL with <c>pathComponent</c> appended.</p>
                <b>Discussion</b>
                <p>If the original URL does not end with a forward slash and <c>pathComponent</c> does not begin with a forward slash, a forward slash is inserted between the two parts of the returned URL, unless the original URL is the empty string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="pathComponent">
            </param>
            <param name="isDirectory">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByAppendingPathExtension(System.String)">
            <summary>
            Returns a new URL made by appending a path extension to the original URL.
            <br></br>Equivalent to the native <c>URLByAppendingPathExtension:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pathExtension</em>
                <p>The path extension to add to the URL.</p>
                <b>Return Value</b>
                <p>A new URL with <c>pathExtension</c> appended.</p>
                <b>Discussion</b>
                <p>If the original URL ends with one or more forward slashes, these are removed from the returned URL. A period is inserted between the two parts of the new URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="pathExtension">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByDeletingLastPathComponent">
            <summary>
            Returns a new URL made by deleting the last path component from the original URL.
            <br></br>Equivalent to the native <c>URLByDeletingLastPathComponent</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL with the last path component of the original URL removed.</p>
                <b>Discussion</b>
                <p>If the original URL represents the root path, the returned URL is identical. Otherwise, if the original URL has only one path component, the new URL is the empty string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByDeletingPathExtension">
            <summary>
            Returns a new URL made by deleting the path extension, if any, from the original URL.
            <br></br>Equivalent to the native <c>URLByDeletingPathExtension</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL with the path extension of the original URL removed.</p>
                <b>Discussion</b>
                <p>If the original URL represents the root path, the returned URL is identical. If the URL has multiple path extensions, only the last one is removed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByResolvingSymlinksInPath">
            <summary>
            Returns a new URL that points to the same resource as the original URL and includes no symbolic links.
            <br></br>Equivalent to the native <c>URLByResolvingSymlinksInPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL that points to the same resource as the original URL and includes no symbolic links.</p>
                <b>Discussion</b>
                <p>If the original URL has no symbolic links, the returned URL is identical to the original URL.</p>
                <p>This method only works on URLs with the <c>file:</c> path scheme. This method will return an identical URL for all other URLs.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByStandardizingPath">
            <summary>
            Returns a new URL that points to the same resource as the original URL and is an absolute path.
            <br></br>Equivalent to the native <c>URLByStandardizingPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL that points to the same resource as the original URL and is an absolute path.</p>
                <b>Discussion</b>
                <p>This method only works on URLs with the <c>file:</c> path scheme. This method will return an identical URL for all other URLs.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.User">
            <summary>
            Returns the user portion of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>user</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The user portion of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions">
            <summary>
            Options used when creating bookmark data.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When creating a bookmark, use bitwise <c>OR</c> operators to combine the options you want to specify, and provide them to the <em>options</em> parameter of the <c>bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:</c> method.</p>
                <b>Version Notes</b>
                <p>Security-scoped bookmarks are not available in versions of OS X prior to OS X v10.7.3.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions.PreferFileIDResolution">
            <summary>
                <p>Specifies that when an alias created with this option is resolved, its embedded file ID should take precedence over other sources of information (file system path, for example) in the event of a conflict.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkCreationPreferFileIDResolution</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions.MinimalBookmark">
            <summary>
                <p>Specifies that an alias created with this option should be created with minimal information. This produces a smaller bookmark that can be resolved in fewer ways.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkCreationMinimalBookmark</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions.SuitableForBookmarkFile">
            <summary>
                <p>Specifies that the bookmark data should include properties required to create Finder alias files.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkCreationSuitableForBookmarkFile</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLBookmarkResolutionOptions">
            <summary>
            Options used when resolving bookmark data.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When resolving a bookmark, use bitwise <c>OR</c> operators to combine the options you want to specify, and provide them to the <em>options</em> parameter of the <c>URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:</c> method.</p>
                <b>Version Notes</b>
                <p>Security-scoped bookmarks are not available in versions of OS X prior to OS X v10.7.3.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkResolutionOptions.Mounting">
            <summary>
                <p>Specifies that no volume should be mounted during resolution of the bookmark data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkResolutionWithoutMounting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkResolutionOptions.UI">
            <summary>
                <p>Specifies that no UI feedback accompany resolution of the bookmark data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkResolutionWithoutUI</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLRequest">
            <summary>
                <c>NSURLRequest</c> objects represent a URL load request in a manner independent of protocol and URL scheme.
            </summary>
            <remarks>
                <p>NSURLRequest encapsulates two basic data elements of a load request: the URL to load, and the policy to use when consulting the URL content cache made available by the implementation.</p>
                <p> NSURLRequest is designed to be extended to support additional  protocols by adding categories that access protocol specific values from a property object using NSURLProtocol’s <c>propertyForKey:inRequest:</c> and <c>setProperty:forKey:inRequest:</c> methods.</p>
                <p>The mutable subclass of NSURLRequest is <c>NSMutableURLRequest</c>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_allHTTPHeaderFields(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_allowsCellularAccess(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_cachePolicy(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPBody(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPMethod(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPShouldHandleCookies(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPShouldUsePipelining(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_alloc_initWithURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_alloc_initWithURL_cachePolicy_timeoutInterval_(System.String,System.String,System.UInt32,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_mainDocumentURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_networkServiceType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_timeoutInterval(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_URL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_valueForHTTPHeaderField_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSURLRequest" /> class.
            <br></br>Equivalent to the native <c>[[NSURLRequest alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSURLRequest.ClassExists">
            <summary>
            Returns whether the native NSURLRequest class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.AllHTTPHeaderFields">
            <summary>
            Returns a dictionary containing all the receiver’s HTTP header fields.
            <br></br>Equivalent to the native <c>allHTTPHeaderFields</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary containing all the receiver’s HTTP header fields.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– valueForHTTPHeaderField:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.AllowsCellularAccess">
            <summary>
            Returns whether the request is allowed to use the cellular radio (if present).
            <br></br>Equivalent to the native <c>allowsCellularAccess</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the cellular radio can be used; <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.CachePolicy">
            <summary>
            Returns the receiver’s cache policy.
            <br></br>Equivalent to the native <c>cachePolicy</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s cache policy.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPBody">
            <summary>
            Returns the receiver’s HTTP body data.
            <br></br>Equivalent to the native <c>HTTPBody</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver's HTTP body data.</p>
                <b>Discussion</b>
                <p>This data is sent as the message body of a request, as in an HTTP <c>POST</c> request.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPMethod">
            <summary>
            Returns the receiver’s HTTP request method.
            <br></br>Equivalent to the native <c>HTTPMethod</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s HTTP request method.</p>
                <b>Discussion</b>
                <p>The default HTTP method is “GET”.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPShouldHandleCookies">
            <summary>
            Returns whether the default cookie handling will be used for this request.
            <br></br>Equivalent to the native <c>HTTPShouldHandleCookies</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the default cookie handling will be used for this request, <c>false</c> otherwise.</p>
                <b>Discussion</b>
                <p>The default is <c>true</c>.</p>
                <b>Special Considerations</b>
                <p>In OS X v10.2 with Safari 1.0 the value set by this method is not respected by the framework.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPShouldUsePipelining">
            <summary>
            Returns whether the request should continue transmitting data before receiving a response from an earlier transmission.
            <br></br>Equivalent to the native <c>HTTPShouldUsePipelining</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the request should continue transmitting data; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native NSURLRequest and initializes the object. Returns a URL request for a specified URL with default cache policy and timeout value.
            <br></br>Equivalent to the native <c>[[NSURLRequest alloc] initWithURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theURL</em>
                <p>The URL for the request.</p>
                <b>Return Value</b>
                <p>The initialized URL request.</p>
                <b>Discussion</b>
                <p>The default cache policy is  <c>NSURLRequestUseProtocolCachePolicy</c> and the default timeout interval is 60 seconds.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:cachePolicy:timeoutInterval:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy,System.Double)">
            <summary>
            Creates an instance of the native NSURLRequest and initializes the object. Returns an initialized URL request with specified values.
            <br></br>Equivalent to the native <c>[[NSURLRequest alloc] initWithURL:cachePolicy:timeoutInterval:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theURL</em>
                <p>The URL for the request.</p>
                <em>cachePolicy</em>
                <p>The cache policy for the request.</p>
                <em>timeoutInterval</em>
                <p>The timeout interval for the request, in seconds.</p>
                <b>Return Value</b>
                <p>The initialized URL request.</p>
                <b>Discussion</b>
                <p>This is the designated initializer for <c>NSURLRequest</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="cachePolicy">
            </param>
            <param name="timeoutInterval">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.MainDocumentURL">
            <summary>
            Returns the main document URL associated with the request.
            <br></br>Equivalent to the native <c>mainDocumentURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The main document URL associated with the request.</p>
                <b>Discussion</b>
                <p>This URL is used for the cookie “same domain as main document” policy.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.NetworkServiceType">
            <summary>
            Returns the network service type of the request.
            <br></br>Equivalent to the native <c>networkServiceType</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The network service type of the request.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.TimeoutInterval">
            <summary>
            Returns the receiver’s timeout interval, in seconds.
            <br></br>Equivalent to the native <c>timeoutInterval</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver's timeout interval, in seconds.</p>
                <b>Discussion</b>
                <p>If during a connection attempt the request remains idle for longer than the timeout interval, the request is considered to have timed out.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.URL">
            <summary>
            Returns the request's URL.
            <br></br>Equivalent to the native <c>URL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The request's URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.Value(System.String)">
            <summary>
            Returns the value of the specified HTTP header field.
            <br></br>Equivalent to the native <c>valueForHTTPHeaderField:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>field</em>
                <p>The name of the header field whose value is to be returned. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.</p>
                <b>Return Value</b>
                <p>The value associated with the header field <em>field</em>,  or <c>null</c> if there is no corresponding header field.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="field">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy">
            <summary>
            These constants are used to specify interaction with the cached responses.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReturnCacheDataElseLoad">
            <summary>
                <p>Specifies that the existing cached data should be used to satisfy the request, regardless of its age or expiration date. If there is no existing data in the cache corresponding the request, the data is loaded from the originating source.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReturnCacheDataElseLoad</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadRevalidatingCacheData">
            <summary>
                <p>Specifies that the existing cache data may be used provided the origin source confirms its validity, otherwise the URL is loaded from the origin source.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadRevalidatingCacheData</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReturnCacheDataDontLoad">
            <summary>
                <p>Specifies that the existing cache data should be used to satisfy a request, regardless of its age or expiration date. If there is no existing data in the cache corresponding to a URL load request, no attempt is made to load the data from the originating source, and the load is considered to have failed. This constant specifies a behavior that is similar to an “offline” mode.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReturnCacheDataDontLoad</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadIgnoringLocalAndRemoteCacheData">
            <summary>
                <p>Specifies that not only should the local cache data be ignored, but that proxies and other intermediates should be instructed to disregard their caches so far as the protocol allows.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadIgnoringLocalAndRemoteCacheData</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadIgnoringCacheData">
            <summary>
                <p>Replaced by <c>NSURLRequestReloadIgnoringLocalCacheData</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadIgnoringCacheData</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.UseProtocolCachePolicy">
            <summary>
                <p>Specifies that the caching logic defined in the protocol implementation, if any, is used for a particular URL load request. This is the default policy for URL load requests.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestUseProtocolCachePolicy</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadIgnoringLocalCacheData">
            <summary>
                <p>Specifies that the data for the URL load should be loaded from the originating source. No existing cache data should be used to satisfy a URL load request.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadIgnoringLocalCacheData</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType">
            <summary>
            These constants are used to specify the network service type of a request.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Default">
            <summary>
                <p>Specifies standard network traffic.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeDefault</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Voice">
            <summary>
                <p>Specifies that the request is for voice traffic.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeVoice</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Background">
            <summary>
                <p>Specifies that the request is for background traffic.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeBackground</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.VoIP">
            <summary>
                <p>Specifies that the request is for VoIP traffic.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeVoIP</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Video">
            <summary>
                <p>Specifies that the request is for video traffic.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeVideo</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLResponse">
            <summary>
                <c>NSURLResponse</c> declares the programmatic interface for an object that accesses the response returned by an <c>NSURLRequest</c> instance.
            </summary>
            <remarks>
                <p>
                    <c>NSURLResponse</c> encapsulates the metadata associated with a URL load in a manner independent of protocol and URL scheme.</p>
                <p>
                    <c>NSHTTPURLResponse</c> is a subclass of <c>NSURLResponse</c> that provides methods for accessing information specific to HTTP protocol responses. An <c>NSHTTPURLResponse</c> object represents a response to an HTTP URL load request.</p>
                <p>
                    <strong>Note:</strong>
                    <c>NSURLResponse</c> objects do not contain the actual bytes representing the content of a URL. See <c>NSURLConnection</c> for more information about receiving the content data for a URL load.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_expectedContentLength(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_alloc_initWithURL_MIMEType_expectedContentLength_textEncodingName_(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_alloc_initWithURL_statusCode_HTTPVersion_headerFields_(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_MIMEType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_suggestedFilename(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_textEncodingName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_URL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSURLResponse" /> class.
            <br></br>Equivalent to the native <c>[[NSURLResponse alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSURLResponse.ClassExists">
            <summary>
            Returns whether the native NSURLResponse class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.ExpectedContentLength">
            <summary>
            Returns the receiver’s expected content length
            <br></br>Equivalent to the native <c>expectedContentLength</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s expected content length, or <c>NSURLResponseUnknownLength</c> if the length can’t be determined.</p>
                <b>Discussion</b>
                <p>Some protocol implementations report the content length as part of the response, but not all protocols guarantee to deliver that amount of data. Clients should be prepared to deal with more or less data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.String,System.Int32,System.String)">
            <summary>
            Creates an instance of the native NSURLResponse and initializes the object. Returns an initialized <c>NSURLResponse</c> object with the URL, MIME type, length, and text encoding set to given values.
            <br></br>Equivalent to the native <c>[[NSURLResponse alloc] initWithURL:MIMEType:expectedContentLength:textEncodingName:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>The URL for the new object.</p>
                <em>MIMEType</em>
                <p>The MIME type.</p>
                <em>length</em>
                <p>The expected content length.This value should be <c>–1</c> if the expected length is undetermined</p>
                <em>name</em>
                <p>The text encoding name. This value may be <c>null</c>.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object with the URL set to <em>URL</em>, the MIME type set to <em>MIMEType</em>, length set to <em>length</em>, and text encoding name set to <em>name</em>. </p>
                <b>Discussion</b>
                <p>This is the designated initializer for <c>NSURLResponse</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:statusCode:HTTPVersion:headerFields:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="MIMEType">
            </param>
            <param name="length">
            </param>
            <param name="name">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.Int32,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native NSURLResponse and initializes the object. Returns an initialized response with the specified values.
            <br></br>Equivalent to the native <c>[[NSURLResponse alloc] initWithURL:statusCode:HTTPVersion:headerFields:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The URL for the new object.</p>
                <em>statusCode</em>
                <p>The HTTP status code to return.</p>
                <em>HTTPVersion</em>
                <p>The version of the HTTP response as represented by the server.  This is typically represented as "HTTP/1.1"</p>
                <em>headerFields</em>
                <p>A dictionary representing the header keys and values of the server response.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object or <c>NULL</c> if an error occurred during initialization. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS v5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:MIMEType:expectedContentLength:textEncodingName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="statusCode">
            </param>
            <param name="HTTPVersion">
            </param>
            <param name="headerFields">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.MIMEType">
            <summary>
            Returns the receiver’s MIME type.
            <br></br>Equivalent to the native <c>MIMEType</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s MIME type.</p>
                <b>Discussion</b>
                <p>The MIME type is often provided by the response’s originating source. However, that value may be changed or corrected by a protocol implementation if it can be determined that the response’s source reported the information incorrectly. </p>
                <p>If the response’s originating source does not provide a MIME type, an attempt to guess the MIME type may be made.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.SuggestedFilename">
            <summary>
            Returns a suggested filename for the response data.
            <br></br>Equivalent to the native <c>suggestedFilename</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A suggested filename for the response data.</p>
                <b>Discussion</b>
                <p>The method tries to create a filename using the following, in order:</p>
                <ol class="ol">
                    <li class="li">
                        <p>A filename specified using the content disposition header.</p>
                    </li>
                    <li class="li">
                        <p>The last path component of the URL.</p>
                    </li>
                    <li class="li">
                        <p>The host of the URL.</p>
                    </li>
                </ol>
                <p>If the host of URL can't be converted to a valid filename, the filename “unknown” is used.</p>
                <p>In most cases, this method appends the proper file extension based on the MIME type. This method will always return a valid filename regardless of whether or not the resource is saved to disk.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.TextEncodingName">
            <summary>
            Returns the name of the receiver’s text encoding provided by the response’s originating source.
            <br></br>Equivalent to the native <c>textEncodingName</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The name of the receiver’s text encoding provided by the response’s originating source, or <c>null</c> if no text encoding was provided by the protocol</p>
                <b>Discussion</b>
                <p>Clients can convert this string to an <c>NSStringEncoding</c> or a <c>CFStringEncoding</c> using the methods and functions available in the appropriate framework.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.URL">
            <summary>
            Returns the receiver’s URL.
            <br></br>Equivalent to the native <c>URL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSUUID">
            <summary>
            The <c>NSUUID</c> class creates UUID strings that are to uniquely identify types, interfaces, and other items.
            </summary>
            <remarks>
                <p>UUIDs (Universally Unique Identifiers), also known as GUIDs (Globally Unique Identifiers) or IIDs (Interface Identifiers), are 128-bit values A UUID is made unique over both space and time by combining a value unique to the computer on which it was generated and a value representing the number of 100-nanosecond intervals since October 15, 1582 at 00:00:00.</p>
                <p>The standard format for UUIDs represented in ASCII is a string punctuated by hyphens, for example <c>68753A44-4D6F-1226-9C60-0050E4C00067</c>. The hex representation looks, as you might expect, like a list of numerical values preceded by 0x. For example, <c>0xD7</c>, <c>0x36</c>, <c>0x95</c>, <c>0x0A</c>, <c>0x4D</c>, <c>0x6E</c>, <c>0x12</c>, <c>0x26</c>, <c>0x80</c>, <c>0x3A</c>, <c>0x00</c>, <c>0x50</c>, <c>0xE4</c>, <c>0xC0</c>, <c>0x00</c>, <c>0x67</c>. Because a UUID is expressed simply as an array of bytes, there are no endianness considerations for different platforms.</p>
                <p>
                    <strong>Note:</strong> The <c>NSUUID</c> class is not toll-free bridged with CoreFoundation’s <c>CFUUIDRef</c>. Use UUID strings to convert between CFUUID and NSUUID, if needed. Two <c>NSUUID</c> objects are not guaranteed to be comparable by pointer value (as <c>CFUUIDRef</c> is); use <c>isEqual:</c> to compare two <c>NSUUID</c> instances.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.UP_NSUUID_UUID">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.UP_NSUUID_alloc_initWithUUIDString_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.UP_NSUUID_UUIDString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSUUID" /> class.
            <br></br>Equivalent to the native <c>[[NSUUID alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSUUID.ClassExists">
            <summary>
            Returns whether the native NSUUID class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.UUID">
            <summary>
            Create and returns a new UUID with RFC 4122 version 4 random bytes.
            <br></br>Equivalent to the native <c>UUID</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new UUID object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– init</c>
                    </li>
                    <li>
                        <c>– initWithUUIDBytes:</c>
                    </li>
                    <li>
                        <c>– initWithUUIDString:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSUUID and initializes the object. Creates and returns a new UUID from the formatted string.
            <br></br>Equivalent to the native <c>[[NSUUID alloc] initWithUUIDString:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The source string containing the UUID. The standard format for UUIDs represented in ASCII is a string punctuated by hyphens, for example <c>68753A44-4D6F-1226-9C60-0050E4C00067</c>.
            </p>
                <b>Return Value</b>
                <p>A new UUID object. Returns <c>null</c> for invalid strings.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ UUID</c>
                    </li>
                    <li>
                        <c>– init</c>
                    </li>
                    <li>
                        <c>– initWithUUIDBytes:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSUUID.UUIDString">
            <summary>
            Returns the UUID as a string.
            <br></br>Equivalent to the native <c>UUIDString</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing a formatted UUID for example <c>E621E1F8-C36C-495A-93FC-0C247A3E6E5F</c>. </p>
                <b>Discussion</b>
                <p>Use this method to create a string representation of the <c>NSUUID</c> object to compare with a <c>CFUUIDRef</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSValue">
            <summary>
            An <c>NSValue</c> object is a simple container for a single C or Objective-C data item. It can hold any of the scalar types such as int, float, and char, as well as pointers, structures, and object ids. The purpose of this class is to allow items of such data types to be added to collections such as instances of <c>object[]</c> and <c>object[]</c>, which require their elements to be objects. <c>NSValue</c> objects are always immutable.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGAffineTransform_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGPoint_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGRect_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGSize_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithNonretainedObject_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithRange_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGAffineTransformValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGPointValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGRectValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGSizeValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_isEqualToValue_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_nonretainedObjectValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_rangeValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSValue" /> class.
            <br></br>Equivalent to the native <c>[[NSValue alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSValue.ClassExists">
            <summary>
            Returns whether the native NSValue class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(UnityEngine.Matrix4x4)">
            <summary>
            Creates and returns a value object that contains the specified affine transform data.
            <br></br>Equivalent to the native <c>valueWithCGAffineTransform:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>transform</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the affine transform data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGAffineTransformValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="transform">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(UnityEngine.Vector2)">
            <summary>
            Creates and returns a value object that contains the specified point structure.
            <br></br>Equivalent to the native <c>valueWithCGPoint:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>point</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the point information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGPointValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="point">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(UnityEngine.Rect)">
            <summary>
            Creates and returns a value object that contains the specified rectangle structure.
            <br></br>Equivalent to the native <c>valueWithCGRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the rectangle information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGRectValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(U3DXT.Utils.Size)">
            <summary>
            Creates and returns a value object that contains the specified size structure.
            <br></br>Equivalent to the native <c>valueWithCGSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the size information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGSizeValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="size">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(System.Object)">
            <summary>
            Creates and returns an <c>NSValue</c> object that contains a given object.
            <br></br>Equivalent to the native <c>valueWithNonretainedObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>anObject</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new <c>NSValue</c> object that contains <em>anObject</em>.</p>
                <b>Discussion</b>
                <p> This method is equivalent to invoking <c>value:withObjCType:</c> in this manner:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSValue *theValue = [NSValue value:&amp;anObject withObjCType:@encode(void *)];  </pre>
                        </td>
                    </tr>
                </table>
                <p>This method is useful if you want to add an object to a  collection  but don’t want the collection to create a strong reference to it.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– nonretainedObjectValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Creates and returns an <c>NSValue</c> object that contains a given <c>NSRange</c> structure.
            <br></br>Equivalent to the native <c>valueWithRange:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new <c>NSValue</c> object that contains the value of <em>range</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– rangeValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGAffineTransformValue">
            <summary>
            Returns an affine transform structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGAffineTransformValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An affine transform structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGAffineTransform:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGPointValue">
            <summary>
            Returns a point structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGPointValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A point structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGPoint:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGRectValue">
            <summary>
            Returns a rectangle structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGRectValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A rectangle structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGRect:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGSizeValue">
            <summary>
            Returns a size structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGSizeValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A size structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGSize:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.IsEqualToValue(U3DXT.iOS.Native.Foundation.NSValue)">
            <summary>
            Returns a Boolean value that indicates whether the receiver and another value are equal.
            <br></br>Equivalent to the native <c>isEqualToValue:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aValue</em>
                <p>The value with which to compare the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver and <em>aValue</em> are equal, otherwise <c>false</c>. For <c>NSValue</c> objects, the class, type, and contents are compared to determine equality.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.NonretainedObjectValue">
            <summary>
            Returns the receiver's value as an id.
            <br></br>Equivalent to the native <c>nonretainedObjectValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver's value as an id. If the receiver was not created to hold a pointer-sized data item, the result is undefined.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– getValue:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.RangeValue">
            <summary>
            Returns an <c>NSRange</c> structure representation of the receiver.
            <br></br>Equivalent to the native <c>rangeValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>NSRange</c> structure representation of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithRange:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals.NativePointer">
            <summary>
            Native pointer.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals.NativePointer.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.Internals.NativePointer" /> class.
            </summary>
            <param name="address">Address.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Internals.NativePointer.NativeAddress">
            <summary>
            The native address.
            </summary>
            <value>The native address.</value>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.HelperDelegate">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.DebugCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.CallbackCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.RemoveCallbackCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.ExceptionCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._DebugLog(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._ThrowException(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Callback(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Add(U3DXT.iOS.Native.Internals._CallbackCache.HelperDelegate,System.Delegate,U3DXT.iOS.Native.Internals._IosBaseClass)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Remove(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Get(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackEntry">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._uuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._oneTime">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._helper">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._callback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._ownerUuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackEntry.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._IosBaseClass">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._IosBaseClass._newHelper">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.UP_NSObject_alloc_init(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._IosBaseClass._uuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass._Init(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.Finalize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="P:U3DXT.iOS.Native.Internals._IosBaseClass.Uuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.ToString">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._IosBaseDelegate">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate.UP_ProtocolBase_add_optionals(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._ObjectCache">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._ObjectCache.RemoveCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._RemoveCallback(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._Create(System.Type,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._Remove(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._SetDebugOn(System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._Serializer">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer._Serialize(System.Object)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer._Deserialize(System.Object)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer._GetType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.QuartzCore.CALayer">
            <summary>
            The <c>CALayer</c> class manages image-based content and allows you to perform animations on that content. Layers are often used to provide the backing store for views but can also be used without a view to display content. A layer’s main job is to manage the visual content that you provide but the layer itself has visual attributes that can be set, such as a background color, border, and shadow. In addition to managing visual content, the layer also maintains information about the geometry of its content (such as its position, size, and transform) that is used to present that content onscreen. Modifying the properties of the layer is how you initiate animations on the layer’s content or geometry. A layer object encapsulates the duration and pacing of a layer and its animations by adopting the <c>CAMediaTiming</c> protocol, which defines the layer’s timing information.
            </summary>
            <remarks>
                <p>If the layer object was created by a view, the view typically assigns itself as the layer’s delegate automatically, and you should not change that relationship. For layers you create yourself, you can assign a <c>delegate</c> object and use that object to provide the contents of the layer dynamically and perform other tasks. A layer may also have a layout manager object (assigned to the <c>layoutManager</c> property) to manage the layout of subviews separately.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.QuartzCore.CALayer.UP_CALayer_renderInContext_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.QuartzCore.CALayer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.QuartzCore.CALayer.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.QuartzCore.CALayer.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.QuartzCore.CALayer" /> class.
            <br></br>Equivalent to the native <c>[[CALayer alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.QuartzCore.CALayer.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.QuartzCore.CALayer.ClassExists">
            <summary>
            Returns whether the native CALayer class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.QuartzCore.CALayer.RenderInContext(U3DXT.iOS.Native.CoreGraphics.CGContext)">
            <summary>
            Renders the receiver and its sublayers into the specified context.
            <br></br>Equivalent to the native <c>renderInContext:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>ctx</em>
                <p>The graphics context to use to render the layer.</p>
                <b>Discussion</b>
                <p>This method renders directly from the layer tree, ignoring any animations added to the render tree. Renders in the coordinate space of the layer.</p>
                <p>
                    <strong>Important:</strong> The OS X v10.5 implementation of this method does not support the entire Core Animation composition model. <c>QCCompositionLayer</c>, <c>CAOpenGLLayer</c>, and <c>QTMovieLayer</c> layers are not rendered. Additionally, layers that use 3D transforms are not rendered, nor are layers that specify <c>backgroundFilters</c>, <c>filters</c>, <c>compositingFilter</c>, or a <c>mask</c> values. Future versions of OS X may add support for rendering these layers and properties.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="ctx">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.NSLineBreakMode">
            <summary>
            These constants specify what happens when a line is too long for its container.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.Clipping">
            <summary>
                <p>Lines are simply not drawn past the edge of the text container.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByClipping</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.CharWrapping">
            <summary>
                <p>Wrapping occurs before the first character that doesn’t fit.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByCharWrapping</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.TruncatingHead">
            <summary>
                <p>The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. Although this mode works for multiline text, it is more often used for single line text.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByTruncatingHead</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.TruncatingTail">
            <summary>
                <p>The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. Although this mode works for multiline text, it is more often used for single line text.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByTruncatingTail</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.WordWrapping">
            <summary>
                <p>Wrapping occurs at word boundaries, unless the word itself doesn’t fit on a single line.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByWordWrapping</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.TruncatingMiddle">
            <summary>
                <p>The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. Although this mode works for multiline text, it is more often used for single line text.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByTruncatingMiddle</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.NSTextAlignment">
            <summary>
            Options for aligning text horizontally.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Justified">
            <summary>
                <p>Fully justify the text so that the last line in a paragraph is natural aligned.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentJustified</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Right">
            <summary>
                <p>Align text along the right edge.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Left">
            <summary>
                <p>Align text along the left edge.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Natural">
            <summary>
                <p>Use the default alignment associated with the current script.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentNatural</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Center">
            <summary>
                <p>Align text equally along both sides of the center line.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentCenter</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView">
            <summary>
            Use an activity indicator to show that a task is in progress. An activity indicator appears as a “gear” that is either spinning or stopped.
            </summary>
            <remarks>
                <p>You control when an activity indicator animates by calling the <c>startAnimating</c> and <c>stopAnimating</c> methods. To automatically hide the activity indicator when animation stops, set the <c>hidesWhenStopped</c> property to <c>true</c>.</p>
                <p>Starting in iOS 5.0, you can set the color of the activity indicator by using the <c>color</c> property. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_get_activityIndicatorViewStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_set_activityIndicatorViewStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_get_color(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_set_color(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_get_hidesWhenStopped(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_set_hidesWhenStopped(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_alloc_initWithActivityIndicatorStyle_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_isAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_startAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_stopAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView" /> class.
            <br></br>Equivalent to the native <c>[[UIActivityIndicatorView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.ClassExists">
            <summary>
            Returns whether the native UIActivityIndicatorView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.activityIndicatorViewStyle">
            <summary>
            The basic appearance of the activity indicator.
            <br></br>Equivalent to the native <c>activityIndicatorViewStyle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>See <c>UIActivityIndicatorStyle</c> for the available styles. The default value is <c>UIActivityIndicatorViewStyleWhite</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.color">
            <summary>
            The color of the activity indicator.
            <br></br>Equivalent to the native <c>color</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you set a color for an activity indicator, it overrides the color provided by the <c>activityIndicatorViewStyle</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.hidesWhenStopped">
            <summary>
            A Boolean value that controls whether the receiver is hidden when the animation is stopped.
            <br></br>Equivalent to the native <c>hidesWhenStopped</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the value of this property is <c>true</c> (the default), the receiver sets its <c>hidden</c> property (<c>UIView</c>) to <c>true</c> when receiver is not animating. If the <c>hidesWhenStopped</c> property is <c>false</c>, the receiver is not hidden when animation stops. You stop an animating progress indicator with the <c>stopAnimating</c> method.
            </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle)">
            <summary>
            Creates an instance of the native UIActivityIndicatorView and initializes the object. Initializes and returns an activity-indicator object.
            <br></br>Equivalent to the native <c>[[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>style</em>
                <p>A constant that specifies the style of the object to be created. See <c>UIActivityIndicatorStyle</c> for descriptions of the style constants.</p>
                <b>Return Value</b>
                <p>An initialized <c>UIActivityIndicatorView</c> object or <c>null</c> if the object couldn’t be created.</p>
                <b>Discussion</b>
                <p>
                    <c>UIActivityIndicatorView</c> sizes the returned instance according to the specified <em>style</em>. You can set and retrieve the style of a activity indicator through the <c>activityIndicatorViewStyle</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="style">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.IsAnimating">
            <summary>
            Returns whether the receiver is animating.
            <br></br>Equivalent to the native <c>isAnimating</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver is animating, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– startAnimating</c>
                    </li>
                    <li>
                        <c>– stopAnimating</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.StartAnimating">
            <summary>
            Starts the animation of the progress indicator.
            <br></br>Equivalent to the native <c>startAnimating</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When the progress indicator is animated, the gear spins to indicate indeterminate progress. The indicator is animated until <c>stopAnimating</c> is called.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.StopAnimating">
            <summary>
            Stops the animation of the progress indicator.
            <br></br>Equivalent to the native <c>stopAnimating</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Call this method to stop the animation of the progress indicator started with a call to <c>startAnimating</c>. When animating is stopped, the indicator is hidden, unless <c>hidesWhenStopped</c> is <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIActivityIndicatorView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIActivityIndicatorView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle">
            <summary>
            The visual style of the progress indicator.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You set the value of the <c>activityIndicatorViewStyle</c> property with these constants.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle.White">
            <summary>
                <p>The standard white style of indicator (the default).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIActivityIndicatorViewStyleWhite</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle.Gray">
            <summary>
                <p>The standard gray style of indicator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIActivityIndicatorViewStyleGray</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle.WhiteLarge">
            <summary>
                <p>The large white style of indicator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIActivityIndicatorViewStyleWhiteLarge</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertView">
            <summary>
            Use the <c>UIAlertView</c> class to display an alert message to the user. An alert view functions similar to but differs in appearance from an action sheet (an instance of <c>UIActionSheet</c>).
            </summary>
            <remarks>
                <p>Use the properties and methods defined in this class to set the title, message, and delegate of an alert view and configure the buttons. You must set a delegate if you add custom buttons. The delegate should conform to the <c>UIAlertViewDelegate</c> protocol. Use the <c>show</c> method to display an alert view once it is configured.</p>
                <p>
                    <strong>Important:</strong> In iOS 4.0 and later, alert views are not dismissed automatically when an application moves to the background. This behavior differs from earlier versions of the operating system, where alert views were automatically cancelled (and their cancellation handler executed) as part of the termination sequence for the application. Now, it is up to you to decide whether to dismiss the alert view (and execute its cancellation handler) or leave it visible for when your application moves back to the foreground. Remember that your application can still be terminated while in the background, so some type of action may be necessary in either case. </p>
                <p>
                </p>
                <b>Subclassing Notes</b>
                <p>The <c>UIAlertView</c> class is intended to be used as-is and does not support subclassing. The view hierarchy for this class is private and must not be modified.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIAlertView.ClickedButtonAtIndex">
            <summary>
            Sent to the delegate when the user clicks a button on an alert view.
            <br></br>Equivalent to implementing the native <c>alertView:clickedButtonAtIndex:</c> method of <c>UIAlertViewDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertView.ClickedButtonAtIndexEventArgs">
            <summary>
            Event arguments for ClickedButtonAtIndex.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.ClickedButtonAtIndexEventArgs.#ctor(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertView.ClickedButtonAtIndexEventArgs.buttonIndex">
            <summary>buttonIndex</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIAlertView.DidDismissWithButtonIndex">
            <summary>
            Sent to the delegate after an alert view is dismissed from the screen.
            <br></br>Equivalent to implementing the native <c>alertView:didDismissWithButtonIndex:</c> method of <c>UIAlertViewDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertView.DidDismissWithButtonIndexEventArgs">
            <summary>
            Event arguments for DidDismissWithButtonIndex.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.DidDismissWithButtonIndexEventArgs.#ctor(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertView.DidDismissWithButtonIndexEventArgs.buttonIndex">
            <summary>buttonIndex</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIAlertView.WillDismissWithButtonIndex">
            <summary>
            Sent to the delegate before an alert view is dismissed.
            <br></br>Equivalent to implementing the native <c>alertView:willDismissWithButtonIndex:</c> method of <c>UIAlertViewDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertView.WillDismissWithButtonIndexEventArgs">
            <summary>
            Event arguments for WillDismissWithButtonIndex.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.WillDismissWithButtonIndexEventArgs.#ctor(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertView.WillDismissWithButtonIndexEventArgs.buttonIndex">
            <summary>buttonIndex</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIAlertView.Cancel">
            <summary>
            Sent to the delegate before an alert view is canceled.
            <br></br>Equivalent to implementing the native <c>alertViewCancel:</c> method of <c>UIAlertViewDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.shouldEnableFirstOtherButtonHandler">
            <summary>
            Sent to the delegate to determine whether the first non-cancel button in the alert should be enabled.
            <br></br>Equivalent to implementing the native <c>alertViewShouldEnableFirstOtherButton:</c> method of <c>UIAlertViewDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIAlertView.DidPresent">
            <summary>
            Sent to the delegate after an alert view is presented to the user.
            <br></br>Equivalent to implementing the native <c>didPresentAlertView:</c> method of <c>UIAlertViewDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIAlertView.WillPresent">
            <summary>
            Sent to the delegate before a model view is presented to the user.
            <br></br>Equivalent to implementing the native <c>willPresentAlertView:</c> method of <c>UIAlertViewDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_alertViewStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_alertViewStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_cancelButtonIndex(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_cancelButtonIndex(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_firstOtherButtonIndex(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_message(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_message(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_numberOfButtons(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_title(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_title(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_visible(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_addButtonWithTitle_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_buttonTitleAtIndex_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_dismissWithClickedButtonIndex_animated_(System.String,System.Int32,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_alloc_initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles_(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_show(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_textFieldAtIndex_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIAlertView" /> class.
            <br></br>Equivalent to the native <c>[[UIAlertView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.ClassExists">
            <summary>
            Returns whether the native UIAlertView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.alertViewStyle">
            <summary>
            The kind of alert displayed to the user.
            <br></br>Equivalent to the native <c>alertViewStyle</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.cancelButtonIndex">
            <summary>
            The index number of the cancel button.
            <br></br>Equivalent to the native <c>cancelButtonIndex</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The button indices start at <c>0</c>. If <c>-1</c>, then the index is not set.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.Delegate">
            <summary>
            The receiver’s delegate or <c><!--a  -->nil<!--/a--></c> if it doesn’t have a delegate.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>See <em>UIAlertViewDelegate Protocol Reference</em> for the methods this delegate should implement.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.firstOtherButtonIndex">
            <summary>
            The index of the first other button. (read-only)
            <br></br>Equivalent to the native <c>firstOtherButtonIndex</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The button indices start at <c>0</c>. If <c>-1</c>, then the index is not set. This property is ignored if there are no other buttons. The default value is <c>-1</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.message">
            <summary>
            Descriptive text that provides more details than the title.
            <br></br>Equivalent to the native <c>message</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.numberOfButtons">
            <summary>
            The number of buttons on the alert view. (read-only)
            <br></br>Equivalent to the native <c>numberOfButtons</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.title">
            <summary>
            The string that appears in the receiver’s title bar.
            <br></br>Equivalent to the native <c>title</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.visible">
            <summary>
            A Boolean value that indicates whether the receiver is displayed. (read-only)
            <br></br>Equivalent to the native <c>visible</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, the receiver is displayed; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.AddButton(System.String)">
            <summary>
            Adds a button to the receiver with the given title.
            <br></br>Equivalent to the native <c>addButtonWithTitle:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>title</em>
                <p>The title of the new button.</p>
                <b>Return Value</b>
                <p>The index of the new button. Button indices start at <c>0</c> and increase in the order they are added.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>message</c>
                    </li>
                </ul>
            </remarks>
            <param name="title">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.ButtonTitleAtIndex(System.Int32)">
            <summary>
            Returns the title of the button at the given index.
            <br></br>Equivalent to the native <c>buttonTitleAtIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>buttonIndex</em>
                <p>The index of the button. The button indices start at <c>0</c>.</p>
                <b>Return Value</b>
                <p>The title of the button specified by index <em>buttonIndex</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Displaying”</c>
                    </li>
                </ul>
            </remarks>
            <param name="buttonIndex">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.Dismiss(System.Int32,System.Boolean)">
            <summary>
            Dismisses the receiver, optionally with animation.
            <br></br>Equivalent to the native <c>dismissWithClickedButtonIndex:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>buttonIndex</em>
                <p>The index of the button that was clicked just before invoking this method. The button indices start at <c>0</c>.</p>
                <em>animated</em>
                <p>
                    <c>true</c> if the receiver should be removed by animating it first; otherwise, <c>false</c> if it should be removed immediately with no animation.</p>
                <b>Discussion</b>
                <p>In iOS 4.0, you may want to call this method whenever your application moves to the background. An alert view is not dismissed automatically when an application moves to the background. This behavior differs from previous versions of the operating system, where they were canceled automatically when the application was terminated. Dismissing the alert view gives your application a chance to save changes or abort the operation and perform any necessary cleanup in case your application is terminated later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="buttonIndex">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(System.String,System.String,U3DXT.iOS.Native.UIKit.UIAlertViewDelegate,System.String,System.String)">
            <summary>
            Creates an instance of the native UIAlertView and initializes the object. Convenience method for initializing an alert view.
            <br></br>Equivalent to the native <c>[[UIAlertView alloc] initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>title</em>
                <p>The string that appears in the receiver’s title bar.</p>
                <em>message</em>
                <p>Descriptive text that provides more details than the title.</p>
                <em>delegate</em>
                <p>The receiver’s delegate or <c><!--a  -->nil<!--/a--></c> if it doesn’t have a delegate.</p>
                <em>cancelButtonTitle</em>
                <p>The title of the cancel button or <c>null</c> if there is no cancel button. </p>
                <p>Using this argument is equivalent to setting the cancel button index to the value returned by invoking <c>addButtonWithTitle:</c> specifying this title. </p>
                <em>otherButtonTitles,</em>
                <p>The title of another button. </p>
                <p>Using this argument is equivalent to invoking <c>addButtonWithTitle:</c> with this title to add more buttons.</p>
                <em>...</em>
                <p>Titles of additional buttons to add to the receiver, terminated with <c>null</c>.</p>
                <b>Return Value</b>
                <p>Newly initialized alert view.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– addButtonWithTitle:</c>
                    </li>
                </ul>
            </remarks>
            <param name="title">
            </param>
            <param name="message">
            </param>
            <param name="aDelegate">
            </param>
            <param name="cancelButtonTitle">
            </param>
            <param name="otherButtonTitles">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.Show">
            <summary>
            Displays the receiver using animation.
            <br></br>Equivalent to the native <c>show</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.TextFieldAtIndex(System.Int32)">
            <summary>
            Returns the text field at the given index
            <br></br>Equivalent to the native <c>textFieldAtIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textFieldIndex</em>
                <p>The index of the text field. The text field indices start at <c>0</c>.</p>
                <b>Return Value</b>
                <p>The text field specified by index <em>textFieldIndex</em>.</p>
                <b>Discussion</b>
                <p>The number of text fields present in an alert is dependent on the style of the alert.</p>
                <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                    <tr>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Alert Style</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Text Fields</p>
                        </th>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>UIAlertViewStyleDefault</c>
                            </p>
                        </td>
                        <td>
                            <p>No user-editable text fields.</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>UIAlertViewStyleSecureTextInput</c>
                            </p>
                        </td>
                        <td>
                            <p>A single text field at index <c>0</c>.</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>UIAlertViewStylePlainTextInput</c>
                            </p>
                        </td>
                        <td>
                            <p>A single text field at index <c>0</c>.</p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>
                                <c>UIAlertViewStyleLoginAndPasswordInput</c>
                            </p>
                        </td>
                        <td>
                            <p>The login field is at index <c>0</c>. The password field is at index <c>1</c>.</p>
                        </td>
                    </tr>
                </table>
                <p>If your application attempts to retrieve a text field with an index that it out of bounds, the alert raises an <c>NSRangeException</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="textFieldIndex">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIAlertView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIAlertView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate">
            <summary>
            The <c>UIAlertViewDelegate</c> protocol defines the methods a delegate of a <c>UIAlertView</c> object should implement. The delegate implements the button actions and any other custom behavior. Some of the methods defined in this protocol are optional.
            </summary>
            <remarks>
                <p>If you add your own buttons or customize the behavior of an alert view, implement a delegate conforming to this protocol to handle the corresponding delegate messages. Use the <c>delegate</c> property of an alert view to specify one of your application objects as the delegate.</p>
                <p>If you add your own buttons to an alert view, the delegate must implement the <c>alertView:clickedButtonAtIndex:</c> message to respond when those buttons are clicked; otherwise, your custom buttons do nothing. The alert view is automatically dismissed after the <c>alertView:clickedButtonAtIndex:</c> delegate method is invoked.</p>
                <p>Optionally, you can implement the <c>alertViewCancel:</c> method to take the appropriate action when the system cancels your alert view. If the delegate does not implement this method, the default behavior is to simulate the user clicking the cancel button and closing the view.</p>
                <p>You can also optionally augment the behavior of presenting and dismissing alert views using the methods in  “Customizing Behavior.” </p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.UP_UIAlertViewDelegate_set__alertView_clickedButtonAtIndex__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.UP_UIAlertViewDelegate_set__alertView_didDismissWithButtonIndex__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.UP_UIAlertViewDelegate_set__alertView_willDismissWithButtonIndex__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.UP_UIAlertViewDelegate_set__alertViewCancel__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.UP_UIAlertViewDelegate_set__alertViewShouldEnableFirstOtherButton__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.UP_UIAlertViewDelegate_set__didPresentAlertView__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.UP_UIAlertViewDelegate_set__willPresentAlertView__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.ClickedButtonAtIndex(U3DXT.iOS.Native.UIKit.UIAlertView,System.Int32)">
            <summary>
            (optional) Sent to the delegate when the user clicks a button on an alert view.
            <br></br>Equivalent to the native <c>alertView:clickedButtonAtIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alertView</em>
                <p>The alert view containing the button.</p>
                <em>buttonIndex</em>
                <p>The index of the button that was clicked. The button indices start at <c>0</c>.</p>
                <b>Discussion</b>
                <p>The receiver is automatically dismissed after this method is invoked.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="alertView">
            </param>
            <param name="buttonIndex">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.DidDismissWithButtonIndex(U3DXT.iOS.Native.UIKit.UIAlertView,System.Int32)">
            <summary>
            (optional) Sent to the delegate after an alert view is dismissed from the screen.
            <br></br>Equivalent to the native <c>alertView:didDismissWithButtonIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alertView</em>
                <p>The alert view that was dismissed.</p>
                <em>buttonIndex</em>
                <p>The index of the button that was clicked. The button indices start at <c>0</c>. If this is the cancel button index, the alert view is canceling. If <c>-1</c>, the cancel button index is not set.</p>
                <b>Discussion</b>
                <p>This method is invoked after the animation ends and the view is hidden.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– alertView:willDismissWithButtonIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="alertView">
            </param>
            <param name="buttonIndex">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.WillDismissWithButtonIndex(U3DXT.iOS.Native.UIKit.UIAlertView,System.Int32)">
            <summary>
            (optional) Sent to the delegate before an alert view is dismissed.
            <br></br>Equivalent to the native <c>alertView:willDismissWithButtonIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alertView</em>
                <p>The alert view that is about to be dismissed.</p>
                <em>buttonIndex</em>
                <p>The index of the button that was clicked. The button indices start at <c>0</c>. If this is the cancel button index, the alert view is canceling. If <c>-1</c>, the cancel button index is not set.</p>
                <b>Discussion</b>
                <p>This method is invoked before the animation begins and the view is hidden.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– alertView:didDismissWithButtonIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="alertView">
            </param>
            <param name="buttonIndex">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.Cancel(U3DXT.iOS.Native.UIKit.UIAlertView)">
            <summary>
            (optional) Sent to the delegate before an alert view is canceled.
            <br></br>Equivalent to the native <c>alertViewCancel:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alertView</em>
                <p>The alert view that will be canceled.</p>
                <b>Discussion</b>
                <p>If the alert view’s delegate does not implement this method, clicking the cancel button is simulated and the alert view is dismissed. Implement this method if you need to perform some actions before an alert view is canceled. An alert view can be canceled at any time by the system—for example, when the user taps the Home button. The <c>alertView:willDismissWithButtonIndex:</c> and <c>alertView:didDismissWithButtonIndex:</c> methods are invoked after this method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="alertView">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.ShouldEnableFirstOtherButton(U3DXT.iOS.Native.UIKit.UIAlertView)">
            <summary>
            (optional) Sent to the delegate to determine whether the first non-cancel button in the alert should be enabled.
            <br></br>Equivalent to the native <c>alertViewShouldEnableFirstOtherButton:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alertView</em>
                <p>The alert view that is being configured.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the button should be enabled, no if the button should be disabled.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="alertView">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.DidPresent(U3DXT.iOS.Native.UIKit.UIAlertView)">
            <summary>
            (optional) Sent to the delegate after an alert view is presented to the user.
            <br></br>Equivalent to the native <c>didPresentAlertView:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alertView</em>
                <p>The alert view that was displayed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– willPresentAlertView:</c>
                    </li>
                </ul>
            </remarks>
            <param name="alertView">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate.WillPresent(U3DXT.iOS.Native.UIKit.UIAlertView)">
            <summary>
            (optional) Sent to the delegate before a model view is presented to the user.
            <br></br>Equivalent to the native <c>willPresentAlertView:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alertView</em>
                <p>The alert view that is about to be displayed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– didPresentAlertView:</c>
                    </li>
                </ul>
            </remarks>
            <param name="alertView">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._alertView_clickedButtonAtIndex__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_alertView_clickedButtonAtIndex__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._alertView_didDismissWithButtonIndex__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_alertView_didDismissWithButtonIndex__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._alertView_willDismissWithButtonIndex__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_alertView_willDismissWithButtonIndex__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._alertViewCancel__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_alertViewCancel__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._alertViewShouldEnableFirstOtherButton__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_alertViewShouldEnableFirstOtherButton__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._didPresentAlertView__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_didPresentAlertView__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertViewDelegate._willPresentAlertView__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_willPresentAlertView__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertViewStyle">
            <summary>
            The presentation style of the alert.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.LoginAndPasswordInput">
            <summary>
                <p>An alert that allows the user to enter a login identifier and password.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStyleLoginAndPasswordInput</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.SecureTextInput">
            <summary>
                <p>An alert that allows the user to enter text. The text field is obscured.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStyleSecureTextInput</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.PlainTextInput">
            <summary>
                <p>An alert that allows the user to enter text.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStylePlainTextInput</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.Default">
            <summary>
                <p>A standard alert.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStyleDefault</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIApplication">
            <summary>
            The <c>UIApplication</c> class provides a centralized point of control and coordination for applications running on iOS.
            </summary>
            <remarks>
                <p>Every application must have exactly one instance of <c>UIApplication</c> (or a subclass of <c>UIApplication</c>). When an application is launched, the <c>UIApplicationMain</c> function is called; among its other tasks, this function creates a singleton <c>UIApplication</c> object. Thereafter you can access this object by invoking the <c>sharedApplication</c> class method.</p>
                <p>A major role of a <c>UIApplication</c> object is to handle the initial routing of incoming user events. It also dispatches action messages forwarded to it by control objects (<c>UIControl</c>) to the appropriate target objects. In addition, the <c>UIApplication</c> object maintains a list of all the windows (<c>UIWindow</c> objects) currently open in the application, so through those it can retrieve any of the application’s <c>UIView</c> objects. The application object is typically assigned a delegate, an object that the application informs of significant runtime events—for example, application launch, low-memory warnings, and application termination—giving it an opportunity to respond appropriately.</p>
                <p>Applications can cooperatively handle a resource such as an email or an image file through the <c>openURL:</c> method. For example, an application opening an email URL with this method may cause the mail client to launch and display the message.</p>
                <p>The programmatic interfaces of <c>UIApplication</c> and <c>UIApplicationDelegate</c> also allow you to manage behavior that is specific to the device. You can control application response to changes in interface orientation, temporarily suspend incoming touch events, and turn proximity sensing (of the user’s face) off and on again.  </p>
                <p>For iOS 3.0, <c>UIApplication</c> has added methods for remote-notification registration, for triggering of the undo-redo UI (<c>applicationSupportsShakeToEdit</c>), and for determining whether any installed application can open a URL (<c>canOpenURL:</c>).</p>
                <p>In iOS 4.0, <c>UIApplication</c> has added methods and constants for managing background execution, for scheduling and canceling local notifications, and for controlling the reception of remote-control events.</p>
                <p>
                    <c>UIApplication</c> defines a delegate that must adopt the <c>UIApplicationDelegate</c> protocol and implement some of the protocol methods.</p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	You might decide to subclass <c>UIApplication</c> to override <c>sendEvent:</c> or <c>sendAction:to:from:forEvent:</c> to implement custom event and action dispatching. However, there is rarely a valid need to extend this class; the application delegate (<c>UIApplicationDelegate</c> is sufficient for most occasions. If you do subclass <c>UIApplication</c>, be very sure of what you are trying to accomplish with the subclass.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.deviceRootViewController">
            <summary>
            Gets the valid root controller from the window on device.
            If multiple displays are used, it returns the one on device.
            </summary>
            <value>The device root controller.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_sharedApplication">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_get_keyWindow(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_get_applicationIconBadgeNumber(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_set_applicationIconBadgeNumber(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_get_networkActivityIndicatorVisible(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_set_networkActivityIndicatorVisible(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_get_windows(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_get_statusBarHidden(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_set_statusBarHidden(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_get_statusBarStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_set_statusBarStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_canOpenURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_openURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_setStatusBarStyle_animated_(System.String,System.Int32,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_setStatusBarHidden_withAnimation_(System.String,System.Boolean,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIApplication" /> class.
            <br></br>Equivalent to the native <c>[[UIApplication alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.ClassExists">
            <summary>
            Returns whether the native UIApplication class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.SharedApplication">
            <summary>
            Returns the singleton application instance.
            <br></br>Equivalent to the native <c>sharedApplication</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The application instance is created in the <c>UIApplicationMain</c> function.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.keyWindow">
            <summary>
            The application's key window. (read-only)
            <br></br>Equivalent to the native <c>keyWindow</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property holds the <c>UIWindow</c> object in the <c>windows</c> array that is most recently sent the <c>makeKeyAndVisible</c> message. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>windows</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.applicationIconBadgeNumber">
            <summary>
            The number currently set as the badge of the application icon in Springboard.
            <br></br>Equivalent to the native <c>applicationIconBadgeNumber</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Set to 0 (zero) to hide the badge number. The default is 0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.networkActivityIndicatorVisible">
            <summary>
            A Boolean value that turns an indicator of network activity on or off.
            <br></br>Equivalent to the native <c>networkActivityIndicatorVisible</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Specify <c>true</c> if the application should show network activity and <c>false</c> if it should not. The default value is <c>false</c>. A spinning indicator in the status bar shows network activity. The application may explicitly hide or show this indicator.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.windows">
            <summary>
            The application's visible and hidden windows. (read-only)
            <br></br>Equivalent to the native <c>windows</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property returns an array of the application's visible and hidden windows. The windows are ordered back to front.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property keyWindow</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.statusBarHidden">
            <summary>
            A Boolean value that determines whether the status bar is hidden.
            <br></br>Equivalent to the native <c>statusBarHidden</c> property.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> means the status bar is hidden; <c>false</c> means it's visible.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setStatusBarHidden:animated:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.statusBarStyle">
            <summary>
            The current style of the status bar.
            <br></br>Equivalent to the native <c>statusBarStyle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of the property is a  UIStatusBarStyle  constant that indicates the style of status. The default style is <c>UIStatusBarStyleDefault</c>. The animation slides the status bar out for the old orientation and slides it in for the new orientation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property statusBarHidden</c></li>
                    <li>    <c>@property statusBarFrame</c></li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.CanOpenURL(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Returns whether an application can open a given URL resource.
            <br></br>Equivalent to the native <c>canOpenURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>A URL object that identifies a given resource. The URL’s scheme—possibly a custom scheme—identifies which application can handle the URL. </p>
                <b>Return Value</b>
                <p>
                    <c>false</c> if no application is available that will accept the URL; otherwise, returns <c>true</c>.</p>
                <b>Discussion</b>
                <p>This method guarantees that that if <c>openURL:</c> is called, another application will be launched to handle it. It does not guarantee that the full URL is valid.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.OpenURL(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Opens the resource at the specified URL.
            <br></br>Equivalent to the native <c>openURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>An object representing a URL (Universal Resource Locator). UIKit supports the http:, https:, tel:, and mailto: schemes.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the resource located by the URL was successfully opened; otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>The URL can locate a resource in the same or other application. If the resource is another application, invoking this method may cause the calling application to quit so the other one can be launched.</p>
                <p>You may call <c>canOpenURL:</c> before calling this one to verify that there is an application that can handle it.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>application:handleOpenURL:</c> (<c>UIApplicationDelegate</c>)</li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.SetStatusBarStyle(U3DXT.iOS.Native.UIKit.UIStatusBarStyle,System.Boolean)">
            <summary>
            Sets the style of the status bar, optionally animating the transition to the new style.
            <br></br>Equivalent to the native <c>setStatusBarStyle:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>statusBarStyle</em>
                <p>A constant that specifies a style for the status bar. See the descriptions of the constants in  UIStatusBarStyle  for details.</p>
                <em>animated</em>
                <p>
                    <c>true</c> if the transition to the new style should be animated; otherwise <c>false</c> .</p>
                <b>Discussion</b>
                <p>The animation slides the status bar out toward the top of the interface.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property statusBarStyle</c></li>
                </ul>
            </remarks>
            <param name="statusBarStyle">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.SetStatusBarHidden(System.Boolean,U3DXT.iOS.Native.UIKit.UIStatusBarAnimation)">
            <summary>
            Hides or shows the status bar, optionally animating the transition.
            <br></br>Equivalent to the native <c>setStatusBarHidden:withAnimation:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>hidden</em>
                <p>
                    <c>true</c> to hide the status bar, <c>false</c> to show the status bar.</p>
                <em>animation</em>
                <p>A constant that indicates whether there should be an animation and, if one is requested, whether it should fade the status bar in or out or whether it should slide the status bar in or out.</p>
                <b>Discussion</b>
                <p>See the descriptions of the constants of the <c>UIStatusBarAnimation</c> type for more information. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="hidden">
            </param>
            <param name="animation">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment">
            <summary>
            Vertical adjustment options.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Baseline adjustment options determine how to adjust the position of text in cases where the text must be drawn using a different font size than the one originally specified. For example, with the <c>UIBaselineAdjustmentAlignBaselines</c> option, the position of the baseline remains fixed at its initial location while the text appears to move toward that baseline. Similarly, the <c>UIBaselineAdjustmentNone</c> option makes it appear as if the text is moving upwards towards the top-left corner of the bounding box.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment.AlignCenters">
            <summary>
                <p>Adjust text based relative to the center of its bounding box. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIBaselineAdjustmentAlignCenters</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment.AlignBaselines">
            <summary>
                <p>Adjust text relative to the position of its baseline. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIBaselineAdjustmentAlignBaselines</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment.None">
            <summary>
                <p>Adjust text relative to the top-left corner of the bounding box. This is the default adjustment. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIBaselineAdjustmentNone</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIBezierPath">
            <summary>
            The <c>UIBezierPath</c> class lets you define a path consisting of straight and curved line segments and render that path in your custom views. You use this class initially to specify just the geometry for your path. Paths can define simple shapes such as rectangles, ovals, and arcs or they can define complex polygons that incorporate a mixture of straight and curved line segments. After defining the shape, you can use additional methods of this class to render the path in the current drawing context.
            </summary>
            <remarks>
                <p>A <c>UIBezierPath</c> object combines the geometry of a path with attributes that describe the path during rendering. You set the geometry and attributes separately and can change them independent of one another. Once you have the object configured the way you want it, you can tell it to draw itself in the current context. Because the creation, configuration, and rendering process are all distinct steps, Bezier path objects can be reused easily in your code. You can even use the same object to render the same shape multiple times, perhaps changing the rendering options between successive drawing calls.</p>
                <p>You set the geometry of a path by manipulating the path’s current point. When you create a new empty path object, the current point is undefined and must be set explicitly. To move the current point without drawing a segment, you use the <c>moveToPoint:</c> method. All other methods result in the addition of either a line or curve segments to the path. The methods for adding new segments always assume you are starting at the current point and ending at some new point that you specify. After adding the segment, the end point of the new segment automatically becomes the current point.</p>
                <p>A single Bezier path object can contain any number of open or closed subpaths, where each subpath represents a connected series of path segments. Calling the <c>closePath</c> method closes a subpath by adding a straight line segment from the current point to the first point in the subpath. Calling the <c>moveToPoint:</c> method ends the current subpath (without closing it) and sets the starting point of the next subpath. The subpaths of a Bezier path object share the same drawing attributes and must be manipulated as a group. To draw subpaths with different attributes, you must put each subpath in its own <c>UIBezierPath</c> object.</p>
                <p>After configuring the geometry and attributes of a Bezier path, you draw the path in the current graphics context using the <c>stroke</c> and <c>fill</c> methods. The <c>stroke</c> method traces the outline of the path using the current stroke color and the attributes of the Bezier path object. Similarly, the <c>fill</c> method fills in the area enclosed by the path using the current fill color. (You set the stroke and fill color using the <c>UIColor</c> class.)</p>
                <p>In addition to using a Bezier path object to draw shapes, you can also use it to define a new clipping region. The <c>addClip</c> method intersects the shape represented by the path object with the current clipping region of the graphics context. During subsequent drawing, only content that lies within the new intersection region is actually rendered to the graphics context. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPath">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPathWithCGPath_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPathWithOvalInRect_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPathWithRect_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_(System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPathWithRoundedRect_cornerRadius_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_bounds(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_CGPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_set_CGPath(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_currentPoint(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_empty(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_flatness(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_set_flatness(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_lineCapStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_set_lineCapStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_lineJoinStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_set_lineJoinStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_lineWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_set_lineWidth(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_miterLimit(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_set_miterLimit(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_get_usesEvenOddFillRule(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_set_usesEvenOddFillRule(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_addArcWithCenter_radius_startAngle_endAngle_clockwise_(System.String,System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_addClip(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_addCurveToPoint_controlPoint1_controlPoint2_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_addLineToPoint_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_addQuadCurveToPoint_controlPoint_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_appendPath_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_applyTransform_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_bezierPathByReversingPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_closePath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_containsPoint_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_fill(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_fillWithBlendMode_alpha_(System.String,System.Int32,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_moveToPoint_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_removeAllPoints(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_stroke(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.UP_UIBezierPath_strokeWithBlendMode_alpha_(System.String,System.Int32,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIBezierPath" /> class.
            <br></br>Equivalent to the native <c>[[UIBezierPath alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.ClassExists">
            <summary>
            Returns whether the native UIBezierPath class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPath">
            <summary>
            Creates and returns a new <c>UIBezierPath</c> object.
            <br></br>Equivalent to the native <c>bezierPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new empty path object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPath(UnityEngine.Vector2,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates and returns a new <c>UIBezierPath</c> object initialized with an arc of a circle.
            <br></br>Equivalent to the native <c>bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>center</em>
                <p>Specifies the center point of the circle (in the current coordinate system) used to define the arc.</p>
                <em>radius</em>
                <p>Specifies the radius of the circle used to define the arc.</p>
                <em>startAngle</em>
                <p>Specifies the starting angle of the arc (measured in radians). </p>
                <em>endAngle</em>
                <p>Specifies the end angle of the arc (measured in radians). </p>
                <em>clockwise</em>
                <p>The direction in which to draw the arc.</p>
                <b>Return Value</b>
                <p>A new path object with the specified arc.</p>
                <b>Discussion</b>
                <p>This method creates an open subpath. The created arc lies on the perimeter of the specified circle. When drawn in the default coordinate system, the start and end angles are based on the unit circle shown in  Figure 1 . For example, specifying a start angle of <c>0</c> radians, an end angle of <c>π</c> radians, and setting the <c>clockwise</c> parameter to <c>true</c> draws the bottom half of the circle. However, specifying the same start and end angles but setting the <em>clockwise</em> parameter set to <c>false</c> draws the top half of the circle.  </p>
                <figure class="figure">
                    <figcaption>
                        <strong class="caption_number">Figure 1</strong>  Angles in the default coordinate system</figcaption>
                </figure>
                <p>After calling this method, the current point is set to the point on the arc at the end angle of the circle.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="center">
            </param>
            <param name="radius">
            </param>
            <param name="startAngle">
            </param>
            <param name="endAngle">
            </param>
            <param name="clockwise">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPath(U3DXT.iOS.Native.CoreGraphics.CGPath)">
            <summary>
            Creates and returns a new <c>UIBezierPath</c> object initialized with the contents of a Core Graphics path.
            <br></br>Equivalent to the native <c>bezierPathWithCGPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>CGPath</em>
                <p>The Core Graphics path from which to obtain the initial path information. If this parameter is <c>null</c>, the method raises an exception.</p>
                <b>Return Value</b>
                <p>A new path object with the specified path information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="CGPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPathWithOvalInRect(UnityEngine.Rect)">
            <summary>
            Creates and returns a new <c>UIBezierPath</c> object initialized with an oval path inscribed in the specified rectangle
            <br></br>Equivalent to the native <c>bezierPathWithOvalInRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle in which to inscribe an oval.</p>
                <b>Return Value</b>
                <p>A new path object with the oval path.</p>
                <b>Discussion</b>
                <p>This method creates a closed subpath that approximates the oval using a sequence of Bézier curves. The path is created in a clockwise direction (relative to the default coordinate system). If the <em>rect</em> parameter specifies a square, the inscribed path is a circle. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPath(UnityEngine.Rect)">
            <summary>
            Creates and returns a new <c>UIBezierPath</c> object initialized with a rectangular path.
            <br></br>Equivalent to the native <c>bezierPathWithRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle describing the path to create.</p>
                <b>Return Value</b>
                <p>A new path object with the rectangular path.</p>
                <b>Discussion</b>
                <p>This method creates a closed subpath by starting at the origin of <em>rect</em> and adding line segments in a clockwise direction (relative to the default coordinate system).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPath(UnityEngine.Rect,U3DXT.iOS.Native.UIKit.UIRectCorner,U3DXT.Utils.Size)">
            <summary>
            Creates and returns a new <c>UIBezierPath</c> object initialized with a rounded rectangular path.
            <br></br>Equivalent to the native <c>bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle that defines the basic shape of the path.</p>
                <em>corners</em>
                <p>A bitmask value that identifies the corners that you want rounded. You can use this parameter to round only a subset of the corners of the rectangle.</p>
                <em>cornerRadii</em>
                <p>The radius of each corner oval. Values larger than half the rectangle’s width or height are clamped appropriately to half the width or height.  </p>
                <b>Return Value</b>
                <p>A new path object with the rounded rectangular path.</p>
                <b>Discussion</b>
                <p>This method creates a closed subpath, proceeding in a clockwise direction (relative to the default coordinate system) as it creates the necessary line and curve segments. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
            <param name="corners">
            </param>
            <param name="cornerRadii">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPath(UnityEngine.Rect,System.Single)">
            <summary>
            Creates and returns a new <c>UIBezierPath</c> object initialized with a rounded rectangular path.
            <br></br>Equivalent to the native <c>bezierPathWithRoundedRect:cornerRadius:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle that defines the basic shape of the path</p>
                <em>cornerRadius</em>
                <p>The radius of each corner oval. A value of <c>0</c> results in a rectangle without rounded corners. Values larger than half the rectangle’s width or height are clamped appropriately to half the width or height.</p>
                <b>Return Value</b>
                <p>A new path object with the rounded rectangular path.</p>
                <b>Discussion</b>
                <p>This method creates a closed subpath, proceeding in a clockwise direction (relative to the default coordinate system) as it creates the necessary line and curve segments.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
            <param name="cornerRadius">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.bounds">
            <summary>
            The bounding rectangle of the path. (read-only)
            <br></br>Equivalent to the native <c>bounds</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value in this property represents the smallest rectangle that completely encloses all points in the path, including any control points for Bézier and quadratic curves.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.CGPath">
            <summary>
            The Core Graphics representation of the path.
            <br></br>Equivalent to the native <c>CGPath</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property contains a snapshot of the path at any given point in time. Getting this property returns an immutable path object that you can pass to Core Graphics functions. The path object itself is owned by the <c>UIBezierPath</c> object and is valid only until you make further modifications to the path. </p>
                <p>You can set the value of this property to a path you built using the functions of the Core Graphics framework. When setting a new path, this method makes a copy of the path you provide.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.currentPoint">
            <summary>
            The current point in the graphics path. (read-only)
            <br></br>Equivalent to the native <c>currentPoint</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value in this property represents the starting point for new line and curve segments. If the path is currently empty, this property contains the value <c>CGPointZero</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>empty</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.empty">
            <summary>
            A Boolean value indicating whether the path has any valid elements. (read-only)
            <br></br>Equivalent to the native <c>empty</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Valid path elements include commands to move to a specified point, draw a line or curve segment, or close the path. Thus, a path is not considered empty even if all you do is call the <c>moveToPoint:</c> method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.flatness">
            <summary>
            The factor that determines the rendering accuracy for curved path segments.
            <br></br>Equivalent to the native <c>flatness</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The flatness value measures the largest permissible distance (measured in pixels) between a point on the true curve and a point on the rendered curve. Smaller values result in smoother curves but require more computation time. Larger values result in more jagged curves but are rendered much faster. The default flatness value is <c>0.6</c>. </p>
                <p>In most cases, you should not change the flatness value. However, you might increase the flatness value temporarily to minimize the amount of time it takes to draw a shape temporarily (such as during scrolling). </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.lineCapStyle">
            <summary>
            The shape of the paths end points when stroked.
            <br></br>Equivalent to the native <c>lineCapStyle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The line cap style is applied to the start and end points of any open subpaths. This property does not affect closed subpaths. The default line cap style is <c>kCGLineCapButt</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.lineJoinStyle">
            <summary>
            The shape of the joints between connected segments of a stroked path.
            <br></br>Equivalent to the native <c>lineJoinStyle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default line join style is <c>kCGLineJoinMiter</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.lineWidth">
            <summary>
            The line width of the path.
            <br></br>Equivalent to the native <c>lineWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The line width defines the thickness of the receiver's stroked path. A width of 0 is interpreted as the thinnest line that can be rendered on a particular device. The actual rendered line width may vary from the specified width by as much as 2 device pixels, depending on the position of the line with respect to the pixel grid and the current anti-aliasing settings. The width of the line may also be affected by scaling factors specified in the current transformation matrix of the active graphics context.</p>
                <p>The default line width is 1.0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.miterLimit">
            <summary>
            The limiting value that helps avoid spikes at junctions between connected line segments.
            <br></br>Equivalent to the native <c>miterLimit</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The miter limit helps you avoid spikes in paths that use the <c>kCGLineJoinMiter</c> join style. If the ratio of the miter length—that is, the diagonal length of the miter join—to the line thickness exceeds the miter limit, the joint is converted to a bevel join. The default miter limit is 10, which results in the conversion of miters whose angle at the joint is less than 11 degrees. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIBezierPath.usesEvenOddFillRule">
            <summary>
            A Boolean indicating whether the even-odd winding rule is in use for drawing paths.
            <br></br>Equivalent to the native <c>usesEvenOddFillRule</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, the path is filled using the even-odd rule. If <c>false</c>, it is filled using the non-zero rule. Both rules are algorithms to determine which areas of a path to fill with the current fill color. A ray is drawn from a point inside a given region to a point anywhere outside the path’s bounds. The total number of crossed path lines (including implicit path lines) and the direction of each path line are then interpreted as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>For the even-odd rule, if the total number of path crossings is odd, the point is considered to be inside the path and the corresponding region is filled. If the number of crossings is even, the point is considered to be outside the path and the region is not filled.</p>
                    </li>
                    <li class="li">
                        <p>For the non-zero rule, the crossing of a left-to-right path counts as +1 and the crossing of a right-to-left path counts as -1. If the sum of the crossings is nonzero, the point is considered to be inside the path and the corresponding region is filled. If the sum is 0, the point is outside the path and the region is not filled. </p>
                    </li>
                </ul>
                <p>The default value of this property is <c>false</c>. For more information about winding rules and how they are applied to subpaths, see <em>Quartz 2D Programming Guide</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.AddArc(UnityEngine.Vector2,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Appends an arc to the receiver’s path.
            <br></br>Equivalent to the native <c>addArcWithCenter:radius:startAngle:endAngle:clockwise:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>center</em>
                <p>Specifies the center point of the circle (in the current coordinate system) used to define the arc.</p>
                <em>radius</em>
                <p>Specifies the radius of the circle used to define the arc.</p>
                <em>startAngle</em>
                <p>Specifies the starting angle of the arc (measured in radians). </p>
                <em>endAngle</em>
                <p>Specifies the end angle of the arc (measured in radians). </p>
                <em>clockwise</em>
                <p>The direction in which to draw the arc.</p>
                <b>Discussion</b>
                <p>This method adds the specified arc beginning at the current point. The created arc lies on the perimeter of the specified circle. When drawn in the default coordinate system, the start and end angles are based on the unit circle shown in  Figure 1 . For example, specifying a start angle of <c>0</c> radians, an end angle of <c>π</c> radians, and setting the <c>clockwise</c> parameter to <c>true</c> draws the bottom half of the circle. However, specifying the same start and end angles but setting the <em>clockwise</em> parameter set to <c>false</c> draws the top half of the circle.  </p>
                <p>After calling this method, the current point is set to the point on the arc at the end angle of the circle.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="center">
            </param>
            <param name="radius">
            </param>
            <param name="startAngle">
            </param>
            <param name="endAngle">
            </param>
            <param name="clockwise">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.AddClip">
            <summary>
            Intersects the area enclosed by the receiver’s path with the clipping path of the current graphics context and makes the resulting shape the current clipping path.
            <br></br>Equivalent to the native <c>addClip</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method modifies the visible drawing area of the current graphics context. After calling it, subsequent drawing operations result in rendered content only if they occur within the fill area of the specified path. </p>
                <p>
                    <strong>Important:</strong> If you need to remove the clipping region to perform subsequent drawing operations, you must save the current graphics state (using the <c>CGContextSaveGState</c> function) before calling this method. When you no longer need the clipping region, you can then restore the previous drawing properties and clipping region using the <c>CGContextRestoreGState</c> function.</p>
                <p>
                </p>
                <p>The <c>usesEvenOddFillRule</c> property is used to determine whether the even-odd or non-zero rule is used to determine the area enclosed by the path.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.AddCurveToPoint(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Appends a cubic Bézier curve to the receiver’s path.
            <br></br>Equivalent to the native <c>addCurveToPoint:controlPoint1:controlPoint2:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>endPoint</em>
                <p>The end point of the curve.</p>
                <em>controlPoint1</em>
                <p>The first control point to use when computing the curve.</p>
                <em>controlPoint2</em>
                <p>The second control point to use when computing the curve.</p>
                <b>Discussion</b>
                <p>This method appends a cubic Bézier curve from the current point to the end point specified by the <em>endPoint</em> parameter. The two control points define the curvature of the segment.  Figure 2  shows an approximation of a cubic Bézier curve given a set of initial points. The exact curvature of the segment involves a complex mathematical relationship between all of the points and is well documented online. </p>
                <figure class="figure">
                    <figcaption>
                        <strong class="caption_number">Figure 2</strong>  A cubic Bézier curve </figcaption>
                </figure>
                <p>You must set the path’s current point (using the <c>moveToPoint:</c> method or through the previous creation of a line or curve segment) before you call this method. If the path is empty, this method does nothing. After adding the curve segment, this method updates the current point to the value in <em>point</em>.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="endPoint">
            </param>
            <param name="controlPoint1">
            </param>
            <param name="controlPoint2">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.AddLineToPoint(UnityEngine.Vector2)">
            <summary>
            Appends a straight line to the receiver’s path.
            <br></br>Equivalent to the native <c>addLineToPoint:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>point</em>
                <p>The destination point of the line segment, specified in the current coordinate system.</p>
                <b>Discussion</b>
                <p>This method creates a straight line segment starting at the current point and ending at the point specified by the <em>point</em> parameter. After adding the line segment, this method updates the current point to the value in <em>point</em>.</p>
                <p>You must set the path’s current point (using the <c>moveToPoint:</c> method or through the previous creation of a line or curve segment) before you call this method. If the path is empty, this method does nothing. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="point">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.AddQuadCurveToPoint(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Appends a quadratic Bézier curve to the receiver’s path.
            <br></br>Equivalent to the native <c>addQuadCurveToPoint:controlPoint:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>endPoint</em>
                <p>The end point of the curve.</p>
                <em>controlPoint</em>
                <p>The control point of the curve.</p>
                <b>Discussion</b>
                <p>This method appends a quadratic Bézier curve from the current point to the end point specified by the <em>endPoint</em> parameter. The relationships between the current point, control point, and end point are what defines the actual curve.  Figure 3  shows some examples of quadratic curves and the approximate curve shape based on some sample points. The exact curvature of the segment involves a complex mathematical relationship between the points and is well documented online. </p>
                <figure class="figure">
                    <figcaption>
                        <strong class="caption_number">Figure 3</strong>  Quadratic curve examples</figcaption>
                </figure>
                <p>You must set the path’s current point (using the <c>moveToPoint:</c> method or through the previous creation of a line or curve segment) before you call this method. If the path is empty, this method does nothing. After adding the curve segment, this method updates the current point to the value in <em>point</em>.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="endPoint">
            </param>
            <param name="controlPoint">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.AppendPath(U3DXT.iOS.Native.UIKit.UIBezierPath)">
            <summary>
            Appends the contents of the specified path object to the receiver’s path.
            <br></br>Equivalent to the native <c>appendPath:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bezierPath</em>
                <p>The path to add to the receiver. </p>
                <b>Discussion</b>
                <p>This method adds the commands used to create the path in <em>bezierPath</em> to the end of the receiver’s path. This method does not explicitly try to connect the subpaths in the two objects, although the operations in <em>bezierPath</em> might still cause that effect.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="bezierPath">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.ApplyTransform(UnityEngine.Matrix4x4)">
            <summary>
            Transforms all points in the path using the specified affine transform matrix.
            <br></br>Equivalent to the native <c>applyTransform:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>transform</em>
                <p>The transform matrix to apply to the path.</p>
                <b>Discussion</b>
                <p>This method applies the specified transform to the path’s points immediately. The modifications made to the path object are permanent. If you do not want to permanently modify a path object, you should consider applying the transform to a copy. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="transform">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.BezierPathByReversingPath">
            <summary>
            Creates and returns a new bezier path object with the reversed contents of the current path.
            <br></br>Equivalent to the native <c>bezierPathByReversingPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new path object with the same path shape but for which the path has been created in the reverse direction. </p>
                <b>Discussion</b>
                <p>Reversing a path does not necessarily change the appearance of the path when rendered. Instead, it changes the direction in which path segments are drawn. For example, reversing the path of a rectangle (whose line segments are normally drawn starting at the origin and proceeding in a counterclockwise direction) causes its line segments to be drawn in a clockwise direction instead. Drawing a reversed path could affect the appearance of a filled pattern, depending on the pattern and the fill rule in use.</p>
                <p>This method reverses each whole or partial subpath in the path object individually. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.ClosePath">
            <summary>
            Closes the most recently added subpath.
            <br></br>Equivalent to the native <c>closePath</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method closes the current subpath by creating a line segment between the first and last points in the subpath. This method subsequently updates the current point to the end of the newly created line segment, which is also the first point in the now closed subpath.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.ContainsPoint(UnityEngine.Vector2)">
            <summary>
            Returns a Boolean value indicating whether the area enclosed by the receiver contains the specified point.
            <br></br>Equivalent to the native <c>containsPoint:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>point</em>
                <p>The point to test against the path, specified in the path object's coordinate system.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the point is considered to be within the path’s enclosed area or <c>false</c> if it is not.</p>
                <b>Discussion</b>
                <p>The receiver contains the specified point if that point is in a portion of a closed subpath that would normally be painted during a fill operation. This method uses the value of the <c>usesEvenOddFillRule</c> property to determine which parts of the subpath would be filled. </p>
                <p>A point is not considered to be enclosed by the path if it is inside an open subpath, regardless of whether that area would be painted during a fill operation. Therefore, to determine mouse hits on open paths, you must create a copy of the path object and explicitly close any subpaths (using the <c>closePath</c> method) before calling this method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="point">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.Fill">
            <summary>
            Paints the region enclosed by the receiver’s path using the current drawing properties.
            <br></br>Equivalent to the native <c>fill</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method fills the path using the current fill color and drawing properties. If the path contains any open subpaths, this method implicitly closes them before painting the fill region. </p>
                <p>The painted region includes the pixels right up to, but not including, the path line itself. For paths with large line widths, this can result in overlap between the fill region and the stroked path (which is itself centered on the path line).</p>
                <p>This method automatically saves the current graphics state prior to drawing and restores that state when it is done, so you do not have to save the graphics state yourself. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.Fill(U3DXT.iOS.Native.CoreGraphics.CGBlendMode,System.Single)">
            <summary>
            Paints the region enclosed by the receiver’s path using the specified blend mode and transparency values.
            <br></br>Equivalent to the native <c>fillWithBlendMode:alpha:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>blendMode</em>
                <p>The blend mode determines how the filled path is composited with any existing rendered content.</p>
                <em>alpha</em>
                <p>The amount of transparency to apply to the filled path. Values can range between <c>0.0</c> (transparent) and <c>1.0</c> (opaque). Values outside this range are clamped to <c>0.0</c> or <c>1.0</c>.</p>
                <b>Discussion</b>
                <p>This method fills the path using the current fill color and drawing properties (plus the specified blend mode and transparency value). If the path contains any open subpaths, this method implicitly closes them before painting the fill region. </p>
                <p>The painted region includes the pixels right up to, but not including, the path line itself. For paths with large line widths, this can result in overlap between the fill region and the stroked path (which is itself centered on the path line).</p>
                <p>This method automatically saves the current graphics state prior to drawing and restores that state when it is done, so you do not have to save the graphics state yourself. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="blendMode">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.MoveToPoint(UnityEngine.Vector2)">
            <summary>
            Moves the receiver’s current point to the specified location.
            <br></br>Equivalent to the native <c>moveToPoint:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>point</em>
                <p>A point in the current coordinate system.</p>
                <b>Discussion</b>
                <p>This method implicitly ends the current subpath (if any) and sets the current point to the value in the <em>point</em> parameter. When ending the previous subpath, this method does not actually close the subpath. Therefore, the first and last points of the previous subpath are not connected to each other.</p>
                <p>For many path operations, you must call this method before issuing any commands that cause a line or curve segment to be drawn.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="point">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.RemoveAllPoints">
            <summary>
            Removes all points from the receiver, effectively deleting all subpaths.
            <br></br>Equivalent to the native <c>removeAllPoints</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.Stroke">
            <summary>
            Draws a line along the receiver’s path using the current drawing properties.
            <br></br>Equivalent to the native <c>stroke</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The drawn line is centered on the path with its sides parallel to the path segment. This method applies the current drawing properties to the rendered path.</p>
                <p>This method automatically saves the current graphics state prior to drawing and restores that state when it is done, so you do not have to save the graphics state yourself. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIBezierPath.Stroke(U3DXT.iOS.Native.CoreGraphics.CGBlendMode,System.Single)">
            <summary>
            Draws a line along the receiver’s path using the specified blend mode and transparency values.
            <br></br>Equivalent to the native <c>strokeWithBlendMode:alpha:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>blendMode</em>
                <p>The blend mode determines how the stroked path is composited with any existing rendered content.</p>
                <em>alpha</em>
                <p>The amount of transparency to apply to the stroked path. Values can range between <c>0.0</c> (transparent) and <c>1.0</c> (opaque). Values outside this range are clamped to <c>0.0</c> or <c>1.0</c>.</p>
                <b>Discussion</b>
                <p>The drawn line is centered on the path with its sides parallel to the path segment. This method applies the current stroke color and drawing properties (plus the specified blend mode and transparency value) to the rendered path.</p>
                <p>This method automatically saves the current graphics state prior to drawing and restores that state when it is done, so you do not have to save the graphics state yourself. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="blendMode">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIColor">
            <summary>
            A <c>UIColor</c> object represents color and sometimes opacity (alpha value). You can use <c>UIColor</c> objects to store color data, and during drawing you can use them to set the current fill and stroke colors.
            </summary>
            <remarks>
                <p>Many methods in UIKit require you to specify color data using a <c>UIColor</c> object, and for general color needs it should be your main way of specifying colors. The color spaces used by this object are optimized for use on iOS-based devices and are therefore appropriate for most drawing needs. If you prefer to use Core Graphics colors and color spaces instead, however, you may do so. </p>
                <p>Most developers should have no need to subclass <c>UIColor</c>. The only time doing so might be necessary is if you require support for additional colorspaces or color models.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_blackColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_blueColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_brownColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_clearColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_colorWithHue_saturation_brightness_alpha_(System.Single,System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_cyanColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_darkGrayColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_darkTextColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_grayColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_greenColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_groupTableViewBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_lightGrayColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_lightTextColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_magentaColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_orangeColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_purpleColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_redColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_scrollViewTexturedBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_underPageBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_viewFlipsideBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_whiteColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_yellowColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_colorWithAlphaComponent_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_alloc_initWithRed_green_blue_alpha_(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_alloc_initWithWhite_alpha_(System.String,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_set(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_setFill(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_setStroke(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIColor" /> class.
            <br></br>Equivalent to the native <c>[[UIColor alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIColor.ClassExists">
            <summary>
            Returns whether the native UIColor class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.BlackColor">
            <summary>
            Returns a color object whose grayscale value is 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>blackColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.BlueColor">
            <summary>
            Returns a color object whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>blueColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.BrownColor">
            <summary>
            Returns a color object whose RGB values are 0.6, 0.4, and 0.2 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>brownColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.ClearColor">
            <summary>
            Returns a color object whose grayscale and alpha values are both 0.0.
            <br></br>Equivalent to the native <c>clearColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.FromHSBA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates and returns a color object using the specified opacity and HSB color space component values.
            <br></br>Equivalent to the native <c>colorWithHue:saturation:brightness:alpha:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>hue</em>
                <p>The hue component of the color object in the HSB color space, specified as a value from 0.0 to 1.0.</p>
                <em>saturation</em>
                <p>The saturation component of the color object in the HSB color space, specified as a value from 0.0 to 1.0.</p>
                <em>brightness</em>
                <p>The brightness (or value) component of the color object in the HSB color space, specified as a value from 0.0 to 1.0.</p>
                <em>alpha</em>
                <p>The opacity value of the color object, specified as a value from 0.0 to 1.0. </p>
                <b>Return Value</b>
                <p>The color object. The color information represented by this object is in the device RGB colorspace. </p>
                <b>Discussion</b>
                <p>Values below 0.0 are interpreted as 0.0, and values above 1.0 are interpreted as 1.0. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithHue:saturation:brightness:alpha:</c>
                    </li>
                </ul>
            </remarks>
            <param name="hue">
            </param>
            <param name="saturation">
            </param>
            <param name="brightness">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.CyanColor">
            <summary>
            Returns a color object whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>cyanColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.DarkGrayColor">
            <summary>
            Returns a color object whose grayscale value is 1/3 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>darkGrayColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.DarkTextColor">
            <summary>
            Returns the system color used for displaying text on a light background.
            <br></br>Equivalent to the native <c>darkTextColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.GrayColor">
            <summary>
            Returns a color object whose grayscale value is 0.5 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>grayColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.GreenColor">
            <summary>
            Returns a color object whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>greenColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.GroupTableViewBackgroundColor">
            <summary>
            Returns the system color used for the background of a grouped table.
            <br></br>Equivalent to the native <c>groupTableViewBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.LightGrayColor">
            <summary>
            Returns a color object whose grayscale value is 2/3 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>lightGrayColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.LightTextColor">
            <summary>
            Returns the system color used for displaying text on a dark background.
            <br></br>Equivalent to the native <c>lightTextColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.MagentaColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>magentaColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.OrangeColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 0.5, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>orangeColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.PurpleColor">
            <summary>
            Returns a color object whose RGB values are 0.5, 0.0, and 0.5 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>purpleColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.RedColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>redColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.ScrollViewTexturedBackgroundColor">
            <summary>
            Returns the system pattern color used to render the area behind scrollable content.
            <br></br>Equivalent to the native <c>scrollViewTexturedBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UnderPageBackgroundColor">
            <summary>
            Returns the system pattern color used to render the background of a page.
            <br></br>Equivalent to the native <c>underPageBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.ViewFlipsideBackgroundColor">
            <summary>
            Returns the system color used for the back side of a view while it is being flipped.
            <br></br>Equivalent to the native <c>viewFlipsideBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.WhiteColor">
            <summary>
            Returns a color object whose grayscale value is 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>whiteColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.YellowColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>yellowColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.Color(System.Single)">
            <summary>
            Creates and returns a color object that has the same color space and component values as the receiver, but has the specified alpha component.
            <br></br>Equivalent to the native <c>colorWithAlphaComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alpha</em>
                <p>The opacity value of the new <c>UIColor</c> object.</p>
                <b>Return Value</b>
                <p>The new <c>UIColor</c> object.</p>
                <b>Discussion</b>
                <p>A subclass with explicit opacity components should override this method to return a color with the specified alpha.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the native UIColor and initializes the object. Initializes and returns a color object using the specified opacity and RGB component values.
            <br></br>Equivalent to the native <c>[[UIColor alloc] initWithRed:green:blue:alpha:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>red</em>
                <p>The red component of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>green</em>
                <p>The green component of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>blue</em>
                <p>The blue component of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>alpha</em>
                <p>The opacity value of the color object, specified as a value from 0.0 to 1.0.</p>
                <b>Return Value</b>
                <p>An initialized color object. The color information represented by this object is in the device RGB colorspace. </p>
                <b>Discussion</b>
                <p>Values below 0.0 are interpreted as 0.0, and values above 1.0 are interpreted as 1.0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ colorWithRed:green:blue:alpha:</c>
                    </li>
                </ul>
            </remarks>
            <param name="red">
            </param>
            <param name="green">
            </param>
            <param name="blue">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(System.Single,System.Single)">
            <summary>
            Creates an instance of the native UIColor and initializes the object. Initializes and returns a color object using the specified opacity and grayscale values.
            <br></br>Equivalent to the native <c>[[UIColor alloc] initWithWhite:alpha:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>white</em>
                <p>The grayscale value of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>alpha</em>
                <p>The opacity value of the color object, specified as a value from 0.0 to 1.0.</p>
                <b>Return Value</b>
                <p>An initialized color object. The color information represented by this object is in the device gray colorspace.</p>
                <b>Discussion</b>
                <p>Values below 0.0 are interpreted as 0.0, and values above 1.0 are interpreted as 1.0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ colorWithWhite:alpha:</c>
                    </li>
                </ul>
            </remarks>
            <param name="white">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.Set">
            <summary>
            Sets the color of subsequent stroke and fill operations to the color that the receiver represents.
            <br></br>Equivalent to the native <c>set</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you subclass <c>UIColor</c>, you must implement this method in your subclass. Your custom implementation should modify both the stroke and fill color in the current graphics context by setting them both to the color represented by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setFill</c>
                    </li>
                    <li>
                        <c>– setStroke</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.SetFill">
            <summary>
            Sets the color of subsequent fill operations to the color that the receiver represents.
            <br></br>Equivalent to the native <c>setFill</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you subclass <c>UIColor</c>, you must implement this method in your subclass. Your custom implementation should modify the fill color in the current graphics context by setting it to the color represented by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– set</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.SetStroke">
            <summary>
            Sets the color of subsequent stroke operations to the color that the receiver represents.
            <br></br>Equivalent to the native <c>setStroke</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you subclass <c>UIColor</c>, you must implement this method in your subclass. Your custom implementation should modify the stroke color in the current graphics context by setting it to the color represented by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– set</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIControl">
            <summary>
                <c>UIControl</c> is the base class for control objects such as buttons and sliders that convey user intent to the application. You cannot use the <c>UIControl</c> class directly to instantiate controls. It instead defines the common interface and behavioral structure for all its subclasses.
            </summary>
            <remarks>
                <p>The main role of <c>UIControl</c> is to define an interface and base implementation for preparing action messages and initially dispatching them to their targets when certain events occur.</p>
                <p>For an overview of the  target-action  mechanism, see  “Target-Action in UIKit”  in <em>Cocoa Fundamentals Guide</em>. For information on the Multi-Touch event model, see <em>Event Handling Guide for iOS</em>. </p>
                <p>The <c>UIControl</c> class also includes methods for getting and setting control state—for example, for determining whether a control is enabled or highlighted—and it defines methods for tracking touches within a control. These tracking methods are overridden by <c>UIControl</c> subclasses.</p>
                <!--
            <Section XRefSourceID="SW28"><Name>The Target-Action Mechanism</Name><Para>The design of the target-action mechanism in the UIKit framework is based on the Multi-Touch event model. In iOS the user’s fingers (or touches) convey intent (instead of mouse clicks and drags), and there can be multiple touches at any moment on a control going in different directions. </Para><Note XRefSourceID="SW7"><Name>Note</Name><Para>For more information on the Multi-Touch event model, see <uLink LinkToAppleRefId="//apple_ref/doc/uid/TP40007072-CH9" elementTypeHint="subchapterElement">Event Handling</uLink> in <uBook LinkToAppleRefId="//apple_ref/doc/uid/TP40007072" elementTypeHint="subchapterElement">iPhone Application Programming Guide</uBook>.</Para></Note><Para>The <pathName>UIControl.h</pathName> header file declares a large number of control events as constants for a  bit mask described in <xAPI DestinationChapterID="RH2" Id="SW3" targetElementType="Enum">“Control Events”</xAPI>. Some control events specify the behavior of touches in and around the control—various permutations of actions such a finger touching down in a control, dragging into and away from a control, and lifting up from a control. Other control events specify editing phases initiated when a finger touches down in a text field. And yet another control event, <xAPI DestinationChapterID="RH2" Id="SW29" targetElementType="Constant">UIControlEventValueChanged</xAPI>, is for controls such as sliders, where a value continuously changes based on the manipulation of the control. For any particular action message, you can specify one or more control events as the trigger for sending that message. For example, you could request a certain action message be sent to a certain target when a finger touches down in a control or is dragged into it (<xAPI DestinationChapterID="RH2" Id="SW30" targetElementType="Constant">UIControlEventTouchDown</xAPI> | <xAPI DestinationChapterID="RH2" Id="SW31" targetElementType="Constant">UIControlEventTouchDragEnter</xAPI>). </Para><Para>You prepare a control for sending an action message by calling <xAPI DestinationChapterID="RH2" Id="SW4" targetElementType="InstanceMethod">addTarget:action:forControlEvents:</xAPI> for each target-action pair you want to specify. This method builds an internal dispatch table associating each target-action pair with a control event. When a user touches the control in a way that corresponds to one or more specified events, <cVoice>UIControl</codeVoice> sends itself <xAPI DestinationChapterID="RH2" Id="SW1" targetElementType="InstanceMethod">sendActionsForControlEvents:</xAPI>. This results in <cVoice>UIControl</codeVoice> sending the action to <cVoice>UIApplication</codeVoice> in a <uAPI LinkToAppleRefId="//apple_ref/occ/instm/UIApplication/sendAction:to:from:forEvent:" targetElementType="">sendAction:to:from:forEvent:</uAPI> message. <cVoice>UIApplication</codeVoice> is the centralized dispatch point for action messages; if a <cVoice xml:space="preserve">nil</codeVoice> target is specified for an action message, the application sends the action to the first responder where it travels up the responder chain until it finds an object willing to handle the action message—that is, object that implements a method corresponding to the action selector. (<uLink LinkToAppleRefId="//apple_ref/doc/uid/TP40007072-CH9" elementTypeHint="subchapterElement">Event Handling</uLink> gives an overview of the first responder and the responder chain.)</Para><Para>UIKit allows three different forms of action selector:</Para><List-Simple><Item><Para><cVoice xml:space="preserve">- (void)action</codeVoice></Para></Item><Item><Para><cVoice xml:space="preserve">- (void)action:(id)sender</codeVoice></Para></Item><Item><Para><cVoice xml:space="preserve">- (void)action:(id)sender forEvent:(UIEvent *)event</codeVoice></Para></Item></List-Simple><Para>The <cVoice xml:space="preserve">sendAction:to:fromSender:forEvent:</codeVoice> method of <uAPI LinkToAppleRefId="//apple_ref/occ/cl/UIApplication">UIApplication</uAPI> pushes two parameters when calling the target. These last two parameters are optional for the application because it's up to the caller (usually a <cVoice>UIControl</codeVoice> object) to remove any parameters it added. </Para></Section>
            -->
                <b>Subclassing Notes</b>
                <p class="spaceabove">	You may want to extend a <c>UIControl</c> subclass for either of two reasons:</p>
                <ul class="ul">
                    <li class="li">
                        <p>To observe or modify the dispatch of action messages to targets for particular events</p>
                        <p>To do this, override <c>sendAction:to:forEvent:</c>, evaluate the passed-in selector, target object, or <c>UIControlEvents</c> bit mask, and proceed as required.</p>
                    </li>
                    <li class="li">
                        <p>To provide custom tracking behavior (for example, to change the highlight appearance)</p>
                        <p>To do this, override one or all of the following methods: <c>beginTrackingWithTouch:withEvent:</c>, <c>continueTrackingWithTouch:withEvent:</c>, <c>endTrackingWithTouch:withEvent:</c>. </p>
                    </li>
                </ul>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_contentHorizontalAlignment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_set_contentHorizontalAlignment(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_contentVerticalAlignment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_set_contentVerticalAlignment(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_enabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_set_enabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_highlighted(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_set_highlighted(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_selected(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_set_selected(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_state(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_touchInside(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.UP_UIControl_get_tracking(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIControl" /> class.
            <br></br>Equivalent to the native <c>[[UIControl alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.ClassExists">
            <summary>
            Returns whether the native UIControl class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.contentHorizontalAlignment">
            <summary>
            The horizontal alignment of content (text or image) within the receiver.
            <br></br>Equivalent to the native <c>contentHorizontalAlignment</c> property.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>contentAlignment</em>
                <p>A constant that specifies the alignment of text or image within the receiver. See  “Horizontal Content Alignment”  for descriptions of valid constants.</p>
                <b>Discussion</b>
                <p>The value of this property is a constant that specifies the alignment of text or image within the receiver. The default is <c>UIControlContentHorizontalAlignmentLeft</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>contentVerticalAlignment</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.contentVerticalAlignment">
            <summary>
            The vertical alignment of content (text or image) within the receiver.
            <br></br>Equivalent to the native <c>contentVerticalAlignment</c> property.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>contentAlignment</em>
                <p>A  constant that specifies the alignment of text or image within the receiver. See  “Vertical Content Alignment”  for descriptions of valid constants.</p>
                <b>Discussion</b>
                <p>This value of this property is a constant that specifies the alignment of text or image within the receiver. The default is <c>UIControlContentVerticalAlignmentTop</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>contentHorizontalAlignment</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.enabled">
            <summary>
            A Boolean value that determines whether the receiver is enabled.
            <br></br>Equivalent to the native <c>enabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Specify <c>true</c> to make the control enabled; otherwise, specify <c>false</c> to make it disabled. The default value is <c>true</c>. If the enabled state is <c>false</c>, the control ignores touch events and subclasses may draw differently.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>state</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.highlighted">
            <summary>
            A Boolean value that determines whether the receiver is highlighted.
            <br></br>Equivalent to the native <c>highlighted</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Specify <c>true</c> if the control is highlighted; otherwise <c>false</c>. By default, a control is not highlighted. <c>UIControl</c> automatically sets and clears this state automatically when a touch enters and exits during tracking and when there is a touch up.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>state</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.selected">
            <summary>
            A Boolean value that determines the receiver’s selected state.
            <br></br>Equivalent to the native <c>selected</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Specify <c>true</c> if the control is selected; otherwise <c>false</c>. The default is <c>false</c>. For many controls, this state has no effect on behavior or appearance. But other subclasses (for example, UISwitchControl) or the application object might read or set this control state.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>state</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.state">
            <summary>
            A Boolean value that indicates the state of the receiver. (read-only)
            <br></br>Equivalent to the native <c>state</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>One or more <c>UIControlState</c> bit-mask constants that specify the state of the <c>UIControl</c> object; for information on these constants, see  “Control State.”  Note that the control can be in more than one state, for example, both disabled and selected <c>(</c><c>UIControlStateDisabled</c><c> | </c><c>UIControlStateSelected</c><c>)</c>.This attribute is read only—there is no corresponding setter method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>enabled</c>
                    </li>
                    <li>
                        <c>selected</c>
                    </li>
                    <li>
                        <c>highlighted</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.touchInside">
            <summary>
            A Boolean value that indicates whether a touch is inside the bounds of the receiver. (read-only)
            <br></br>Equivalent to the native <c>touchInside</c> property.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if a touch is inside the receiver’s bounds; otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>The value is <c>true</c> if a touch is inside the receiver’s bounds; otherwise the value is <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIControl.tracking">
            <summary>
            A Boolean value that indicates whether the receiver is currently tracking touches related to an event. (read-only)
            <br></br>Equivalent to the native <c>tracking</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value is <c>true</c> if the receiver is tracking touches; otherwise<c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIControl.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIControl and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIControl alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIControlContentHorizontalAlignment">
            <summary>
            The horizontal alignment of content (text and images) within a control.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You use these constants as the value of the <c>contentHorizontalAlignment</c> property.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentHorizontalAlignment.Center">
            <summary>
                <p>Aligns the content horizontally in the center of the control.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentHorizontalAlignmentCenter</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentHorizontalAlignment.Fill">
            <summary>
                <p>Aligns the content horizontally to fill the content rectangles; text may wrap and images may be stretched.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentHorizontalAlignmentFill</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentHorizontalAlignment.Left">
            <summary>
                <p>Aligns the content horizontally from the left of the control (the default).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentHorizontalAlignmentLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentHorizontalAlignment.Right">
            <summary>
                <p>Aligns the content horizontally from the right of the control</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentHorizontalAlignmentRight</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIControlContentVerticalAlignment">
            <summary>
            The vertical alignment of content (text and images) within a control.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You use these constants as the value of the <c>contentVerticalAlignment</c> property. </p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentVerticalAlignment.Bottom">
            <summary>
                <p>Aligns the content vertically at the bottom in the control</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentVerticalAlignmentBottom</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentVerticalAlignment.Fill">
            <summary>
                <p>Aligns the content vertically to fill the content rectangle; images may be stretched.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentVerticalAlignmentFill</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentVerticalAlignment.Center">
            <summary>
                <p>Aligns the content vertically in the center of the control.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentVerticalAlignmentCenter</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlContentVerticalAlignment.Top">
            <summary>
                <p>Aligns the content vertically at the top in the control (the default).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlContentVerticalAlignmentTop</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIControlState">
            <summary>
            The state of a control; a control can have more than one state at a time. States are recognized differently depending on the control. For example, a UIButton instance may be configured (using the <c>setImage:forState:</c> method) to display one image when it is in its normal state and a different image when it is highlighted.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlState.Disabled">
            <summary>
                <p>Disabled state of a control.  This state indicates that the control is currently disabled. You can retrieve and set this value through the <c>enabled</c> property.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlStateDisabled</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlState.Reserved">
            <summary>
                <p>Control-state flags reserved for internal framework use.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlStateReserved</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlState.Selected">
            <summary>
                <p>Selected state of a control. For many controls, this state has no effect on behavior or appearance. But other subclasses (for example, the <c>UISegmentedControl</c> class) may have different appearance depending on their selected state. You can retrieve and set this value through the <c>selected</c> property.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlStateSelected</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlState.Highlighted">
            <summary>
                <p>Highlighted state of a control. A control enters this state when a touch enters and exits during tracking and when there is a touch up event. You can retrieve and set this value through the <c>highlighted</c> property.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlStateHighlighted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlState.Normal">
            <summary>
                <p>The normal, or default state of a control—that is, enabled but neither selected nor highlighted.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlStateNormal</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIControlState.Application">
            <summary>
                <p>Additional control-state flags available for application use.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIControlStateApplication</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDataDetectorTypes">
            <summary>
            Defines the types of information that can be detected in text-based content.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDataDetectorTypes.Link">
            <summary>
                <p>Detect strings formatted as URLs. </p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDataDetectorTypeLink</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDataDetectorTypes.CalendarEvent">
            <summary>
                <p>Detect strings formatted as calendar events. </p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDataDetectorTypeCalendarEvent</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDataDetectorTypes.None">
            <summary>
                <p>Do no data detection.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDataDetectorTypeNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDataDetectorTypes.All">
            <summary>
                <p>Detect all available types of data.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDataDetectorTypeAll</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDataDetectorTypes.PhoneNumber">
            <summary>
                <p>Detect strings formatted as phone numbers.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDataDetectorTypePhoneNumber</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDataDetectorTypes.Address">
            <summary>
                <p>Detect strings formatted as addresses. </p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDataDetectorTypeAddress</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDatePicker">
            <summary>
            The <c>UIDatePicker</c> class implements an object that uses multiple rotating wheels to allow users to select dates and times. iPhone examples of a date picker are the Timer and Alarm (Set Alarm) panes of the Clock application. You may also use a date picker as a countdown timer.
            </summary>
            <remarks>
                <p>When properly configured, a <c>UIDatePicker</c> object sends an action message when a user finishes rotating one of the wheels to change the date or time; the associated control event is <c>UIControlEventValueChanged</c>.  A <c>UIDatePicker</c> object presents the countdown timer but does not implement it; the application must set up an <c>NSTimer</c> object and update the seconds as they’re counted down. </p>
                <p>
                    <c>UIDatePicker</c> does not inherit from <c>UIPickerView</c>, but it manages a custom picker-view object as a subview.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_calendar(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_calendar(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_countDownDuration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_countDownDuration(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_date(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_date(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_datePickerMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_datePickerMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_locale(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_locale(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_maximumDate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_maximumDate(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_minimumDate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_minimumDate(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_minuteInterval(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_minuteInterval(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_get_timeZone(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_set_timeZone(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.UP_UIDatePicker_setDate_animated_(System.String,System.Double,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIDatePicker" /> class.
            <br></br>Equivalent to the native <c>[[UIDatePicker alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.ClassExists">
            <summary>
            Returns whether the native UIDatePicker class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.calendar">
            <summary>
            The calendar to use for the date picker.
            <br></br>Equivalent to the native <c>calendar</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property corresponds to the user’s current calendar as configured in Settings. This is equivalent to the value returned by calling the <c>NSCalendar</c> class method <c>currentCalendar</c>. Setting <c>calendar</c> to <c>null</c> is equivalent to setting it to its default value.</p>
                <p>Calendars specify the details of cultural systems used for reckoning time; they identify the beginning, length, and divisions of a year.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>locale</c>
                    </li>
                    <li>
                        <c>timeZone</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.countDownDuration">
            <summary>
            The seconds from which the countdown timer counts down.
            <br></br>Equivalent to the native <c>countDownDuration</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The <c>double</c> value of this property indicates the seconds from which the date picker in countdown-timer mode counts down. If the mode of the date picker is not <c>UIDatePickerModeCountDownTimer</c>, this value is ignored. The default value is 0.0 and the maximum value is 23:59 (86,399 seconds).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.date">
            <summary>
            The date displayed by the date picker.
            <br></br>Equivalent to the native <c>date</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default is the date when the <c>UIDatePicker</c> object is created. The date is ignored in the mode <c>UIDatePickerModeCountDownTimer</c>; for that mode, the date picker starts at 0:00. Setting this property does not animate the date picker by spinning the wheels to the new date and time; to do that you must use the <c>setDate:animated:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setDate:animated:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.datePickerMode">
            <summary>
            The mode of the date picker.
            <br></br>Equivalent to the native <c>datePickerMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property indicates the mode of a date picker. It determines whether the date picker allows selection of a date, a time, both date and time, or a countdown time. The default mode is <c>UIDatePickerModeDateAndTime</c>. See  “Date Picker Mode”  for a list of mode constants.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.locale">
            <summary>
            The locale used by the date picker.
            <br></br>Equivalent to the native <c>locale</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value is <c>null</c>. which tells the date picker to use the current locale as returned by <c>currentLocale</c> (<c>NSLocale</c>) or the locale used by the date picker’s calendar. Locales encapsulate information about facets of a language or culture, such as the way dates are formatted. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>calendar</c>
                    </li>
                    <li>
                        <c>timeZone</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.maximumDate">
            <summary>
            The maximum date that a date picker can show.
            <br></br>Equivalent to the native <c>maximumDate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The property is an <c>DateTime</c> object or <c>null</c> (the default), which means no maximum date. This property, along with the <c>minimumDate</c> property, lets you specify a valid date range. If the minimum date value is greater than the maximum date value, both properties are ignored. The minimum and maximum dates are also ignored in the countdown-timer mode (<c>UIDatePickerModeCountDownTimer</c>).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.minimumDate">
            <summary>
            The minimum date that a date picker can show.
            <br></br>Equivalent to the native <c>minimumDate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The property is an <c>DateTime</c> object or <c>null</c> (the default), which means no minimum date. This property, along with the <c>maximumDate</c> property, lets you specify a valid date range. If the minimum date value is greater than the maximum date value, both properties are ignored. The minimum and maximum dates are also ignored in the countdown-timer mode (<c>UIDatePickerModeCountDownTimer</c>).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.minuteInterval">
            <summary>
            The interval at which the date picker should display minutes.
            <br></br>Equivalent to the native <c>minuteInterval</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use this property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDatePicker.timeZone">
            <summary>
            The time zone reflected in the date displayed by the date picker.
            <br></br>Equivalent to the native <c>timeZone</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value is <c>null</c>. which tells the date picker to use the current time zone as returned by <c>localTimeZone</c> (<c>NSTimeZone</c>) or the time zone used by the date picker’s calendar. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>calendar</c>
                    </li>
                    <li>
                        <c>locale</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.SetDate(System.DateTime,System.Boolean)">
            <summary>
            Sets the date to display in the date picker, with an option to animate the setting.
            <br></br>Equivalent to the native <c>setDate:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>date</em>
                <p>An <c>DateTime</c> object representing the new date to display in the date picker.</p>
                <em>animated</em>
                <p>
                    <c>true</c> to animate the setting of the new date, otherwise <c>false</c>. The animation rotates the wheels until the new date and time is shown under the highlight rectangle.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>date</c>
                    </li>
                </ul>
            </remarks>
            <param name="date">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDatePicker.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIDatePicker and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIDatePicker alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDatePickerMode">
            <summary>
            The mode of the date picker.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The mode determines whether dates, times, or both dates and times are displayed. You can also use it to specify the appearance of a countdown timer. You can set and retrieve the mode value through the <c>datePickerMode</c> property.</p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDatePickerMode.Time">
            <summary>
                <p>The date picker displays hours, minutes, and (optionally) an AM/PM designation. The exact items shown and their order depend upon the locale set. An example of this mode is [ 6 | 53 | PM ].</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDatePickerModeTime</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDatePickerMode.DateAndTime">
            <summary>
                <p>The date picker displays dates (as unified day of the week, month, and day of the month values) plus hours, minutes, and (optionally) an AM/PM designation. The exact order and format of these items depends on the locale set. An example of this mode is [ Wed Nov 15 | 6 | 53 | PM ].</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDatePickerModeDateAndTime</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDatePickerMode.CountDownTimer">
            <summary>
                <p>The date picker displays hour and minute values, for example [ 1 | 53 ]. The application must set a timer to fire at the proper interval and set the date picker as the seconds tick down.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDatePickerModeCountDownTimer</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDatePickerMode.Date">
            <summary>
                <p>The date picker displays months, days of the month, and years. The exact order of these items depends on the locale setting. An example of this mode is [ November | 15 | 2007 ].</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDatePickerModeDate</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDevice">
            <summary>
            The <c>UIDevice</c> class provides a  singleton  instance representing the current device. From this instance you can obtain information about the device such as assigned name, device model, and operating-system name and version.
            </summary>
            <remarks>
                <p>You also use the <c>UIDevice</c> instance to detect changes in the device’s characteristics, such as physical orientation. You get the current orientation using the <c>orientation</c> property or receive change notifications by registering for the <c>UIDeviceOrientationDidChangeNotification</c> notification. Before using either of these techniques to get orientation data, you must enable data delivery using the <c>beginGeneratingDeviceOrientationNotifications</c> method. When you no longer need to track the device orientation, call the <c>endGeneratingDeviceOrientationNotifications</c> method to disable the delivery of notifications.</p>
                <p>Similarly, you can use the <c>UIDevice</c> instance to obtain information and notifications about changes to the battery’s charge state (described by the <c>batteryState</c> property) and charge level (described by the <c>batteryLevel</c> property). The <c>UIDevice</c> instance also provides access to the proximity sensor state (described by the <c>proximityState</c> property). The proximity sensor detects whether the user is holding the device close to their face. Enable battery monitoring or proximity sensing only when you need it.</p>
                <p>Starting in iOS 4.2, you can use the <c>playInputClick</c> instance method to play keyboard input clicks in custom input and keyboard accessory views.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDevice.UIDeviceBatteryLevelDidChangeNotification">
            <summary>
            Constant name for the native <c>UIDeviceBatteryLevelDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.BatteryLevelDidChange">
            <summary>
                <b>UIDeviceBatteryLevelDidChangeNotification</b> Posted when the battery level changes. <p>For this notification to be sent, you must set the <c>batteryMonitoringEnabled</c> property to <c>true</c>.</p><p>Notifications for battery level change are sent no more frequently than once per minute. Do not attempt to calculate battery drainage rate or battery time remaining; drainage rate can change frequently depending on built-in applications as well as your application.</p><p>You can obtain the battery level by getting the value of the <c>batteryLevel</c> property.</p><b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceBatteryLevelDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDevice.UIDeviceBatteryStateDidChangeNotification">
            <summary>
            Constant name for the native <c>UIDeviceBatteryStateDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.BatteryStateDidChange">
            <summary>
                <b>UIDeviceBatteryStateDidChangeNotification</b> Posted when battery state changes. <p>For this notification to be sent, you must set the <c>batteryMonitoringEnabled</c> property to <c>true</c>.</p><p>You can obtain the battery state by getting the value of the <c>batteryState</c> property. </p><b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceBatteryStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDevice.UIDeviceOrientationDidChangeNotification">
            <summary>
            Constant name for the native <c>UIDeviceOrientationDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.OrientationDidChange">
            <summary>
                <b>UIDeviceOrientationDidChangeNotification</b> Posted when the orientation of the device changes. <p>You can obtain the new orientation by getting the value of the <c>orientation</c> property. </p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceOrientationDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDevice.UIDeviceProximityStateDidChangeNotification">
            <summary>
            Constant name for the native <c>UIDeviceProximityStateDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.ProximityStateDidChange">
            <summary>
                <b>UIDeviceProximityStateDidChangeNotification</b> Posted when the state of the proximity sensor changes. <p>You can obtain the proximity state by getting the value of the <c>proximityState</c> property. </p><b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceProximityStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDevice.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>UIDevice</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.AllInstances.BatteryLevelDidChange">
            <summary>
                <b>UIDeviceBatteryLevelDidChangeNotification</b> Posted when the battery level changes. <p>For this notification to be sent, you must set the <c>batteryMonitoringEnabled</c> property to <c>true</c>.</p><p>Notifications for battery level change are sent no more frequently than once per minute. Do not attempt to calculate battery drainage rate or battery time remaining; drainage rate can change frequently depending on built-in applications as well as your application.</p><p>You can obtain the battery level by getting the value of the <c>batteryLevel</c> property.</p><b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceBatteryLevelDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.AllInstances.BatteryStateDidChange">
            <summary>
                <b>UIDeviceBatteryStateDidChangeNotification</b> Posted when battery state changes. <p>For this notification to be sent, you must set the <c>batteryMonitoringEnabled</c> property to <c>true</c>.</p><p>You can obtain the battery state by getting the value of the <c>batteryState</c> property. </p><b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceBatteryStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.AllInstances.OrientationDidChange">
            <summary>
                <b>UIDeviceOrientationDidChangeNotification</b> Posted when the orientation of the device changes. <p>You can obtain the new orientation by getting the value of the <c>orientation</c> property. </p><b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceOrientationDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIDevice.AllInstances.ProximityStateDidChange">
            <summary>
                <b>UIDeviceProximityStateDidChangeNotification</b> Posted when the state of the proximity sensor changes. <p>You can obtain the proximity state by getting the value of the <c>proximityState</c> property. </p><b>Availability</b><ul><li>Available in iOS 3.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UIDeviceProximityStateDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_currentDevice">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_batteryLevel(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_batteryMonitoringEnabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_set_batteryMonitoringEnabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_batteryState(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_generatesDeviceOrientationNotifications(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_identifierForVendor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_localizedModel(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_model(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_multitaskingSupported(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_name(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_orientation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_proximityMonitoringEnabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_set_proximityMonitoringEnabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_proximityState(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_systemName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_systemVersion(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_get_userInterfaceIdiom(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_beginGeneratingDeviceOrientationNotifications(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_endGeneratingDeviceOrientationNotifications(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.UP_UIDevice_playInputClick(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIDevice" /> class.
            <br></br>Equivalent to the native <c>[[UIDevice alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.ClassExists">
            <summary>
            Returns whether the native UIDevice class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.CurrentDevice">
            <summary>
            Returns an object representing the current device.
            <br></br>Equivalent to the native <c>currentDevice</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A singleton object that represents the current device.</p>
                <b>Discussion</b>
                <p>You access the properties of the returned <c>UIDevice</c> instance to obtain information about the device. You must instantiate the <c>UIDevice</c> instance before registering to receive device notifications.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.batteryLevel">
            <summary>
            The battery charge level for the device. (read-only)
            <br></br>Equivalent to the native <c>batteryLevel</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Battery level ranges from 0.0 (fully discharged) to 1.0 (100% charged). Before accessing this property, ensure that battery monitoring is enabled.</p>
                <p>If battery monitoring is not enabled, battery state is <c>UIDeviceBatteryStateUnknown</c> and the value of this property is –1.0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property batteryState</c></li>
                    <li>    <c>@property batteryMonitoringEnabled</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.batteryMonitoringEnabled">
            <summary>
            A Boolean value indicating whether battery monitoring is enabled (<c>true</c>) or not (<c>false</c>).
            <br></br>Equivalent to the native <c>batteryMonitoringEnabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Enable battery monitoring if your app needs to be notified of changes to the battery state, or if you want to check the battery charge level.</p>
                <p>The default value of this property is <c>false</c>, which:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Disables the posting of battery-related notifications</p>
                    </li>
                    <li class="li">
                        <p>Disables the ability to read battery charge level and battery state</p>
                    </li>
                </ul>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property batteryLevel</c></li>
                    <li>    <c>@property batteryState</c></li>
                    <li>
                        <c>UIDeviceBatteryLevelDidChangeNotification</c>
                    </li>
                    <li>
                        <c>UIDeviceBatteryStateDidChangeNotification</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.batteryState">
            <summary>
            The battery state for the device. (read-only)
            <br></br>Equivalent to the native <c>batteryState</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value for <c>batteryState</c> is one of the constants in  “UIDeviceBatteryState.” </p>
                <p>If battery monitoring is not enabled, the value of this property is <c>UIDeviceBatteryStateUnknown</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property batteryLevel</c></li>
                    <li>    <c>@property batteryMonitoringEnabled</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.generatesDeviceOrientationNotifications">
            <summary>
            A Boolean value that indicates whether the receiver generates orientation notifications (<c>true</c>) or not (<c>false</c>). (read-only)
            <br></br>Equivalent to the native <c>generatesDeviceOrientationNotifications</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the value of this property is <c>true</c>, the shared <c>UIDevice</c> object posts a <c>UIDeviceOrientationDidChangeNotification</c> notification when the device changes orientation. If the value is <c>false</c>, it generates no orientation notifications. Device orientation notifications can only be generated between calls to the <c>beginGeneratingDeviceOrientationNotifications</c> and <c>endGeneratingDeviceOrientationNotifications</c> methods.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– beginGeneratingDeviceOrientationNotifications</c>
                    </li>
                    <li>
                        <c>– endGeneratingDeviceOrientationNotifications</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.identifierForVendor">
            <summary>
            An alphanumeric string that uniquely identifies a device to the app’s vendor. (read-only)
            <br></br>Equivalent to the native <c>identifierForVendor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is the same for apps that come from the same vendor running on the same device. A different value is returned for apps on the same device that come from different vendors, and for apps on different devices regardless of vendor.</p>
                <p>The value of this property may be <c>null</c> if the app is running in the background, before the user has unlocked the device the first time after the device has been restarted. If the value is <c>null</c>, wait and get the value again later.</p>
                <p>The value in this property remains the same while the app (or another app from the same vendor) is installed on the iOS device. The value changes when the user deletes all of that vendor’s apps from the device and subsequently reinstalls one or more of them. Therefore, if your app stores the value of this property anywhere, you should gracefully handle situations where the identifier changes.</p>
                <p>
                    <strong>Note:</strong> When implementing a system for serving advertisements, use the value in the <c>advertisingIdentifier</c> property of the <c>ASIdentifierManager</c> class instead of this property. Use of that property requires you to follow the guidelines set forth in the class discussion for the proper use of that identifier. For more information, see <em>ASIdentifierManager Class Reference</em>.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.localizedModel">
            <summary>
            The model of the device as a localized string. (read-only)
            <br></br>Equivalent to the native <c>localizedModel</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This string would be a localized version of the string returned from <c>model</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.model">
            <summary>
            The model of the device. (read-only)
            <br></br>Equivalent to the native <c>model</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Possible examples of model strings are @”iPhone” and @”iPod touch”. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.multitaskingSupported">
            <summary>
            A Boolean value indicating whether multitasking is supported on the current device. (read-only)
            <br></br>Equivalent to the native <c>multitaskingSupported</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.name">
            <summary>
            The name identifying the device. (read-only)
            <br></br>Equivalent to the native <c>name</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is an arbitrary alphanumeric string that is associated with the device as an identifier. For example, you can find the name of an iOS device in the General &gt; About settings. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property systemName</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.orientation">
            <summary>
            Returns the physical orientation of the device. (read-only)
            <br></br>Equivalent to the native <c>orientation</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of the property is a constant that indicates the current orientation of the device. This value represents the physical orientation of the device and may be different from the current orientation of your application’s user interface. See  “UIDeviceOrientation”  for descriptions of the possible values.</p>
                <p>The value of this property always returns 0 unless orientation notifications have been enabled by calling <c>beginGeneratingDeviceOrientationNotifications</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property generatesDeviceOrientationNotifications</c></li>
                    <li>
                        <c>– beginGeneratingDeviceOrientationNotifications</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.proximityMonitoringEnabled">
            <summary>
            A Boolean value indicating whether proximity monitoring is enabled (<c>true</c>) or not (<c>false</c>).
            <br></br>Equivalent to the native <c>proximityMonitoringEnabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Enable proximity monitoring only when your application needs to be notified of changes to the proximity state. Otherwise, disable proximity monitoring. The default value is <c>false</c>.</p>
                <p>Not all iOS devices have proximity sensors. To determine if proximity monitoring is available, attempt to enable it. If the value of the <c>proximityMonitoringEnabled</c> property remains <c>false</c>, proximity monitoring is not available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property proximityState</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.proximityState">
            <summary>
            A Boolean value indicating whether the proximity sensor is close to the user (<c>true</c>) or not (<c>false</c>). (read-only)
            <br></br>Equivalent to the native <c>proximityState</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property proximityMonitoringEnabled</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.systemName">
            <summary>
            The name of the operating system running on the device represented by the receiver. (read-only)
            <br></br>Equivalent to the native <c>systemName</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property name</c></li>
                    <li>    <c>@property systemVersion</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.systemVersion">
            <summary>
            The current version of the operating system. (read-only)
            <br></br>Equivalent to the native <c>systemVersion</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>An example of the system version is @”1.2”.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property systemName</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIDevice.userInterfaceIdiom">
            <summary>
            The style of interface to use on the current device. (read-only)
            <br></br>Equivalent to the native <c>userInterfaceIdiom</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>For universal applications, you can use this property to tailor the behavior of your application for a specific type of device. For example, iPhone and iPad devices have different screen sizes, so you might want to create different views and controls based on the type of the current device.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.BeginGeneratingDeviceOrientationNotifications">
            <summary>
            Begins the generation of notifications of device orientation changes.
            <br></br>Equivalent to the native <c>beginGeneratingDeviceOrientationNotifications</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You must call this method before attempting to get orientation data from the receiver. This method enables the device’s accelerometer hardware and begins the delivery of acceleration events to the receiver. The receiver subsequently uses these events to post <c>UIDeviceOrientationDidChangeNotification</c> notifications when the device orientation changes and to update the <c>orientation</c> property. </p>
                <p>You may nest calls to this method safely, but you should always match each call with a corresponding call to the <c>endGeneratingDeviceOrientationNotifications</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– endGeneratingDeviceOrientationNotifications</c>
                    </li>
                    <li>    <c>@property orientation</c></li>
                    <li>    <c>@property generatesDeviceOrientationNotifications</c></li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.EndGeneratingDeviceOrientationNotifications">
            <summary>
            Ends the generation of notifications of device orientation changes.
            <br></br>Equivalent to the native <c>endGeneratingDeviceOrientationNotifications</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method stops the posting of <c>UIDeviceOrientationDidChangeNotification</c> notifications and notifies the system that it can power down the accelerometer hardware if it is not in use elsewhere. You call this method after a previous call to the <c>beginGeneratingDeviceOrientationNotifications</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– beginGeneratingDeviceOrientationNotifications</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIDevice.PlayInputClick">
            <summary>
            Plays an input click in an enabled input view.
            <br></br>Equivalent to the native <c>playInputClick</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method to play the standard system keyboard click in response to a user tapping in a custom input or keyboard accessory view. A click plays only if the user has enabled keyboard clicks in Settings &gt; Sounds, and only if the input view is itself enabled and visible.</p>
                <p>To enable a custom input or accessory view for input clicks, perform the following two steps:</p>
                <ol class="ol">
                    <li class="li">
                        <p>Adopt the <c>UIInputViewAudioFeedback</c> protocol in your input view class.</p>
                    </li>
                    <li class="li">
                        <p>Implement the <c>enableInputClicksWhenVisible</c> delegate method to return <c>true</c>.</p>
                    </li>
                </ol>
                <p>For more information, see <em>Text, Web, and Editing Programming Guide for iOS</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDeviceBatteryState">
            <summary>
            The battery power state of the device.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>These constants are used by the <c>batteryState</c> property.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceBatteryState.Charging">
            <summary>
                <p>The device is plugged into power and the battery is less than 100% charged.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceBatteryStateCharging</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceBatteryState.Unknown">
            <summary>
                <p>The battery state for the device cannot be determined.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceBatteryStateUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceBatteryState.Full">
            <summary>
                <p>The device is plugged into power and the battery is 100% charged.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceBatteryStateFull</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceBatteryState.Unplugged">
            <summary>
                <p>The device is not plugged into power; the battery is discharging.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceBatteryStateUnplugged</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIDeviceOrientation">
            <summary>
            The physical orientation of the device.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The  <c>orientation</c> property uses these constants to identify the device orientation. These constants identify the physical orientation of the device and are not tied to the orientation of your application’s user interface. </p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceOrientation.FaceDown">
            <summary>
                <p>The device is held parallel to the ground with the screen facing downwards.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceOrientationFaceDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceOrientation.PortraitUpsideDown">
            <summary>
                <p>The device is in portrait mode but upside down, with the device held upright and the home button at the top.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceOrientationPortraitUpsideDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceOrientation.Portrait">
            <summary>
                <p>The device is in portrait mode, with the device held upright and the home button at the bottom.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceOrientationPortrait</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceOrientation.LandscapeRight">
            <summary>
                <p>The device is in landscape mode, with the device held upright and the home button on the left side.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceOrientationLandscapeRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceOrientation.FaceUp">
            <summary>
                <p>The device is held parallel to the ground with the screen facing upwards.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceOrientationFaceUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceOrientation.Unknown">
            <summary>
                <p>The orientation of the device cannot be determined.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceOrientationUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIDeviceOrientation.LandscapeLeft">
            <summary>
                <p>The device is in landscape mode, with the device held upright and the home button on the right side.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIDeviceOrientationLandscapeLeft</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets">
            <summary>
            Defines inset distances for views.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Edge inset values are applied to a rectangle to shrink or expand the area represented by that rectangle. Typically, edge insets are used during view layout to modify the view’s frame. Positive values cause the frame to be inset (or shrunk) by the specified amount. Negative values cause the frame to be outset (or expanded) by the specified amount.</p>
                <p>See also <c>UIEdgeInsetsMake</c> and <c>UIEdgeInsetsZero</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIEdgeInsets.right">
            <summary> The right.</summary>;</member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIEdgeInsets.top">
            <summary> The top.</summary>;</member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIEdgeInsets.left">
            <summary> The left.</summary>;</member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIEdgeInsets.bottom">
            <summary> The bottom.</summary>;</member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> struct.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets._Serialize">
            <summary>
            U3DXT internal method.</summary>
            <returns>
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets._Deserialize(System.Object)">
            <summary>
            U3DXT internal method.</summary>
            <returns>
            </returns>
            <param name="json">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" />.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" />.
            </summary>
            <param name="other">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" />.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets.op_Equality(U3DXT.iOS.Native.UIKit.UIEdgeInsets,U3DXT.iOS.Native.UIKit.UIEdgeInsets)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> is equal to another specified <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIEdgeInsets.op_Inequality(U3DXT.iOS.Native.UIKit.UIEdgeInsets,U3DXT.iOS.Native.UIKit.UIEdgeInsets)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> is not equal to another specified <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.iOS.Native.UIKit.UIEdgeInsets" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIFont">
            <summary>
            The <c>UIFont</c> class provides the interface for getting and setting font information. The class provides you with access to the font’s characteristics and also provides the system with access to the font’s glyph information, which is used during layout. You use font objects by passing them to methods that accept them as a parameter.
            </summary>
            <remarks>
                <p>You do not create <c>UIFont</c> objects using the <c>alloc</c> and <c>init</c> methods. Instead, you use class methods of <c>UIFont</c> to look up and retrieve the desired font object. These methods check for an existing font object with the specified characteristics and return it if it exists. Otherwise, they create a new font object based on the desired font characteristics.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_boldSystemFontOfSize_(System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_buttonFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_familyNames">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_fontNamesForFamilyName_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_fontWithName_size_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_italicSystemFontOfSize_(System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_labelFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_smallSystemFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_systemFontOfSize_(System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_systemFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_ascender(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_capHeight(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_descender(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_familyName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_fontName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_leading(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_lineHeight(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_pointSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_xHeight(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_fontWithSize_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIFont" /> class.
            <br></br>Equivalent to the native <c>[[UIFont alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.ClassExists">
            <summary>
            Returns whether the native UIFont class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.BoldSystemFontOfSize(System.Single)">
            <summary>
            Returns the font object used for standard interface items that are rendered in boldface type in the specified size.
            <br></br>Equivalent to the native <c>boldSystemFontOfSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.ButtonFontSize">
            <summary>
            Returns the standard font size used for buttons.
            <br></br>Equivalent to the native <c>buttonFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard button font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.FamilyNames">
            <summary>
            Returns an array of font family names available on the system.
            <br></br>Equivalent to the native <c>familyNames</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which contains the name of a font family. </p>
                <b>Discussion</b>
                <p>Font family names correspond to the base name of a font, such as <c>Times New Roman</c>. You can pass the returned strings to the <c>fontNamesForFamilyName:</c> method to retrieve a list of font names available for that family. You can then use the corresponding font name to retrieve an actual font object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ fontNamesForFamilyName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.FontNames(System.String)">
            <summary>
            Returns an array of font names available in a particular font family.
            <br></br>Equivalent to the native <c>fontNamesForFamilyName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>familyName</em>
                <p>The name of the font family. Use the <c>familyNames</c> method to get an array of the available font family names on the system.  </p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which contains a font name associated with the specified family.  </p>
                <b>Discussion</b>
                <p>You can pass the returned strings as parameters to the <c>fontWithName:size:</c> method to retrieve an actual font object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ familyNames</c>
                    </li>
                    <li>
                        <c>+ fontWithName:size:</c>
                    </li>
                </ul>
            </remarks>
            <param name="familyName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.Font(System.String,System.Single)">
            <summary>
            Creates and returns a font object for the specified font name and size.
            <br></br>Equivalent to the native <c>fontWithName:size:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontName</em>
                <p>The fully specified name of the font. This name incorporates both the font family name and the specific style information for the font. </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified name and size.</p>
                <b>Discussion</b>
                <p>You can use the <c>fontNamesForFamilyName:</c> method to retrieve the specific font names for a given font family. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ familyNames</c>
                    </li>
                    <li>
                        <c>+ fontNamesForFamilyName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fontName">
            </param>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.ItalicSystemFontOfSize(System.Single)">
            <summary>
            Returns the font object used for standard interface items that are rendered in italic type in the specified size.
            <br></br>Equivalent to the native <c>italicSystemFontOfSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.LabelFontSize">
            <summary>
            Returns the standard font size used for labels.
            <br></br>Equivalent to the native <c>labelFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard label font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.SmallSystemFontSize">
            <summary>
            Returns the size of the standard small system font.
            <br></br>Equivalent to the native <c>smallSystemFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard small system font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.SystemFontOfSize(System.Single)">
            <summary>
            Returns the font object used for standard interface items in the specified size.
            <br></br>Equivalent to the native <c>systemFontOfSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.SystemFontSize">
            <summary>
            Returns the size of the standard system font.
            <br></br>Equivalent to the native <c>systemFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard system font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.ascender">
            <summary>
            The top y-coordinate, offset from the baseline, of the receiver’s longest ascender. (read-only)
            <br></br>Equivalent to the native <c>ascender</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The ascender value is measured in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>descender</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.capHeight">
            <summary>
            The receiver’s cap height information. (read-only)
            <br></br>Equivalent to the native <c>capHeight</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value measures (in points) the height of a capital character. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.descender">
            <summary>
            The bottom y-coordinate, offset from the baseline, of the receiver’s longest descender. (read-only)
            <br></br>Equivalent to the native <c>descender</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The descender value is measured in points. This value may be positive or negative. For example, if the longest descender extends 2 points below the baseline, this method returns <c>-2.0</c> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>ascender</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.familyName">
            <summary>
            The font family name. (read-only)
            <br></br>Equivalent to the native <c>familyName</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A family name is a name such as <c>Times New Roman</c> that identifies one or more specific fonts. The value in this property is intended for an application’s internal usage only and should not be displayed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.fontName">
            <summary>
            The font face name. (read-only)
            <br></br>Equivalent to the native <c>fontName</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The font name is a name such as <c>HelveticaBold</c> that incorporates the family name and any specific style information for the font. The value in this property is intended for an application’s internal usage only and should not be displayed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.leading">
            <summary>
            The receiver’s leading information. (read-only) ( Deprecated in iOS 4.0.  Use the <c>lineHeight</c> property instead.)
            <br></br>Equivalent to the native <c>leading</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The leading value represents the spacing between lines of text and is measured (in points) from baseline to baseline.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 4.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.lineHeight">
            <summary>
            The height of text lines (measured in points). (read-only)
            <br></br>Equivalent to the native <c>lineHeight</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.pointSize">
            <summary>
            The receiver’s point size, or the effective vertical point size for a font with a nonstandard matrix. (read-only)
            <br></br>Equivalent to the native <c>pointSize</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.xHeight">
            <summary>
            The x-height of the receiver. (read-only)
            <br></br>Equivalent to the native <c>xHeight</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value measures (in points) the height of the lowercase character "x". </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.Font(System.Single)">
            <summary>
            Returns a font object that is the same as the receiver but which has the specified size instead.
            <br></br>Equivalent to the native <c>fontWithSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The desired size (in points) of the new font object. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIGraphics">
            <summary>
            Functions belonging to UIGraphics.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.UP_UIGraphics_UIGraphicsBeginImageContext(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.UP_UIGraphics_UIGraphicsGetCurrentContext">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.UP_UIGraphics_UIGraphicsGetImageFromCurrentImageContext">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.UP_UIGraphics_UIGraphicsEndImageContext">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.BeginImageContext(U3DXT.Utils.Size)">
            <summary>
            Creates a bitmap-based graphics context and makes it the current context.
            <br></br>Equivalent to the native <c>UIGraphicsBeginImageContext</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The size of the new bitmap context. This represents the size of the image returned by the <c>UIGraphicsGetImageFromCurrentImageContext</c> function. </p>
                <b>Discussion</b>
                <p>This function is equivalent to calling the <c>UIGraphicsBeginImageContextWithOptions</c> function with the opaque parameter set to <c>false</c> and a scale factor of <c>1.0</c>.</p>
                <p>In iOS 4 and later, you may call this function from any thread of your app.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="size">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.GetCurrentContext">
            <summary>
            Returns the current graphics context.
            <br></br>Equivalent to the native <c>UIGraphicsGetCurrentContext</c> function.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The current graphics context.</p>
                <b>Discussion</b>
                <p>The current graphics context is <c>null</c> by default. Prior to calling its <c>drawRect:</c> method, view objects push a valid context onto the stack, making it current. If you are not using a <c>UIView</c> object to do your drawing, however, you must push a valid context onto the stack manually using the <c>UIGraphicsPushContext</c> function.</p>
                <p>In iOS 4 and later, you may call this function from any thread of your app.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>UIGraphicsPushContext</c>
                    </li>
                    <li>
                        <c>UIGraphicsPopContext</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.GetImageFromCurrentImageContext">
            <summary>
            Returns an image based on the contents of the current bitmap-based graphics context.
            <br></br>Equivalent to the native <c>UIGraphicsGetImageFromCurrentImageContext</c> function.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A image object containing the contents of the current bitmap graphics context.</p>
                <b>Discussion</b>
                <p>You should call this function only when a bitmap-based graphics context is the current graphics context. If the current context is <c>null</c> or was not created by a call to <c>UIGraphicsBeginImageContext</c>, this function returns <c>null</c>.  </p>
                <p>In iOS 4 and later, you may call this function from any thread of your app.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>UIGraphicsBeginImageContext</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIGraphics.EndImageContext">
            <summary>
            Removes the current bitmap-based graphics context from the top of the stack.
            <br></br>Equivalent to the native <c>UIGraphicsEndImageContext</c> function.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You use this function to clean up the drawing environment put in place by the <c>UIGraphicsBeginImageContext</c> function and to remove the corresponding bitmap-based graphics context from the top of the stack. If the current context was not created using the <c>UIGraphicsBeginImageContext</c> function, this function does nothing. </p>
                <p>In iOS 4 and later, you may call this function from any thread of your app.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>UIGraphicsBeginImageContext</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImage">
            <summary>
            A <c>UIImage</c> object is a high-level way to display image data. You can create images from files, from Quartz image objects, or from raw image data you receive. The <c>UIImage</c> class also offers several options for drawing images to the current graphics context using different blend modes and opacity values.
            </summary>
            <remarks>
                <p>Image objects are immutable, so you cannot change their properties after creation. This means that you generally specify an image’s properties at initialization time or rely on the image’s metadata to provide the property value. In some cases, however, the <c>UIImage</c> class provides convenience methods for obtaining a copy of the image that uses custom values for a property. </p>
                <p>Because image objects are immutable, they also do not provide direct access to their underlying image data. However, you can get an <c>NSData</c> object containing either a PNG or JPEG representation of the image data using the <c>UIImagePNGRepresentation</c> and <c>UIImageJPEGRepresentation</c> functions.</p>
                <p>The system uses image objects to represent still pictures taken with the camera on supported devices. To take a picture, use the <c>UIImagePickerController</c> class. To save a picture to the Saved Photos album, use the <c>UIImageWriteToSavedPhotosAlbum</c> function.</p>
                <b>Images and Memory Management</b>
                <p>In low-memory situations, image data may be purged from a <c>UIImage</c> object to free up memory on the system. This purging behavior affects only the image data stored internally by the <c>UIImage</c> object and not the object itself. When you attempt to draw an image whose data has been purged, the image object automatically reloads the data from its original file. This extra load step, however, may incur a small performance penalty.</p>
                <p>You should avoid creating <c>UIImage</c> objects that are greater than 1024 x 1024 in size. Besides the large amount of memory such an image would consume, you may run into problems when using the image as a texture in OpenGL ES or when drawing the image to a view or layer. This size restriction does not apply if you are performing code-based manipulations, such as resizing an image larger than 1024 x 1024 pixels by drawing it to a bitmap-backed graphics context. In fact, you may need to resize an image in this manner (or break it into several smaller images) in order to draw it to one of your views.</p>
                <b>Supported Image Formats</b>
                <p> Table 1  lists the file formats that can be read by the <c>UIImage</c> class. </p>
                <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                    <caption class="tablecaption">
                        <strong class="caption_number">Table 1</strong>  Supported file formats</caption>
                    <tr>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Format</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Filename extensions</p>
                        </th>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Tagged Image File Format (TIFF)</p>
                        </td>
                        <td>
                            <p>
                                <c>.tiff</c>, <c>.tif</c></p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Joint Photographic Experts Group (JPEG)</p>
                        </td>
                        <td>
                            <p>
                                <c>.jpg</c>, <c>.jpeg</c></p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Graphic Interchange Format (GIF)</p>
                        </td>
                        <td>
                            <p>
                                <c>.gif</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Portable Network Graphic (PNG)</p>
                        </td>
                        <td>
                            <p>
                                <c>.png</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Windows Bitmap Format (DIB)</p>
                        </td>
                        <td>
                            <p>
                                <c>.bmp</c>, <c>.BMPf</c></p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Windows Icon Format </p>
                        </td>
                        <td>
                            <p>
                                <c>.ico</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Windows Cursor</p>
                        </td>
                        <td>
                            <p>
                                <c>.cur</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>XWindow bitmap</p>
                        </td>
                        <td>
                            <p>
                                <c>.xbm</c>
                            </p>
                        </td>
                    </tr>
                </table>
                <p>
                    <strong>Note:</strong> Windows Bitmap Format (BMP) files that are formatted as RGB-565 are converted to ARGB-1555 when they are loaded. </p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.FromByteArray(System.Byte[])">
            <summary>
            Creates and initializes a native UIImage from a byte array containing a PNG or JPEG.
            </summary>
            <returns>The newly created native UIImage.</returns>
            <param name="data">The byte array containing a PNG or JPEG.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.ToByteArray">
            <summary>
            Exports the UIImage as a PNG.
            </summary>
            <returns>The byte array containing a PNG.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.FromTexture2D(UnityEngine.Texture2D,System.Single)">
            <summary>
            Creates and initializes a native UIImage from a Texture2D.
            </summary>
            <returns>The newly created native UIImage.</returns>
            <param name="texture">The input texture.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.ToTexture2D(System.Boolean,System.Single)">
            <summary>
            Creates a Texture2D from the contents of this UIImage.
            </summary>
            <returns>The newly created Texture2D.</returns>
            <param name="correctOrientation">Whether to correct orientation.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.CopyToTexture2D(UnityEngine.Texture2D,System.Boolean,System.Single)">
            <summary>
            Copies the contents of this native UIImage to a Texture2D.
            </summary>
            <returns>
                <c>true</c>, if to image was copied, <c>false</c> otherwise.</returns>
            <param name="texture">The output texture</param>
            <param name="correctOrientation">Whether to correct orientation.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_get_size(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_get_imageOrientation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_get_CGImage(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithContentsOfFile_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithCGImage_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithCGImage_scale_orientation_(System.String,System.String,System.Single,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithData_scale_(System.String,System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_UIImageJPEGRepresentation(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_UIImagePNGRepresentation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIImage" /> class.
            <br></br>Equivalent to the native <c>[[UIImage alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.ClassExists">
            <summary>
            Returns whether the native UIImage class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.size">
            <summary>
            The dimensions of the image, taking orientation into account. (read-only)
            <br></br>Equivalent to the native <c>size</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>In iOS 4.0 and later, this value reflects the logical size of the image and is measured in points. In iOS 3.x and earlier, this value always reflects the dimensions of the image measured in pixels.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.imageOrientation">
            <summary>
            The orientation of the receiver’s image. (read-only)
            <br></br>Equivalent to the native <c>imageOrientation</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Image orientation affects the way the image data is displayed when drawn. By default, images are displayed in the “up” orientation. If the image has associated metadata (such as EXIF information), however, this property contains the orientation indicated by that metadata. For a list of possible values for this property, see  “UIImageOrientation.”  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.CGImage">
            <summary>
            The underlying Quartz image data. (read-only)
            <br></br>Equivalent to the native <c>CGImage</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the image data has been purged because of memory constraints, invoking this method forces that data to be loaded back into memory. Reloading the image data may incur a performance penalty. </p>
                <p>If the <c>UIImage</c> object was initialized using a <c>CIImage</c> object, the value of the property is <c>NULL</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the specified data.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithData:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The data object containing the image data. </p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data.</p>
                <b>Discussion</b>
                <p>The data in the <em>data</em> parameter must be formatted to match the file format of one of the system’s supported image types. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(System.String)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the contents of the specified file.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithContentsOfFile:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path to the file. This path should include the filename extension that identifies the type of the image data.  </p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not find the file or initialize the image from its contents. </p>
                <b>Discussion</b>
                <p>This method loads the image data into memory and marks it as purgeable. If the data is purged and needs to be reloaded, the image object loads that data again from the specified path. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.CoreGraphics.CGImage)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the specified Quartz image reference.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithCGImage:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>CGImage</em>
                <p>A Quartz image reference.</p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="cgImage">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.CoreGraphics.CGImage,System.Single,U3DXT.iOS.Native.UIKit.UIImageOrientation)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns an image object with the specified scale and orientation factors
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithCGImage:scale:orientation:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageRef</em>
                <p>The Quartz image object.</p>
                <em>scale</em>
                <p>The scale factor to assume when interpreting the image data. Applying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the <c>size</c> property. </p>
                <em>orientation</em>
                <p>The orientation of the image data. You can use this parameter to specify any rotation factors applied to the image.</p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="cgImage">
            </param>
            <param name="scale">
            </param>
            <param name="orientation">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Foundation.NSData,System.Single)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the specified data and scale factor.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithData:scale:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The data object containing the image data. </p>
                <em>scale</em>
                <p>The scale factor to assume when interpreting the image data. Applying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the <c>size</c> property. </p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data.</p>
                <b>Discussion</b>
                <p>The data in the <em>data</em> parameter must be formatted to match the file format of one of the system’s supported image types. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="scale">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.JPEGRepresentation(System.Single)">
            <summary>
            Returns the data for the specified image in JPEG format.
            <br></br>Equivalent to the native <c>UIImageJPEGRepresentation</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The original image data. </p>
                <em>compressionQuality</em>
                <p>The quality of the resulting JPEG image, expressed as a value from 0.0 to 1.0. The value 0.0 represents the maximum compression (or lowest quality) while the value 1.0 represents the least compression (or best quality). </p>
                <b>Return Value</b>
                <p>A data object containing the JPEG data, or <c>null</c> if there was a problem generating the data. This function may return <c>null</c> if the image has no data or if the underlying <c>CGImageRef</c> contains data in an unsupported bitmap format.</p>
                <b>Discussion</b>
                <p>If the image object’s underlying image data has been purged, calling this function forces that data to be reloaded into memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="compressionQuality">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.PNGRepresentation">
            <summary>
            Returns the data for the specified image in PNG format
            <br></br>Equivalent to the native <c>UIImagePNGRepresentation</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The original image data. </p>
                <b>Return Value</b>
                <p>A data object containing the PNG data, or <c>null</c> if there was a problem generating the data. This function may return <c>null</c> if the image has no data or if the underlying <c>CGImageRef</c> contains data in an unsupported bitmap format.</p>
                <b>Discussion</b>
                <p>If the image object’s underlying image data has been purged, calling this function forces that data to be reloaded into memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImageOrientation">
            <summary>
            Specifies the possible orientations of an image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.RightMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationRight</c> value. This is the equivalent to flipping an image in the “up” orientation along its horizontal axis and then rotating the image 90 degrees clockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationRightMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.LeftMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationLeft</c> value. This is the equivalent to flipping an image in the “up” orientation along its horizontal axis and then rotating the image 90 degrees counterclockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationLeftMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Right">
            <summary>
                <p>The image is rotated 90 degrees clockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Up">
            <summary>
                <p>The default orientation of images. The image is drawn right-side up, as shown here. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.DownMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationDown</c> value. This is the equivalent to flipping an image in the “up” orientation along its horizontal axis and then rotating the image 180 degrees, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationDownMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Down">
            <summary>
                <p>The image is rotated 180 degrees, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Left">
            <summary>
                <p>The image is rotated 90 degrees counterclockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.UpMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationUp</c> value. In other words, the image is flipped along its horizontal axis, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationUpMirrored</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImageOrientationCorrectedRotateAngleExtensions">
            <summary>
            User interface image orientation rotate angle extensions.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageOrientationCorrectedRotateAngleExtensions.ToCorrectedRotateAngle(U3DXT.iOS.Native.UIKit.UIImageOrientation)">
            <summary>
            To the rotate angle.
            </summary>
            <returns>The rotate angle.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerController">
            <summary>
            The <c>UIImagePickerController</c> class manages customizable, system-supplied user interfaces for taking pictures and movies on supported devices, and for choosing saved images and movies for use in your app. An image picker controller manages user interactions and delivers the results of those interactions to a delegate object.
            </summary>
            <remarks>
                <p>The role and appearance of an image picker controller depend on the <em>source type</em> you assign to it before you present it.</p>
                <ul class="ul">
                    <li class="li">
                        <p>A <c>sourceType</c> of <c>UIImagePickerControllerSourceTypeCamera</c> provides a user interface for taking a new picture or movie (on devices that support media capture).</p>
                    </li>
                    <li class="li">
                        <p>A <c>sourceType</c> of <c>UIImagePickerControllerSourceTypePhotoLibrary</c> or <c>UIImagePickerControllerSourceTypeSavedPhotosAlbum</c> provides a user interface for choosing among saved pictures and movies.</p>
                    </li>
                </ul>
                <p>To use an image picker controller containing its default controls, perform these steps:</p>
                <ol class="ol">
                    <li class="li">
                        <p>Verify that the device is capable of picking content from the desired source. Do this calling the <c>isSourceTypeAvailable:</c> class method, providing a constant from the  “UIImagePickerControllerSourceType”  enumeration.</p>
                    </li>
                    <li class="li">
                        <p>Check which media types are available, for the source type you’re using, by calling the <c>availableMediaTypesForSourceType:</c> class method. This lets you distinguish between a camera that can be used for video recording and one that can be used only for still images.</p>
                    </li>
                    <li class="li">
                        <p>Tell the image picker controller to adjust the UI according to the media types you want to make available—still images, movies, or both—by setting the <c>mediaTypes</c> property.</p>
                    </li>
                    <li class="li">
                        <p>Present the user interface. On iPhone or iPod touch, do this modally (full-screen) by calling the <c>presentViewController:animated:completion:</c> method of the currently active view controller, passing your configured image picker controller as the new view controller.</p>
                        <p>On iPad, the correct way to present an image picker depend on its source type, as summarized in this table:</p>
                        <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                            <tr>
                                <th scope="col" class="TableHeading_TableRow_TableCell">
                                    <p>Camera</p>
                                </th>
                                <th scope="col" class="TableHeading_TableRow_TableCell">
                                    <p>Photo Library</p>
                                </th>
                                <th scope="col" class="TableHeading_TableRow_TableCell">
                                    <p>Saved Photos Album</p>
                                </th>
                            </tr>
                            <tr>
                                <td scope="row">
                                    <p>Use full screen</p>
                                </td>
                                <td>
                                    <p>Must use a popover</p>
                                </td>
                                <td>
                                    <p>Must use a popover</p>
                                </td>
                            </tr>
                        </table>
                        <p>The table indicates that on iPad, if you specify a source type of  <c>UIImagePickerControllerSourceTypePhotoLibrary</c> or <c>UIImagePickerControllerSourceTypeSavedPhotosAlbum</c>, you must present the image picker using a popover controller, as described in  “Presenting and Dismissing the Popover”  in <em>UIPopoverController Class Reference</em>. If you attempt to present an image picker modally (full-screen) for choosing among saved pictures and movies, the system raises an exception.</p>
                        <p>On iPad, if you specify a source type of <c>UIImagePickerControllerSourceTypeCamera</c>, you can present the image picker modally (full-screen) or by using a popover. However, Apple recommends that you present the camera interface only full-screen.</p>
                    </li>
                    <li class="li">
                        <p>When the user taps a button to pick a newly-captured or saved image or movie, or cancels the operation, dismiss the image picker using your delegate object. For newly-captured media, your delegate can then save it to the Camera Roll on the device. For previously-saved media, your delegate can then use the image data according to the purpose of your app.</p>
                    </li>
                </ol>
                <p>For details on these steps, refer to  “Taking Pictures and Movies” .</p>
                <p>You can customize an image picker controller to manage user interactions yourself. To do this, provide an overlay view containing the controls you want to display, and use the methods described in  “Capturing Still Images or Movies.”  You can display your custom overlay view in addition to, or instead of, the default controls. Custom overlay views for the <c>UIImagePickerController</c> class are available in iOS 3.1 and later by way of the <c>cameraOverlayView</c> property. For a code example, see the <em>PhotoPicker</em> sample code project.</p>
                <p>
                </p>
                <p>
                    <strong>Important:</strong> The <c>UIImagePickerController</c> class supports portrait mode only. This class is intended to be used as-is and does not support subclassing. The view hierarchy for this class is private and must not be modified, with one exception. You can assign a custom view to the <c>cameraOverlayView</c> property and use that view to present additional information or manage the interactions between the camera interface and your code.</p>
                <p>
                </p>
                <p>
                </p>
                <b>Providing a Delegate Object</b>
                <p>To use an image picker controller, you must provide a delegate that conforms to the <c>UIImagePickerControllerDelegate</c> protocol.  Starting in iOS 4.1, you can use the delegate to save still-image metadata to the Camera Roll along with the image. See <em>UIImagePickerControllerDelegate Protocol Reference</em>.</p>
                <b>Adjusting Flash Mode</b>
                <p>In iOS 4.0 and later, you can provide custom controls to let the user adjust flash mode (on devices that have a flash LED), pick which camera to use (on devices that have a front and rear camera), and switch between still image and movie capture. You can also manage these settings programmatically. You can also manipulate the flash directly to provide effects such as a strobe light. Present a picker interface set to use video capture mode. Then, turn the flash LED on or off by setting the <c>cameraFlashMode</c> property to <c>UIImagePickerControllerCameraFlashModeOn</c> or <c>UIImagePickerControllerCameraFlashModeOff</c>.</p>
                <b>Working with Movies</b>
                <p>Movie capture has a default duration limit of 10 minutes but can be adjusted using the <c>videoMaximumDuration</c> property. When a user taps the Share button to send a movie to MMS, MobileMe, YouTube, or another destination, an appropriate duration limit and an appropriate video quality are enforced.</p>
                <p>The default camera interface supports editing of previously-saved movies. Editing involves trimming from the start or end of the movie, then saving the trimmed movie. To display an interface dedicated to movie editing, rather than one that also supports recording new movies, use the <c>UIVideoEditorController</c> class instead of this one. See <em>UIVideoEditorController Class Reference</em>.</p>
                <b>Fully-Customized Media Capture and Browsing</b>
                <p>To perform fully-customized image or movie capture, instead use the AV Foundation framework as described in  “Media Capture and Access to Camera”  in <em>AV Foundation Programming Guide</em>. Camera access using the AV Foundation framework is available starting in iOS 4.0.</p>
                <p>To create a fully-customized image picker for browsing the photo library, use classes from the Assets Library framework. For example, you could create a custom image picker that displays larger thumbnail images, that makes use of EXIF metadata including timestamp and location information, or that integrates with other frameworks such as Map Kit. For more information, see <em>Assets Library Framework Reference</em>. Media browsing using the Assets Library framework is available starting in iOS 4.0</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.EditedImage">
            <summary>
                <p>Specifies an image edited by the user.</p>
                <p>The value for this key is a <c>UIImage</c> object.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerEditedImage</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.ReferenceURL">
            <summary>
                <p>The Assets Library URL for the original version of the picked item.</p>
                <p>After the user edits a picked item—such as by cropping an image or trimming a movie—the URL continues to point to the original version of the picked item.</p>
                <p>The value for this key is an <c>NSURL</c> object.</p>
                <p>Available in iOS 4.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerReferenceURL</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.MediaType">
            <summary>
                <p>Specifies the media type selected by the user.</p>
                <p>The value for this key is an <c>String</c> object containing a type code such as <c>kUTTypeImage</c> or <c>kUTTypeMovie</c>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerMediaType</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.OriginalImage">
            <summary>
                <p>Specifies the original, uncropped image selected by the user.</p>
                <p>The value for this key is a <c>UIImage</c> object. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerOriginalImage</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.MediaURL">
            <summary>
                <p>Specifies the filesystem URL for the movie.</p>
                <p>The value for this key is an <c>NSURL</c> object.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerMediaURL</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.MediaMetadata">
            <summary>
                <p>Metadata for a newly-captured photograph.</p>
                <p>This key is valid only when using an image picker whose source type is set to <c>UIImagePickerControllerSourceTypeCamera</c>, and applies only to still images.</p>
                <p>The value for this key is an <c>Dictionary</c> object that contains the metadata of the photo that was just captured. To store the metadata along with the image in the Camera Roll, use the <c>writeImageToSavedPhotosAlbum:metadata:completionBlock:</c> method of the Assets Library framework.</p>
                <p>Available in iOS 4.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerMediaMetadata</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.CropRect">
            <summary>
                <p>Specifies the cropping rectangle that was applied to the original image.</p>
                <p>The value for this key is an <c>NSValue</c> object containing a <c>Rect</c> opaque type.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCropRect</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIImagePickerController.DidFinishPickingMediaWithInfo">
            <summary>
            Tells the delegate that the user picked a still image or movie.
            <br></br>Equivalent to implementing the native <c>imagePickerController:didFinishPickingMediaWithInfo:</c> method of <c>UIImagePickerControllerDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerController.DidFinishPickingMediaWithInfoEventArgs">
            <summary>
            Event arguments for DidFinishPickingMediaWithInfo.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.DidFinishPickingMediaWithInfoEventArgs.#ctor(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.DidFinishPickingMediaWithInfoEventArgs.info">
            <summary>info</summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIImagePickerController.DidCancel">
            <summary>
            Tells the delegate that the user cancelled the pick operation.
            <br></br>Equivalent to implementing the native <c>imagePickerControllerDidCancel:</c> method of <c>UIImagePickerControllerDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_availableCaptureModesForCameraDevice_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_availableMediaTypesForSourceType_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_isCameraDeviceAvailable_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_isFlashAvailableForCameraDevice_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_isSourceTypeAvailable_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_allowsEditing(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_allowsEditing(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_allowsImageEditing(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_allowsImageEditing(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraCaptureMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraCaptureMode(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraDevice(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraDevice(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraFlashMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraFlashMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraOverlayView(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraOverlayView(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraViewTransform(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraViewTransform(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_mediaTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_mediaTypes(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_showsCameraControls(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_showsCameraControls(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_sourceType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_sourceType(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_videoMaximumDuration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_videoMaximumDuration(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_videoQuality(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_videoQuality(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_startVideoCapture(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_stopVideoCapture(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_takePicture(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIImagePickerController" /> class.
            <br></br>Equivalent to the native <c>[[UIImagePickerController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.ClassExists">
            <summary>
            Returns whether the native UIImagePickerController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.AvailableCaptureModes(U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice)">
            <summary>
            Returns an array of <c>double</c> objects indicating the capture modes supported by a given camera device.
            <br></br>Equivalent to the native <c>availableCaptureModesForCameraDevice:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>cameraDevice</em>
                <p>A  “UIImagePickerControllerCameraDevice”  constant indicating the camera you want to interrogate.</p>
                <b>Return Value</b>
                <p>An array of <c>double</c> objects indicating the capture modes supported by <em>cameraDevice</em>.  </p>
                <b>Discussion</b>
                <p>See  “UIImagePickerControllerCameraCaptureMode”  for possible values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraCaptureMode</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
            <param name="cameraDevice">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.AvailableMediaTypes(U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType)">
            <summary>
            Returns an array of the available media types for the specified source type.
            <br></br>Equivalent to the native <c>availableMediaTypesForSourceType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>sourceType</em>
                <p>The source to use to pick an image.</p>
                <b>Return Value</b>
                <p>An array whose elements identify the available media types for the specified source type.</p>
                <b>Discussion</b>
                <p>Some iOS devices support video recording. Use this method, along with the <c>isSourceTypeAvailable:</c> method, to determine if video recording is available on a device. The availability of video recording is indicated by the presence of the <c>kUTTypeMovie</c> media type for the <c>UIImagePickerControllerSourceTypeCamera</c> source type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
            <param name="sourceType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.IsCameraDeviceAvailable(U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice)">
            <summary>
            Returns a Boolean value that indicates whether a given camera is available.
            <br></br>Equivalent to the native <c>isCameraDeviceAvailable:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>cameraDevice</em>
                <p>A  “UIImagePickerControllerCameraDevice”  constant indicating the camera whose availability you want to check.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the camera indicated by <em>cameraDevice</em> is available, or <c>false</c> if it is not available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>+ isFlashAvailableForCameraDevice:</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
            <param name="cameraDevice">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.IsFlashAvailable(U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice)">
            <summary>
            Indicates whether a given camera has flash illumination capability.
            <br></br>Equivalent to the native <c>isFlashAvailableForCameraDevice:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>cameraDevice</em>
                <p>A  “UIImagePickerControllerCameraDevice”  constant indicating the camera whose flash capability you want to know.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>cameraDevice</em> can use flash illumination, or <c>false</c> if it cannot.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>cameraFlashMode</c>
                    </li>
                </ul>
            </remarks>
            <param name="cameraDevice">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.IsSourceTypeAvailable(U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType)">
            <summary>
            Returns a Boolean value indicating whether the device supports picking media using the specified source type.
            <br></br>Equivalent to the native <c>isSourceTypeAvailable:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>sourceType</em>
                <p>The source to use to pick an image or movie.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the device supports the specified source type; <c>false</c> if the specified source type is not available. </p>
                <b>Discussion</b>
                <p>Because a media source may not be present or may be unavailable, devices may not always support all source types. For example, if you attempt to pick an image from the user’s library and the library is empty, this method returns <c>false</c>. Similarly, if the camera is already in use, this method returns <c>false</c>.</p>
                <p>Before attempting to use an <c>UIImagePickerController</c> object to pick an image, you must call this method to ensure that the desired source type is available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableMediaTypesForSourceType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="sourceType">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.allowsEditing">
            <summary>
            A Boolean value indicating whether the user is allowed to edit a selected still image or movie.
            <br></br>Equivalent to the native <c>allowsEditing</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you allow the user to edit still images or movies, the delegate may receive a dictionary with information about the edits that were made. The protocol for the delegate is described in <em>UIImagePickerControllerDelegate Protocol Reference</em>.</p>
                <p>This property is set to <c>false</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.allowsImageEditing">
            <summary>
            A Boolean value indicating whether the user is allowed to edit a selected image. ( Deprecated in iOS 3.1.  Use <c>allowsEditing</c> instead.)
            <br></br>Equivalent to the native <c>allowsImageEditing</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you allow the user to edit images, the delegate may receive a dictionary with information about the edits that were made.</p>
                <p>This property is set to <c>false</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 3.1.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.cameraCaptureMode">
            <summary>
            The capture mode used by the camera.
            <br></br>Equivalent to the native <c>cameraCaptureMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The various capture modes are listed in the  “UIImagePickerControllerCameraCaptureMode”  enumeration. The default value is <c>UIImagePickerControllerCameraCaptureModePhoto</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.cameraDevice">
            <summary>
            The camera used by the image picker controller.
            <br></br>Equivalent to the native <c>cameraDevice</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default is <c>UIImagePickerControllerCameraDeviceRear</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ isCameraDeviceAvailable:</c>
                    </li>
                    <li>
                        <c>+ isFlashAvailableForCameraDevice:</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.cameraFlashMode">
            <summary>
            The flash mode used by the active camera.
            <br></br>Equivalent to the native <c>cameraFlashMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The various flash modes are listed in the  “UIImagePickerControllerCameraFlashMode”  enumeration. The default value is <c>UIImagePickerControllerCameraFlashModeAuto</c>.</p>
                <p>The value of this property specifies the behavior of the still-image flash when the value of the <c>cameraCaptureMode</c> property is <c>UIImagePickerControllerCameraCaptureModePhoto</c>, and specifies the behavior of the video torch when <c>cameraCaptureMode</c> is <c>UIImagePickerControllerCameraCaptureModeVideo</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>cameraCaptureMode</c>
                    </li>
                    <li>
                        <c>+ isFlashAvailableForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.cameraOverlayView">
            <summary>
            The custom view to display on top of the default image picker interface.
            <br></br>Equivalent to the native <c>cameraOverlayView</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use an overlay view to present a custom view hierarchy on top of the default image picker interface. The image picker layers your custom overlay view on top of the other image picker views and positions it relative to the screen coordinates. If you have the default camera controls set to be visible, incorporate transparency into your view, or position it to avoid obscuring the underlying content.</p>
                <p>This property is set to <c>null</c> by default.</p>
                <p>You can access this property only when the source type of the image picker is set to <c>UIImagePickerControllerSourceTypeCamera</c>. Attempting to access this property for other source types results in the throwing of an <c>NSInvalidArgumentException</c> exception. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>showsCameraControls</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.cameraViewTransform">
            <summary>
            The transform to apply to the camera’s preview image.
            <br></br>Equivalent to the native <c>cameraViewTransform</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This transform affects the live preview image only and does not affect your custom overlay view or the default image picker controls. You can use this property in conjunction with custom controls to implement your own electronic zoom behaviors.</p>
                <p>You can access this property only when the source type of the image picker is set to <c>UIImagePickerControllerSourceTypeCamera</c>. Attempting to access this property for other source types results in the throwing of an <c>NSInvalidArgumentException</c> exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.Delegate">
            <summary>
            The image picker’s delegate object.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The delegate receives notifications when the user picks an image or movie, or exits the picker interface. The delegate also decides when to dismiss the picker interface, so you must provide a delegate to use a picker. If this property is <c>null</c>, the picker is dismissed immediately if you try to show it.</p>
                <p>For information about the methods you can implement for your delegate object, see <em>UIImagePickerControllerDelegate Protocol Reference</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.mediaTypes">
            <summary>
            An array indicating the media types to be accessed by the media picker controller.
            <br></br>Equivalent to the native <c>mediaTypes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Depending on the media types you assign to this property, the picker displays a dedicated interface for still images or movies, or a selection control that lets the user choose the picker interface. Before setting this property, check which media types are available by calling the <c>availableMediaTypesForSourceType:</c> class method.</p>
                <p>If you set this property to an empty array, or to an array in which none of the media types is available for the current source, the system throws an exception.</p>
                <p>When capturing media, the value of this property determines the camera interface to display. When browsing saved media, this property determines the types of media presented in the interface.</p>
                <p>By default, this property is set to the single value <c>kUTTypeImage</c>, which designates the still camera interface when capturing media, and specifies that only still images should be displayed in the media picker when browsing saved media. To designate the movie capture interface, or to indicate that only movies should be displayed when browsing saved media, use the <c>kUTTypeMovie</c> identifier in a statement like this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>myImagePickerController.mediaTypes =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [[NSArray alloc] initWithObjects: (NSString *) kUTTypeMovie, nil];  </pre>
                        </td>
                    </tr>
                </table>
                <p>To designate all available media types for a source, use a statement like this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>myImagePickerController.mediaTypes =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [UIImagePickerController availableMediaTypesForSourceType:  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        UIImagePickerControllerSourceTypeCamera];  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.showsCameraControls">
            <summary>
            Indicates whether the image picker displays the default camera controls.
            <br></br>Equivalent to the native <c>showsCameraControls</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>true</c>, which specifies that the default camera controls are visible in the picker. Set it to <c>false</c> to hide the default controls if you want to instead provide a custom overlay view using the <c>cameraOverlayView</c> property. </p>
                <p>
                    <strong>Note:</strong> In iOS 3.1.3 and earlier, hiding the default camera controls limits you to taking still pictures only, regardless of whether movie capture is available on the device.</p>
                <p>
                </p>
                <p>If you set this property to <c>false</c> and provide your own custom controls, you can take multiple pictures before dismissing the image picker interface. However, if you set this property to <c>true</c>, your delegate must dismiss the image picker interface after the user takes one picture or cancels the operation.</p>
                <p>You can access this property only when the source type of the image picker is set to <c>UIImagePickerControllerSourceTypeCamera</c>. Attempting to access this property for other source types results in the throwing of an <c>NSInvalidArgumentException</c> exception. Depending on the value you assign to the <c>mediaTypes</c> property, the default controls display the still camera or movie camera interface, or a selection control that lets the user choose the picker interface.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraOverlayView</c>
                    </li>
                    <li>
                        <c>– takePicture</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.sourceType">
            <summary>
            The type of picker interface to be displayed by the controller.
            <br></br>Equivalent to the native <c>sourceType</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Prior to running the picker interface, set this value to the desired source type. The source type you set must be available and an exception is thrown if it is not. If you change this property while the picker is visible, the picker interface changes to match the new value in this property.</p>
                <p>The various source types are listed in the  “UIImagePickerControllerSourceType”  enumeration. The default value is <c>UIImagePickerControllerSourceTypePhotoLibrary</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.videoMaximumDuration">
            <summary>
            The maximum duration, in seconds, for a video recording.
            <br></br>Equivalent to the native <c>videoMaximumDuration</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is 10 minutes (600 seconds). When a user taps the Share button to send a movie to MMS, MobileMe, YouTube, or another destination, an appropriate duration limit and an appropriate video quality are enforced.</p>
                <p>This property is available only if the <c>mediaTypes</c> property’s value array includes the <c>kUTTypeMovie</c> media type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableMediaTypesForSourceType:</c>
                    </li>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.videoQuality">
            <summary>
            The video recording and transcoding quality.
            <br></br>Equivalent to the native <c>videoQuality</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The video quality setting specified by this property is used during video recording. It is also used whenever picking a recorded movie. Specifically, if the video quality setting is lower than the video quality of an existing movie, displaying that movie in the picker results in transcoding the movie to the lower quality.</p>
                <p>The various video qualities are listed in the <c>“UIImagePickerControllerQualityType”</c> enumeration. The default value is <c>UIImagePickerControllerQualityTypeMedium</c>. To capture or transcode a movie using a video quality other than the default value, you must set the quality explicitly.</p>
                <p>This property is available only if the <c>mediaTypes</c> property’s value array includes the <c>kUTTypeMovie</c> media type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableMediaTypesForSourceType:</c>
                    </li>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.StartVideoCapture">
            <summary>
            Starts video capture using the camera specified by the <c>UIImagePickerControllerCameraDevice</c> property.
            <br></br>Equivalent to the native <c>startVideoCapture</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> on success or <c>false</c> on failure. This method may return a value of <c>false</c> for various reasons, among them the following:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Movie capture is already in progress</p>
                    </li>
                    <li class="li">
                        <p>The device does not support movie capture</p>
                    </li>
                    <li class="li">
                        <p>The device is out of disk space</p>
                    </li>
                </ul>
                <b>Discussion</b>
                <p>Use this method in conjunction with a custom overlay view to initiate the programmatic capture of a movie. You can take more than one movie without leaving the interface, but to do so requires you to hide the default image picker controls.</p>
                <p>Calling this method while a movie is being captured has no effect. You must call the <c>stopVideoCapture</c> method, and then wait until the associated delegate object receives an <c>imagePickerController:didFinishPickingMediaWithInfo:</c> message, before you can capture another movie.</p>
                <p>Calling this method when the source type of the image picker is set to a value other than <c>UIImagePickerControllerSourceTypeCamera</c> results in the throwing of an <c>NSInvalidArgumentException</c> exception.</p>
                <p>If you require additional options or more control over movie capture, use the movie capture methods in the AV Foundation framework. Refer to <em>AV Foundation Framework Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.StopVideoCapture">
            <summary>
            Stops video capture.
            <br></br>Equivalent to the native <c>stopVideoCapture</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>After you call this method to stop video capture, the system calls the image picker delegate’s <c>imagePickerController:didFinishPickingMediaWithInfo:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.TakePicture">
            <summary>
            Captures a still image using the camera.
            <br></br>Equivalent to the native <c>takePicture</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method in conjunction with a custom overlay view to initiate the programmatic capture of a still image. This supports taking more than one picture without leaving the interface, but requires that you hide the default image picker controls.</p>
                <p>Calling this method while an image is being captured has no effect. You must wait until the associated delegate object receives an <c>imagePickerController:didFinishPickingMediaWithInfo:</c> message before you can capture another picture.</p>
                <p>Calling this method when the source type of the image picker is set to a value other than <c>UIImagePickerControllerSourceTypeCamera</c> results in the throwing of an <c>NSInvalidArgumentException</c> exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraOverlayView</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraCaptureMode">
            <summary>
            The category of media for the camera to capture.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>cameraCaptureMode</c> property.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraCaptureMode.Video">
            <summary>
                <p>Specifies that the camera captures movies.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraCaptureModeVideo</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraCaptureMode.Photo">
            <summary>
                <p>Specifies that the camera captures still images.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraCaptureModePhoto</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice">
            <summary>
            The camera to use for image or movie capture.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>cameraDevice</c> property.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice.Rear">
            <summary>
                <p>Specifies the camera on the rear of the device.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraDeviceRear</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice.Front">
            <summary>
                <p>Specifies the camera on the front of the device.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraDeviceFront</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode">
            <summary>
            The flash mode to use with the active camera.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>cameraFlashMode</c> property.</p>
                <p>The behavior of the flash depends on the camera capture mode.</p>
                <ul class="ul">
                    <li class="li">
                        <p>For a <c>cameraCaptureMode</c> value of <c>UIImagePickerControllerCameraCaptureModePhoto</c>, flash is used to transiently illuminate the subject during still image capture.</p>
                    </li>
                    <li class="li">
                        <p>For a <c>cameraCaptureMode</c> value of <c>UIImagePickerControllerCameraCaptureModeVideo</c>, flash is used to continuously illuminate the subject during movie capture.</p>
                    </li>
                </ul>
                <p>For a given camera on a device, flash may or may not be available. You specify the active camera by way of the <c>cameraDevice</c> property. You can determine if the active camera has flash available by calling the <c>isFlashAvailableForCameraDevice:</c> class method.</p>
                <p>You can manipulate the flash directly to provide effects such as a strobe light. Present a picker interface set to use video capture mode. Then, turn the flash LED on or off by setting the <c>cameraFlashMode</c> property to <c>UIImagePickerControllerCameraFlashModeOn</c> or <c>UIImagePickerControllerCameraFlashModeOff</c>.</p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode.On">
            <summary>
                <p>Specifies that flash illumination is always on, no matter what the ambient light conditions are.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraFlashModeOn</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode.Auto">
            <summary>
                <p>Specifies that the device should consider ambient light conditions to automatically determine whether or not to use flash illumination.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraFlashModeAuto</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode.Off">
            <summary>
                <p>Specifies that flash illumination is always off, no matter what the ambient light conditions are.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraFlashModeOff</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate">
            <summary>
            The <c>UIImagePickerControllerDelegate</c> protocol defines methods that your delegate object must implement to interact with the image picker interface. The methods of this protocol notify your delegate when the user either picks an image or movie, or cancels the picker operation.
            </summary>
            <remarks>
                <p>The delegate methods are responsible for dismissing the picker when the operation completes. To dismiss the picker, call the <c>dismissModalViewControllerAnimated:</c> method of the parent controller responsible for displaying the <c>UIImagePickerController</c> object.</p>
                <p>To save a still image to the user’s Camera Roll album, call the <c>UIImageWriteToSavedPhotosAlbum</c> function from within the body of the <c>imagePickerController:didFinishPickingMediaWithInfo:</c> method. To save a movie to the user’s Camera Roll album, instead call the <c>UISaveVideoAtPathToSavedPhotosAlbum</c> function. These functions, described in <em>UIKit Function Reference</em>, save the image or movie only; they do not save metadata.</p>
                <p>Starting in iOS 4.0, you can save still-image metadata, along with a still image, to the Camera Roll. To do this, use the <c>writeImageToSavedPhotosAlbum:metadata:completionBlock:</c> method of the Assets Library framework. See the description for the <c>UIImagePickerControllerMediaMetadata</c> key.</p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.UP_UIImagePickerControllerDelegate_set__imagePickerController_didFinishPickingMediaWithInfo__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.UP_UIImagePickerControllerDelegate_set__imagePickerControllerDidCancel__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.DidFinishPickingMediaWithInfo(U3DXT.iOS.Native.UIKit.UIImagePickerController,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            (optional) Tells the delegate that the user picked a still image or movie.
            <br></br>Equivalent to the native <c>imagePickerController:didFinishPickingMediaWithInfo:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>picker</em>
                <p>The controller object managing the image picker interface.</p>
                <em>info</em>
                <p>A dictionary containing the original image and the edited image, if an image was picked; or a filesystem URL for the movie, if a movie was picked. The dictionary also contains any relevant editing information. The keys for this dictionary are listed in  “Editing Information Keys.”   </p>
                <b>Discussion</b>
                <p>Your delegate object’s implementation of this method should pass the specified media on to any custom code that needs it, and should then dismiss the picker view.</p>
                <p>When editing is enabled, the image picker view presents the user with a preview of the currently selected image or movie along with controls for modifying it. (This behavior is managed by the picker view prior to calling this method.) If the user modifies the image or movie, the editing information is available in the <c>info</c> parameter. The original image is also returned in the <c>info</c> parameter.</p>
                <p>If you set the image picker’s <c>showsCameraControls</c> property to <c>false</c> and provide your own custom controls, you can take multiple pictures before dismissing the image picker interface. However, if you set that property to <c>true</c>, your delegate must dismiss the image picker interface after the user takes one picture or cancels the operation.</p>
                <p>Implementation of this method is optional, but expected.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="picker">
            </param>
            <param name="info">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.DidCancel(U3DXT.iOS.Native.UIKit.UIImagePickerController)">
            <summary>
            (optional) Tells the delegate that the user cancelled the pick operation.
            <br></br>Equivalent to the native <c>imagePickerControllerDidCancel:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>picker</em>
                <p>The controller object managing the image picker interface.</p>
                <b>Discussion</b>
                <p>Your delegate’s implementation of this method should dismiss the picker view by calling the <c>dismissModalViewControllerAnimated:</c> method of the parent view controller.</p>
                <p>Implementation of this method is optional, but expected.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="picker">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate._imagePickerController_didFinishPickingMediaWithInfo__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_imagePickerController_didFinishPickingMediaWithInfo__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate._imagePickerControllerDidCancel__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_imagePickerControllerDidCancel__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType">
            <summary>
            Video quality settings for movies recorded with the built-in camera, or transcoded by displaying in the image picker.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>videoQuality</c> property.</p>
                <p>The video quality setting applies to transcoding as well as to recording. Specifically, if the video quality setting is lower than the video quality of an existing movie, displaying that movie in the picker results in transcoding the movie to the lower quality.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.IFrame960x540">
            <summary>
                <p>If recording, specifies that you want to use 960x540 iFrame format.</p>
                <p>The Apple iFrame format supports video editing by keeping content in its native recorded format while editing.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeIFrame960x540</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.Medium">
            <summary>
                <p>If recording, specifies that you want to use medium-quality video recording.</p>
                <p>Recorded files can usually be transferred using Wi-Fi. This is the default video quality setting.</p>
                <p>If displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to medium video quality.</p>
                <p>Available in iOS 3.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeMedium</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.High">
            <summary>
                <p>If recording, specifies that you want to use the highest-quality video recording supported for the active camera on the device.</p>
                <p>Recorded files are suitable for on-device playback and for wired transfer to the Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.</p>
                <p>If displaying a recorded movie in the image picker, specifies that you do not want to reduce the video quality of the movie.</p>
                <p>Available in iOS 3.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeHigh</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.Low">
            <summary>
                <p>If recording, specifies that you want to use low-quality video recording.</p>
                <p>Recorded files can usually be transferred over the cellular network.</p>
                <p>If displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to low video quality.</p>
                <p>Available in iOS 3.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeLow</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.VGA640x480">
            <summary>
                <p>If recording, specifies that you want to use VGA-quality video recording (pixel dimensions of 640x480).</p>
                <p>If displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to VGA video quality.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityType640x480</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.IFrame1280x720">
            <summary>
                <p>If recording, specifies that you want to use 1280x720 iFrame format.</p>
                <p>The Apple iFrame format supports video editing by keeping content in its native recorded format while editing.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeIFrame1280x720</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType">
            <summary>
            The source to use when picking an image or when determining available media types.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A given source may not be available on a given device because the source is not physically present or because it cannot currently be accessed.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType.PhotoLibrary">
            <summary>
                <p>Specifies the device’s photo library as the source for the image picker controller.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerSourceTypePhotoLibrary</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType.Camera">
            <summary>
                <p>Specifies the device’s built-in camera as the source for the image picker controller. Indicate the specific camera you want (front or rear, as available) by using the <c>cameraDevice</c> property.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerSourceTypeCamera</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType.SavedPhotosAlbum">
            <summary>
                <p>Specifies the device’s Camera Roll album as the source for the image picker controller. If the device does not have a camera, specifies the Saved Photos album as the source.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerSourceTypeSavedPhotosAlbum</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImageView">
            <summary>
            An image view object provides a view-based container for displaying either a single image or for animating a series of images. For animating the images, the <c>UIImageView</c> class provides controls to set the duration and frequency of the animation. You can also start and stop the animation freely.
            </summary>
            <remarks>
                <p>New image view objects are configured to disregard user events by default. If you want to handle events in a custom subclass of <c>UIImageView</c>, you must explicitly change the value of the <c>userInteractionEnabled</c> property to <c>true</c> after initializing the object.</p>
                <p>When a <c>UIImageView</c> object displays one of its images, the actual behavior is based on the properties of the image and the view. If either of the image’s <c>leftCapWidth</c> or <c>topCapHeight</c> properties are non-zero, then the image is stretched according to the values in those properties. Otherwise, the image is scaled, sized to fit, or positioned in the image view according to the <c>contentMode</c> property of the view. It is recommended (but not required) that you use images that are all the same size. If the images are different sizes, each will be adjusted to fit separately based on that mode.</p>
                <p>All images associated with a <c>UIImageView</c> object should use the same <c>scale</c>. If your application uses images with different scales, they may render incorrectly.</p>
                <p>For information about basic view behaviors, see <em>View Programming Guide for iOS</em>. </p>
                <b>State Preservation</b>
                <p>In iOS 6 and later, if you assign a value to this view’s <c>restorationIdentifier</c> property, it attempts to preserve the frame of the displayed image. Specifically, the class preserves the values of the <c>bounds</c>, <c>center</c>, and <c>transform</c> properties of the view and the <c>anchorPoint</c> property of the underlying layer. During restoration, the image view restores these values so that the image appears exactly as before. For more information about how state preservation and restoration works, see <em>iOS App Programming Guide</em>. </p>
                <b>Subclassing Notes</b>
                <b>Special Considerations</b>
                <p class="spaceabove">The <c>UIImageView</c> class is optimized to draw its images to the display. <c>UIImageView</c> will not call the <c>drawRect:</c> method of a subclass. If your subclass needs custom drawing code, it is recommended you use <c>UIView</c> as the base class.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_animationDuration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_animationDuration(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_animationImages(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_animationImages(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_animationRepeatCount(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_animationRepeatCount(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_highlighted(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_highlighted(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_highlightedAnimationImages(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_highlightedAnimationImages(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_highlightedImage(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_highlightedImage(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_image(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_image(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_get_userInteractionEnabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_set_userInteractionEnabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_alloc_initWithImage_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_alloc_initWithImage_highlightedImage_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_isAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_startAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.UP_UIImageView_stopAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIImageView" /> class.
            <br></br>Equivalent to the native <c>[[UIImageView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.ClassExists">
            <summary>
            Returns whether the native UIImageView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.animationDuration">
            <summary>
            The amount of time it takes to go through one cycle of the images.
            <br></br>Equivalent to the native <c>animationDuration</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The time duration is measured in seconds. The default value of this property is equal to the number of images multiplied by 1/30th of a second. Thus, if you had 30 images, the value would be 1 second. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.animationImages">
            <summary>
            An array of <c>UIImage</c> objects to use for an animation.
            <br></br>Equivalent to the native <c>animationImages</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The array must contain <c>UIImage</c> objects. You may use the same image object more than once in the array. Setting this property to a value other than <c>null</c> hides the image represented by the <c>image</c> property. The value of this property is <c>null</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property image</c></li>
                    <li>
                        <c>contentMode</c> (UIView)</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.animationRepeatCount">
            <summary>
            Specifies the number of times to repeat the animation.
            <br></br>Equivalent to the native <c>animationRepeatCount</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value is 0, which specifies to repeat the animation indefinitely. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.highlighted">
            <summary>
            A Boolean value that determines whether the image is highlighted.
            <br></br>Equivalent to the native <c>highlighted</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property determines whether the regular or highlighted images are used. When <c>highlighted</c> is set to <c>true</c>, a non-animated image will use the <c>highlightedImage</c> property and an animated image will use the <c>highlightedAnimationImages</c>. If both of those properties are set to <c>null</c> or if <c>highlighted</c> is set to <c>false</c>, it will use the <c>image</c> and <c>animationImages</c> properties.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.highlightedAnimationImages">
            <summary>
            An array of <c>UIImage</c> objects to use for an animation when the view is highlighted.
            <br></br>Equivalent to the native <c>highlightedAnimationImages</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The array must contain <c>UIImage</c> objects. You may use the same image object more than once in the array. Setting this property to a value other than <c>null</c> hides the image represented by the <c>highlightedImage</c> property. The value of this property is <c>null</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property highlightedImage</c></li>
                    <li>
                        <c>contentMode</c> (UIView)</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.highlightedImage">
            <summary>
            The highlighted image displayed in the image view.
            <br></br>Equivalent to the native <c>highlightedImage</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The initial value of this property is the image passed into the <c>initWithImage:highlightedImage:</c> method or <c>null</c> if you initialized the receiver using a different method. </p>
                <p>If the <c>highlightedAnimationImages</c> property contains a value other than <c>null</c>, the contents of this property are not used. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property highlightedAnimationImages</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.image">
            <summary>
            The image displayed in the image view.
            <br></br>Equivalent to the native <c>image</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The initial value of this property is the image passed into the <c>initWithImage:</c> method or <c>null</c> if you initialized the receiver using a different method. </p>
                <p>If the <c>animationImages</c> property contains a value other than <c>null</c>, the contents of this property are not used.</p>
                <p>Setting the image property does not change the size of a <c>UIImageView</c>. Call <c>sizeToFit</c> to adjust the size of the view to match the image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property animationImages</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImageView.userInteractionEnabled">
            <summary>
            A Boolean value that determines whether user events are ignored and removed from the event queue.
            <br></br>Equivalent to the native <c>userInteractionEnabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is inherited from the <c>UIView</c> parent class. This class changes the default value of this property to <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.#ctor(U3DXT.iOS.Native.UIKit.UIImage)">
            <summary>
            Creates an instance of the native UIImageView and initializes the object. Returns an image view initialized with the specified image.
            <br></br>Equivalent to the native <c>[[UIImageView alloc] initWithImage:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The initial image to display in the image view.</p>
                <b>Return Value</b>
                <p>An initialized image view object.</p>
                <b>Discussion</b>
                <p>This method adjusts the frame of the receiver to match the size of the specified image. It also disables user interactions for the image view by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.#ctor(U3DXT.iOS.Native.UIKit.UIImage,U3DXT.iOS.Native.UIKit.UIImage)">
            <summary>
            Creates an instance of the native UIImageView and initializes the object. Returns an image view initialized with the specified regular and highlighted images.
            <br></br>Equivalent to the native <c>[[UIImageView alloc] initWithImage:highlightedImage:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The initial image to display in the image view.</p>
                <em>highlightedImage</em>
                <p>The image to display if the image view is highlighted.</p>
                <b>Return Value</b>
                <p>An initialized image view object.</p>
                <b>Discussion</b>
                <p>This method adjusts the frame of the receiver to match the size of the specified image. It also disables user interactions for the image view by default.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="image">
            </param>
            <param name="highlightedImage">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.IsAnimating">
            <summary>
            Returns a Boolean value indicating whether the animation is running.
            <br></br>Equivalent to the native <c>isAnimating</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the animation is running; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.StartAnimating">
            <summary>
            Starts animating the images in the receiver.
            <br></br>Equivalent to the native <c>startAnimating</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method always starts the animation from the first image in the list. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.StopAnimating">
            <summary>
            Stops animating the images in the receiver.
            <br></br>Equivalent to the native <c>stopAnimating</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImageView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIImageView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIImageView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIInterfaceOrientation">
            <summary>
            The orientation of the application's user interface.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You use these constants in the <c>statusBarOrientation</c> property and the <c>setStatusBarOrientation:animated:</c> method. Notice that <c>UIDeviceOrientationLandscapeRight</c>is assigned to <c>UIInterfaceOrientationLandscapeLeft</c> and <c>UIDeviceOrientationLandscapeLeft</c> is assigned to <c>UIInterfaceOrientationLandscapeRight</c>; the reason for this is that rotating the device requires rotating the content in the opposite direction.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIInterfaceOrientation.PortraitUpsideDown">
            <summary>
                <p>The device is in portrait mode but upside down, with the device held upright and the home button at the top.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIInterfaceOrientationPortraitUpsideDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIInterfaceOrientation.Portrait">
            <summary>
                <p>The device is in portrait mode, with the device held upright and the home button on the bottom.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIInterfaceOrientationPortrait</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIInterfaceOrientation.LandscapeRight">
            <summary>
                <p>The device is in landscape mode, with the device held upright and the home button on the right side.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIInterfaceOrientationLandscapeRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIInterfaceOrientation.LandscapeLeft">
            <summary>
                <p>The device is in landscape mode, with the device held upright and the home button on the left side.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIInterfaceOrientationLandscapeLeft</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UILabel">
            <summary>
            The <c>UILabel</c> class implements a read-only text view. You can use this class to draw one or multiple lines of static text, such as those you might use to identify other parts of your user interface. The base <c>UILabel</c> class provides support for both simple and complex styling of the label text. You can also control over aspects of appearance, such as whether the label uses a shadow or draws with a highlight. If needed, you can customize the appearance of your text further by subclassing.
            </summary>
            <remarks>
                <p>The default content mode of the <c>UILabel</c> class is <c>UIViewContentModeRedraw</c>. This mode causes the view to redraw its contents every time its bounding rectangle changes. You can change this mode by modifying the inherited <c>contentMode</c> property of the class.</p>
                <p>New label objects are configured to disregard user events by default. If you want to handle events in a custom subclass of <c>UILabel</c>, you must explicitly change the value of the <c>userInteractionEnabled</c> property to <c>true</c> after initializing the object.</p>
                <p>For information about basic view behaviors, see <em>View Programming Guide for iOS</em>. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_adjustsFontSizeToFitWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_adjustsFontSizeToFitWidth(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_adjustsLetterSpacingToFitWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_adjustsLetterSpacingToFitWidth(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_baselineAdjustment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_baselineAdjustment(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_enabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_enabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_font(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_font(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_highlighted(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_highlighted(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_highlightedTextColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_highlightedTextColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_lineBreakMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_lineBreakMode(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_minimumFontSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_minimumFontSize(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_minimumScaleFactor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_minimumScaleFactor(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_numberOfLines(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_numberOfLines(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_preferredMaxLayoutWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_preferredMaxLayoutWidth(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_shadowColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_shadowColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_shadowOffset(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_shadowOffset(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_text(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_text(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_textAlignment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_textAlignment(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_textColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_textColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_userInteractionEnabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_userInteractionEnabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_drawTextInRect_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_textRectForBounds_limitedToNumberOfLines_(System.String,System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UILabel" /> class.
            <br></br>Equivalent to the native <c>[[UILabel alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.ClassExists">
            <summary>
            Returns whether the native UILabel class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.adjustsFontSizeToFitWidth">
            <summary>
            A Boolean value indicating whether the font size should be reduced in order to fit the title string into the label’s bounding rectangle.
            <br></br>Equivalent to the native <c>adjustsFontSizeToFitWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Normally, the label text is drawn with the font you specify in the <c>font</c> property. If this property is set to <c>true</c>, however, and the text in the <c>text</c> property exceeds the label’s bounding rectangle, the receiver starts reducing the font size until the string fits or the minimum font size is reached. This property is effective only when the <c>numberOfLines</c> property is set to 1.</p>
                <p>The default value for this property is <c>false</c>. If you change it to <c>true</c>, you should also set an appropriate minimum font size by modifying the <c>minimumFontSize</c> property.</p>
                <p>
                    <strong>Important:</strong> If this property is set to <c>true</c>, it is a programmer error to set the <c>lineBreakMode</c> property to a value that causes text to wrap to another line. </p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>font</c>
                    </li>
                    <li>
                        <c>minimumFontSize</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.adjustsLetterSpacingToFitWidth">
            <summary>
            A Boolean value indicating whether spacing between letters should be adjusted to fit the string within the label’s bounds rectangle.
            <br></br>Equivalent to the native <c>adjustsLetterSpacingToFitWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When this property is <c>true</c>, the label may alter the letter spacing of the label text to make that text fit better within the label’s bounds. This property is applied to the string regardless of the current line break mode. The default value of this property is <c>false</c>.  </p>
                <p>If the value of this property to <c>true</c>, the label to ignore values value returned by the <c><!--a target="_self" -->tighteningFactorForTruncation<!--/a--></c> method of any <c>NSParagraphStyle</c> objects associated with the label text. </p>
                <p>
                    <strong>Important:</strong> If this property is set to <c>true</c>, it is a programmer error to set the <c>lineBreakMode</c> property to a value that causes text to wrap to another line. </p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.baselineAdjustment">
            <summary>
            Controls how text baselines are adjusted when text needs to shrink to fit in the label.
            <br></br>Equivalent to the native <c>baselineAdjustment</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the <c>adjustsFontSizeToFitWidth</c> property is set to <c>true</c>, this property controls the behavior of the text baselines in situations where adjustment of the font size is required. The default value of this property is <c>UIBaselineAdjustmentAlignBaselines</c>.  This property is effective only when the <c>numberOfLines</c> property is set to 1.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.enabled">
            <summary>
            The enabled state to use when drawing the label’s text.
            <br></br>Equivalent to the native <c>enabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property determines only how the label is drawn. Disabled text is dimmed somewhat to indicate it is not active. This property is set to <c>true</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.font">
            <summary>
            The font of the text.
            <br></br>Equivalent to the native <c>font</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the font to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the font to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>The default value for this property is the system font at a size of 17 points (using the <c>systemFontOfSize:</c> class method of <c>UIFont</c>). The value for the property can only be set to a non-<c>null</c> value; setting this property to <c>null</c> raises an exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.highlighted">
            <summary>
            A Boolean value indicating whether the receiver should be drawn with a highlight.
            <br></br>Equivalent to the native <c>highlighted</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Setting this property causes the receiver to redraw with the appropriate highlight state. A subclass implementing a text button might set this property to <c>true</c> when the user presses the button and set it to <c>false</c> at other times. In order for the highlight to be drawn, the <c>highlightedTextColor</c> property must contain a non-<c>null</c> value.</p>
                <p>The default value of this property is <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>highlightedTextColor</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.highlightedTextColor">
            <summary>
            The highlight color applied to the label’s text.
            <br></br>Equivalent to the native <c>highlightedTextColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses that use labels to implement a type of text button can use the value in this property when drawing the pressed state for the button. This color is applied to the label automatically whenever the <c>highlighted</c> property is set to <c>true</c>.  </p>
                <p>The default value of this property is <c>null</c> . </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>highlighted</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.lineBreakMode">
            <summary>
            The technique to use for wrapping and truncating the label’s text.
            <br></br>Equivalent to the native <c>lineBreakMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the line break mode to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the line break mode to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>This property is in effect both during normal drawing and in cases where the font size must be reduced to fit the label’s text in its bounding box. This property is set to <c>NSLineBreakByTruncatingTail</c> by default. </p>
                <p>
                    <strong>Important:</strong> If this property is set to a value that causes text to wrap to another line, it is a programmer error to set either the <c>adjustsFontSizeToFitWidth</c> or <c>adjustsLetterSpacingToFitWidth</c> property to <c>true</c>.</p>
                <p>
                </p>
                <b>Special Considerations</b>
                <p>In iOS 5 and earlier, the type of this property was <c>UILineBreakMode</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.minimumFontSize">
            <summary>
            The size of the smallest permissible font with which to draw the label’s text.  ( Deprecated in iOS 6.0.  Use <c>minimumScaleFactor</c> instead.)
            <br></br>Equivalent to the native <c>minimumFontSize</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When drawing text that might not fit within the bounding rectangle of the label, you can use this property to prevent the receiver from reducing the font size to the point where it is no longer legible. </p>
                <p>The default value for this property is 0.0. If you enable font adjustment for the label, you should always increase this value. This property is effective only when the <c>numberOfLines</c> property is set to 1.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 6.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.minimumScaleFactor">
            <summary>
            The minimum scale factor supported for the label’s text.
            <br></br>Equivalent to the native <c>minimumScaleFactor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this property to specify the smallest multiplier for the current font size that yields an acceptable font size to use when displaying the label’s text. If you specify a value of <c>0</c> for this property, the current font size is used as the smallest font size.</p>
                <p>The default value of this property is <c>0</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.numberOfLines">
            <summary>
            The maximum number of lines to use for rendering text.
            <br></br>Equivalent to the native <c>numberOfLines</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property controls the maximum number of lines to use in order to fit the label’s text into its bounding rectangle. The default value for this property is 1. To remove any maximum limit, and use as many lines as needed, set the value of this property to 0. </p>
                <p>If you constrain your text using this property, any text that does not fit within the maximum number of lines and inside the bounding rectangle of the label is truncated using the appropriate line break mode.    </p>
                <p>When the receiver is resized using the <c>sizeToFit</c> method, resizing takes into account the value stored in this property. For example, if this property is set to 3, the <c>sizeToFit</c> method resizes the receiver so that it is big enough to display three lines of text.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>enabled</c>
                    </li>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                    <li>
                        <c>sizeToFit</c> (UIView)</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.preferredMaxLayoutWidth">
            <summary>
            The preferred maximum width (in points) for a multiline label.
            <br></br>Equivalent to the native <c>preferredMaxLayoutWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property affects the size of the label when layout constraints are applied to it. During layout, if the text extends beyond the width specified by this property, the additional text is flowed to one or more new lines, thereby increasing the height of the label.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.shadowColor">
            <summary>
            The shadow color of the text.
            <br></br>Equivalent to the native <c>shadowColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is <c>null</c>, which indicates that no shadow is drawn. In addition to this property, you may also want to change the default shadow offset by modifying the <c>shadowOffset</c> property. Text shadows are drawn with the specified offset and color and no blurring. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>shadowOffset</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.shadowOffset">
            <summary>
            The shadow offset (measured in points) for the text.
            <br></br>Equivalent to the native <c>shadowOffset</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The shadow color must be non-<c>null</c> for this property to have any effect. The default offset size is (0, -1), which indicates a shadow one point above the text. Text shadows are drawn with the specified offset and color and no blurring.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>shadowColor</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.text">
            <summary>
            The text displayed by the label.
            <br></br>Equivalent to the native <c>text</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This string is <c>null</c> by default.</p>
                <p>In iOS 6 and later, assigning a new value to this property also replaces the value of the <c>attributedText</c> property with the same text, albeit without any inherent style attributes. Instead the label styles the new string using the <c>shadowColor</c>, <c>textAlignment</c>, and other style-related properties of the class.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.textAlignment">
            <summary>
            The technique to use for aligning the text.
            <br></br>Equivalent to the native <c>textAlignment</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the text alignment to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the alignment to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>The default value of this property is <c>NSTextAlignmentLeft</c>.</p>
                <b>Special Considerations</b>
                <p>In iOS 5 and earlier, the type of this property was <c>UITextAlignment</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.textColor">
            <summary>
            The color of the text.
            <br></br>Equivalent to the native <c>textColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the color to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the color to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>The default value for this property is a black color (set through the <c>blackColor</c> class method of <c>UIColor</c>). The value for the property can only be set to a non-<c>null</c> value; setting this property to <c>null</c> raises an exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.userInteractionEnabled">
            <summary>
            A Boolean value that determines whether user events are ignored and removed from the event queue.
            <br></br>Equivalent to the native <c>userInteractionEnabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is inherited from the <c>UIView</c> parent class. This class changes the default value of this property to <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.DrawTextInRect(UnityEngine.Rect)">
            <summary>
            Draws the receiver’s text (or its shadow) in the specified rectangle.
            <br></br>Equivalent to the native <c>drawTextInRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle in which to draw the text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. This method should only be overridden by subclasses that want to modify the default drawing behavior for the label’s text. </p>
                <p>By the time this method is called, the current graphics context is already configured with the default environment and text color for drawing. In your overridden method, you can configure the current context further and then invoke <c>super</c> to do the actual drawing or you can do the drawing yourself. If you do render the text yourself, you should not invoke <c>super</c>.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.TextRect(UnityEngine.Rect,System.Int32)">
            <summary>
            Returns the drawing rectangle for the label’s text.
            <br></br>Equivalent to the native <c>textRectForBounds:limitedToNumberOfLines:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <em>numberOfLines</em>
                <p>The maximum number of lines to use for the label. The value 0 indicates there is no maximum number of lines and that the rectangle should encompass all of the text. </p>
                <b>Return Value</b>
                <p>The computed drawing rectangle for the label’s text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. This method should only be overridden by subclasses that want to change the receiver’s bounding rectangle before performing any other computations. Use the value in the <em>numberOfLines</em> parameter to limit the height of the returned rectangle to the specified number of lines of text. For this method to be called, there must be a prior call to the sizeToFit or sizeThatFits: method. Note that labels in UITableViewCell objects are sized based on the cell dimensions, and not a requested size.</p>
                <p>The default implementation of this method returns the original <em>bounds</em> rectangle. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
            <param name="numberOfLines">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UILabel and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UILabel alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UINavigationController">
            <summary>
            The <c>UINavigationController</c> class implements a specialized view controller that manages the navigation of hierarchical content. This class is not intended for subclassing. Instead, you use instances of it as-is in situations where you want your application’s user interface to reflect the hierarchical nature of your content. This <strong>navigation interface</strong> makes it possible to present your data efficiently and also makes it easier for the user to navigate that content.
            </summary>
            <remarks>
                <p>The screens presented by a navigation interface typically mimic the hierarchical organization of your data. At each level of the hierarchy, you provide an appropriate screen (managed by a custom view controller) to display the content at that level.  Figure 1  shows an example of the navigation interface presented by the Settings application in iOS Simulator. The first screen presents the user with the list of applications that contain preferences. Selecting an application reveals individual settings and groups of settings for that application. Selecting a group yields more settings and so on. For all but the root view, the navigation controller provides a back button to allow the user to move back up the hierarchy. </p>
                <figure class="figure">
                    <figcaption>
                        <strong class="caption_number">Figure 1</strong>  A sample navigation interface</figcaption>
                </figure>
                <p>A navigation controller object manages the currently displayed screens using the <strong>navigation stack</strong>. At the bottom of this stack is the root view controller and at the top of the stack is the view controller currently being displayed. You use the methods of your navigation controller object to modify the stack at runtime. The most common operation is to push new view controllers onto the stack using the <c>pushViewController:animated:</c> method. Pushing a new view controller object onto the stack causes the view of that view controller to be displayed and the navigation controls to be updated to reflect the change. You typically push view controllers in response to the user selecting an item that leads to the next level in your information hierarchy. </p>
                <p>In addition to pushing view controllers onto the navigation stack, you can also pop them using the <c>popViewControllerAnimated:</c> method. Although you can pop view controllers yourself, the navigation controller also provides a back button (when appropriate) that pops the top view controller in response to user interactions. </p>
                <p>A navigation controller object notifies its delegate object in response to changes in the active view controller. The delegate object is a custom object provided by your application that conforms to the <c>UINavigationControllerDelegate</c> protocol. You can use the methods of this protocol to respond to the change and perform additional setup or cleanup tasks. </p>
                <p>For more information about how to integrate navigation controllers into your application, see <em>View Controller Programming Guide for iOS</em>.</p>
                <b>Navigation Controller Views</b>
                <p>Because the <c>UINavigationController</c> class inherits from the <c>UIViewController</c> class, navigation controllers have their own view that is accessible through the <c>view</c> property. When deploying a navigation interface, you must install this view as the root of whatever view hierarchy you are creating. For example, if you are deploying the navigation interface by itself, you would make this view the main subview of your window. To install a navigation interface inside a tab bar interface, you would install the navigation controller’s view as the root view of the appropriate tab. </p>
                <p>The view for a navigation controller is just a container for several other views, including a navigation bar, an optional toolbar, and the view containing your custom content.  Figure 2  shows how these views are assembled to present the overall navigation interface. Although the content of the navigation bar and toolbar views changes, the views themselves do not. Only the custom content view changes to reflect the view controller that is at the top of the navigation stack. </p>
                <figure class="figure">
                    <figcaption>
                        <strong class="caption_number">Figure 2</strong>  The views of a navigation controller</figcaption>
                </figure>
                <p>
                    <strong>Note:</strong> Because the amount of space available for the custom view can vary (depending on the size of the other navigation views), your custom view’s <c>autoresizingMask</c> property should be set to have a flexible width and height. Before displaying your view, the navigation controller automatically positions and sizes it to fit the available space. </p>
                <p>
                </p>
                <p>The navigation controller is responsible for managing the configuration and display of the navigation bar and navigation toolbar. You must never modify these views directly. Instead, you should manipulate them through the methods and properties of the <c>UINavigationController</c> class. You can hide and show the navigation bar using the <c>navigationBarHidden</c> property or <c>setNavigationBarHidden:animated:</c> method. To specify custom items for the navigation bar, you configure the displayed view controller as described in  “Updating the Navigation Bar.”  For information on how to specify items for the navigation toolbar, see  “Displaying a Toolbar.”  </p>
                <p>There are specific ways to customize the navigation bar displayed in the navigation interface. It is permissible to modify the <c>barStyle</c> or <c>translucent</c> properties of the navigation bar but you must never change its <c>frame</c>, <c>bounds</c>, or <c>alpha</c> values directly. You can also specify a custom <c>UINavigationBar</c> subclass by using the <c>initWithNavigationBarClass:toolbarClass:</c> method to initialize the navigation controller. In addition, the navigation controller object builds the contents of the navigation bar dynamically using the navigation items (instances of the <c>UINavigationItem</c> class) associated with the view controllers on the navigation stack. To change the contents of the navigation bar, you must therefore configure the navigation items for your custom view controllers. For more information about navigation items, see <em>UINavigationItem Class Reference</em>. </p>
                <b>Updating the Navigation Bar</b>
                <p>When the user changes the top-level view controller, whether by pushing or popping a view controller or changing the contents of the navigation stack directly, the navigation controller updates the navigation bar accordingly. Specifically, the navigation controller updates the bar button items displayed in each of the three navigation bar positions: left, middle, and right. Bar button items are instances of the <c>UIBarButtonItem</c> class. You can create items with custom content or create standard system items depending on your needs. For more information about how to create bar button items, see <em>UIBarButtonItem Class Reference</em>.</p>
                <p>The bar button item on the left side of the navigation bar allows for navigation back to the previous view controller on the navigation stack. The navigation controller updates the left side of the navigation bar as follows: </p>
                <ul class="ul">
                    <li class="li">
                        <p>If the new top-level view controller has a custom left bar button item, that item is displayed. To specify a custom left bar button item, set the <c>leftBarButtonItem</c> property of the view controller’s navigation item. </p>
                    </li>
                    <li class="li">
                        <p>If the top-level view controller does not have a custom left bar button item, but the navigation item of the previous view controller has a valid item in its <c>backBarButtonItem</c> property, the navigation bar displays that item.</p>
                    </li>
                    <li class="li">
                        <p>If a custom bar button item is not specified by either of the view controllers, a default back button is used and its title is set to the value of the <c>title</c> property of the previous view controller—that is, the view controller one level down on the stack. (If there is only one view controller on the navigation stack, no back button is displayed.) </p>
                    </li>
                </ul>
                <p>The navigation controller updates the middle of the navigation bar as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>If the new top-level view controller has a custom title view, the navigation bar displays that view in place of the default title view. To specify a custom title view, set the <c>titleView</c> property of the view controller’s navigation item.</p>
                    </li>
                    <li class="li">
                        <p>If no custom title view is set, the navigation bar displays a label containing the view controller’s default title. The string for this label is usually obtained from the <c>title</c> property of the view controller itself. If you want to display a different title than the one associated with the view controller, set the <c>title</c> property of the view controller’s navigation item instead. </p>
                    </li>
                </ul>
                <p>The navigation controller updates the right side of the navigation bar as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>If the new top-level view controller has a custom right bar button item, that item is displayed. To specify a custom right bar button item, set the <c>rightBarButtonItem</c> property of the view controller’s navigation item. </p>
                    </li>
                    <li class="li">
                        <p>If no custom right bar button item is specified, the navigation bar displays nothing on the right side of the bar. </p>
                    </li>
                </ul>
                <p>The navigation controller updates the navigation bar each time the top view controller changes. Thus, these changes occur each time a view controller is pushed onto the stack or popped from it. When you animate a push or pop operation, the navigation controller similarly animates the change in navigation bar content.</p>
                <b>Displaying a Toolbar</b>
                <p>In iOS 3.0 and later, navigation controller objects make it easy to provide a custom toolbar for each screen of a navigation interface. The navigation controller object now manages an optional toolbar in its view hierarchy. When displayed, this toolbar obtains its current set of items from the <c>toolbarItems</c> property of the active view controller. When the active view controller changes, the navigation controller updates the toolbar items to match the new view controller, animating the new items into position when appropriate. </p>
                <p>The navigation toolbar is hidden by default but you can show it for your navigation interface by calling the <c>setToolbarHidden:animated:</c> method of your navigation controller object. If not all of your view controllers support toolbar items, your delegate object can call this method to toggle the visibility of the toolbar during subsequent push and pop operations. To use a custom <c>UIToolbar</c> subclass, use the <c>initWithNavigationBarClass:toolbarClass:</c> method to initialize the navigation controller.</p>
                <b>State Preservation</b>
                <p>In iOS 6 and later, if you assign a value to this view controller’s <c>restorationIdentifier</c> property, it attempts to preserve the child view controllers on its navigation stack. The navigation controller starts at the bottom of the stack and moves upward, encoding each view controller that also has a valid restoration identifier string. During the next launch cycle, the navigation controller restores the preserved view controllers to the navigation stack in the same order that they were preserved. </p>
                <p>The child view controllers you push onto the navigation stack may use the same restoration identifiers. The navigation controller automatically stores additional information to ensure that each child’s restoration path is unique.</p>
                <p>For more information about how state preservation and restoration works, see <em>iOS App Programming Guide</em>.  </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_get_topViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_get_viewControllers(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_set_viewControllers(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_get_visibleViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_popToRootViewControllerAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_popToViewController_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_popViewControllerAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_pushViewController_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_setViewControllers_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UINavigationController" /> class.
            <br></br>Equivalent to the native <c>[[UINavigationController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.ClassExists">
            <summary>
            Returns whether the native UINavigationController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.topViewController">
            <summary>
            The view controller at the top of the navigation stack. (read-only)
            <br></br>Equivalent to the native <c>topViewController</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>visibleViewController</c>
                    </li>
                    <li>
                        <c>viewControllers</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.viewControllers">
            <summary>
            The view controllers currently on the navigation stack.
            <br></br>Equivalent to the native <c>viewControllers</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The root view controller is at index <c>0</c> in the array, the back view controller is at index <c>n-2</c>, and the top controller is at index <c>n-1</c>, where <c>n</c> is the number of items in the array.</p>
                <p>Assigning a new array of view controllers to this property is equivalent to calling the <c>setViewControllers:animated:</c> method with the <em>animated</em> parameter set to <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>topViewController</c>
                    </li>
                    <li>
                        <c>visibleViewController</c>
                    </li>
                    <li>
                        <c>– setViewControllers:animated:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.visibleViewController">
            <summary>
            The view controller associated with the currently visible view in the navigation interface. (read-only)
            <br></br>Equivalent to the native <c>visibleViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The currently visible view can belong either to the view controller at the top of the navigation stack or to a view controller that was presented modally. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>topViewController</c>
                    </li>
                    <li>
                        <c>viewControllers</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PopToRootViewController(System.Boolean)">
            <summary>
            Pops all the view controllers on the stack except the root view controller and updates the display.
            <br></br>Equivalent to the native <c>popToRootViewControllerAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Set this value to <c>true</c> to animate the transition. Pass <c>false</c> if you are setting up a navigation controller before its view is displayed.</p>
                <b>Return Value</b>
                <p>An array of view controllers that are popped from the stack.</p>
                <b>Discussion</b>
                <p>The root view controller becomes the top view controller. For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pushViewController:animated:</c>
                    </li>
                    <li>
                        <c>– popViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PopToViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean)">
            <summary>
            Pops view controllers until the specified view controller is at the top of the navigation stack.
            <br></br>Equivalent to the native <c>popToViewController:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The view controller that you want to be at the top of the stack.</p>
                <em>animated</em>
                <p>Set this value to <c>true</c> to animate the transition. Pass <c>false</c> if you are setting up a navigation controller before its view is displayed.</p>
                <b>Return Value</b>
                <p>An array containing the view controllers that were popped from the stack.</p>
                <b>Discussion</b>
                <p>For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pushViewController:animated:</c>
                    </li>
                    <li>
                        <c>– popViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToRootViewControllerAnimated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PopViewController(System.Boolean)">
            <summary>
            Pops the top view controller from the navigation stack and updates the display.
            <br></br>Equivalent to the native <c>popViewControllerAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Set this value to <c>true</c> to animate the transition. Pass <c>false</c> if you are setting up a navigation controller before its view is displayed.</p>
                <b>Return Value</b>
                <p>The view controller that was popped from the stack.</p>
                <b>Discussion</b>
                <p>This method removes the top view controller from the stack and makes the new top of the stack the active view controller. If the view controller at the top of the stack is the root view controller, this method does nothing. In other words, you cannot pop the last item on the stack.</p>
                <p>In addition to displaying the view associated with the new view controller at the top of the stack, this method also updates the navigation bar and tool bar accordingly. In iOS 3.0 and later, the contents of the built-in navigation toolbar are updated to reflect the toolbar items of the new view controller. For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pushViewController:animated:</c>
                    </li>
                    <li>
                        <c>– popToRootViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PushViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean)">
            <summary>
            Pushes a view controller onto the receiver’s stack and updates the display.
            <br></br>Equivalent to the native <c>pushViewController:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The view controller that is pushed onto the stack. This object cannot be an instance of tab bar controller and it must not already be on the navigation stack.</p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the transition or <c>false</c> if you do not want the transition to be animated. You might specify <c>false</c> if you are setting up the navigation controller at launch time.</p>
                <b>Discussion</b>
                <p>The object in the <em>viewController</em> parameter becomes the top view controller on the navigation stack. Pushing a view controller results in the display of the view it manages. How that view is displayed is determined by the animated parameter. If the <em>animated</em> parameter is <c>true</c>, the view is animated into position; otherwise, the view is simply displayed in place. The view is automatically resized to fit between the navigation bar and toolbar (if present) before it is displayed. </p>
                <p>In addition to displaying the view associated with the new view controller at the top of the stack, this method also updates the navigation bar and tool bar accordingly. In iOS 3.0 and later, the contents of the built-in navigation toolbar are updated to reflect the toolbar items of the new view controller. For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <p>
                    <strong>Important:</strong> In iOS 2.2 and later, if the object in the <em>viewController</em> parameter is already on the navigation stack, this method throws an exception. In earlier versions of iOS, the method simply does nothing.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– popViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToRootViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.SetViewControllers(System.Object[],System.Boolean)">
            <summary>
            Replaces the view controllers currently managed by the navigation controller with the specified items.
            <br></br>Equivalent to the native <c>setViewControllers:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewControllers</em>
                <p>The view controllers to place in the stack. The front-to-back order of the controllers in this array represents the new bottom-to-top order of the controllers in the navigation stack. Thus, the last item added to the array becomes the top item of the navigation stack.</p>
                <em>animated</em>
                <p>If <c>true</c>, animate the pushing or popping of the top view controller. If <c>false</c>, replace the view controllers without any animations.</p>
                <b>Discussion</b>
                <p>You can use this method to update or replace the current view controller stack without pushing or popping each controller explicitly. In addition, this method lets you update the set of controllers without animating the changes, which might be appropriate at launch time when you want to return the navigation controller to a previous state.</p>
                <p>If animations are enabled, this method decides which type of transition to perform based on whether the last item in the <em>items</em> array is already in the navigation stack. If the view controller is currently in the stack, but is not the topmost item, this method uses a pop transition; if it is the topmost item, no transition is performed. If the view controller is not on the stack, this method uses a push transition. Only one transition is performed, but when that transition finishes, the entire contents of the stack are replaced with the new view controllers. For example, if controllers A, B, and C are on the stack and you set controllers D, A, and B, this method uses a pop transition and the resulting stack contains the controllers D, A, and B.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="viewControllers">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPickerView">
            <summary>
            The <c>UIPickerView</c> class implements objects, called picker views, that use a spinning-wheel or slot-machine metaphor to show one or more sets of values. Users select values by rotating the wheels so that the desired row of values aligns with a selection indicator.
            </summary>
            <remarks>
                <p>The <c>UIDatePicker</c> class uses a custom subclass of <c>UIPickerView</c> to display dates and times. To see an example, tap the add (“+”) button in the the Alarm pane of the Clock application.</p>
                <p>The user interface provided by a picker view consists of components and rows. A component is a wheel, which has a series of items (rows) at indexed locations on the wheel. Each component also has an indexed location (left to right) in a picker view. Each row on a component has content, which is either a string or a view object such as a label (<c>UILabel</c>) or an image (<c>UIImageView</c>).</p>
                <p>A <c>UIPickerView</c> object requires the cooperation of a delegate for constructing its components and a data source for providing the numbers of components and rows. The delegate must adopt the <c>UIPickerViewDelegate</c> protocol and implement the required methods to return the drawing rectangle for rows in each component. It also provides the content for each component’s row, either as a string or a view, and it typically responds to new selections or deselections. The data source must adopt the <c>UIPickerViewDataSource</c> protocol and implement the required methods to return the number of components and the number of rows in each component.</p>
                <p>You can dynamically change the rows of a component by calling the <c>reloadComponent:</c> method, or dynamically change the rows of all components by calling the <c>reloadAllComponents</c> method. When you call either of these methods, the picker view asks the delegate for new component and row data, and asks the data source for new component and row counts. Reload a picker view when a selected value in one component should change the set of values in another component. For example, changing a row value from February to March in one component should change a related component representing the days of the month.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.numberOfComponentsInHandler">
            <summary>
            Called by the picker view when it needs the number of components. (required)
            <br></br>Equivalent to implementing the native <c>numberOfComponentsInPickerView:</c> method of <c>UIPickerViewDataSource</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.numberOfRowsInComponentHandler">
            <summary>
            Called by the picker view when it needs the number of rows for a specified component. (required)
            <br></br>Equivalent to implementing the native <c>pickerView:numberOfRowsInComponent:</c> method of <c>UIPickerViewDataSource</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIPickerView.DidSelectRow">
            <summary>
            Called by the picker view when the user selects a row in a component.
            <br></br>Equivalent to implementing the native <c>pickerView:didSelectRow:inComponent:</c> method of <c>UIPickerViewDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPickerView.DidSelectRowEventArgs">
            <summary>
            Event arguments for DidSelectRow.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.DidSelectRowEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPickerView.DidSelectRowEventArgs.row">
            <summary>row</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPickerView.DidSelectRowEventArgs.component">
            <summary>component</summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.rowHeightForComponentHandler">
            <summary>
            Called by the picker view when it needs the row height to use for drawing row content.
            <br></br>Equivalent to implementing the native <c>pickerView:rowHeightForComponent:</c> method of <c>UIPickerViewDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.titleForRowHandler">
            <summary>
            Called by the picker view when it needs the title to use for a given row in a given component.
            <br></br>Equivalent to implementing the native <c>pickerView:titleForRow:forComponent:</c> method of <c>UIPickerViewDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.viewForRowHandler">
            <summary>
            Called by the picker view when it needs the view to use for a given row in a given component.
            <br></br>Equivalent to implementing the native <c>pickerView:viewForRow:forComponent:reusingView:</c> method of <c>UIPickerViewDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.widthForComponentHandler">
            <summary>
            Called by the picker view when it needs the row width to use for drawing row content.
            <br></br>Equivalent to implementing the native <c>pickerView:widthForComponent:</c> method of <c>UIPickerViewDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_get_dataSource(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_set_dataSource(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_get_numberOfComponents(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_get_showsSelectionIndicator(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_set_showsSelectionIndicator(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_numberOfRowsInComponent_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_reloadAllComponents(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_reloadComponent_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_rowSizeForComponent_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_selectedRowInComponent_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_selectRow_inComponent_animated_(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.UP_UIPickerView_viewForRow_forComponent_(System.String,System.Int32,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIPickerView" /> class.
            <br></br>Equivalent to the native <c>[[UIPickerView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.ClassExists">
            <summary>
            Returns whether the native UIPickerView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.dataSource">
            <summary>
            The data source for the picker view.
            <br></br>Equivalent to the native <c>dataSource</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The data source must adopt the <c>UIPickerViewDataSource</c> protocol and implement the required methods to return the number of components and the number of rows in each component.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.Delegate">
            <summary>
            The delegate for the picker view.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The delegate must adopt the <c>UIPickerViewDelegate</c> protocol and implement the required methods to return the drawing rectangle for rows in each component. It also provides the content for each component’s row, either as a string or a view, and it typically responds to new selections or deselections.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.numberOfComponents">
            <summary>
            Gets the number of components for the picker view. (read-only)
            <br></br>Equivalent to the native <c>numberOfComponents</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A <c>UIPickerView</c> object fetches the value of this property from the data source and and caches it. The default value is zero.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– numberOfRowsInComponent:</c>
                    </li>
                    <li>
                        <c>– rowSizeForComponent:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerView.showsSelectionIndicator">
            <summary>
            A Boolean value that determines whether the selection indicator is displayed.
            <br></br>Equivalent to the native <c>showsSelectionIndicator</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the value of the property is <c>true</c>, the picker view shows a clear overlay across the current row. The default value of this property is <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.NumberOfRowsInComponent(System.Int32)">
            <summary>
            Returns the number of rows for a component.
            <br></br>Equivalent to the native <c>numberOfRowsInComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>component</em>
                <p>A zero-indexed number identifying a component.</p>
                <b>Return Value</b>
                <p>The number of rows in the given component.</p>
                <b>Discussion</b>
                <p>A picker view fetches the value of this property from the data source and and caches it. The default value is zero.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property numberOfComponents</c></li>
                    <li>
                        <c>– rowSizeForComponent:</c>
                    </li>
                </ul>
            </remarks>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.ReloadAllComponents">
            <summary>
            Reloads all components of the picker view.
            <br></br>Equivalent to the native <c>reloadAllComponents</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Calling this method causes the picker view to query the delegate for new data for all components.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– reloadComponent:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.ReloadComponent(System.Int32)">
            <summary>
            Reloads a particular component of the picker view.
            <br></br>Equivalent to the native <c>reloadComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of the picker view.</p>
                <b>Discussion</b>
                <p>Calling this method causes the picker view to query the delegate for new data for the given component.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– reloadAllComponents</c>
                    </li>
                </ul>
            </remarks>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.RowSize(System.Int32)">
            <summary>
            Returns the size of a row for a component.
            <br></br>Equivalent to the native <c>rowSizeForComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>component</em>
                <p>A zero-indexed number identifying a component.</p>
                <b>Return Value</b>
                <p>The size of rows in the given component. This is generally the size required to display the largest string or view used as a row in the component.</p>
                <b>Discussion</b>
                <p>A picker view fetches the value of this property by calling the <c>pickerView:widthForComponent:</c> and  <c>pickerView:rowHeightForComponent:</c> delegate methods, and caches it. The default value is (0, 0).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property numberOfComponents</c></li>
                    <li>
                        <c>– numberOfRowsInComponent:</c>
                    </li>
                </ul>
            </remarks>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.SelectedRowInComponent(System.Int32)">
            <summary>
            Returns the index of the selected row in a given component.
            <br></br>Equivalent to the native <c>selectedRowInComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of the picker view.</p>
                <b>Return Value</b>
                <p>A zero-indexed number identifying the selected row, or <c>-1</c> if no row is selected.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– selectRow:inComponent:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.SelectRow(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a row in a specified component of the picker view.
            <br></br>Equivalent to the native <c>selectRow:inComponent:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>row</em>
                <p>A zero-indexed number identifying a row of <em>component</em>.</p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of the picker view.</p>
                <em>animated</em>
                <p>
                    <c>true</c> to animate the selection by spinning the wheel (component) to the new value; if you specify <c>false</c>, the new selection is shown immediately.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– selectedRowInComponent:</c>
                    </li>
                </ul>
            </remarks>
            <param name="row">
            </param>
            <param name="component">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.View(System.Int32,System.Int32)">
            <summary>
            Returns the view used by the picker view for a given row and component.
            <br></br>Equivalent to the native <c>viewForRow:forComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>row</em>
                <p>The zero-indexed number of a row of the picker view.</p>
                <em>component</em>
                <p>The zero-indexed number of a component of the picker view.</p>
                <b>Return Value</b>
                <p>The view provided by the delegate in the <c>pickerView:viewForRow:forComponent:reusingView:</c> method. Returns <c>null</c> if the specified row of the component is not visible or if the delegate does not implement p<c>ickerView:viewForRow:forComponent:reusingView:</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="row">
            </param>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIPickerView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIPickerView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource">
            <summary>
            The <c>UIPickerViewDataSource</c> protocol must be adopted by an object that mediates between a <c>UIPickerView</c> object and your application’s data model for that picker view. The data source provides the picker view with the number of components, and the number of rows in each component, for displaying the picker view data. Both methods in this protocol are required.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource.UP_UIPickerViewDataSource_set__numberOfComponentsInPickerView__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource.UP_UIPickerViewDataSource_set__pickerView_numberOfRowsInComponent__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource.NumberOfComponentsIn(U3DXT.iOS.Native.UIKit.UIPickerView)">
            <summary>
            (<b>required</b>) Called by the picker view when it needs the number of components. (required)
            <br></br>Equivalent to the native <c>numberOfComponentsInPickerView:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pickerView</em>
                <p>The picker view requesting the data.</p>
                <b>Return Value</b>
                <p>The number of components (or “columns”) that the picker view should display.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="pickerView">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource.NumberOfRowsInComponent(U3DXT.iOS.Native.UIKit.UIPickerView,System.Int32)">
            <summary>
            (<b>required</b>) Called by the picker view when it needs the number of rows for a specified component. (required)
            <br></br>Equivalent to the native <c>pickerView:numberOfRowsInComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pickerView</em>
                <p>The picker view requesting the data.</p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of <em>pickerView</em>. Components are numbered left-to-right.</p>
                <b>Return Value</b>
                <p>The number of rows for the component.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="pickerView">
            </param>
            <param name="component">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource._numberOfComponentsInPickerView__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_numberOfComponentsInPickerView__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerViewDataSource._pickerView_numberOfRowsInComponent__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_pickerView_numberOfRowsInComponent__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate">
            <summary>
            The delegate of a <c>UIPickerView</c> object must adopt this protocol and implement at least some of its methods to provide the picker view with the data it needs to construct itself.
            </summary>
            <remarks>
                <p>The delegate implements the required methods of this protocol to return height, width, row title, and the view content for the rows in each component. It must also provide the content for each component’s row, either as a string or a view. Typically the delegate implements other optional methods to respond to new selections or deselections of component rows.</p>
                <p>See <em>UIPickerView Class Reference</em> for a discussion of components, rows, row content, and row selection.</p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.UP_UIPickerViewDelegate_set__pickerView_didSelectRow_inComponent__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.UP_UIPickerViewDelegate_set__pickerView_rowHeightForComponent__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.UP_UIPickerViewDelegate_set__pickerView_titleForRow_forComponent__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.UP_UIPickerViewDelegate_set__pickerView_viewForRow_forComponent_reusingView__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.UP_UIPickerViewDelegate_set__pickerView_widthForComponent__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.DidSelectRow(U3DXT.iOS.Native.UIKit.UIPickerView,System.Int32,System.Int32)">
            <summary>
            (optional) Called by the picker view when the user selects a row in a component.
            <br></br>Equivalent to the native <c>pickerView:didSelectRow:inComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pickerView</em>
                <p>An object representing the picker view requesting the data.</p>
                <em>row</em>
                <p>A zero-indexed number identifying a row of <em>component</em>. Rows are numbered top-to-bottom.</p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of <em>pickerView</em>. Components are numbered left-to-right.</p>
                <b>Discussion</b>
                <p>To determine what value the user selected, the delegate uses the <em>row</em> index to access the value at the corresponding position in the array used to construct the component.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="pickerView">
            </param>
            <param name="row">
            </param>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.RowHeightForComponent(U3DXT.iOS.Native.UIKit.UIPickerView,System.Int32)">
            <summary>
            (optional) Called by the picker view when it needs the row height to use for drawing row content.
            <br></br>Equivalent to the native <c>pickerView:rowHeightForComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pickerView</em>
                <p>The picker view requesting this information.</p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of <em>pickerView</em>. Components are numbered left-to-right.</p>
                <b>Return Value</b>
                <p>A float value indicating the height of the row in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="pickerView">
            </param>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.TitleForRow(U3DXT.iOS.Native.UIKit.UIPickerView,System.Int32,System.Int32)">
            <summary>
            (optional) Called by the picker view when it needs the title to use for a given row in a given component.
            <br></br>Equivalent to the native <c>pickerView:titleForRow:forComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pickerView</em>
                <p>An object representing the picker view requesting the data.</p>
                <em>row</em>
                <p>A zero-indexed number identifying a row of <em>component</em>. Rows are numbered top-to-bottom.</p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of <em>pickerView</em>. Components are numbered left-to-right.</p>
                <b>Return Value</b>
                <p>The string to use as the title of the indicated component row.</p>
                <b>Discussion</b>
                <p>If you implement both this method and the <c>pickerView:attributedTitleForRow:forComponent:</c> method, the picker view prefers the <c>pickerView:attributedTitleForRow:forComponent:</c> method. However, if that method returns <c>null</c>, the picker view falls back to using the string returned by this method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="pickerView">
            </param>
            <param name="row">
            </param>
            <param name="component">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.ViewForRow(U3DXT.iOS.Native.UIKit.UIPickerView,System.Int32,System.Int32,U3DXT.iOS.Native.UIKit.UIView)">
            <summary>
            (optional) Called by the picker view when it needs the view to use for a given row in a given component.
            <br></br>Equivalent to the native <c>pickerView:viewForRow:forComponent:reusingView:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pickerView</em>
                <p>An object representing the picker view requesting the data.</p>
                <em>row</em>
                <p>A zero-indexed number identifying a row of <em>component</em>. Rows are numbered top-to-bottom.</p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of <em>pickerView</em>. Components are numbered left-to-right.</p>
                <em>view</em>
                <p>A view object that was previously used for this row, but is now hidden and cached by the picker view.</p>
                <b>Return Value</b>
                <p>A view object to use as the content of <em>row</em>. The object can be any subclass of <c>UIView</c>, such as <c>UILabel</c>, <c>UIImageView</c>, or even a custom view. </p>
                <b>Discussion</b>
                <p>If the previously used view (the <em>view</em> parameter) is adequate, return that. If you return a different view, the previously used view is released. The picker view centers the returned view in the rectangle for <em>row</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="pickerView">
            </param>
            <param name="row">
            </param>
            <param name="component">
            </param>
            <param name="view">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate.WidthForComponent(U3DXT.iOS.Native.UIKit.UIPickerView,System.Int32)">
            <summary>
            (optional) Called by the picker view when it needs the row width to use for drawing row content.
            <br></br>Equivalent to the native <c>pickerView:widthForComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pickerView</em>
                <p>The picker view requesting this information.</p>
                <em>component</em>
                <p>A zero-indexed number identifying a component of the picker view. Components are numbered left-to-right.</p>
                <b>Return Value</b>
                <p>A float value indicating the width of the row in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="pickerView">
            </param>
            <param name="component">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate._pickerView_didSelectRow_inComponent__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_pickerView_didSelectRow_inComponent__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate._pickerView_rowHeightForComponent__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_pickerView_rowHeightForComponent__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate._pickerView_titleForRow_forComponent__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_pickerView_titleForRow_forComponent__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate._pickerView_viewForRow_forComponent_reusingView__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_pickerView_viewForRow_forComponent_reusingView__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPickerViewDelegate._pickerView_widthForComponent__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_pickerView_widthForComponent__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection">
            <summary>
            Constants for specifying the direction of the popover arrow.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Left">
            <summary>
                <p>An arrow that points toward the left.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Down">
            <summary>
                <p>An arrow that points downward.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Up">
            <summary>
                <p>An arrow that points upward.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Unknown">
            <summary>
                <p>The status of the arrow is currently unknown.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Any">
            <summary>
                <p>An arrow that points in any direction.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionAny</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Right">
            <summary>
                <p>An arrow that points toward the right.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionRight</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPopoverController">
            <summary>
            The <c>UIPopoverController</c> class is used to manage the presentation of content in a popover. You use popovers to present information temporarily but in a way that does not take over the entire screen like a modal view does. The popover content is layered on top of your existing content in a special type of window. The popover remains visible until the user taps outside of the popover window or you explicitly dismiss it. Popover controllers are for use exclusively on iPad devices. Attempting to create one on other devices results in an exception.
            </summary>
            <remarks>
                <p>To display a popover, create an instance of this class and present it using one of the appropriate methods. When initializing an instance of this class, you must provide the view controller that provides the content for the popover. Popovers normally derive their size from the view controller they present. However, you can change the size of the popover by modifying the value in the <c>popoverContentSize</c> property or by calling the <c>setPopoverContentSize:animated:</c> method. The latter approach is particularly effective if you need to animate changes to the popover’s size. The size you specify is just the preferred size for the popover’s view. The actual size may be altered to ensure that the popover fits on the screen and does not collide with the keyboard.</p>
                <p>When displayed, taps outside of the popover window cause the popover to be dismissed automatically. To allow the user to interact with the specified views and not dismiss the popover, you can assign one or more views to the <c>passthroughViews</c> property. Taps inside the popover window do not automatically cause the popover to be dismissed. Your view and view controller code must handle actions and events inside the popover explicitly and call the <c>dismissPopoverAnimated:</c> method as needed. </p>
                <p>If the user rotates the device while a popover is visible, the popover controller hides the popover and then shows it again at the end of the rotation. The popover controller attempts to position the popover appropriately for you but you may have to present it again or hide it altogether in some cases. For example, when displayed from a bar button item, the popover controller automatically adjusts the position (and potentially the size) of the popover to account for changes to the position of the bar button item. However, if you remove the bar button item during the rotation, or if you presented the popover from a target rectangle in a view, the popover controller does not attempt to reposition the popover. In those cases, you must manually hide the popover or present it again from an appropriate new position. You can do this in the <c>didRotateFromInterfaceOrientation:</c> method of the view controller that you used to present the popover.</p>
                <p>You can assign a delegate to the popover to manage interactions with the popover and receive notifications about its dismissal. For information about the methods of the delegate object, see <em>UIPopoverControllerDelegate Protocol Reference</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIPopoverController.DidDismiss">
            <summary>
            Tells the delegate that the popover was dismissed.
            <br></br>Equivalent to implementing the native <c>popoverControllerDidDismissPopover:</c> method of <c>UIPopoverControllerDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.shouldDismissHandler">
            <summary>
            Asks the delegate if the popover should be dismissed.
            <br></br>Equivalent to implementing the native <c>popoverControllerShouldDismissPopover:</c> method of <c>UIPopoverControllerDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_contentViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_contentViewController(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_passthroughViews(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_passthroughViews(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_popoverArrowDirection(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_popoverContentSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_popoverContentSize(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_popoverVisible(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_dismissPopoverAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_alloc_initWithContentViewController_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_presentPopoverFromRect_inView_permittedArrowDirections_animated_(System.String,System.String,System.String,System.UInt32,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_setContentViewController_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_setPopoverContentSize_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIPopoverController" /> class.
            <br></br>Equivalent to the native <c>[[UIPopoverController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.ClassExists">
            <summary>
            Returns whether the native UIPopoverController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.contentViewController">
            <summary>
            The view controller responsible for the content portion of the popover.
            <br></br>Equivalent to the native <c>contentViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is initially set to the view controller passed to the <c>initWithContentViewController:</c> method. You can change the value of this property later to reflect a new set of content. Changing the value of this property swaps the new view controller in for the old one immediately and does not trigger an animation. If you want to animate the change, use the <c>setContentViewController:animated:</c> method instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setContentViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.Delegate">
            <summary>
            The delegate you want to receive popover controller messages.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The popover controller uses its delegate to determine whether it should dismiss the popover and provides a notification when such an event occurs. For more information about the methods you can implement in your delegate, see <em>UIPopoverControllerDelegate Protocol Reference</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.passthroughViews">
            <summary>
            An array of views that the user can interact with while the popover is visible.
            <br></br>Equivalent to the native <c>passthroughViews</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When a popover is active, interactions with other views are normally disabled until the popover is dismissed. Assigning an array of views to this property allows taps outside of the popover to be handled by the corresponding views. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.popoverArrowDirection">
            <summary>
            The direction of the popover’s arrow. (read-only)
            <br></br>Equivalent to the native <c>popoverArrowDirection</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>UIPopoverArrowDirectionUnknown</c>. When you present the popover, the value changes to reflect the actual direction of the arrow being used by the popover. When the popover is subsequently dismissed, the value of this property returns to <c>UIPopoverArrowDirectionUnknown</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.popoverContentSize">
            <summary>
            The size of the popover’s content view.
            <br></br>Equivalent to the native <c>popoverContentSize</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property represents the size of the content view that is managed by the view controller in the <c>contentViewController</c> property. The initial value of this property is set to value in the view controller’s <c>contentSizeForViewInPopover</c> property. Changing the value of this property overrides the default value of the current view controller. The overridden value persists until you assign a new content view controller to the receiver. Thus, if you want to keep your overridden value, you must reassign it after changing the content view controller.  </p>
                <p>When changing the value of this property, the width value you specify must be at least 320 points and no more than 600 points. There are no restrictions on the height value. However, both the width and height values you specify may be adjusted to ensure the popup fits on screen and is not covered by the keyboard. If you change the value of this property while the popover is visible, the size change is animated. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.popoverVisible">
            <summary>
            A Boolean value indicating whether the popover is currently visible. (read-only)
            <br></br>Equivalent to the native <c>popoverVisible</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You must present the popover to make it visible.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.DismissPopover(System.Boolean)">
            <summary>
            Dismisses the popover programmatically.
            <br></br>Equivalent to the native <c>dismissPopoverAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the dismissal of the popover or <c>false</c> to dismiss it immediately.</p>
                <b>Discussion</b>
                <p>You can use this method to dismiss the popover programmatically in response to taps inside the popover window. Taps outside of the popover’s contents automatically dismiss the popover.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor(U3DXT.iOS.Native.UIKit.UIViewController)">
            <summary>
            Creates an instance of the native UIPopoverController and initializes the object. Returns an initialized popover controller object.
            <br></br>Equivalent to the native <c>[[UIPopoverController alloc] initWithContentViewController:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The view controller for managing the popover’s content. This parameter must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>An initialized popover controller object.</p>
                <b>Discussion</b>
                <p>When initializing a popover controller, you must specify the view controller object whose content is to be displayed in the popover. You can change this view controller later by modifying the <c>contentViewController</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.PresentPopover(UnityEngine.Rect,U3DXT.iOS.Native.UIKit.UIView,U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection,System.Boolean)">
            <summary>
            Displays the popover and anchors it to the specified location in the view.
            <br></br>Equivalent to the native <c>presentPopoverFromRect:inView:permittedArrowDirections:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle in view at which to anchor the popover window.</p>
                <em>view</em>
                <p>The view containing the anchor rectangle for the popover.</p>
                <em>arrowDirections</em>
                <p>The arrow directions the popover is permitted to use. You can use this value to force the popover to be positioned on a specific side of the rectangle. However, it is generally better to specify <c>UIPopoverArrowDirectionAny</c> and let the popover decide the best placement. You must not specify <c>UIPopoverArrowDirectionUnknown</c> for this parameter.</p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the presentation of the popover or <c>false</c> to display it immediately.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
            <param name="view">
            </param>
            <param name="arrowDirections">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.SetContentViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean)">
            <summary>
            Sets the view controller responsible for the content portion of the popover.
            <br></br>Equivalent to the native <c>setContentViewController:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The new view controller whose content should be displayed by the popover.</p>
                <em>animated</em>
                <p>Specify <c>true</c> if the change of view controllers should be animated or <c>false</c> if the change should occur immediately.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.SetPopoverContentSize(U3DXT.Utils.Size,System.Boolean)">
            <summary>
            Changes the size of the popover’s content view.
            <br></br>Equivalent to the native <c>setPopoverContentSize:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The new size to apply to the content view. </p>
                <em>animated</em>
                <p>Specify <c>true</c> if you want the change in size to be animated or <c>false</c> if you want the change to appear immediately.</p>
                <b>Discussion</b>
                <p>When changing the size of the popover’s content, the width value you specify must be at least 320 points and no more than 600 points. There are no restrictions on the height value. However, both the width and height values you specify may be adjusted to ensure the popup fits on screen and is not covered by the keyboard.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="size">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate">
            <summary>
            The <c>UIPopoverControllerDelegate</c> protocol defines the methods you can implement for the delegate of a <c>UIPopoverController</c> object. Popover controllers notify their delegate whenever user interactions would cause the dismissal of the popover and, in some cases, give the user a chance to prevent that dismissal.
            </summary>
            <remarks>
                <p>For more information about the <c>UIPopoverController</c> class, see <em>UIPopoverController Class Reference</em>. </p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.UP_UIPopoverControllerDelegate_set__popoverControllerDidDismissPopover__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.UP_UIPopoverControllerDelegate_set__popoverControllerShouldDismissPopover__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.DidDismiss(U3DXT.iOS.Native.UIKit.UIPopoverController)">
            <summary>
            (<b>required</b>) Tells the delegate that the popover was dismissed.
            <br></br>Equivalent to the native <c>popoverControllerDidDismissPopover:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>popoverController</em>
                <p>The popover controller that was dismissed.</p>
                <b>Discussion</b>
                <p>The popover controller does not call this method in response to programmatic calls to the <c>dismissPopoverAnimated:</c> method. If you dismiss the popover programmatically, you should perform any cleanup actions immediately after calling the <c>dismissPopoverAnimated:</c> method. </p>
                <p>You can use this method to incorporate any changes from the popover’s content view controller back into your application. If you do not plan to use the object in the <em>popoverController</em> parameter again, it is safe to release it from this method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="popoverController">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.ShouldDismiss(U3DXT.iOS.Native.UIKit.UIPopoverController)">
            <summary>
            (optional) Asks the delegate if the popover should be dismissed.
            <br></br>Equivalent to the native <c>popoverControllerShouldDismissPopover:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>popoverController</em>
                <p>The popover controller to be dismissed.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the popover should be dismissed or <c>false</c> if it should remain visible.</p>
                <b>Discussion</b>
                <p>This method is called in response to user-initiated attempts to dismiss the popover. It is not called when you dismiss the popover using the <c>dismissPopoverAnimated:</c> method of the popover controller. </p>
                <p>If you do not implement this method in your delegate, the default return value is assumed to be <c>true</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="popoverController">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate._popoverControllerDidDismissPopover__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_popoverControllerDidDismissPopover__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate._popoverControllerShouldDismissPopover__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_popoverControllerShouldDismissPopover__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIRectCorner">
            <summary>
            The corners of a rectangle.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The specified constants reflect the corners of a rectangle that has not been modified by an affine transform and is drawn in the default coordinate system (where the origin is in the upper-left corner and positive values extend down and to the right). </p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIRectCorner.AllCorners">
            <summary>
                <p>All corners of the rectangle.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIRectCornerAllCorners</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIRectCorner.TopLeft">
            <summary>
                <p>The top-left corner of the rectangle.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIRectCornerTopLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIRectCorner.TopRight">
            <summary>
                <p>The top-right corner of the rectangle.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIRectCornerTopRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIRectCorner.BottomLeft">
            <summary>
                <p>The bottom-left corner of the rectangle.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIRectCornerBottomLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIRectCorner.BottomRight">
            <summary>
                <p>The bottom-right corner of the rectangle.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIRectCornerBottomRight</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIResponder">
            <summary>
            The <c>UIResponder</c> class defines an interface for objects that respond to and handle events. It is the superclass of <c>UIApplication</c>, <c>UIView</c> and its subclasses (which include <c>UIWindow</c>). Instances of these classes are sometimes referred to as responder objects or, simply, responders.
            </summary>
            <remarks>
                <p>There are two general kinds of events: touch events and motion events. The primary event-handling methods for touches are <c>touchesBegan:withEvent:</c>, <c>touchesMoved:withEvent:</c>, <c>touchesEnded:withEvent:</c>, and <c>touchesCancelled:withEvent:</c>. The parameters of these methods associate touches with their events-especially touches that are new or have changed-and thus allow responder objects to track and handle the touches as the delivered events progress through the phases of a multi-touch sequence. Any time a finger touches the screen, is dragged on the screen, or lifts from the screen, a <c>UIEvent</c> object is generated. The event object contains <c>UITouch</c> objects for all fingers on the screen or just lifted from it. </p>
                <p>iOS 3.0 introduced system capabilities for generating motion events, specifically the motion of shaking the device. The event-handling methods for these kinds of events are <c>motionBegan:withEvent:</c>, <c>motionEnded:withEvent:</c>, and <c>motionCancelled:withEvent:</c>. Additionally for iOS 3.0, the <c>canPerformAction:withSender:</c> method allows responders to validate commands in the user interface while the <c>undoManager</c> property returns the nearest <c>NSUndoManager</c> object in the responder chain.</p>
                <p>In iOS 4.0, <c>UIResponder</c> added the <c>remoteControlReceivedWithEvent:</c> method for handling remote-control events.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIResponder" /> class.
            <br></br>Equivalent to the native <c>[[UIResponder alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIResponder.ClassExists">
            <summary>
            Returns whether the native UIResponder class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIStatusBarAnimation">
            <summary>
            The animation applied to the status bar as it is hidden or made visible.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Constants of the <c>UIStatusBarAnimation</c> type are arguments of the <c>setStatusBarHidden:withAnimation:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIStatusBarAnimation.None">
            <summary>
                <p>No animation is applied to the status bar as it is shown or hidden.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIStatusBarAnimationNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIStatusBarAnimation.Slide">
            <summary>
                <p>The status bar slides in or out as it is shown or hidden, respectively.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIStatusBarAnimationSlide</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIStatusBarAnimation.Fade">
            <summary>
                <p>The status bar fades in and out as it is shown or hidden, respectively.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIStatusBarAnimationFade</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIStatusBarStyle">
            <summary>
            The style of the device’s status bar.
            </summary>
            <remarks>
                <b>Special Considerations</b>
                <p>On iPad devices, the <c>UIStatusBarStyleDefault</c> and <c>UIStatusBarStyleBlackTranslucent</c> styles default to the <c>UIStatusBarStyleBlackOpaque</c> appearance. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIStatusBarStyle.BlackOpaque">
            <summary>
                <p>An opaque black style.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIStatusBarStyleBlackOpaque</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIStatusBarStyle.BlackTranslucent">
            <summary>
                <p>A transparent black style (specifically, black with an alpha of 0.5).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIStatusBarStyleBlackTranslucent</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIStatusBarStyle.Default">
            <summary>
                <p>A gray style (the default).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIStatusBarStyleDefault</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UITextBorderStyle">
            <summary>
            The type of border drawn around the text field.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextBorderStyle.RoundedRect">
            <summary>
                <p>Displays a rounded-style border for the text field.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextBorderStyleRoundedRect</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextBorderStyle.Line">
            <summary>
                <p>Displays a thin rectangle around the text field. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextBorderStyleLine</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextBorderStyle.Bezel">
            <summary>
                <p>Displays a bezel-style border for the text field. This style is typically used for standard data-entry fields.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextBorderStyleBezel</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextBorderStyle.None">
            <summary>
                <p>The text field does not display a border.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextBorderStyleNone</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UITextField">
            <summary>
            A <c>UITextField</c> object is a control that displays editable text and sends an action message to a target object when the user presses the return button. You typically use this class to gather small amounts of text from the user and perform some immediate action, such as a search operation, based on that text.
            </summary>
            <remarks>
                <p>In addition to its basic text-editing behavior, the <c>UITextField</c> class supports the use of overlay views to display additional information (and provide additional command targets) inside the text field boundaries. You can use custom overlay views to display features such as a bookmarks button or search icon. The <c>UITextField</c> class also provides a built-in button for clearing the current text. </p>
                <p>A text field object supports the use of a delegate object to handle editing-related notifications. You can use this delegate to customize the editing behavior of the control and provide guidance for when certain actions should occur. For more information on the methods supported by the delegate, see the <c>UITextFieldDelegate</c> protocol. </p>
                <p>For information about basic view behaviors, see <em>View Programming Guide for iOS</em>. </p>
                <b>Managing the Keyboard</b>
                <p>When the user taps in a text field, that text field becomes the first responder and automatically asks the system to display the associated keyboard. Because the appearance of the keyboard has the potential to obscure portions of your user interface, it is up to you to make sure that does not happen by repositioning any views that might be obscured. Some system views, like table views, help you by scrolling the first responder into view automatically. If the first responder is at the bottom of the scrolling region, however, you may still need to resize or reposition the scroll view itself to ensure the first responder is visible. </p>
                <p>It is your application’s responsibility to dismiss the keyboard at the time of your choosing. You might dismiss the keyboard in response to a specific user action, such as the user tapping a particular button in your user interface. You might also configure your text field delegate to dismiss the keyboard when the user presses the “return” key on the keyboard itself. To dismiss the keyboard, send the <c>resignFirstResponder</c> message to the text field that is currently the first responder. Doing so causes the text field object to end the current editing session (with the delegate object’s consent) and hide the keyboard.</p>
                <p>The appearance of the keyboard itself can be customized using the properties provided by the <c>UITextInputTraits</c> protocol. Text field objects implement this protocol and support the properties it defines. You can use these properties to specify the type of keyboard (ASCII, Numbers, URL, Email, and others) to display. You can also configure the basic text entry behavior of the keyboard, such as whether it supports automatic capitalization and correction of the text.</p>
                <b>Keyboard Notifications</b>
                <p>When the system shows or hides the keyboard, it posts several keyboard notifications. These notifications contain information about the keyboard, including its size, which you can use for calculations that involve moving views. Registering for these notifications is the only way to get some types of information about the keyboard. The system delivers the following notifications for keyboard-related events:</p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>UIKeyboardWillShowNotification</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>UIKeyboardDidShowNotification</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>UIKeyboardWillHideNotification</c>
                        </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>UIKeyboardDidHideNotification</c>
                        </p>
                    </li>
                </ul>
                <p>For more information about these notifications, see their descriptions in <em>UIWindow Class Reference</em>. For information about how to show and hide the keyboard, see <em>Text, Web, and Editing Programming Guide for iOS</em>.  </p>
                <b>State Preservation</b>
                <p>In iOS 6 and later, if you assign a value to this view’s <c>restorationIdentifier</c> property, it preserves the selected range of text, if any. During the next launch cycle, the view attempts to restore that selection. If the selection range cannot be applied to the text in the restored view, no selection is made. For more information about how state preservation and restoration works, see <em>iOS App Programming Guide</em>.  </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextField.UITextFieldTextDidBeginEditingNotification">
            <summary>
            Constant name for the native <c>UITextFieldTextDidBeginEditingNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.TextDidBeginEditing">
            <summary>
                <b>UITextFieldTextDidBeginEditingNotification</b> Notifies observers that an editing session began in a text field. The affected text field is stored in the <c>object</c> parameter of the notification. The <c>userInfo</c> dictionary is not used. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UITextFieldTextDidBeginEditingNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextField.UITextFieldTextDidChangeNotification">
            <summary>
            Constant name for the native <c>UITextFieldTextDidChangeNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.TextDidChange">
            <summary>
                <b>UITextFieldTextDidChangeNotification</b> Notifies observers that the text in a text field changed. The affected text field is stored in the <c>object</c> parameter of the notification.  <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UITextFieldTextDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextField.UITextFieldTextDidEndEditingNotification">
            <summary>
            Constant name for the native <c>UITextFieldTextDidEndEditingNotification</c> notification.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.TextDidEndEditing">
            <summary>
                <b>UITextFieldTextDidEndEditingNotification</b> Notifies observers that the editing session ended for a text field. The affected text field is stored in the <c>object</c> parameter of the notification. The <c>userInfo</c> dictionary is not used. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UITextFieldTextDidEndEditingNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.AllNotifications">
            <summary>
            Occurs when this object sends any notification.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UITextField.AllInstances">
            <summary>
            Static class for notifications of all instances of the <c>UITextField</c> class.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.AllInstances.TextDidBeginEditing">
            <summary>
                <b>UITextFieldTextDidBeginEditingNotification</b> Notifies observers that an editing session began in a text field. The affected text field is stored in the <c>object</c> parameter of the notification. The <c>userInfo</c> dictionary is not used. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UITextFieldTextDidBeginEditingNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.AllInstances.TextDidChange">
            <summary>
                <b>UITextFieldTextDidChangeNotification</b> Notifies observers that the text in a text field changed. The affected text field is stored in the <c>object</c> parameter of the notification.  <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UITextFieldTextDidChangeNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.AllInstances.TextDidEndEditing">
            <summary>
                <b>UITextFieldTextDidEndEditingNotification</b> Notifies observers that the editing session ended for a text field. The affected text field is stored in the <c>object</c> parameter of the notification. The <c>userInfo</c> dictionary is not used. <b>Availability</b><ul><li>Available in iOS 2.0 and later.</li></ul><br></br>Equivalent to adding the event handler as an observer to the native <c>UITextFieldTextDidEndEditingNotification</c> notification.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.shouldChangeCharactersInHandler">
            <summary>
            Asks the delegate if the specified text should be changed.
            <br></br>Equivalent to implementing the native <c>textField:shouldChangeCharactersInRange:replacementString:</c> method of <c>UITextFieldDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.DidBeginEditing">
            <summary>
            Tells the delegate that editing began for the specified text field.
            <br></br>Equivalent to implementing the native <c>textFieldDidBeginEditing:</c> method of <c>UITextFieldDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UITextField.DidEndEditing">
            <summary>
            Tells the delegate that editing stopped for the specified text field.
            <br></br>Equivalent to implementing the native <c>textFieldDidEndEditing:</c> method of <c>UITextFieldDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.shouldBeginEditingHandler">
            <summary>
            Asks the delegate if editing should begin in the specified text field.
            <br></br>Equivalent to implementing the native <c>textFieldShouldBeginEditing:</c> method of <c>UITextFieldDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.shouldClearHandler">
            <summary>
            Asks the delegate if the text field’s current contents should be removed.
            <br></br>Equivalent to implementing the native <c>textFieldShouldClear:</c> method of <c>UITextFieldDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.shouldEndEditingHandler">
            <summary>
            Asks the delegate if editing should stop in the specified text field.
            <br></br>Equivalent to implementing the native <c>textFieldShouldEndEditing:</c> method of <c>UITextFieldDelegate</c>.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.shouldReturnHandler">
            <summary>
            Asks the delegate if the text field should process the pressing of the return button.
            <br></br>Equivalent to implementing the native <c>textFieldShouldReturn:</c> method of <c>UITextFieldDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_adjustsFontSizeToFitWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_adjustsFontSizeToFitWidth(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_allowsEditingTextAttributes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_allowsEditingTextAttributes(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_background(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_background(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_borderStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_borderStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_clearButtonMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_clearButtonMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_clearsOnBeginEditing(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_clearsOnBeginEditing(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_clearsOnInsertion(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_clearsOnInsertion(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_disabledBackground(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_disabledBackground(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_editing(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_font(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_font(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_inputAccessoryView(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_inputAccessoryView(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_inputView(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_inputView(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_leftView(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_leftView(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_leftViewMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_leftViewMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_minimumFontSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_minimumFontSize(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_placeholder(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_placeholder(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_rightView(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_rightView(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_rightViewMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_rightViewMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_text(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_text(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_textAlignment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_textAlignment(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_textColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_textColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_get_typingAttributes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_set_typingAttributes(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_borderRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_clearButtonRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_drawPlaceholderInRect_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_drawTextInRect_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_editingRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_leftViewRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_placeholderRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_rightViewRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.UP_UITextField_textRectForBounds_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UITextField" /> class.
            <br></br>Equivalent to the native <c>[[UITextField alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.ClassExists">
            <summary>
            Returns whether the native UITextField class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.adjustsFontSizeToFitWidth">
            <summary>
            A Boolean value indicating whether the font size should be reduced in order to fit the text string into the text field’s bounding rectangle.
            <br></br>Equivalent to the native <c>adjustsFontSizeToFitWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Normally, the text field’s content is drawn with the font you specify in the <c>font</c> property. If this property is set to <c>true</c>, however, and the contents in the <c>text</c> property exceed the text field’s bounding rectangle, the receiver starts reducing the font size until the string fits or the minimum font size is reached. The text is shrunk along the baseline. </p>
                <p>The default value for this property is <c>false</c>. If you change it to <c>true</c>, you should also set an appropriate minimum font size by modifying the <c>minimumFontSize</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property minimumFontSize</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.allowsEditingTextAttributes">
            <summary>
            A Boolean value indicating whether the user may edit the attributes of the text in the text field.
            <br></br>Equivalent to the native <c>allowsEditingTextAttributes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If this property is set to <c>true</c>, the user may edit the style information of the text. In addition, pasting styled text into the text field retains any embedded style information. If <c>false</c>, the text field prohibits the editing of style information and strips style information from any pasted text. However, you can still set the style information programmatically using the methods of this class.</p>
                <p>The default value of this property is <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.background">
            <summary>
            The image that represents the background appearance of the text field when it is enabled.
            <br></br>Equivalent to the native <c>background</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When set, the image referred to by this property replaces the standard appearance controlled by the <c>borderStyle</c> property. Background images are drawn in the border rectangle portion of the image. Images you use for the text field’s background should be able to stretch to fit. </p>
                <p>This property is set to <c>null</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property borderStyle</c></li>
                    <li>    <c>@property disabledBackground</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.borderStyle">
            <summary>
            The border style used by the text field.
            <br></br>Equivalent to the native <c>borderStyle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is <c>UITextBorderStyleNone</c>. If the value is set to the <c>UITextBorderStyleRoundedRect</c> style, the custom background image associated with the text field is ignored.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.clearButtonMode">
            <summary>
            Controls when the standard clear button appears in the text field.
            <br></br>Equivalent to the native <c>clearButtonMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The standard clear button is displayed at the right side of the text field as a way for the user to remove text quickly. This button appears automatically based on the value set for this property. </p>
                <p>The default value for this property is <c>UITextFieldViewModeNever</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.clearsOnBeginEditing">
            <summary>
            A Boolean value indicating whether the text field removes old text when editing begins.
            <br></br>Equivalent to the native <c>clearsOnBeginEditing</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If this property is set to <c>true</c>, the text field’s previous text is cleared when the user selects the text field to begin editing. If <c>false</c>, the text field places an insertion point at the place where the user tapped the field. </p>
                <p>
                    <strong>Note:</strong> Even if this property is set to <c>true</c>, the text field delegate can override this behavior by returning <c>false</c> from its <c>textFieldShouldClear:</c> method.  </p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.clearsOnInsertion">
            <summary>
            A Boolean value indicating whether inserting text replaces the previous contents.
            <br></br>Equivalent to the native <c>clearsOnInsertion</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>false</c>. When the value of this property is <c>true</c> and the text field is in editing mode, the selection UI is hidden and inserting new text clears the contents of the text field and sets the value of this property back to <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.Delegate">
            <summary>
            The receiver’s delegate.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A text field delegate responds to editing-related messages from the text field. You can use the delegate to respond to the text entered by the user and to some special commands, such as when the return button is pressed. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.disabledBackground">
            <summary>
            The image that represents the background appearance of the text field when it is disabled.
            <br></br>Equivalent to the native <c>disabledBackground</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Background images are drawn in the border rectangle portion of the image. Images you use for the text field’s background should be able to stretch to fit. This property is ignored if the <c>background</c> property is not also set.  </p>
                <p>This property is set to <c>null</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property background</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.editing">
            <summary>
            A Boolean value indicating whether the text field is currently in edit mode. (read-only)
            <br></br>Equivalent to the native <c>editing</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is set to <c>true</c> when the user begins editing text in this text field, and it is set to <c>false</c> again when editing ends. Notifications about when editing begins and ends are sent to the text field delegate.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.font">
            <summary>
            The font of the text.
            <br></br>Equivalent to the native <c>font</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property applies to the entire text of the text field. It also applies to the placeholder text. The default font is a 12-point Helvetica plain font. </p>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the font to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the font to only a portion of the text, create a new attributed string with the desired style information and associate it with the text field. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.inputAccessoryView">
            <summary>
            The custom accessory view to display when the text field becomes the first responder
            <br></br>Equivalent to the native <c>inputAccessoryView</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>null</c>. Assigning a view to this property causes that view to be displayed above the standard system keyboard (or above the custom input view if one is provided) when the text field becomes the first responder. For example, you could use this property to attach a custom toolbar to the keyboard. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.inputView">
            <summary>
            The custom input view to display when the text field becomes the first responder.
            <br></br>Equivalent to the native <c>inputView</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the value in this property is <c>null</c>, the text field displays the standard system keyboard when it becomes first responder. Assigning a custom view to this property causes that view to be presented instead.</p>
                <p>The default value of this property is <c>null</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.leftView">
            <summary>
            The overlay view displayed on the left side of the text field.
            <br></br>Equivalent to the native <c>leftView</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use the left overlay view to indicate the intended behavior of the text field. For example, you might display a magnifying glass in this location to indicate that the text field is a search field.  </p>
                <p>The left overlay view is placed in the rectangle returned by the <c>leftViewRectForBounds:</c> method of the receiver. The image associated with this property should fit the given rectangle. If it does not fit, it is scaled to fit. </p>
                <p>If your overlay view does not overlap any other sibling views, it receives touch events like any other view. If you specify a control for your view, the control tracks and sends actions as usual. If an overlay view overlaps the clear button, however, the clear button always takes precedence in receiving events. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– leftViewRectForBounds:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.leftViewMode">
            <summary>
            Controls when the left overlay view appears in the text field.
            <br></br>Equivalent to the native <c>leftViewMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is <c>UITextFieldViewModeNever</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.minimumFontSize">
            <summary>
            The size of the smallest permissible font with which to draw the text field’s text.
            <br></br>Equivalent to the native <c>minimumFontSize</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When drawing text that might not fit within the bounding rectangle of the text field, you can use this property to prevent the receiver from reducing the font size to the point where it is no longer legible. </p>
                <p>The default value for this property is 0.0. If you enable font adjustment for the text field, you should always increase this value. </p>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the minimum font size to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply different minimum font sizes to different parts of your string, create a new attributed string with the desired style information and associate it with the text field. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property adjustsFontSizeToFitWidth</c></li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.placeholder">
            <summary>
            The string that is displayed when there is no other text in the text field.
            <br></br>Equivalent to the native <c>placeholder</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value is <c>null</c> by default. The placeholder string is drawn using a 70% grey color.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.rightView">
            <summary>
            The overlay view displayed on the right side of the text field.
            <br></br>Equivalent to the native <c>rightView</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use the right overlay view to provide indicate additional features available for the text field. For example, you might display a bookmarks button in this location to allow the user to select from a set of predefined items.</p>
                <p>The right overlay view is placed in the rectangle returned by the <c>rightViewRectForBounds:</c> method of the receiver. The image associated with this property should fit the given rectangle. If it does not fit, it is scaled to fit.</p>
                <p>If your overlay view does not overlap any other sibling views, it receives touch events like any other view. If you specify a control for your view, that control tracks and sends actions as usual. If an overlay view overlaps the clear button, however, the clear button always takes precedence in receiving events. By default, the right overlay view does overlap the clear button. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– rightViewRectForBounds:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.rightViewMode">
            <summary>
            Controls when the right overlay view appears in the text field.
            <br></br>Equivalent to the native <c>rightViewMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is <c>UITextFieldViewModeNever</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.text">
            <summary>
            The text displayed by the text field.
            <br></br>Equivalent to the native <c>text</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This string is <c>null</c> by default.</p>
                <p>In iOS 6 and later, assigning a new value to this property also replaces the value of the <c>attributedText</c> property with the same text, albeit without any inherent style attributes. Instead the text view styles the new string using the <c>font</c>, <c>textColor</c>, and other style-related properties of the class. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.textAlignment">
            <summary>
            The technique to use for aligning the text.
            <br></br>Equivalent to the native <c>textAlignment</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property applies to the both the main text string and the placeholder string. The default value of this property is <c><!--a target="_self" -->NSLeftTextAlignment<!--/a--></c>. </p>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the text alignment to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the alignment to only a portion of the text, create a new attributed string with the desired style information and associate it with the text field. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.textColor">
            <summary>
            The color of the text.
            <br></br>Equivalent to the native <c>textColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property applies to the entire text string. The default value for this property is a black color. The value for the property can only be set to a non-<c>null</c> value; setting this property to <c>null</c> raises an exception.</p>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the text color to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the color to only a portion of the text, create a new attributed string with the desired style information and associate it with the text field. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextField.typingAttributes">
            <summary>
            The attributes to apply to new text being entered by the user.
            <br></br>Equivalent to the native <c>typingAttributes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This dictionary contains the attribute keys (and corresponding values) to apply to newly typed text. When the text field’s selection changes, the contents of the dictionary are cleared automatically.</p>
                <p>If the text field is not in editing mode, this property contains the value <c>null</c>. Similarly, you cannot assign a value to this property unless the text field is currently in editing mode.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>    <c>@property editing</c></li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.BorderRect(UnityEngine.Rect)">
            <summary>
            Returns the receiver’s border rectangle.
            <br></br>Equivalent to the native <c>borderRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <b>Return Value</b>
                <p>The border rectangle for the receiver.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to provide a different border rectangle for drawing, you can override this method and return that rectangle. </p>
                <p>The default implementation of this method returns the original <em>bounds</em> rectangle. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.ClearButtonRect(UnityEngine.Rect)">
            <summary>
            Returns the drawing rectangle for the built-in clear button.
            <br></br>Equivalent to the native <c>clearButtonRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <b>Return Value</b>
                <p>The rectangle in which to draw the clear button.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to place the clear button in a different location, you can override this method and return the new rectangle. Your method should call the <c>super</c> implementation and modify the returned rectangle’s origin only. Changing the size of the clear button may cause unnecessary distortion of the button image. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.DrawPlaceholderInRect(UnityEngine.Rect)">
            <summary>
            Draws the receiver’s placeholder text in the specified rectangle.
            <br></br>Equivalent to the native <c>drawPlaceholderInRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle in which to draw the placeholder text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to customize the drawing behavior for the placeholder text, you can override this method to do your drawing.  </p>
                <p>By the time this method is called, the current graphics context is already configured with the default environment and text color for drawing. In your overridden method, you can configure the current context further and then invoke <c>super</c> to do the actual drawing or do the drawing yourself. If you do render the text yourself, you should not invoke <c>super</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.DrawTextInRect(UnityEngine.Rect)">
            <summary>
            Draws the receiver’s text in the specified rectangle.
            <br></br>Equivalent to the native <c>drawTextInRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle in which to draw the text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to customize the drawing behavior for the text, you can override this method to do your drawing.  </p>
                <p>By the time this method is called, the current graphics context is already configured with the default environment and text color for drawing. In your overridden method, you can configure the current context further and then invoke <c>super</c> to do the actual drawing or you can do the drawing yourself. If you do render the text yourself, you should not invoke <c>super</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.EditingRect(UnityEngine.Rect)">
            <summary>
            Returns the rectangle in which editable text can be displayed.
            <br></br>Equivalent to the native <c>editingRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <b>Return Value</b>
                <p>The computed editing rectangle for the text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to provide a different editing rectangle for the text, you can override this method and return that rectangle. By default, this method returns a region in the text field that is not occupied by any overlay views. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.LeftViewRect(UnityEngine.Rect)">
            <summary>
            Returns the drawing rectangle of the receiver’s left overlay view.
            <br></br>Equivalent to the native <c>leftViewRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <b>Return Value</b>
                <p>The rectangle in which to draw the left overlay view.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to place the left overlay view in a different location, you can override this method and return the new rectangle. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.PlaceholderRect(UnityEngine.Rect)">
            <summary>
            Returns the drawing rectangle for the text field’s placeholder text
            <br></br>Equivalent to the native <c>placeholderRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <b>Return Value</b>
                <p>The computed drawing rectangle for the placeholder text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to customize the drawing rectangle for the placeholder text, you can override this method and return a different rectangle. </p>
                <p>If the placeholder string is empty or <c>null</c>, this method is not called.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.RightViewRect(UnityEngine.Rect)">
            <summary>
            Returns the drawing location of the receiver’s right overlay view.
            <br></br>Equivalent to the native <c>rightViewRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <b>Return Value</b>
                <p>The rectangle in which to draw the right overlay view.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to place the right overlay view in a different location, you can override this method and return the new rectangle. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.TextRect(UnityEngine.Rect)">
            <summary>
            Returns the drawing rectangle for the text field’s text.
            <br></br>Equivalent to the native <c>textRectForBounds:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <b>Return Value</b>
                <p>The computed drawing rectangle for the label’s text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. If you want to customize the drawing rectangle for the text, you can override this method and return a different rectangle. </p>
                <p>The default implementation of this method returns a rectangle that is derived from the control’s original bounds, but which does not include the area occupied by the receiver’s border or overlay views. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextField.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UITextField and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UITextField alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UITextFieldDelegate">
            <summary>
            The <c>UITextFieldDelegate</c> protocol defines the messages sent to a text field delegate as part of the sequence of editing its text. All of the methods of this protocol are optional.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.UP_UITextFieldDelegate_set__textField_shouldChangeCharactersInRange_replacementString__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.UP_UITextFieldDelegate_set__textFieldDidBeginEditing__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.UP_UITextFieldDelegate_set__textFieldDidEndEditing__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.UP_UITextFieldDelegate_set__textFieldShouldBeginEditing__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.UP_UITextFieldDelegate_set__textFieldShouldClear__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.UP_UITextFieldDelegate_set__textFieldShouldEndEditing__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.UP_UITextFieldDelegate_set__textFieldShouldReturn__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.ShouldChangeCharactersIn(U3DXT.iOS.Native.UIKit.UITextField,U3DXT.iOS.Native.Foundation.NSRange,System.String)">
            <summary>
            (optional) Asks the delegate if the specified text should be changed.
            <br></br>Equivalent to the native <c>textField:shouldChangeCharactersInRange:replacementString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textField</em>
                <p>The text field containing the text.</p>
                <em>range</em>
                <p>The range of characters to be replaced </p>
                <em>string</em>
                <p>The replacement string. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the specified text range should be replaced; otherwise, <c>false</c> to keep the old text. </p>
                <b>Discussion</b>
                <p>The text field calls this method whenever the user types a new character in the text field or deletes an existing character.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="textField">
            </param>
            <param name="range">
            </param>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.DidBeginEditing(U3DXT.iOS.Native.UIKit.UITextField)">
            <summary>
            (optional) Tells the delegate that editing began for the specified text field.
            <br></br>Equivalent to the native <c>textFieldDidBeginEditing:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textField</em>
                <p>The text field for which an editing session began.</p>
                <b>Discussion</b>
                <p>This method notifies the delegate that the specified text field just became the first responder. You can use this method to update your delegate’s state information. For example, you might use this method to show overlay views that should be visible while editing. </p>
                <p>Implementation of this method by the delegate is optional. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="textField">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.DidEndEditing(U3DXT.iOS.Native.UIKit.UITextField)">
            <summary>
            (optional) Tells the delegate that editing stopped for the specified text field.
            <br></br>Equivalent to the native <c>textFieldDidEndEditing:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textField</em>
                <p>The text field for which editing ended.</p>
                <b>Discussion</b>
                <p>This method is called after the text field resigns its first responder status. You can use this method to update your delegate’s state information. For example, you might use this method to hide overlay views that should be visible only while editing. </p>
                <p>Implementation of this method by the delegate is optional. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="textField">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.ShouldBeginEditing(U3DXT.iOS.Native.UIKit.UITextField)">
            <summary>
            (optional) Asks the delegate if editing should begin in the specified text field.
            <br></br>Equivalent to the native <c>textFieldShouldBeginEditing:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textField</em>
                <p>The text field for which editing is about to begin.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if an editing session should be initiated; otherwise, <c>false</c> to disallow editing. </p>
                <b>Discussion</b>
                <p>When the user performs an action that would normally initiate an editing session, the text field calls this method first to see if editing should actually proceed. In most circumstances, you would simply return <c>true</c> from this method to allow editing to proceed.</p>
                <p>Implementation of this method by the delegate is optional. If it is not present, editing proceeds as if this method had returned <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="textField">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.ShouldClear(U3DXT.iOS.Native.UIKit.UITextField)">
            <summary>
            (optional) Asks the delegate if the text field’s current contents should be removed.
            <br></br>Equivalent to the native <c>textFieldShouldClear:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textField</em>
                <p>The text field containing the text.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the text field’s contents should be cleared; otherwise, <c>false</c>. </p>
                <b>Discussion</b>
                <p>The text field calls this method in response to the user pressing the built-in clear button. (This button is not shown by default but can be enabled by changing the value in the <c>clearButtonMode</c> property of the text field.) This method is also called when editing begins and the <c>clearsOnBeginEditing</c> property of the text field is set to <c>true</c>. </p>
                <p>Implementation of this method by the delegate is optional. If it is not present, the text is cleared as if this method had returned <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="textField">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.ShouldEndEditing(U3DXT.iOS.Native.UIKit.UITextField)">
            <summary>
            (optional) Asks the delegate if editing should stop in the specified text field.
            <br></br>Equivalent to the native <c>textFieldShouldEndEditing:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textField</em>
                <p>The text field for which editing is about to end.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if editing should stop; otherwise, <c>false</c> if the editing session should continue</p>
                <b>Discussion</b>
                <p>This method is called when the text field is asked to resign the first responder status. This might occur when your application asks the text field to resign focus or when the user tries to change the editing focus to another control. Before the focus actually changes, however, the text field calls this method to give your delegate a chance to decide whether it should. </p>
                <p>Normally, you would return <c>true</c> from this method to allow the text field to resign the first responder status. You might return <c>false</c>, however, in cases where your delegate detects invalid contents in the text field. By returning <c>false</c>, you could prevent the user from switching to another control until the text field contained a valid value.</p>
                <p>
                    <strong>Note:</strong> If you use this method to validate the contents of the text field, you might also want to provide feedback to that effect using an overlay view. For example, you could temporarily display a small icon indicating the text was invalid and needs to be corrected. For more information about adding overlays to text fields, see the methods of <c>UITextField</c>.</p>
                <p>
                </p>
                <p>Be aware that this method provides only a recommendation about whether editing should end. Even if you return <c>false</c> from this method, it is possible that editing might still end. For example, this might happen when the text field is forced to resign the first responder status by being removed from its parent view or window. </p>
                <p>Implementation of this method by the delegate is optional. If it is not present, the first responder status is resigned as if this method had returned <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="textField">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UITextFieldDelegate.ShouldReturn(U3DXT.iOS.Native.UIKit.UITextField)">
            <summary>
            (optional) Asks the delegate if the text field should process the pressing of the return button.
            <br></br>Equivalent to the native <c>textFieldShouldReturn:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>textField</em>
                <p>The text field whose return button was pressed.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the text field should implement its default behavior for the return button; otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>The text field calls this method whenever the user taps the return button. You can use this method to implement any custom behavior when the button is tapped. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="textField">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._textField_shouldChangeCharactersInRange_replacementString__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_textField_shouldChangeCharactersInRange_replacementString__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._textFieldDidBeginEditing__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_textFieldDidBeginEditing__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._textFieldDidEndEditing__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_textFieldDidEndEditing__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._textFieldShouldBeginEditing__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_textFieldShouldBeginEditing__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._textFieldShouldClear__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_textFieldShouldClear__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._textFieldShouldEndEditing__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_textFieldShouldEndEditing__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UITextFieldDelegate._textFieldShouldReturn__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_textFieldShouldReturn__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UITextFieldViewMode">
            <summary>
            Defines the times at which overlay views appear in a text field.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextFieldViewMode.Never">
            <summary>
                <p>The overlay view never appears. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextFieldViewModeNever</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextFieldViewMode.WhileEditing">
            <summary>
                <p>The overlay view is displayed only while text is being edited in the text field. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextFieldViewModeWhileEditing</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextFieldViewMode.UnlessEditing">
            <summary>
                <p>The overlay view is displayed only when text is not being edited. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextFieldViewModeUnlessEditing</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UITextFieldViewMode.Always">
            <summary>
                <p>The overlay view is always displayed.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UITextFieldViewModeAlways</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIUserInterfaceIdiom">
            <summary>
            The type of interface that should be used on the current device
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIUserInterfaceIdiom.Phone">
            <summary>
                <p>The user interface should be designed for iPhone and iPod touch.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIUserInterfaceIdiomPhone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIUserInterfaceIdiom.Pad">
            <summary>
                <p>The user interface should be designed for iPad. </p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIUserInterfaceIdiomPad</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIView">
            <summary>
            The <c>UIView</c> class defines a rectangular area on the screen and the interfaces for managing the content in that area. At runtime, a view object handles the rendering of any content in its area and also handles any interactions with that content. The <c>UIView</c> class itself provides basic behavior for filling its rectangular area with a background color. More sophisticated content can be presented by subclassing <c>UIView</c> and implementing the necessary drawing and event-handling code yourself. The UIKit framework also includes a set of standard subclasses that range from simple buttons to complex tables and can be used as-is. For example, a <c>UILabel</c> object draws a text string and a <c>UIImageView</c> object draws an image.
            </summary>
            <remarks>
                <p>Because view objects are the main way your application interacts with the user, they have a number of responsibilities. Here are just a few: </p>
                <ul class="ul">
                    <li class="li">
                        <p>Drawing and animation</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>Views draw content in their rectangular area using technologies such as UIKit, Core Graphics, and OpenGL ES.</p>
                            </li>
                            <li class="nested li">
                                <p>Some view  properties  can be animated to new values. </p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Layout and subview management</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>A view may contain zero or more subviews.</p>
                            </li>
                            <li class="nested li">
                                <p>Each view defines its own default resizing behavior in relation to its parent view.</p>
                            </li>
                            <li class="nested li">
                                <p>A view can define the size and position of its subviews as needed.</p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Event handling</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>A view is a responder and can handle touch events and other events defined by the <c>UIResponder</c> class. </p>
                            </li>
                            <li class="nested li">
                                <p>Views can use the <c>addGestureRecognizer:</c> method to install gesture recognizers to handle common gestures. </p>
                            </li>
                        </ul>
                    </li>
                </ul>
                <p>Views can embed other views and create sophisticated visual hierarchies. This creates a parent-child relationship between the view being embedded (known as the <strong>subview</strong>) and the parent view doing the embedding (known as the <strong>superview</strong>). Normally, a subview’s visible area is not clipped to the bounds of its superview, but in iOS you can use the <c>clipsToBounds</c> property to alter that behavior. A parent view may contain any number of subviews but each subview has only one superview, which is responsible for positioning its subviews appropriately.</p>
                <p>The geometry of a view is defined by its <c>frame</c>, <c>bounds</c>, and <c>center</c> properties. The <c>frame</c> defines the origin and dimensions of the view in the coordinate system of its superview and is commonly used during layout to adjust the size or position of the view. The <c>center</c> property can be used to adjust the position of the view without changing its size. The  bounds  defines the internal dimensions of the view as it sees them and is used almost exclusively in custom drawing code. The size portion of the <c>frame</c> and  bounds  rectangles are coupled together so that changing the size of either rectangle updates the size of both. </p>
                <p>For detailed information about how to use the <c>UIView</c> class, see <em>View Programming Guide for iOS</em>.</p>
                <p>
                    <strong>Note:</strong> In iOS 2.x, the maximum size of a <c>UIView</c> object is 1024 x 1024 points. In iOS 3.0 and later, views are no longer restricted to this maximum size but are still limited by the amount of memory they consume. It is in your best interests to keep view sizes as small as possible. Regardless of which version of iOS is running, you should consider tiling any content that is significantly larger than the dimensions the screen.</p>
                <p>
                </p>
                <b>Creating a View</b>
                <p>To create a view programmatically, you can use code like the following:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>CGRect  viewRect = CGRectMake(10, 10, 100, 100);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>UIView* myView = [[UIView alloc] initWithFrame:viewRect];  </pre>
                        </td>
                    </tr>
                </table>
                <p>This code creates the view and positions it at the point (10, 10) in its superview’s coordinate system (once it is added to that superview). To add a subview to another view, you use the <c>addSubview:</c> method. In iOS, sibling views may overlap each other without any issues, allowing complex view placement. The <c>addSubview:</c> method places the specified view on top of other siblings. You can specify the relative z-order of a subview by adding it using the <c>insertSubview:aboveSubview:</c> and <c>insertSubview:belowSubview:</c> methods. You can also exchange the position of already added subviews using the <c>exchangeSubviewAtIndex:withSubviewAtIndex:</c> method. </p>
                <p>When creating a view, it is important to assign an appropriate value to the <c>autoresizingMask</c> property to ensure the view resizes correctly. View resizing primarily occurs when the orientation of your application’s interface changes but it may happen at other times as well. For example, calling the <c>setNeedsLayout</c> method forces your view to update its layout. </p>
                <b>The View Drawing Cycle</b>
                <p>View drawing occurs on an as-needed basis. When a view is first shown, or when all or part of it becomes visible due to layout changes, the system asks the view to draw its contents. For views that contain custom content using UIKit or Core Graphics, the system calls the view’s <c>drawRect:</c> method. Your implementation of this method is responsible for drawing the view’s content into the current graphics context, which is set up by the system automatically prior to calling this method. This creates a static visual representation of your view’s content that can then be displayed on the screen. </p>
                <p>When the actual content of your view changes, it is your responsibility to notify the system that your view needs to be redrawn. You do this by calling your view’s <c>setNeedsDisplay</c> or <c>setNeedsDisplayInRect:</c> method of the view. These methods let the system know that it should update the view during the next drawing cycle. Because it waits until the next drawing cycle to update the view, you can call these methods on multiple views to update them at the same time.</p>
                <p>
                    <strong>Note:</strong> If you are using OpenGL ES to do your drawing, your view’s <c>drawRect:</c> method is not called. Instead, it is up to you to determine when your view needs to be redrawn and issue the appropriate drawing updates. For more information about how to draw using OpenGL ES, see <em>OpenGL ES Programming Guide for iOS</em>.</p>
                <p>
                </p>
                <p>For detailed information about the view drawing cycle and the role your views have in this cycle, see <em>View Programming Guide for iOS</em>.</p>
                <b>Animations</b>
                <p>Changes to several view properties can be animated—that is, changing the property creates an animation that conveys the change to the user over a short period of time. The <c>UIView</c> class does most of the work of performing the actual animations but you must still indicate which property changes you want to be animated. There are two different ways to initiate animations: </p>
                <ul class="ul">
                    <li class="li">
                        <p>In iOS 4 and later, use the block-based animation methods. (Recommended)</p>
                    </li>
                    <li class="li">
                        <p>Use the begin/commit animation methods.</p>
                    </li>
                </ul>
                <p>The block-based animation methods (such as <c>animateWithDuration:animations:</c>) greatly simplify the creation of animations. With one method call, you specify the animations to be performed and the options for the animation. However, block-based animations are available only in iOS 4 and later. If your application runs on earlier versions of iOS, you must use the <c>beginAnimations:context:</c> and <c>commitAnimations</c> class methods to mark the beginning and ending of your animations. </p>
                <p>The following properties of the <c>UIView</c> class are animatable:</p>
                <ul class="simple">
                    <li>
                        <p>
                            <c>frame</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>bounds</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>center</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>transform</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>alpha</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>backgroundColor</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>contentStretch</c>
                        </p>
                    </li>
                </ul>
                <p>For more information about how to configure animations, see <em>View Programming Guide for iOS</em>. </p>
                <b>Threading Considerations</b>
                <p>Manipulations to your application’s user interface must occur on the main thread. Thus, you should always call the methods of the <c>UIView</c> class from code running in the main thread of your application. The only time this may not be strictly necessary is when creating the view object itself but all other manipulations should occur on the main thread. </p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	The <c>UIView</c> class is a key subclassing point for visual content that also requires user interactions. Although there are many good reasons to subclass <c>UIView</c>, it is recommended that you do so only when the basic <c>UIView</c> class or the standard system views do not provide the capabilities that you need. Subclassing requires more work on your part to implement the view and to tune its performance.</p>
                <p class="spaceabove">	For information about ways to avoid subclassing, see  “Alternatives to Subclassing.”  </p>
                <b>Methods to Override</b>
                <p class="spaceabove">When subclassing <c>UIView</c>, there are only a handful of methods you should override and many methods that you might override depending on your needs. Because <c>UIView</c> is a highly configurable class, there are also many ways to implement sophisticated view behaviors without overriding custom methods, which are discussed in the Alternatives to Subclassing section. In the meantime, the following list includes the methods you might consider overriding in your <c>UIView</c> subclasses:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Initialization:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>initWithFrame:</c> - It is recommended that you implement this method. You can also implement custom initialization methods in addition to, or instead of, this method.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>initWithCoder:</c> - Implement this method if you load your view from an Interface Builder nib file and your view requires custom initialization.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>layerClass</c> - Implement this method only if you want your view to use a different Core Animation layer for its backing store. For example, if you are using OpenGL ES to do your drawing, you would want to override this method and return the <c>CAEAGLLayer</c> class.  </p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Drawing and printing:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>drawRect:</c> - Implement this method if your view draws custom content. If your view does not do any custom drawing, avoid overriding this method. </p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>drawRect:forViewPrintFormatter:</c> - Implement this method only if you want to draw your view’s content differently during printing. </p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Constraints:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>requiresConstraintBasedLayout</c> - Implement this class method if your view class requires constraints to work properly.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>updateConstraints</c> - Implement this method if your view needs to create custom constraints between your subviews.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>alignmentRectForFrame:</c>, <c>frameForAlignmentRect:</c> - Implement these methods to override how your views are aligned to other views.</p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Layout:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>sizeThatFits:</c> - Implement this method if you want your view to have a different default size than it normally would during resizing operations. For example, you might use this method to prevent your view from shrinking to the point where subviews cannot be displayed correctly. </p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>layoutSubviews</c> - Implement this method if you need more precise control over the layout of your subviews than either the constraint or autoresizing behaviors provide. </p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>didAddSubview:</c>, <c>willRemoveSubview:</c> - Implement these methods as needed to track the additions and removals of subviews.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>willMoveToSuperview:</c>, <c>didMoveToSuperview</c> - Implement these methods as needed to track the movement of the current view in your view hierarchy.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>willMoveToWindow:</c>, <c>didMoveToWindow</c> - Implement these methods as needed to track the movement of your view to a different window.</p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Event Handling:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>touchesBegan:withEvent:</c>, <c>touchesMoved:withEvent:</c>, <c>touchesEnded:withEvent:</c>, <c>touchesCancelled:withEvent:</c> - Implement these methods if you need to handle touch events directly. (For gesture-based input, use gesture recognizers.)</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>gestureRecognizerShouldBegin:</c> - Implement this method if your view handles touch events directly and might want to prevent attached gesture recognizers from triggering additional actions.</p>
                            </li>
                        </ul>
                    </li>
                </ul>
                <b>Alternatives to Subclassing</b>
                <p>Many view behaviors can be configured without the need for subclassing. Before you start overriding methods, consider whether modifying the following properties or behaviors would provide the behavior you need.</p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>addConstraint:</c> - Define automatic layout behavior for the view and its subviews.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>autoresizingMask</c> - Provides automatic layout behavior when the superview’s frame changes. These behaviors can be combined with constraints.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>contentMode</c> - Provides layout behavior for the view’s content, as opposed to the <c>frame</c> of the view. This property also affects how the content is scaled to fit the view and whether it is cached or redrawn. </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>contentStretch</c> - Defines portions of the view as being stretchable. This behavior is typically used to implement buttons and other resizable views with sophisticated layout needs where redrawing the view every time would affect performance.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>hidden</c> or <c>alpha</c> - Change the transparency of the view as a whole rather than hiding or applying alpha to your view’s rendered content.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>backgroundColor</c> - Set the view’s color rather than drawing that color yourself.</p>
                    </li>
                    <li class="li">
                        <p>Subviews - Rather than draw your content using a <c>drawRect:</c> method, embed image and label subviews with the content you want to present. </p>
                    </li>
                    <li class="li">
                        <p>Gesture recognizers - Rather than subclass to intercept and handle touch events yourself, you can use gesture recognizers to send an  action message  to a target object. </p>
                    </li>
                    <li class="li">
                        <p>Animations - Use the built-in animation support rather than trying to animate changes yourself. The animation support provided by Core Animation is fast and easy to use. </p>
                    </li>
                    <li class="li">
                        <p>Image-based backgrounds - For views that display relatively static content, consider using a <c>UIImageView</c> object with gesture recognizers instead of subclassing and drawing the image yourself. Alternatively, you can also use a generic <c>UIView</c> object and assign your image as the content of the view’s <c>CALayer</c> object. </p>
                    </li>
                </ul>
                <p>Animations are another way to make visible changes to a view without requiring you to subclass and implement complex drawing code. Many properties of the <c>UIView</c> class are animatable, which means changes to those properties can trigger system-generated animations. Starting animations requires as little as one line of code to indicate that any changes that follow should be animated. For more information about animation support for views, see  “Animations.”   </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_alpha(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_alpha(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_autoresizingMask(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_autoresizingMask(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_backgroundColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_backgroundColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_bounds(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_bounds(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_center(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_center(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_frame(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_frame(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_hidden(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_hidden(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_opaque(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_opaque(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_subviews(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_superview(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_window(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_contentScaleFactor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_contentScaleFactor(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_contentMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_contentMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_layer(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_addSubview_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_alloc_initWithFrame_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_removeFromSuperview(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_setNeedsDisplay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_setNeedsDisplayInRect_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIView" /> class.
            <br></br>Equivalent to the native <c>[[UIView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.ClassExists">
            <summary>
            Returns whether the native UIView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.alpha">
            <summary>
            The receiver’s alpha value.
            <br></br>Equivalent to the native <c>alpha</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is a floating-point number in the range <c>0.0</c> to <c>1.0</c>, where <c>0.0</c> represents totally transparent and <c>1.0</c> represents totally opaque. This value affects only the current view and does not affect any of its embedded subviews.</p>
                <p>Changes to this property can be animated.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>backgroundColor</c>
                    </li>
                    <li>
                        <c>opaque</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.autoresizingMask">
            <summary>
            An integer bit mask that determines how the receiver resizes itself when its superview’s bounds change.
            <br></br>Equivalent to the native <c>autoresizingMask</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When a view’s bounds change, that view automatically resizes its subviews according to each subview’s autoresizing mask. You specify the value of this mask by combining the constants described in <c>UIViewAutoresizing</c> using the C bitwise OR operator. Combining these constants lets you specify which dimensions of the view should grow or shrink relative to the superview. The default value of this property is <c>UIViewAutoresizingNone</c>, which indicates that the view should not be resized at all. </p>
                <p>When more than one option along the same axis is set, the default behavior is to distribute the size difference proportionally among the flexible portions. The larger the flexible portion, relative to the other flexible portions, the more it is likely to grow. For example, suppose this property includes the <c>UIViewAutoresizingFlexibleWidth</c> and <c>UIViewAutoresizingFlexibleRightMargin</c> constants but does not include the <c>UIViewAutoresizingFlexibleLeftMargin</c> constant, thus indicating that the width of the view’s left margin is fixed but that the view’s width and right margin may change. Thus, the view appears anchored to the left side of its superview while both the view width and the gap to the right of the view increase.</p>
                <p>If the autoresizing behaviors do not offer the precise layout that you need for your views, you can use a custom container view and override its <c>layoutSubviews</c> method to position your subviews more precisely.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>autoresizesSubviews</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.backgroundColor">
            <summary>
            The receiver’s background color.
            <br></br>Equivalent to the native <c>backgroundColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Changes to this property can be animated. The default value is <c>null</c>, which results in a transparent background color.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>alpha</c>
                    </li>
                    <li>
                        <c>opaque</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.bounds">
            <summary>
            The bounds rectangle, which describes the view’s location and size in its own coordinate system.
            <br></br>Equivalent to the native <c>bounds</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>On the screen, the bounds rectangle represents the same visible portion of the view as its frame rectangle. By default, the origin of the bounds rectangle is set to (0, 0) but you can change this value to display different portions of the view. The size of the bounds rectangle is coupled to the size of the frame rectangle, so that changes to one affect the other. Changing the bounds size grows or shrinks the view relative to its center point. The coordinates of the bounds rectangle are always specified in points.</p>
                <p>Changing the frame rectangle automatically redisplays the receiver without invoking the <c>drawRect:</c> method. If you want the <c>drawRect:</c> method invoked when the frame rectangle changes, set the <c>contentMode</c> property to <c>UIViewContentModeRedraw</c>. </p>
                <p>Changes to this property can be animated. </p>
                <p>The default bounds origin is <c>(0,0)</c> and the size is the same as the frame rectangle’s size.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>frame</c>
                    </li>
                    <li>
                        <c>center</c>
                    </li>
                    <li>
                        <c>transform</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.center">
            <summary>
            The center of the frame.
            <br></br>Equivalent to the native <c>center</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The center is specified within the coordinate system of its superview and is measured in points. Setting this property changes the values of the <c>frame</c> properties accordingly.</p>
                <p>Changing the frame rectangle automatically redisplays the receiver without invoking the <c>drawRect:</c> method. If you want the <c>drawRect:</c> method invoked when the frame rectangle changes, set the <c>contentMode</c> property to <c>UIViewContentModeRedraw</c>. </p>
                <p>Changes to this property can be animated. Use the <c>beginAnimations:context:</c> class method to begin and the <c>commitAnimations</c> class method to end an animation block.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>frame</c>
                    </li>
                    <li>
                        <c>bounds</c>
                    </li>
                    <li>
                        <c>transform</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.frame">
            <summary>
            The frame rectangle, which describes the view’s location and size in its superview’s coordinate system.
            <br></br>Equivalent to the native <c>frame</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This rectangle defines the size and position of the view in its superview’s coordinate system. You use this rectangle during layout operations to size and position the view. Setting this property changes the point specified by the <c>center</c> property and the size in the <c>bounds</c> rectangle accordingly. The coordinates of the frame rectangle are always specified in points.</p>
                <p>
                    <strong>Warning:</strong> If the <c>transform</c> property is not the identity transform, the value of this property is undefined and therefore should be ignored.</p>
                <p>
                </p>
                <p>Changing the frame rectangle automatically redisplays the receiver without invoking the <c>drawRect:</c> method. If you want the <c>drawRect:</c> method invoked when the frame rectangle changes, set the <c>contentMode</c> property to <c>UIViewContentModeRedraw</c>. </p>
                <p>Changes to this property can be animated. However, if the <c>transform</c> property contains a non-identity transform, the value of the <c>frame</c> property is undefined and should not be modified. In that case, you can reposition the view using the <c>center</c> property and adjust the size using the <c>bounds</c> property instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>bounds</c>
                    </li>
                    <li>
                        <c>center</c>
                    </li>
                    <li>
                        <c>transform</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.hidden">
            <summary>
            A Boolean value that determines whether the receiver is hidden.
            <br></br>Equivalent to the native <c>hidden</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Setting the value of this property to <c>true</c> hides the receiver and setting it to <c>false</c> shows the receiver. The default value is <c>false</c>.</p>
                <p>A hidden view disappears from its window and does not receive input events. It remains in its superview’s list of subviews, however, and participates in autoresizing as usual. Hiding a view with subviews has the effect of hiding those subviews and any view descendants they might have. This effect is implicit and does not alter the hidden state of the receiver’s descendants.</p>
                <p>Hiding the view that is the window’s current first responder causes the view’s next valid key view to become the new first responder. </p>
                <p>The value of this property reflects the state of the receiver only and does not account for the state of the receiver’s ancestors in the view hierarchy. Thus this property can be <c>false</c> but the receiver may still be hidden if an ancestor is hidden.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.opaque">
            <summary>
            A Boolean value that determines whether the receiver is opaque.
            <br></br>Equivalent to the native <c>opaque</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property provides a hint to the drawing system as to how it should treat the view. If set to <c>true</c>, the drawing system treats the view as fully opaque, which allows the drawing system to optimize some drawing operations and improve performance. If set to <c>false</c>, the drawing system composites the view normally with other content. The default value of this property is <c>true</c>.</p>
                <p>An opaque view is expected to fill its bounds with entirely opaque content—that is, the content should have an alpha value of <c>1.0</c>. If the view is opaque and either does not fill its bounds or contains wholly or partially transparent content, the results are unpredictable. You should always set the value of this property to <c>false</c> if the view is fully or partially transparent.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>backgroundColor</c>
                    </li>
                    <li>
                        <c>alpha</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.subviews">
            <summary>
            The receiver’s immediate subviews. (read-only)
            <br></br>Equivalent to the native <c>subviews</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use this property to retrieve the subviews associated with your custom view hierarchies. The order of the subviews in the array reflects their visible order on the screen, with the view at index 0 being the back-most view. </p>
                <p>For complex views declared in UIKit and other system frameworks, any subviews of the view are generally considered private and subject to change at any time. Therefore, you should not attempt to retrieve or modify subviews for these types of system-supplied views. If you do, your code may break during a future system update.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>superview</c>
                    </li>
                    <li>
                        <c>– removeFromSuperview</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.superview">
            <summary>
            The receiver’s superview, or <c><!--a  -->nil<!--/a--></c> if it has none. (read-only)
            <br></br>Equivalent to the native <c>superview</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>subviews</c>
                    </li>
                    <li>
                        <c>– removeFromSuperview</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.window">
            <summary>
            The receiver’s window object, or <c><!--a  -->nil<!--/a--></c> if it has none. (read-only)
            <br></br>Equivalent to the native <c>window</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is <c>null</c> if the view has not yet been added to a window. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.contentScaleFactor">
            <summary>
            The scale factor applied to the view.
            <br></br>Equivalent to the native <c>contentScaleFactor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The scale factor determines how content in the view is mapped from the logical coordinate space (measured in points) to the device coordinate space (measured in pixels). This value is typically either <c>1.0</c> or <c>2.0</c>. Higher scale factors indicate that each point in the view is represented by more than one pixel in the underlying layer. For example, if the scale factor is <c>2.0</c> and the view frame size is 50 x 50 points, the size of the bitmap used to present that content is 100 x 100 pixels.</p>
                <p>For views that implement a custom <c>drawRect:</c> method and are associated with a window, the default value for this property is the scale factor associated with the screen currently displaying the view. For system views and views that are backed by a <c>CAEAGLLayer</c> object for, the value of this property may be <c>1.0</c> even on high resolution screens. </p>
                <p>In general, you should not need to modify the value in this property. However, if your application draws using OpenGL ES, you may want to change the scale factor to support higher-resolution drawing on screens that support it. For more information on how to adjust your OpenGL ES rendering environment, see  “Supporting High-Resolution Screens”  in <em>Drawing and Printing Guide for iOS</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.contentMode">
            <summary>
            A flag used to determine how a view lays out its content when its bounds change.
            <br></br>Equivalent to the native <c>contentMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The content mode specifies how the cached bitmap of the view’s layer is adjusted when the view’s bounds change. This property is often used to implement resizable controls, usually in conjunction with the <c>contentStretch</c> property. Instead of redrawing the contents of the view every time, you can use this property to specify that you want to scale the contents (either with or without distortion) or pin them to a particular spot on the view.</p>
                <p>
                    <strong>Note:</strong> You can always force the contents of a view to be redrawn by calling the <c>setNeedsDisplay</c> or <c>setNeedsDisplayInRect:</c> method. </p>
                <p>
                </p>
                <p>For a list of values you can assign to this property, see <c>UIViewContentMode</c>. The default value of this property is <c>UIViewContentModeScaleToFill</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.layer">
            <summary>
            The view’s Core Animation layer used for rendering. (read-only)
            <br></br>Equivalent to the native <c>layer</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is never <c>null</c>. The actual class of the object is determined by the value returned by the <c>layerClass</c> method. The view is the layer’s delegate.</p>
                <p>
                    <strong>Warning:</strong> Since the view is the layer’s delegate, you should never make the view the delegate of another <c>CALayer</c> object. Additionally, you should never change the delegate of this layer object.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ layerClass</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.AddSubview(U3DXT.iOS.Native.UIKit.UIView)">
            <summary>
            Adds a view to the end of the receiver’s list of subviews.
            <br></br>Equivalent to the native <c>addSubview:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>view</em>
                <p>The view to be added. This view is retained by the receiver. After being added, this view appears on top of any other subviews. </p>
                <b>Discussion</b>
                <p>This method retains <em>view</em> and sets its next responder to the receiver, which is its new superview. </p>
                <p>Views can have only one superview. If <em>view</em> already has a superview and that view is not the receiver, this method removes the previous superview before making the receiver its new superview. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– insertSubview:atIndex:</c>
                    </li>
                    <li>
                        <c>– insertSubview:aboveSubview:</c>
                    </li>
                    <li>
                        <c>– insertSubview:belowSubview:</c>
                    </li>
                    <li>
                        <c>– exchangeSubviewAtIndex:withSubviewAtIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="view">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIView and initializes the object. Initializes and returns a newly allocated view object with the specified frame rectangle.
            <br></br>Equivalent to the native <c>[[UIView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aRect</em>
                <p>The frame rectangle for the view, measured in points. The origin of the frame is relative to the superview in which you plan to add it. This method uses the frame rectangle to set the <c>center</c> and <c>bounds</c> properties accordingly.</p>
                <b>Return Value</b>
                <p>An initialized view object or <c>null</c> if the object couldn't be created.</p>
                <b>Discussion</b>
                <p>The new view object must be inserted into the view hierarchy of a window before it can be used. If you create a view object programmatically, this method is the designated initializer for the <c>UIView</c> class. Subclasses can override this method to perform any custom initialization but must call <c>super</c> at the beginning of their implementation.</p>
                <p>If you use Interface Builder to design your interface, this method is not called when your view objects are subsequently loaded from the nib file. Objects in a nib file are reconstituted and then initialized using their <c>initWithCoder:</c> method, which modifies the attributes of the view to match the attributes stored in the nib file. For detailed information about how views are loaded from a nib file, see <em>Resource Programming Guide</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="frame">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.RemoveFromSuperview">
            <summary>
            Unlinks the receiver from its superview and its window, and removes it from the responder chain.
            <br></br>Equivalent to the native <c>removeFromSuperview</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the receiver’s superview is not <c>null</c>, the superview releases the receiver. If you plan to reuse a view, be sure to retain it before calling this method and release it again later as appropriate.</p>
                <p>Never call this method from inside your view’s <c>drawRect:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>superview</c>
                    </li>
                    <li>
                        <c>subviews</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.SetNeedsDisplay">
            <summary>
            Marks the receiver’s entire bounds rectangle as needing to be redrawn.
            <br></br>Equivalent to the native <c>setNeedsDisplay</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use this method or the <c>setNeedsDisplayInRect:</c> to notify the system that your view’s contents need to be redrawn. This method makes a note of the request and returns immediately. The view is not actually redrawn until the next drawing cycle, at which point all invalidated views are updated.</p>
                <p>
                    <strong>Note:</strong> If your view is backed by a <c>CAEAGLLayer</c> object, this method has no effect. It is intended for use only with views that use native drawing technologies (such as UIKit and Core Graphics) to render their content.</p>
                <p>
                </p>
                <p>You should use this method to request that a view be redrawn only when the content or appearance of the view change. If you simply change the geometry of the view, the view is typically not redrawn. Instead, its existing content is adjusted based on the value in the view’s <c>contentMode</c> property. Redisplaying the existing content improves performance by avoiding the need to redraw content that has not changed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– drawRect:</c>
                    </li>
                    <li>
                        <c>– setNeedsDisplayInRect:</c>
                    </li>
                    <li>
                        <c>contentMode</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.SetNeedsDisplayInRect(UnityEngine.Rect)">
            <summary>
            Marks the specified rectangle of the receiver as needing to be redrawn.
            <br></br>Equivalent to the native <c>setNeedsDisplayInRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>invalidRect</em>
                <p>The rectangular region of the receiver to mark as invalid; it should be specified in the coordinate system of the receiver.</p>
                <b>Discussion</b>
                <p>You can use this method or the <c>setNeedsDisplay</c> to notify the system that your view’s contents need to be redrawn. This method adds the specified rectangle into the view’s current list of invalid rectangles and returns immediately. The view is not actually redrawn until the next drawing cycle, at which point all invalidated views are updated.  </p>
                <p>
                    <strong>Note:</strong> If your view is backed by a <c>CAEAGLLayer</c> object, this method has no effect. It is intended for use only with views that use native drawing technologies (such as UIKit and Core Graphics) to render their content.</p>
                <p>
                </p>
                <p>You should use this method to request that a view be redrawn only when the content or appearance of the view change. If you simply change the geometry of the view, the view is typically not redrawn. Instead, its existing content is adjusted based on the value in the view’s <c>contentMode</c> property. Redisplaying the existing content improves performance by avoiding the need to redraw content that has not changed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– drawRect:</c>
                    </li>
                    <li>
                        <c>– setNeedsDisplay</c>
                    </li>
                    <li>
                        <c>contentMode</c>
                    </li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIViewAutoresizing">
            <summary>
            Specifies how a view is automatically resized.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleHeight">
            <summary>
                <p>The view resizes by expanding or shrinking its height.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleHeight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleRightMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the right margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleRightMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleBottomMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the bottom margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleBottomMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleLeftMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the left margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleLeftMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleTopMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the top margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleTopMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.None">
            <summary>
                <p>The view does not resize.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleWidth">
            <summary>
                <p>The view resizes by expanding or shrinking its width.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleWidth</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIViewContentMode">
            <summary>
            Specifies how a view adjusts its content when its size changes.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.ScaleToFill">
            <summary>
                <p>Scales the content to fit the size of itself by changing the aspect ratio of the content if necessary.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeScaleToFill</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.Redraw">
            <summary>
                <p>Redisplays the view when the bounds change by invoking the <c>setNeedsDisplay</c> method.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeRedraw</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.ScaleAspectFill">
            <summary>
                <p>Scales the content to fill the size of the view. Some portion of the content may be clipped to fill the view’s bounds.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeScaleAspectFill</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.BottomRight">
            <summary>
                <p>Aligns the content in the bottom-right corner of the view.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeBottomRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.Center">
            <summary>
                <p>Centers the content in the view’s bounds, keeping the proportions the same.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeCenter</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.Left">
            <summary>
                <p>Aligns the content on the left of the view.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.Bottom">
            <summary>
                <p>Centers the content aligned at the bottom in the view’s bounds.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeBottom</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.TopRight">
            <summary>
                <p>Aligns the content in the top-right corner of the view.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeTopRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.Top">
            <summary>
                <p>Centers the content aligned at the top in the view’s bounds.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeTop</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.ScaleAspectFit">
            <summary>
                <p>Scales the content to fit the size of the view by maintaining the aspect ratio. Any remaining area of the view’s bounds is transparent. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeScaleAspectFit</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.Right">
            <summary>
                <p>Aligns the content on the right of the view.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.TopLeft">
            <summary>
                <p>Aligns the content in the top-left corner of the view.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeTopLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewContentMode.BottomLeft">
            <summary>
                <p>Aligns the content in the bottom-left corner of the view.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewContentModeBottomLeft</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIViewController">
            <summary>
            The <c>UIViewController</c> class provides the fundamental view-management model for all iOS apps. You rarely instantiate <c>UIViewController</c> objects directly. Instead, you instantiate subclasses of the <c>UIViewController</c> class based on the specific task each subclass performs. A view controller manages a set of views that make up a portion of your app’s user interface. As part of the controller layer of your app, a view controller coordinates its efforts with model objects and other controller objects—including other view controllers—so your app presents a single coherent user interface.
            </summary>
            <remarks>
                <p>Where necessary, a view controller:</p>
                <ul class="ul">
                    <li class="li">
                        <p>resizes and lays out its views</p>
                    </li>
                    <li class="li">
                        <p>adjusts the contents of the views</p>
                    </li>
                    <li class="li">
                        <p>acts on behalf of the views when the user interacts with them</p>
                    </li>
                </ul>
                <p>View controllers are tightly bound to the views they manage and take part in the responder chain used to handle events. View controllers are descendants of the <c>UIResponder</c> class and are inserted into the responder chain between the managed root view and its superview, which typically belongs to a different view controller. If the view controller’s view does not handle an event, the view controller has the option of handling the event or it can pass the event to the superview.</p>
                <p>View controllers are rarely used in isolation. Instead, you use multiple view controllers, each of which owns a portion of your app’s user interface. For example, one view controller might manage a table of items while a different view controller manages the display of a selected item from that table. Each view controller displays its own views to show the content it is responsible for.</p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	An contains at least one custom subclass of <c>UIViewController</c> and more often there are several. These custom subclasses define behaviors specific to your app, such as how it handles user interactions with its views. The following sections provide a brief overview of some of the tasks your custom subclass performs. For more information about implementing your custom subclasses, see <em>View Controller Programming Guide for iOS</em>.</p>
                <b>View Management</b>
                <p>When you define a new subclass of <c>UIViewController</c>, you must specify the views to be managed by the controller. A typical view hierarchy consists of a view with flexible bounds—a reference to which is available in the <c>view</c> property of this class—and one or more subviews that provide the actual content. The size and position of the root view is usually determined by another object that owns the view controller and displays its contents. The view controller determines the positions of any subviews it owns based on the size given to its root view by the owning object. A view controller is usually owned by a window or another view controller. If a view controller is owned by a window object, it acts as the window’s root view controller. The view controller’s root view is added as a subview of the window and resized to fill the window. If the view controller is owned by another view controller, then the parent view controller determines when and how the child view controller’s contents are displayed.</p>
                <p>The <c>UIViewController</c> class provides built-in support for loading a view controller’s views whenever they are needed. Specifically, views are automatically loaded when the <c>view</c> property is accessed. There are a few ways you can implement your app to load these views:</p>
                <ul class="ul">
                    <li class="li">
                        <p>You can specify the views for a view controller using a  storyboard  created in Interface Builder. A storyboard contains preconfigured view controllers and their associated views and is the preferred way to develop your app’s user interface. A key advantage of storyboards is that they can express relationships between different view controllers in your app. For example, you can state that one view controller’s contents are contained inside another view controller or that a view controller is displayed as a transition (known as a segue) from another view controller . By allowing you to see the relationships between view controllers, storyboards make it easier to understand your app’s behavior at a glance.</p>
                        <p>At runtime, the view controller uses the storyboard to automatically instantiate and configure its views. Often, the view controller itself is automatically created by segues defined in the storyboard. When you define a view controller’s contents using a storyboard, you never directly allocate and initialize the view controller object. Instead, when you need to programmatically instantiate the view controller, you do so by calling the <c>instantiateViewControllerWithIdentifier:</c> method on a <c>UIStoryboard</c> object.</p>
                    </li>
                    <li class="li">
                        <p>You can specify the views for a view controller using a nib file, also created in Interface Builder. Like a storyboard, a nib file allows you to create and configure a set of views. However, you cannot easily create or see the relationships between view controllers using nib files as you can when using storyboards.</p>
                        <p>To initialize your view controller object using a nib, you use the <c>initWithNibName:bundle:</c> method to specify the nib file used by the view controller. Then, when the view controller needs to load its views, it automatically creates and configures the views using the information stored in the nib file.</p>
                    </li>
                    <li class="li">
                        <p>If you cannot define your views in a storyboard or a nib file, override the <c>loadView</c> method to manually instantiate a view hierarchy and assign it to the <c>view</c> property.</p>
                    </li>
                </ul>
                <p>All of these techniques have the same end result, which is to create the appropriate set of views and expose them through the <c>view</c> property.</p>
                <p>
                    <strong>Important:</strong> A view controller is the sole owner of its view and any subviews it creates. It is responsible for creating those views and for relinquishing ownership of them at the appropriate times such as when the view controller itself is released. If you use a storyboard or a nib file to store your view objects, each view controller object automatically gets its own copy of these views when the view controller asks for them. However, if you create your views manually, you should never use the same view objects with multiple view controllers.</p>
                <p>
                </p>
                <p>When creating the views for your view hierarchy, you should always set the autoresizing properties of your views. When a view controller is displayed on screen, its root view is typically resized to fit the available space, which can vary depending on the window’s current orientation and the presence of other interface elements such as the status bar. You can configure the autoresizing properties in Interface Builder using the inspector window or programmatically by modifying the <c>autoresizesSubviews</c> and <c>autoresizingMask</c> properties of each view. Setting these properties is also important if your view controller supports both portrait and landscape orientations. During an orientation change, the system uses these properties to reposition and resize the views automatically to match the new orientation. If your view controller supports autolayout and is a child of another view controller, you should call the view’s <c>setTranslatesAutoresizingMaskIntoConstraints:</c> method to disable these constraints.</p>
                <b>Memory Management</b>
                <p>Memory is a critical resource in iOS, and view controllers provide built-in support for reducing their memory footprint at critical times. The <c>UIViewController</c> class provides some automatic handling of low-memory conditions through its <c>didReceiveMemoryWarning</c> method, which releases unneeded memory.</p>
                <p>Prior to iOS 6, when a low-memory warning occurred, the <c>UIViewController</c> class purged its views if it knew it could reload or recreate them again later. If this happens, it also calls the <c>viewWillUnload</c> and <c>viewDidUnload</c> methods to give your code a chance to relinquish ownership of any objects that are associated with your view hierarchy, including objects loaded from the nib file, objects created in your <c>viewDidLoad</c> method, and objects created lazily at runtime and added to the view hierarchy. On iOS 6, views are never purged and these methods are never called. If your view controller needs to perform specific tasks when memory is low, it should override the <c>didReceiveMemoryWarning</c> method.</p>
                <b>Handling View Rotations</b>
                <p>In iOS 6, your app supports the interface orientations defined in your app’s <c>Info.plist</c> file. A view controller can override the <c>supportedInterfaceOrientations</c> method to limit the list of supported orientations. Generally, the system calls this method only on the root view controller of the window or a view controller presented to fill the entire screen; child view controllers use the portion of the window provided for them by their parent view controller and no longer participate in directly in decisions about what rotations are supported. The intersection of the app’s orientation mask and the view controller’s orientation mask is used to determine which orientations a view controller can be rotated into.</p>
                <p>You can override the <c>preferredInterfaceOrientationForPresentation</c> for a view controller that is intended to be presented full screen in a specific orientation.</p>
                <p>In iOS 5 and earlier, the <c>UIViewController</c> class displays views in portrait mode only. To support additional orientations, you must override the <c>shouldAutorotateToInterfaceOrientation:</c> method and return <c>true</c> for any orientations your subclass supports. If the autoresizing properties of your views are configured correctly, that may be all you have to do. However, the <c>UIViewController</c> class provides additional hooks for you to implement additional behaviors as needed. Generally, if your view controller is intended to be used as a child view controller, it should support all interface orientations.</p>
                <p>When a rotation occurs for a visible view controller, the <c>willRotateToInterfaceOrientation:duration:</c>, <c>willAnimateRotationToInterfaceOrientation:duration:</c>, and <c>didRotateFromInterfaceOrientation:</c> methods are called during the rotation. The <c>viewWillLayoutSubviews</c> method is also called after the view is resized and positioned by its parent. If a view controller is not visible when an orientation change occurs, then the rotation methods are never called. However, the <c>viewWillLayoutSubviews</c> method is called when the view becomes visible. Your implementation of this method can call the <c>statusBarOrientation</c> method to determine the device orientation.</p>
                <p>
                    <strong>Note:</strong> At launch time, apps should always set up their interface in a portrait orientation. After the <c>application:didFinishLaunchingWithOptions:</c> method returns, the app uses the view controller rotation mechanism described above to rotate the views to the appropriate orientation prior to showing the window.</p>
                <p>
                </p>
                <b>View Event Notification</b>
                <p>The <c>UIViewController</c> class automatically responds to many notifications, such as when the view controller’s view is added to or removed from a window’s view hierarchy or when it is resized. The <c>UIViewController</c> class provides specific methods that are called when these events occur. Subclasses can override these methods to implement specific behaviors.</p>
                <b>Implementing a Container View Controller</b>
                <p>A custom <c>UIViewController</c> subclass can also act as a container view controller. A container view controller manages the presentation of content of other view controllers it owns, also known as its child view controllers. A child’s view can be presented as-is or in conjunction with views owned by the container view controller.</p>
                <p>Your container view controller subclass should declare a public interface to associate its children. The nature of these methods is up to you and depends on the semantics of the container you are creating. You need to decide how many children can be displayed by your view controller at once, when those children are displayed, and where they appear in your view controller’s view hierarchy. Your view controller class defines what relationships, if any, are shared by the children. By establishing a clean public interface for your container, you ensure that children use its capabilities logically, without accessing too many private details about how your container implements the behavior.</p>
                <p>Your container view controller must associate a child view controller with itself before adding the child’s root view to the view hierarchy. This allows iOS to properly route events to child view controllers and the views those controllers manage. Likewise, after it removes a child’s root view from its view hierarchy, it should disconnect that child view controller from itself. To make or break these associations, your container calls specific methods defined by the base class. These methods are not intended to be called by clients of your container class; they are to be used only by your container’s implementation to provide the expected containment behavior.</p>
                <p>Here are the essential methods you might need to call:</p>
                <ul class="simple">
                    <li>
                        <p>
                            <c>addChildViewController:</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>removeFromParentViewController</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>willMoveToParentViewController:</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>didMoveToParentViewController:</c>
                        </p>
                    </li>
                </ul>
                <p>
                    <strong>Note:</strong> You are not required to override any methods when creating a container view controller.</p>
                <p>By default, rotation and appearance callbacks are automatically forwarded to children. You may optionally override the <c>shouldAutomaticallyForwardRotationMethods</c> and <c>shouldAutomaticallyForwardAppearanceMethods</c> methods to take control of this behavior yourself.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_childViewControllers(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_navigationController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_parentViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_presentedViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_presentingViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_title(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_set_title(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_view(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_set_view(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_addChildViewController_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_dismissViewControllerAnimated_completion_(System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_isViewLoaded(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_presentViewController_animated_completion_(System.String,System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_removeFromParentViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIViewController" /> class.
            <br></br>Equivalent to the native <c>[[UIViewController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.ClassExists">
            <summary>
            Returns whether the native UIViewController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.childViewControllers">
            <summary>
            An array of the view controllers that are the children of the receiver in the view controller hierarchy. (read-only)
            <br></br>Equivalent to the native <c>childViewControllers</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property does not include any presented view controllers.</p>
                <p>This property is only intended to be read by an implementation of a custom container view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.navigationController">
            <summary>
            The nearest ancestor in the view controller hierarchy that is a navigation controller. (read-only)
            <br></br>Equivalent to the native <c>navigationController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the receiver or one of its ancestors is a child of a navigation controller, this property contains the owning navigation controller. This property is <c>null</c> if the view controller is not embedded inside a navigation controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>splitViewController</c>
                    </li>
                    <li>
                        <c>tabBarController</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.parentViewController">
            <summary>
            The parent view controller of the recipient. (read-only)
            <br></br>Equivalent to the native <c>parentViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the recipient is a child of a container view controller, this property holds the view controller it is contained in. If the recipient has no parent, the value in this property is <c>null</c>.</p>
                <p>Prior to iOS 5.0, if a view did not have a parent view controller and was being presented, the presenting view controller would be returned. On iOS 5, this behavior no longer occurs. Instead, use the <c>presentingViewController</c> property to access the presenting view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.presentedViewController">
            <summary>
            The view controller that is presented by this view controller, or one of its ancestors in the view controller hierarchy. (read-only)
            <br></br>Equivalent to the native <c>presentedViewController</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.presentingViewController">
            <summary>
            The view controller that presented this view controller. (read-only)
            <br></br>Equivalent to the native <c>presentingViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the view controller that received this message is presented by another view controller, this property holds the view controller that is presenting it. If the view controller is not presented, but one of its ancestors is being presented, this property holds the view controller presenting the nearest ancestor. If neither the view controller nor any of its ancestors are being presented, this property holds <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.title">
            <summary>
            A localized string that represents the view this controller manages.
            <br></br>Equivalent to the native <c>title</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses should set the title to a human-readable string that represents the view to the user.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.view">
            <summary>
            The view that the controller manages.
            <br></br>Equivalent to the native <c>view</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The view stored in this property represents the root view for the view controller’s view hierarchy. The default value of this property is <c>null</c>.</p>
                <p>If you access this property and its value is currently <c>null</c>, the view controller automatically calls the <c>loadView</c> method and returns the resulting view. </p>
                <p>Each view controller object is the sole owner of its view. You must not associate the same view object with multiple view controller objects. The only exception to this rule is that a container view controller implementation may add this view as a subview in its own view hierarchy. Before adding the subview, the container must first call its <c>addChildViewController:</c> method to create a parent-child relationship between the two view controller objects.</p>
                <p>Because accessing this property can cause the view to be loaded automatically, you can use the <c>isViewLoaded</c> method to determine if the view is currently in memory. Unlike this property, the <c>isViewLoaded</c> property does not force the loading of the view if it is not currently in memory.  </p>
                <p>The <c>UIViewController</c> class can automatically set this property to <c>null</c> during low-memory conditions and also when the view controller itself is finally released.</p>
                <p>For more information about how a view controller loads and unloads its view, see  “The View Controller Life Cycle” .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadView</c>
                    </li>
                    <li>
                        <c>– isViewLoaded</c>
                    </li>
                    <li>
                        <c>– viewDidLoad</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.AddChildViewController(U3DXT.iOS.Native.UIKit.UIViewController)">
            <summary>
            Adds the given view controller as a child.
            <br></br>Equivalent to the native <c>addChildViewController:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>childController</em>
                <p>The view controller to be added as a child.</p>
                <b>Discussion</b>
                <p>If the new child view controller is already the child of a container view controller, it is removed from that container before being added.</p>
                <p>This method is only intended to be called by an implementation of a custom container view controller. If you override this method, you must call <c>super</c> in your implementation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="childController">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.DismissViewController(System.Boolean,System.Action)">
            <summary>
            Dismisses the view controller that was presented by the receiver.
            <br></br>Equivalent to the native <c>dismissViewControllerAnimated:completion:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>Pass <c>true</c> to animate the transition.</p>
                <em>completion</em>
                <p>A block called after the view controller has been dismissed.</p>
                <b>Discussion</b>
                <p>The presenting view controller is responsible for dismissing the view controller it presented. If you call this method on the presented view controller itself, it automatically forwards the message to the presenting view controller.</p>
                <p>If you present several view controllers in succession, thus building a stack of presented view controllers, calling this method on a view controller lower in the stack dismisses its immediate child view controller and all view controllers above that child on the stack. When this happens, only the top-most view is dismissed in an animated fashion; any intermediate view controllers are simply removed from the stack. The top-most view is dismissed using its modal transition style, which may differ from the styles used by other view controllers lower in the stack.</p>
                <p>If you want to retain a reference to the receiver’s presented view controller, get the value in the <c>presentedViewController</c> property before calling this method.</p>
                <p>The completion handler is called after the <c>viewDidDisappear:</c> method is called on the presented view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="flag">
            </param>
            <param name="completion"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.IsViewLoaded">
            <summary>
            Returns a Boolean value indicating whether the view is currently loaded into memory.
            <br></br>Equivalent to the native <c>isViewLoaded</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A Boolean value indicating whether the view is currently loaded into memory.</p>
                <b>Discussion</b>
                <p>Calling this method reports whether the view is loaded. Unlike the <c>view</c> property, it does not attempt to load the view if it is not already in memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.PresentViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean,System.Action)">
            <summary>
            Presents a view controller.
            <br></br>Equivalent to the native <c>presentViewController:animated:completion:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewControllerToPresent</em>
                <p>The view controller being presented.</p>
                <em>flag</em>
                <p>Pass <c>true</c> to animate the presentation; otherwise, pass <c>false</c>.</p>
                <em>completion</em>
                <p>A completion handler or <c>NULL</c>.</p>
                <b>Discussion</b>
                <p>On iPhone and iPod touch, the presented view is always full screen. On iPad, the presentation depends on the value in the <c>modalPresentationStyle</c> property.</p>
                <p>This method sets the <c>presentedViewController</c> property to the specified view controller, resizes that view controller’s view and then adds the view to the view hierarchy. The view is animated onscreen according to the transition style specified in the <c>modalTransitionStyle</c> property of the presented view controller.</p>
                <p>The completion handler is called after the <c>viewDidAppear:</c> method is called on the presented view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="viewControllerToPresent">
            </param>
            <param name="flag">
            </param>
            <param name="completion"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.RemoveFromParentViewController">
            <summary>
            Removes the receiver from its parent in the view controller hierarchy.
            <br></br>Equivalent to the native <c>removeFromParentViewController</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method is only intended to be called by an implementation of a custom container view controller. If you override this method, you must call <c>super</c> in your implementation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIWebView">
            <summary>
            You use the <c>UIWebView</c> class to embed web content in your application. To do so, you simply create a <c>UIWebView</c> object, attach it to a window, and send it a request to load web content. You can also use this class to move back and forward in the history of webpages, and you can even set some web content properties programmatically.
            </summary>
            <remarks>
                <p>Use the <c>loadRequest:</c> method to begin loading web content, the <c>stopLoading</c> method to stop loading, and the <c>loading</c> property to find out if a web view is in the process of loading.</p>
                <p>If you allow the user to move back and forward through the webpage history, then you can use the <c>goBack</c> and <c>goForward</c> methods as actions for buttons. Use the <c>canGoBack</c> and <c>canGoForward</c> properties to disable the buttons when the user can’t move in a direction.</p>
                <p>By default, a web view automatically converts telephone numbers that appear in web content to Phone links. When a Phone link is tapped, the Phone application launches and dials the number. Set the <c>detectsPhoneNumbers</c> property to <c>false</c> to turn off this default behavior.</p>
                <p>You can also use the <c>scalesPageToFit</c> property to programmatically set the scale of web content the first time it is displayed in a web view. Thereafter, the user can change the scale using gestures.</p>
                <p>Set the <c>delegate</c> property to an object conforming to the <c>UIWebViewDelegate</c> protocol if you want to track the loading of web content.</p>
                <p>Read <em>Safari Web Content Guide</em> for how to create web content that is compatible with and optimized for displaying in Safari on iPhone and your web views.</p>
                <p>
                    <strong>Important:</strong> You should not embed <c>UIWebView</c> or <c>UITableView</c> objects in <c>UIScrollView</c> objects. If you do so, unexpected behavior can result because touch events for the two objects can be mixed up and wrongly handled.</p>
                <p>
                </p>
                <p>For information about basic view behaviors, see <em>View Programming Guide for iOS</em>. </p>
                <b>Supported File Formats</b>
                <p>In addition to HTML content, <c>UIWebView</c> objects can be used to display other content types. For more information, see <em>Using UIWebView to display select document types</em>.</p>
                <b>State Preservation</b>
                <p>In iOS 6 and later, if you assign a value to this view’s <c>restorationIdentifier</c> property, it attempts to preserve its URL history,  the scaling and scrolling positions for each page, and information about which page is currently being viewed. During restoration, the view restores these values so that the web content appears just as it did before. For more information about how state preservation and restoration works, see <em>iOS App Programming Guide</em>.  </p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	The <c>UIWebView</c> class should not be subclassed.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIWebView.DidFailLoad">
            <summary>
            Sent if a web view failed to load a frame.
            <br></br>Equivalent to implementing the native <c>webView:didFailLoadWithError:</c> method of <c>UIWebViewDelegate</c>.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIWebView.DidFailLoadEventArgs">
            <summary>
            Event arguments for DidFailLoad.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.DidFailLoadEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIWebView.DidFailLoadEventArgs.error">
            <summary>error</summary>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.shouldStartLoadHandler">
            <summary>
            Sent before a web view begins loading a frame.
            <br></br>Equivalent to implementing the native <c>webView:shouldStartLoadWithRequest:navigationType:</c> method of <c>UIWebViewDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIWebView.DidFinishLoad">
            <summary>
            Sent after a web view finishes loading a frame.
            <br></br>Equivalent to implementing the native <c>webViewDidFinishLoad:</c> method of <c>UIWebViewDelegate</c>.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.Native.UIKit.UIWebView.DidStartLoad">
            <summary>
            Sent after a web view starts loading a frame.
            <br></br>Equivalent to implementing the native <c>webViewDidStartLoad:</c> method of <c>UIWebViewDelegate</c>.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_allowsInlineMediaPlayback(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_allowsInlineMediaPlayback(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_canGoBack(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_canGoForward(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_dataDetectorTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_dataDetectorTypes(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_detectsPhoneNumbers(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_detectsPhoneNumbers(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_keyboardDisplayRequiresUserAction(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_keyboardDisplayRequiresUserAction(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_loading(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_mediaPlaybackAllowsAirPlay(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_mediaPlaybackAllowsAirPlay(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_mediaPlaybackRequiresUserAction(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_mediaPlaybackRequiresUserAction(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_request(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_scalesPageToFit(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_scalesPageToFit(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_get_suppressesIncrementalRendering(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_set_suppressesIncrementalRendering(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_goBack(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_goForward(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_loadData_MIMEType_textEncodingName_baseURL_(System.String,System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_loadHTMLString_baseURL_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_loadRequest_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_reload(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_stopLoading(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.UP_UIWebView_stringByEvaluatingJavaScriptFromString_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIWebView" /> class.
            <br></br>Equivalent to the native <c>[[UIWebView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.ClassExists">
            <summary>
            Returns whether the native UIWebView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.allowsInlineMediaPlayback">
            <summary>
            A Boolean value that determines whether HTML5 videos play inline or use the native full-screen controller.
            <br></br>Equivalent to the native <c>allowsInlineMediaPlayback</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value on iPhone is <c>false</c>.</p>
                <p>In order for video to play inline, not only does this property need to be set on the view, but the <c>video</c> element in the HTML document must also include the <c>webkit-playsinline</c> attribute.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.canGoBack">
            <summary>
            A Boolean value indicating whether the receiver can move backward. (read-only)
            <br></br>Equivalent to the native <c>canGoBack</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, able to move backward; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>canGoForward</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.canGoForward">
            <summary>
            A Boolean value indicating whether the receiver can move forward. (read-only)
            <br></br>Equivalent to the native <c>canGoForward</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, able to move forward; otherwise, <c>false</c> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>canGoBack</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.dataDetectorTypes">
            <summary>
            The types of data converted to clickable URLs in the web view’s content.
            <br></br>Equivalent to the native <c>dataDetectorTypes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use this property to specify the types of data (phone numbers, http links, email address, and so on) that should be automatically converted to clickable URLs in the web view. When clicked, the web view opens the application responsible for handling the URL type and passes it the URL. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.Delegate">
            <summary>
            The receiver’s delegate.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The delegate is sent messages when content is loading. See <em>UIWebViewDelegate Protocol Reference</em> for the optional methods this delegate may implement.</p>
                <p>
                    <strong>Important:</strong> Before releasing an instance of <c>UIWebView</c> for which you have set a delegate, you must first set its delegate property to <c>null</c>. This can be done, for example, in your dealloc method.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.detectsPhoneNumbers">
            <summary>
            A Boolean value indicating whether telephone number detection is on. ( Deprecated in iOS 3.0.  Use <c>dataDetectorTypes</c> instead.)
            <br></br>Equivalent to the native <c>detectsPhoneNumbers</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, telephone number detection is on; otherwise, <c>false</c>. If a webpage contains numbers that can be interpreted as phone numbers, but are not phone numbers, you can turn off telephone number detection by setting this property to <c>false</c>. The default value is <c>true</c> on devices that have phone capabilities.</p>
                <b>Special Considerations</b>
                <p>The functionality provided by this property has been superseded by the <c>dataDetectorTypes</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 3.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.keyboardDisplayRequiresUserAction">
            <summary>
            A Boolean value indicating whether web content can programmatically display the keyboard.
            <br></br>Equivalent to the native <c>keyboardDisplayRequiresUserAction</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When this property is set to <c>true</c>, the user must explicitly tap the elements in the web view to display the keyboard (or other relevant input view) for that element. When set to <c>false</c>, a focus event on an element causes the input view to be displayed and associated with that element automatically. </p>
                <p>The default value for this property is <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.loading">
            <summary>
            A Boolean value indicating whether the receiver is done loading content. (read-only)
            <br></br>Equivalent to the native <c>loading</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, the receiver is still loading content; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>request</c>
                    </li>
                    <li>
                        <c>– stopLoading</c>
                    </li>
                    <li>
                        <c>– loadRequest:</c>
                    </li>
                    <li>
                        <c>– reload</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.mediaPlaybackAllowsAirPlay">
            <summary>
            A Boolean value that determines whether Air Play is allowed from this view.
            <br></br>Equivalent to the native <c>mediaPlaybackAllowsAirPlay</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value on both iPad and iPhone is <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.mediaPlaybackRequiresUserAction">
            <summary>
            A Boolean value that determines whether HTML5 videos can play automatically or require the user to start playing them.
            <br></br>Equivalent to the native <c>mediaPlaybackRequiresUserAction</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value on both iPad and iPhone is <c>true</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.request">
            <summary>
            The URL request identifying the location of the content to load. (read-only)
            <br></br>Equivalent to the native <c>request</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadRequest:</c>
                    </li>
                    <li>
                        <c>– stopLoading</c>
                    </li>
                    <li>
                        <c>loading</c>
                    </li>
                    <li>
                        <c>– reload</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.scalesPageToFit">
            <summary>
            A Boolean value determining whether the webpage scales to fit the view and the user can change the scale.
            <br></br>Equivalent to the native <c>scalesPageToFit</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, the webpage is scaled to fit and the user can zoom in and zoom out. If <c>false</c>, user zooming is disabled. The default value is <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebView.suppressesIncrementalRendering">
            <summary>
            A Boolean value indicating whether the web view suppresses content rendering until it is fully loaded into memory.
            <br></br>Equivalent to the native <c>suppressesIncrementalRendering</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When set to <c>true</c>, the web view does not attempt to render incoming content as it arrives. Instead, the view’s current contents remain in place until all of the new content has been received, at which point the new content is rendered. This property does not affect the rendering of content retrieved after a frame finishes loading.  </p>
                <p>The value of this property is <c>false</c> by default.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.GoBack">
            <summary>
            Loads the previous location in the back-forward list.
            <br></br>Equivalent to the native <c>goBack</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– goBack</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.Go">
            <summary>
            Loads the next location in the back-forward list.
            <br></br>Equivalent to the native <c>goForward</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– goBack</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.LoadData(U3DXT.iOS.Native.Foundation.NSData,System.String,System.String,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Sets the main page contents, MIME type, content encoding, and base URL.
            <br></br>Equivalent to the native <c>loadData:MIMEType:textEncodingName:baseURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The content for the main page.</p>
                <em>MIMEType</em>
                <p>The MIME type of the content.</p>
                <em>encodingName</em>
                <p>The IANA encoding name as in <c>utf-8</c> or <c>utf-16</c>.</p>
                <em>baseURL</em>
                <p>The base URL for the content.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadHTMLString:baseURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="MIMEType">
            </param>
            <param name="textEncodingName">
            </param>
            <param name="baseURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.LoadHTMLString(System.String,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Sets the main page content and base URL.
            <br></br>Equivalent to the native <c>loadHTMLString:baseURL:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The content for the main page.</p>
                <em>baseURL</em>
                <p>The base URL for the content.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadData:MIMEType:textEncodingName:baseURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
            <param name="baseURL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.LoadRequest(U3DXT.iOS.Native.Foundation.NSURLRequest)">
            <summary>
            Connects to a given URL by initiating an asynchronous client request.
            <br></br>Equivalent to the native <c>loadRequest:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>request</em>
                <p>A URL request identifying the location of the content to load.</p>
                <b>Discussion</b>
                <p>To stop this load, use the <c>stopLoading</c> method. To see whether the receiver is done loading the content, use the <c>loading</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>request</c>
                    </li>
                    <li>
                        <c>– stopLoading</c>
                    </li>
                    <li>
                        <c>loading</c>
                    </li>
                    <li>
                        <c>– reload</c>
                    </li>
                </ul>
            </remarks>
            <param name="request">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.Reload">
            <summary>
            Reloads the current page.
            <br></br>Equivalent to the native <c>reload</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>request</c>
                    </li>
                    <li>
                        <c>loading</c>
                    </li>
                    <li>
                        <c>– loadRequest:</c>
                    </li>
                    <li>
                        <c>– stopLoading</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.StopLoading">
            <summary>
            Stops the loading of any web content managed by the receiver.
            <br></br>Equivalent to the native <c>stopLoading</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Stops any content in the process of being loaded by the main frame or any of its children frames. Does nothing if no content is being loaded.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>request</c>
                    </li>
                    <li>
                        <c>loading</c>
                    </li>
                    <li>
                        <c>– loadRequest:</c>
                    </li>
                    <li>
                        <c>– reload</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.StringByEvaluatingJavaScript(System.String)">
            <summary>
            Returns the result of running a script.
            <br></br>Equivalent to the native <c>stringByEvaluatingJavaScriptFromString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>script</em>
                <p>The script to run.</p>
                <b>Return Value</b>
                <p>The result of running <em>script</em> or <c>null</c> if it fails.</p>
                <b>Discussion</b>
                <p>JavaScript execution time is limited to 10 seconds for each top-level entry point. If your script executes for more than 10 seconds, the web view stops executing the script. This is likely to occur at a random place in your code, so unintended consequences may result. This limit is imposed because JavaScript execution may cause the main thread to block, so when scripts are running, the user is not able to interact with the webpage.</p>
                <p>JavaScript allocations are also limited to 10 MB. The web view raises an exception if you exceed this limit on the total memory allocation for JavaScript.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="script">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIWebView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIWebView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIWebViewDelegate">
            <summary>
            The <c>UIWebViewDelegate</c> protocol defines methods that a delegate of a <c>UIWebView</c> object can optionally implement to intervene when web content is loaded.
            </summary>
            <remarks>
                <p>
                    <strong>Important:</strong> Before releasing an instance of <c>UIWebView</c> for which you have set a delegate, you must first set the <c>UIWebView</c> delegate property to <c>null</c> before disposing of the <c>UIWebView</c> instance. This can be done, for example, in the dealloc method where you dispose of the <c>UIWebView</c>.</p>
                <p>
                </p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.UP_UIWebViewDelegate_set__webView_didFailLoadWithError__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.UP_UIWebViewDelegate_set__webView_shouldStartLoadWithRequest_navigationType__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.UP_UIWebViewDelegate_set__webViewDidFinishLoad__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.UP_UIWebViewDelegate_set__webViewDidStartLoad__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.DidFailLoad(U3DXT.iOS.Native.UIKit.UIWebView,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            (optional) Sent if a web view failed to load a frame.
            <br></br>Equivalent to the native <c>webView:didFailLoadWithError:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>webView</em>
                <p>The web view that failed to load a frame.</p>
                <em>error</em>
                <p>The error that occurred during loading.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– webView:shouldStartLoadWithRequest:navigationType:</c>
                    </li>
                    <li>
                        <c>– webViewDidStartLoad:</c>
                    </li>
                    <li>
                        <c>– webViewDidFinishLoad:</c>
                    </li>
                </ul>
            </remarks>
            <param name="webView">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.ShouldStartLoad(U3DXT.iOS.Native.UIKit.UIWebView,U3DXT.iOS.Native.Foundation.NSURLRequest,U3DXT.iOS.Native.UIKit.UIWebViewNavigationType)">
            <summary>
            (optional) Sent before a web view begins loading a frame.
            <br></br>Equivalent to the native <c>webView:shouldStartLoadWithRequest:navigationType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>webView</em>
                <p>The web view that is about to load a new frame.</p>
                <em>request</em>
                <p>The content location.</p>
                <em>navigationType</em>
                <p>The type of user action that started the load request.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the web view should begin loading content; otherwise, <c>false</c> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– webViewDidStartLoad:</c>
                    </li>
                    <li>
                        <c>– webViewDidFinishLoad:</c>
                    </li>
                    <li>
                        <c>– webView:didFailLoadWithError:</c>
                    </li>
                </ul>
            </remarks>
            <param name="webView">
            </param>
            <param name="request">
            </param>
            <param name="navigationType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.DidFinishLoad(U3DXT.iOS.Native.UIKit.UIWebView)">
            <summary>
            (optional) Sent after a web view finishes loading a frame.
            <br></br>Equivalent to the native <c>webViewDidFinishLoad:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>webView</em>
                <p>The web view has finished loading.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– webView:shouldStartLoadWithRequest:navigationType:</c>
                    </li>
                    <li>
                        <c>– webViewDidStartLoad:</c>
                    </li>
                    <li>
                        <c>– webView:didFailLoadWithError:</c>
                    </li>
                </ul>
            </remarks>
            <param name="webView">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWebViewDelegate.DidStartLoad(U3DXT.iOS.Native.UIKit.UIWebView)">
            <summary>
            (optional) Sent after a web view starts loading a frame.
            <br></br>Equivalent to the native <c>webViewDidStartLoad:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>webView</em>
                <p>The web view that has begun loading a new frame.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– webView:shouldStartLoadWithRequest:navigationType:</c>
                    </li>
                    <li>
                        <c>– webViewDidFinishLoad:</c>
                    </li>
                    <li>
                        <c>– webView:didFailLoadWithError:</c>
                    </li>
                </ul>
            </remarks>
            <param name="webView">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebViewDelegate._webView_didFailLoadWithError__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_webView_didFailLoadWithError__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebViewDelegate._webView_shouldStartLoadWithRequest_navigationType__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_webView_shouldStartLoadWithRequest_navigationType__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebViewDelegate._webViewDidFinishLoad__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_webViewDidFinishLoad__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWebViewDelegate._webViewDidStartLoad__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_webViewDidStartLoad__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIWebViewNavigationType">
            <summary>
            Constant indicating the user’s action.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIWebViewNavigationType.FormResubmitted">
            <summary>
                <p>User resubmitted a form.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIWebViewNavigationTypeFormResubmitted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIWebViewNavigationType.Other">
            <summary>
                <p>Some other action occurred.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIWebViewNavigationTypeOther</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIWebViewNavigationType.FormSubmitted">
            <summary>
                <p>User submitted a form.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIWebViewNavigationTypeFormSubmitted</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIWebViewNavigationType.LinkClicked">
            <summary>
                <p>User tapped a link.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIWebViewNavigationTypeLinkClicked</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIWebViewNavigationType.BackForward">
            <summary>
                <p>User tapped the back or forward button.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIWebViewNavigationTypeBackForward</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIWebViewNavigationType.Reload">
            <summary>
                <p>User tapped the reload button.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIWebViewNavigationTypeReload</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIWindow">
            <summary>
            The <c>UIWindow</c> class defines an object known as a <strong>window</strong> that manages and coordinates the views an app displays on a device screen. Unless an app can display content on an external device screen, an app has only one window.
            </summary>
            <remarks>
                <p>The two principal functions of a window are to provide an area for displaying its views and to distribute events to the views. To change the content your app displays, you can change the window’s root view; you don’t create a new window. A window belongs to a level—typically, <c>UIWindowLevelNormal</c>—that represents where it sits on the z-axis relative to other windows. For example, a system alert window appears above normal app windows. </p>
                <p>
                    <strong>Note:</strong> When you use storyboards and the Xcode app templates to create an app, a window is created for you. If you choose to create a window in Interface Builder, be sure to select the Full Screen at Launch option in the Attributes inspector so that the window is sized appropriately for the current device. Because a window doesn’t receive touch events outside of its bounds and views aren’t clipped to the window’s bounds by default, an improperly sized window might not be able to deliver touch events to all its views.</p>
                <p>
                </p>
                <p>For more information about how to use windows, see <em>Multiple Display Programming Guide for iOS</em>. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.UP_UIWindow_get_rootViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.UP_UIWindow_set_rootViewController(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIWindow" /> class.
            <br></br>Equivalent to the native <c>[[UIWindow alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWindow.ClassExists">
            <summary>
            Returns whether the native UIWindow class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWindow.rootViewController">
            <summary>
            The root view controller for the window.
            <br></br>Equivalent to the native <c>rootViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The root view controller provides the content view of the window. Assigning a view controller to this property (either programmatically or using Interface Builder) installs the view controller’s view as the content view of the window. If the window has an existing view hierarchy, the old views are removed before the new ones are installed.</p>
                <p>The default value of this property is <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIWindow and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIWindow alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
    </members>
</doc>
